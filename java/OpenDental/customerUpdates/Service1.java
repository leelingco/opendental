//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:42 PM
//

package OpenDental.customerUpdates;

import CS2JNet.JavaSupport.util.ListSupport;
import CS2JNet.System.StringSupport;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import OpenDental.customerUpdates.EstablishConnectionCompletedEventArgs;
import OpenDental.customerUpdates.EstablishConnectionCompletedEventHandler;
import OpenDental.customerUpdates.FeatureRequestDiscussGetListCompletedEventArgs;
import OpenDental.customerUpdates.FeatureRequestDiscussGetListCompletedEventHandler;
import OpenDental.customerUpdates.FeatureRequestDiscussSubmitCompletedEventArgs;
import OpenDental.customerUpdates.FeatureRequestDiscussSubmitCompletedEventHandler;
import OpenDental.customerUpdates.FeatureRequestGetListCompletedEventArgs;
import OpenDental.customerUpdates.FeatureRequestGetListCompletedEventHandler;
import OpenDental.customerUpdates.FeatureRequestGetOneCompletedEventArgs;
import OpenDental.customerUpdates.FeatureRequestGetOneCompletedEventHandler;
import OpenDental.customerUpdates.FeatureRequestSubmitChangesCompletedEventArgs;
import OpenDental.customerUpdates.FeatureRequestSubmitChangesCompletedEventHandler;
import OpenDental.customerUpdates.PracticeTitleResetCompletedEventHandler;
import OpenDental.customerUpdates.RequestCodeSystemDownloadCompletedEventArgs;
import OpenDental.customerUpdates.RequestCodeSystemDownloadCompletedEventHandler;
import OpenDental.customerUpdates.RequestCodeSystemsCompletedEventArgs;
import OpenDental.customerUpdates.RequestCodeSystemsCompletedEventHandler;
import OpenDental.customerUpdates.RequestCustomerIDCompletedEventArgs;
import OpenDental.customerUpdates.RequestCustomerIDCompletedEventHandler;
import OpenDental.customerUpdates.RequestFeeSchedCompletedEventArgs;
import OpenDental.customerUpdates.RequestFeeSchedCompletedEventHandler;
import OpenDental.customerUpdates.RequestUpdateCompletedEventArgs;
import OpenDental.customerUpdates.RequestUpdateCompletedEventHandler;
import OpenDental.customerUpdates.ValidatePatientPortalOfficeCompletedEventArgs;
import OpenDental.customerUpdates.ValidatePatientPortalOfficeCompletedEventHandler;
import OpenDental.customerUpdates.ValidateResellerCredentialsCompletedEventArgs;
import OpenDental.customerUpdates.ValidateResellerCredentialsCompletedEventHandler;
import OpenDental.Properties.Settings;


//------------------------------------------------------------------------------// <auto-generated>//     This code was generated by a tool.//     Runtime Version:4.0.30319.18052////     Changes to this file may cause incorrect behavior and will be lost if//     the code is regenerated.// </auto-generated>//------------------------------------------------------------------------------//// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18052.///**
* 
*/
public class Service1  extends System.Web.Services.Protocols.SoapHttpClientProtocol 
{

    private System.Threading.SendOrPostCallback EstablishConnectionOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback RequestUpdateOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback RequestCodeSystemsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback RequestCodeSystemDownloadOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback FeatureRequestGetListOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback FeatureRequestGetOneOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback FeatureRequestSubmitChangesOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback FeatureRequestDiscussSubmitOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback FeatureRequestDiscussGetListOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback RequestCustomerIDOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback RequestFeeSchedOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback ValidateResellerCredentialsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback ValidatePatientPortalOfficeOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback PracticeTitleResetOperationCompleted = new System.Threading.SendOrPostCallback();
    private boolean useDefaultCredentialsSetExplicitly = new boolean();
    /**
    * 
    */
    public Service1() throws Exception {
        this.setUrl(Settings.getDefault().getOpenDental_customerUpdates_Service1());
        if ((this.isLocalFileSystemWebService(this.getUrl()) == true))
        {
            this.setUseDefaultCredentials(true);
            this.useDefaultCredentialsSetExplicitly = false;
        }
        else
        {
            this.useDefaultCredentialsSetExplicitly = true;
        } 
    }

    public String getUrl() throws Exception {
        return super.Url;
    }

    public void setUrl(String value) throws Exception {
        if ((((this.IsLocalFileSystemWebService(super.Url) == true) && (this.useDefaultCredentialsSetExplicitly == false)) && (this.isLocalFileSystemWebService(value) == false)))
        {
            super.UseDefaultCredentials = false;
        }
         
        super.Url = value;
    }

    public boolean getUseDefaultCredentials() throws Exception {
        return super.UseDefaultCredentials;
    }

    public void setUseDefaultCredentials(boolean value) throws Exception {
        super.UseDefaultCredentials = value;
        this.useDefaultCredentialsSetExplicitly = true;
    }

    /**
    * 
    */
    public EstablishConnectionCompletedEventHandler EstablishConnectionCompleted;
    /**
    * 
    */
    public RequestUpdateCompletedEventHandler RequestUpdateCompleted;
    /**
    * 
    */
    public RequestCodeSystemsCompletedEventHandler RequestCodeSystemsCompleted;
    /**
    * 
    */
    public RequestCodeSystemDownloadCompletedEventHandler RequestCodeSystemDownloadCompleted;
    /**
    * 
    */
    public FeatureRequestGetListCompletedEventHandler FeatureRequestGetListCompleted;
    /**
    * 
    */
    public FeatureRequestGetOneCompletedEventHandler FeatureRequestGetOneCompleted;
    /**
    * 
    */
    public FeatureRequestSubmitChangesCompletedEventHandler FeatureRequestSubmitChangesCompleted;
    /**
    * 
    */
    public FeatureRequestDiscussSubmitCompletedEventHandler FeatureRequestDiscussSubmitCompleted;
    /**
    * 
    */
    public FeatureRequestDiscussGetListCompletedEventHandler FeatureRequestDiscussGetListCompleted;
    /**
    * 
    */
    public RequestCustomerIDCompletedEventHandler RequestCustomerIDCompleted;
    /**
    * 
    */
    public RequestFeeSchedCompletedEventHandler RequestFeeSchedCompleted;
    /**
    * 
    */
    public ValidateResellerCredentialsCompletedEventHandler ValidateResellerCredentialsCompleted;
    /**
    * 
    */
    public ValidatePatientPortalOfficeCompletedEventHandler ValidatePatientPortalOfficeCompleted;
    /**
    * 
    */
    public PracticeTitleResetCompletedEventHandler PracticeTitleResetCompleted;
    /**
    * 
    */
    public String establishConnection() throws Exception {
        Object[] results = this.Invoke("EstablishConnection", new Object[0]);
        return ((String)(results[0]));
    }

    /**
    * 
    */
    public void establishConnectionAsync() throws Exception {
        this.establishConnectionAsync(null);
    }

    /**
    * 
    */
    public void establishConnectionAsync(Object userState) throws Exception {
        if ((this.EstablishConnectionOperationCompleted == null))
        {
            this.EstablishConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEstablishConnectionOperationCompleted);
        }
         
        this.InvokeAsync("EstablishConnection", new Object[0], this.EstablishConnectionOperationCompleted, userState);
    }

    private void onEstablishConnectionOperationCompleted(Object arg) throws Exception {
        if ((this.EstablishConnectionCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.EstablishConnectionCompleted.invoke(this,new EstablishConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public String requestUpdate(String officeData) throws Exception {
        Object[] results = this.Invoke("RequestUpdate", new Object[]{ officeData });
        return ((String)(results[0]));
    }

    /**
    * 
    */
    public void requestUpdateAsync(String officeData) throws Exception {
        this.requestUpdateAsync(officeData,null);
    }

    /**
    * 
    */
    public void requestUpdateAsync(String officeData, Object userState) throws Exception {
        if ((this.RequestUpdateOperationCompleted == null))
        {
            this.RequestUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestUpdateOperationCompleted);
        }
         
        this.InvokeAsync("RequestUpdate", new Object[]{ officeData }, this.RequestUpdateOperationCompleted, userState);
    }

    private void onRequestUpdateOperationCompleted(Object arg) throws Exception {
        if ((this.RequestUpdateCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RequestUpdateCompleted.invoke(this,new RequestUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public String requestCodeSystems(String officeData) throws Exception {
        Object[] results = this.Invoke("RequestCodeSystems", new Object[]{ officeData });
        return ((String)(results[0]));
    }

    /**
    * 
    */
    public void requestCodeSystemsAsync(String officeData) throws Exception {
        this.requestCodeSystemsAsync(officeData,null);
    }

    /**
    * 
    */
    public void requestCodeSystemsAsync(String officeData, Object userState) throws Exception {
        if ((this.RequestCodeSystemsOperationCompleted == null))
        {
            this.RequestCodeSystemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestCodeSystemsOperationCompleted);
        }
         
        this.InvokeAsync("RequestCodeSystems", new Object[]{ officeData }, this.RequestCodeSystemsOperationCompleted, userState);
    }

    private void onRequestCodeSystemsOperationCompleted(Object arg) throws Exception {
        if ((this.RequestCodeSystemsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RequestCodeSystemsCompleted.invoke(this,new RequestCodeSystemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public String requestCodeSystemDownload(String officeData) throws Exception {
        Object[] results = this.Invoke("RequestCodeSystemDownload", new Object[]{ officeData });
        return ((String)(results[0]));
    }

    /**
    * 
    */
    public void requestCodeSystemDownloadAsync(String officeData) throws Exception {
        this.requestCodeSystemDownloadAsync(officeData,null);
    }

    /**
    * 
    */
    public void requestCodeSystemDownloadAsync(String officeData, Object userState) throws Exception {
        if ((this.RequestCodeSystemDownloadOperationCompleted == null))
        {
            this.RequestCodeSystemDownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestCodeSystemDownloadOperationCompleted);
        }
         
        this.InvokeAsync("RequestCodeSystemDownload", new Object[]{ officeData }, this.RequestCodeSystemDownloadOperationCompleted, userState);
    }

    private void onRequestCodeSystemDownloadOperationCompleted(Object arg) throws Exception {
        if ((this.RequestCodeSystemDownloadCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RequestCodeSystemDownloadCompleted.invoke(this,new RequestCodeSystemDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public String featureRequestGetList(String officeData) throws Exception {
        Object[] results = this.Invoke("FeatureRequestGetList", new Object[]{ officeData });
        return ((String)(results[0]));
    }

    /**
    * 
    */
    public void featureRequestGetListAsync(String officeData) throws Exception {
        this.featureRequestGetListAsync(officeData,null);
    }

    /**
    * 
    */
    public void featureRequestGetListAsync(String officeData, Object userState) throws Exception {
        if ((this.FeatureRequestGetListOperationCompleted == null))
        {
            this.FeatureRequestGetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFeatureRequestGetListOperationCompleted);
        }
         
        this.InvokeAsync("FeatureRequestGetList", new Object[]{ officeData }, this.FeatureRequestGetListOperationCompleted, userState);
    }

    private void onFeatureRequestGetListOperationCompleted(Object arg) throws Exception {
        if ((this.FeatureRequestGetListCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FeatureRequestGetListCompleted.invoke(this,new FeatureRequestGetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public String featureRequestGetOne(String officeData) throws Exception {
        Object[] results = this.Invoke("FeatureRequestGetOne", new Object[]{ officeData });
        return ((String)(results[0]));
    }

    /**
    * 
    */
    public void featureRequestGetOneAsync(String officeData) throws Exception {
        this.featureRequestGetOneAsync(officeData,null);
    }

    /**
    * 
    */
    public void featureRequestGetOneAsync(String officeData, Object userState) throws Exception {
        if ((this.FeatureRequestGetOneOperationCompleted == null))
        {
            this.FeatureRequestGetOneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFeatureRequestGetOneOperationCompleted);
        }
         
        this.InvokeAsync("FeatureRequestGetOne", new Object[]{ officeData }, this.FeatureRequestGetOneOperationCompleted, userState);
    }

    private void onFeatureRequestGetOneOperationCompleted(Object arg) throws Exception {
        if ((this.FeatureRequestGetOneCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FeatureRequestGetOneCompleted.invoke(this,new FeatureRequestGetOneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public String featureRequestSubmitChanges(String officeData) throws Exception {
        Object[] results = this.Invoke("FeatureRequestSubmitChanges", new Object[]{ officeData });
        return ((String)(results[0]));
    }

    /**
    * 
    */
    public void featureRequestSubmitChangesAsync(String officeData) throws Exception {
        this.featureRequestSubmitChangesAsync(officeData,null);
    }

    /**
    * 
    */
    public void featureRequestSubmitChangesAsync(String officeData, Object userState) throws Exception {
        if ((this.FeatureRequestSubmitChangesOperationCompleted == null))
        {
            this.FeatureRequestSubmitChangesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFeatureRequestSubmitChangesOperationCompleted);
        }
         
        this.InvokeAsync("FeatureRequestSubmitChanges", new Object[]{ officeData }, this.FeatureRequestSubmitChangesOperationCompleted, userState);
    }

    private void onFeatureRequestSubmitChangesOperationCompleted(Object arg) throws Exception {
        if ((this.FeatureRequestSubmitChangesCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FeatureRequestSubmitChangesCompleted.invoke(this,new FeatureRequestSubmitChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public String featureRequestDiscussSubmit(String officeData) throws Exception {
        Object[] results = this.Invoke("FeatureRequestDiscussSubmit", new Object[]{ officeData });
        return ((String)(results[0]));
    }

    /**
    * 
    */
    public void featureRequestDiscussSubmitAsync(String officeData) throws Exception {
        this.featureRequestDiscussSubmitAsync(officeData,null);
    }

    /**
    * 
    */
    public void featureRequestDiscussSubmitAsync(String officeData, Object userState) throws Exception {
        if ((this.FeatureRequestDiscussSubmitOperationCompleted == null))
        {
            this.FeatureRequestDiscussSubmitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFeatureRequestDiscussSubmitOperationCompleted);
        }
         
        this.InvokeAsync("FeatureRequestDiscussSubmit", new Object[]{ officeData }, this.FeatureRequestDiscussSubmitOperationCompleted, userState);
    }

    private void onFeatureRequestDiscussSubmitOperationCompleted(Object arg) throws Exception {
        if ((this.FeatureRequestDiscussSubmitCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FeatureRequestDiscussSubmitCompleted.invoke(this,new FeatureRequestDiscussSubmitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public String featureRequestDiscussGetList(String officeData) throws Exception {
        Object[] results = this.Invoke("FeatureRequestDiscussGetList", new Object[]{ officeData });
        return ((String)(results[0]));
    }

    /**
    * 
    */
    public void featureRequestDiscussGetListAsync(String officeData) throws Exception {
        this.featureRequestDiscussGetListAsync(officeData,null);
    }

    /**
    * 
    */
    public void featureRequestDiscussGetListAsync(String officeData, Object userState) throws Exception {
        if ((this.FeatureRequestDiscussGetListOperationCompleted == null))
        {
            this.FeatureRequestDiscussGetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFeatureRequestDiscussGetListOperationCompleted);
        }
         
        this.InvokeAsync("FeatureRequestDiscussGetList", new Object[]{ officeData }, this.FeatureRequestDiscussGetListOperationCompleted, userState);
    }

    private void onFeatureRequestDiscussGetListOperationCompleted(Object arg) throws Exception {
        if ((this.FeatureRequestDiscussGetListCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FeatureRequestDiscussGetListCompleted.invoke(this,new FeatureRequestDiscussGetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public String requestCustomerID(String officeData) throws Exception {
        Object[] results = this.Invoke("RequestCustomerID", new Object[]{ officeData });
        return ((String)(results[0]));
    }

    /**
    * 
    */
    public void requestCustomerIDAsync(String officeData) throws Exception {
        this.requestCustomerIDAsync(officeData,null);
    }

    /**
    * 
    */
    public void requestCustomerIDAsync(String officeData, Object userState) throws Exception {
        if ((this.RequestCustomerIDOperationCompleted == null))
        {
            this.RequestCustomerIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestCustomerIDOperationCompleted);
        }
         
        this.InvokeAsync("RequestCustomerID", new Object[]{ officeData }, this.RequestCustomerIDOperationCompleted, userState);
    }

    private void onRequestCustomerIDOperationCompleted(Object arg) throws Exception {
        if ((this.RequestCustomerIDCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RequestCustomerIDCompleted.invoke(this,new RequestCustomerIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public String requestFeeSched(String officeData) throws Exception {
        Object[] results = this.Invoke("RequestFeeSched", new Object[]{ officeData });
        return ((String)(results[0]));
    }

    /**
    * 
    */
    public void requestFeeSchedAsync(String officeData) throws Exception {
        this.requestFeeSchedAsync(officeData,null);
    }

    /**
    * 
    */
    public void requestFeeSchedAsync(String officeData, Object userState) throws Exception {
        if ((this.RequestFeeSchedOperationCompleted == null))
        {
            this.RequestFeeSchedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestFeeSchedOperationCompleted);
        }
         
        this.InvokeAsync("RequestFeeSched", new Object[]{ officeData }, this.RequestFeeSchedOperationCompleted, userState);
    }

    private void onRequestFeeSchedOperationCompleted(Object arg) throws Exception {
        if ((this.RequestFeeSchedCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RequestFeeSchedCompleted.invoke(this,new RequestFeeSchedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public String validateResellerCredentials(String officeData) throws Exception {
        Object[] results = this.Invoke("ValidateResellerCredentials", new Object[]{ officeData });
        return ((String)(results[0]));
    }

    /**
    * 
    */
    public void validateResellerCredentialsAsync(String officeData) throws Exception {
        this.validateResellerCredentialsAsync(officeData,null);
    }

    /**
    * 
    */
    public void validateResellerCredentialsAsync(String officeData, Object userState) throws Exception {
        if ((this.ValidateResellerCredentialsOperationCompleted == null))
        {
            this.ValidateResellerCredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateResellerCredentialsOperationCompleted);
        }
         
        this.InvokeAsync("ValidateResellerCredentials", new Object[]{ officeData }, this.ValidateResellerCredentialsOperationCompleted, userState);
    }

    private void onValidateResellerCredentialsOperationCompleted(Object arg) throws Exception {
        if ((this.ValidateResellerCredentialsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ValidateResellerCredentialsCompleted.invoke(this,new ValidateResellerCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public String validatePatientPortalOffice(String officeData) throws Exception {
        Object[] results = this.Invoke("ValidatePatientPortalOffice", new Object[]{ officeData });
        return ((String)(results[0]));
    }

    /**
    * 
    */
    public void validatePatientPortalOfficeAsync(String officeData) throws Exception {
        this.validatePatientPortalOfficeAsync(officeData,null);
    }

    /**
    * 
    */
    public void validatePatientPortalOfficeAsync(String officeData, Object userState) throws Exception {
        if ((this.ValidatePatientPortalOfficeOperationCompleted == null))
        {
            this.ValidatePatientPortalOfficeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidatePatientPortalOfficeOperationCompleted);
        }
         
        this.InvokeAsync("ValidatePatientPortalOffice", new Object[]{ officeData }, this.ValidatePatientPortalOfficeOperationCompleted, userState);
    }

    private void onValidatePatientPortalOfficeOperationCompleted(Object arg) throws Exception {
        if ((this.ValidatePatientPortalOfficeCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ValidatePatientPortalOfficeCompleted.invoke(this,new ValidatePatientPortalOfficeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void practiceTitleReset(String officeData) throws Exception {
        this.Invoke("PracticeTitleReset", new Object[]{ officeData });
    }

    /**
    * 
    */
    public void practiceTitleResetAsync(String officeData) throws Exception {
        this.practiceTitleResetAsync(officeData,null);
    }

    /**
    * 
    */
    public void practiceTitleResetAsync(String officeData, Object userState) throws Exception {
        if ((this.PracticeTitleResetOperationCompleted == null))
        {
            this.PracticeTitleResetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPracticeTitleResetOperationCompleted);
        }
         
        this.InvokeAsync("PracticeTitleReset", new Object[]{ officeData }, this.PracticeTitleResetOperationCompleted, userState);
    }

    private void onPracticeTitleResetOperationCompleted(Object arg) throws Exception {
        if ((this.PracticeTitleResetCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PracticeTitleResetCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void cancelAsync(Object userState) throws Exception {
        super.CancelAsync(userState);
    }

    private boolean isLocalFileSystemWebService(String url) throws Exception {
        if (((url == null) || (StringSupport.equals(url, String.Empty))))
        {
            return false;
        }
         
        System.Uri wsUri = new System.Uri(url);
        if (((wsUri.Port >= 1024) && (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
        {
            return true;
        }
         
        return false;
    }

}


