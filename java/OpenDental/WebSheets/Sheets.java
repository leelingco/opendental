//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:43 PM
//

package OpenDental.WebSheets;

import CS2JNet.JavaSupport.util.ListSupport;
import CS2JNet.System.StringSupport;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import OpenDental.Properties.Settings;
import OpenDental.WebSheets.CheckRegistrationKeyCompletedEventArgs;
import OpenDental.WebSheets.CheckRegistrationKeyCompletedEventHandler;
import OpenDental.WebSheets.DeleteSheetDataCompletedEventHandler;
import OpenDental.WebSheets.DeleteSheetDefCompletedEventHandler;
import OpenDental.WebSheets.DownloadSheetDefsCompletedEventArgs;
import OpenDental.WebSheets.DownloadSheetDefsCompletedEventHandler;
import OpenDental.WebSheets.EntityKeyMember;
import OpenDental.WebSheets.GetDentalOfficeIDCompletedEventArgs;
import OpenDental.WebSheets.GetDentalOfficeIDCompletedEventHandler;
import OpenDental.WebSheets.GetPreferencesCompletedEventArgs;
import OpenDental.WebSheets.GetPreferencesCompletedEventHandler;
import OpenDental.WebSheets.GetSheetDefAddressCompletedEventArgs;
import OpenDental.WebSheets.GetSheetDefAddressCompletedEventHandler;
import OpenDental.WebSheets.GetSheetsCompletedEventArgs;
import OpenDental.WebSheets.GetSheetsCompletedEventHandler;
import OpenDental.WebSheets.RelatedEnd;
import OpenDental.WebSheets.ServiceExistsCompletedEventArgs;
import OpenDental.WebSheets.ServiceExistsCompletedEventHandler;
import OpenDental.WebSheets.SetPreferencesCompletedEventArgs;
import OpenDental.WebSheets.SetPreferencesCompletedEventHandler;
import OpenDental.WebSheets.SetPreferencesV2CompletedEventArgs;
import OpenDental.WebSheets.SetPreferencesV2CompletedEventHandler;
import OpenDental.WebSheets.StructuralObject;
import OpenDental.WebSheets.UpLoadSheetDefCompletedEventHandler;
import OpenDentBusiness.SheetDef;


//------------------------------------------------------------------------------// <auto-generated>//     This code was generated by a tool.//     Runtime Version:4.0.30319.235////     Changes to this file may cause incorrect behavior and will be lost if//     the code is regenerated.// </auto-generated>//------------------------------------------------------------------------------//// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.235.///**
* 
*/
public class Sheets  extends System.Web.Services.Protocols.SoapHttpClientProtocol 
{

    private System.Threading.SendOrPostCallback SetPreferencesOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SetPreferencesV2OperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback GetPreferencesOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback GetSheetsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback DeleteSheetDataOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback CheckRegistrationKeyOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback GetDentalOfficeIDOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback ServiceExistsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback GetSheetDefAddressOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback DownloadSheetDefsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback DeleteSheetDefOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback UpLoadSheetDefOperationCompleted = new System.Threading.SendOrPostCallback();
    private boolean useDefaultCredentialsSetExplicitly = new boolean();
    /**
    * 
    */
    public Sheets() throws Exception {
        this.setUrl(Settings.getDefault().getOpenDental_WebSheets_Sheets());
        if ((this.isLocalFileSystemWebService(this.getUrl()) == true))
        {
            this.setUseDefaultCredentials(true);
            this.useDefaultCredentialsSetExplicitly = false;
        }
        else
        {
            this.useDefaultCredentialsSetExplicitly = true;
        } 
    }

    public String getUrl() throws Exception {
        return super.Url;
    }

    public void setUrl(String value) throws Exception {
        if ((((this.IsLocalFileSystemWebService(super.Url) == true) && (this.useDefaultCredentialsSetExplicitly == false)) && (this.isLocalFileSystemWebService(value) == false)))
        {
            super.UseDefaultCredentials = false;
        }
         
        super.Url = value;
    }

    public boolean getUseDefaultCredentials() throws Exception {
        return super.UseDefaultCredentials;
    }

    public void setUseDefaultCredentials(boolean value) throws Exception {
        super.UseDefaultCredentials = value;
        this.useDefaultCredentialsSetExplicitly = true;
    }

    /**
    * 
    */
    public SetPreferencesCompletedEventHandler SetPreferencesCompleted;
    /**
    * 
    */
    public SetPreferencesV2CompletedEventHandler SetPreferencesV2Completed;
    /**
    * 
    */
    public GetPreferencesCompletedEventHandler GetPreferencesCompleted;
    /**
    * 
    */
    public GetSheetsCompletedEventHandler GetSheetsCompleted;
    /**
    * 
    */
    public DeleteSheetDataCompletedEventHandler DeleteSheetDataCompleted;
    /**
    * 
    */
    public CheckRegistrationKeyCompletedEventHandler CheckRegistrationKeyCompleted;
    /**
    * 
    */
    public GetDentalOfficeIDCompletedEventHandler GetDentalOfficeIDCompleted;
    /**
    * 
    */
    public ServiceExistsCompletedEventHandler ServiceExistsCompleted;
    /**
    * 
    */
    public GetSheetDefAddressCompletedEventHandler GetSheetDefAddressCompleted;
    /**
    * 
    */
    public DownloadSheetDefsCompletedEventHandler DownloadSheetDefsCompleted;
    /**
    * 
    */
    public DeleteSheetDefCompletedEventHandler DeleteSheetDefCompleted;
    /**
    * 
    */
    public UpLoadSheetDefCompletedEventHandler UpLoadSheetDefCompleted;
    /**
    * 
    */
    public boolean setPreferences(String RegistrationKey, int ColorBorder) throws Exception {
        Object[] results = this.Invoke("SetPreferences", new Object[]{ RegistrationKey, ColorBorder });
        return ((boolean)(results[0]));
    }

    /**
    * 
    */
    public void setPreferencesAsync(String RegistrationKey, int ColorBorder) throws Exception {
        this.setPreferencesAsync(RegistrationKey,ColorBorder,null);
    }

    /**
    * 
    */
    public void setPreferencesAsync(String RegistrationKey, int ColorBorder, Object userState) throws Exception {
        if ((this.SetPreferencesOperationCompleted == null))
        {
            this.SetPreferencesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPreferencesOperationCompleted);
        }
         
        this.InvokeAsync("SetPreferences", new Object[]{ RegistrationKey, ColorBorder }, this.SetPreferencesOperationCompleted, userState);
    }

    private void onSetPreferencesOperationCompleted(Object arg) throws Exception {
        if ((this.SetPreferencesCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetPreferencesCompleted.invoke(this,new SetPreferencesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public boolean setPreferencesV2(String RegistrationKey, OpenDental.WebSheets.webforms_preference prefObj) throws Exception {
        Object[] results = this.Invoke("SetPreferencesV2", new Object[]{ RegistrationKey, prefObj });
        return ((boolean)(results[0]));
    }

    /**
    * 
    */
    public void setPreferencesV2Async(String RegistrationKey, OpenDental.WebSheets.webforms_preference prefObj) throws Exception {
        this.setPreferencesV2Async(RegistrationKey,prefObj,null);
    }

    /**
    * 
    */
    public void setPreferencesV2Async(String RegistrationKey, OpenDental.WebSheets.webforms_preference prefObj, Object userState) throws Exception {
        if ((this.SetPreferencesV2OperationCompleted == null))
        {
            this.SetPreferencesV2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPreferencesV2OperationCompleted);
        }
         
        this.InvokeAsync("SetPreferencesV2", new Object[]{ RegistrationKey, prefObj }, this.SetPreferencesV2OperationCompleted, userState);
    }

    private void onSetPreferencesV2OperationCompleted(Object arg) throws Exception {
        if ((this.SetPreferencesV2Completed != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetPreferencesV2Completed.invoke(this,new SetPreferencesV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public OpenDental.WebSheets.webforms_preference getPreferences(String RegistrationKey) throws Exception {
        Object[] results = this.Invoke("GetPreferences", new Object[]{ RegistrationKey });
        return ((OpenDental.WebSheets.webforms_preference)(results[0]));
    }

    /**
    * 
    */
    public void getPreferencesAsync(String RegistrationKey) throws Exception {
        this.getPreferencesAsync(RegistrationKey,null);
    }

    /**
    * 
    */
    public void getPreferencesAsync(String RegistrationKey, Object userState) throws Exception {
        if ((this.GetPreferencesOperationCompleted == null))
        {
            this.GetPreferencesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPreferencesOperationCompleted);
        }
         
        this.InvokeAsync("GetPreferences", new Object[]{ RegistrationKey }, this.GetPreferencesOperationCompleted, userState);
    }

    private void onGetPreferencesOperationCompleted(Object arg) throws Exception {
        if ((this.GetPreferencesCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetPreferencesCompleted.invoke(this,new GetPreferencesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public OpenDental.WebSheets.SheetAndSheetField[] getSheets(String RegistrationKey) throws Exception {
        Object[] results = this.Invoke("GetSheets", new Object[]{ RegistrationKey });
        return ((OpenDental.WebSheets.SheetAndSheetField[])(results[0]));
    }

    /**
    * 
    */
    public void getSheetsAsync(String RegistrationKey) throws Exception {
        this.getSheetsAsync(RegistrationKey,null);
    }

    /**
    * 
    */
    public void getSheetsAsync(String RegistrationKey, Object userState) throws Exception {
        if ((this.GetSheetsOperationCompleted == null))
        {
            this.GetSheetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSheetsOperationCompleted);
        }
         
        this.InvokeAsync("GetSheets", new Object[]{ RegistrationKey }, this.GetSheetsOperationCompleted, userState);
    }

    private void onGetSheetsOperationCompleted(Object arg) throws Exception {
        if ((this.GetSheetsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSheetsCompleted.invoke(this,new GetSheetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void deleteSheetData(String RegistrationKey, long[] SheetsForDeletion) throws Exception {
        this.Invoke("DeleteSheetData", new Object[]{ RegistrationKey, SheetsForDeletion });
    }

    /**
    * 
    */
    public void deleteSheetDataAsync(String RegistrationKey, long[] SheetsForDeletion) throws Exception {
        this.DeleteSheetDataAsync(RegistrationKey, SheetsForDeletion, null);
    }

    /**
    * 
    */
    public void deleteSheetDataAsync(String RegistrationKey, long[] SheetsForDeletion, Object userState) throws Exception {
        if ((this.DeleteSheetDataOperationCompleted == null))
        {
            this.DeleteSheetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSheetDataOperationCompleted);
        }
         
        this.InvokeAsync("DeleteSheetData", new Object[]{ RegistrationKey, SheetsForDeletion }, this.DeleteSheetDataOperationCompleted, userState);
    }

    private void onDeleteSheetDataOperationCompleted(Object arg) throws Exception {
        if ((this.DeleteSheetDataCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteSheetDataCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public boolean checkRegistrationKey(String RegistrationKeyFromDentalOffice) throws Exception {
        Object[] results = this.Invoke("CheckRegistrationKey", new Object[]{ RegistrationKeyFromDentalOffice });
        return ((boolean)(results[0]));
    }

    /**
    * 
    */
    public void checkRegistrationKeyAsync(String RegistrationKeyFromDentalOffice) throws Exception {
        this.checkRegistrationKeyAsync(RegistrationKeyFromDentalOffice,null);
    }

    /**
    * 
    */
    public void checkRegistrationKeyAsync(String RegistrationKeyFromDentalOffice, Object userState) throws Exception {
        if ((this.CheckRegistrationKeyOperationCompleted == null))
        {
            this.CheckRegistrationKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRegistrationKeyOperationCompleted);
        }
         
        this.InvokeAsync("CheckRegistrationKey", new Object[]{ RegistrationKeyFromDentalOffice }, this.CheckRegistrationKeyOperationCompleted, userState);
    }

    private void onCheckRegistrationKeyOperationCompleted(Object arg) throws Exception {
        if ((this.CheckRegistrationKeyCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CheckRegistrationKeyCompleted.invoke(this,new CheckRegistrationKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public long getDentalOfficeID(String RegistrationKeyFromDentalOffice) throws Exception {
        Object[] results = this.Invoke("GetDentalOfficeID", new Object[]{ RegistrationKeyFromDentalOffice });
        return ((long)(results[0]));
    }

    /**
    * 
    */
    public void getDentalOfficeIDAsync(String RegistrationKeyFromDentalOffice) throws Exception {
        this.getDentalOfficeIDAsync(RegistrationKeyFromDentalOffice,null);
    }

    /**
    * 
    */
    public void getDentalOfficeIDAsync(String RegistrationKeyFromDentalOffice, Object userState) throws Exception {
        if ((this.GetDentalOfficeIDOperationCompleted == null))
        {
            this.GetDentalOfficeIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDentalOfficeIDOperationCompleted);
        }
         
        this.InvokeAsync("GetDentalOfficeID", new Object[]{ RegistrationKeyFromDentalOffice }, this.GetDentalOfficeIDOperationCompleted, userState);
    }

    private void onGetDentalOfficeIDOperationCompleted(Object arg) throws Exception {
        if ((this.GetDentalOfficeIDCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetDentalOfficeIDCompleted.invoke(this,new GetDentalOfficeIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public boolean serviceExists() throws Exception {
        Object[] results = this.Invoke("ServiceExists", new Object[0]);
        return ((boolean)(results[0]));
    }

    /**
    * 
    */
    public void serviceExistsAsync() throws Exception {
        this.serviceExistsAsync(null);
    }

    /**
    * 
    */
    public void serviceExistsAsync(Object userState) throws Exception {
        if ((this.ServiceExistsOperationCompleted == null))
        {
            this.ServiceExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceExistsOperationCompleted);
        }
         
        this.InvokeAsync("ServiceExists", new Object[0], this.ServiceExistsOperationCompleted, userState);
    }

    private void onServiceExistsOperationCompleted(Object arg) throws Exception {
        if ((this.ServiceExistsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ServiceExistsCompleted.invoke(this,new ServiceExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public String getSheetDefAddress(String RegistrationKey) throws Exception {
        Object[] results = this.Invoke("GetSheetDefAddress", new Object[]{ RegistrationKey });
        return ((String)(results[0]));
    }

    /**
    * 
    */
    public void getSheetDefAddressAsync(String RegistrationKey) throws Exception {
        this.getSheetDefAddressAsync(RegistrationKey,null);
    }

    /**
    * 
    */
    public void getSheetDefAddressAsync(String RegistrationKey, Object userState) throws Exception {
        if ((this.GetSheetDefAddressOperationCompleted == null))
        {
            this.GetSheetDefAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSheetDefAddressOperationCompleted);
        }
         
        this.InvokeAsync("GetSheetDefAddress", new Object[]{ RegistrationKey }, this.GetSheetDefAddressOperationCompleted, userState);
    }

    private void onGetSheetDefAddressOperationCompleted(Object arg) throws Exception {
        if ((this.GetSheetDefAddressCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetSheetDefAddressCompleted.invoke(this,new GetSheetDefAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public OpenDental.WebSheets.webforms_sheetdef[] downloadSheetDefs(String RegistrationKey) throws Exception {
        Object[] results = this.Invoke("DownloadSheetDefs", new Object[]{ RegistrationKey });
        return ((OpenDental.WebSheets.webforms_sheetdef[])(results[0]));
    }

    /**
    * 
    */
    public void downloadSheetDefsAsync(String RegistrationKey) throws Exception {
        this.downloadSheetDefsAsync(RegistrationKey,null);
    }

    /**
    * 
    */
    public void downloadSheetDefsAsync(String RegistrationKey, Object userState) throws Exception {
        if ((this.DownloadSheetDefsOperationCompleted == null))
        {
            this.DownloadSheetDefsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadSheetDefsOperationCompleted);
        }
         
        this.InvokeAsync("DownloadSheetDefs", new Object[]{ RegistrationKey }, this.DownloadSheetDefsOperationCompleted, userState);
    }

    private void onDownloadSheetDefsOperationCompleted(Object arg) throws Exception {
        if ((this.DownloadSheetDefsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DownloadSheetDefsCompleted.invoke(this,new DownloadSheetDefsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void deleteSheetDef(String RegistrationKey, long WebSheetDefID) throws Exception {
        this.Invoke("DeleteSheetDef", new Object[]{ RegistrationKey, WebSheetDefID });
    }

    /**
    * 
    */
    public void deleteSheetDefAsync(String RegistrationKey, long WebSheetDefID) throws Exception {
        this.deleteSheetDefAsync(RegistrationKey,WebSheetDefID,null);
    }

    /**
    * 
    */
    public void deleteSheetDefAsync(String RegistrationKey, long WebSheetDefID, Object userState) throws Exception {
        if ((this.DeleteSheetDefOperationCompleted == null))
        {
            this.DeleteSheetDefOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSheetDefOperationCompleted);
        }
         
        this.InvokeAsync("DeleteSheetDef", new Object[]{ RegistrationKey, WebSheetDefID }, this.DeleteSheetDefOperationCompleted, userState);
    }

    private void onDeleteSheetDefOperationCompleted(Object arg) throws Exception {
        if ((this.DeleteSheetDefCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteSheetDefCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void upLoadSheetDef(String RegistrationKey, SheetDef sheetDef) throws Exception {
        this.Invoke("UpLoadSheetDef", new Object[]{ RegistrationKey, sheetDef });
    }

    /**
    * 
    */
    public void upLoadSheetDefAsync(String RegistrationKey, SheetDef sheetDef) throws Exception {
        this.upLoadSheetDefAsync(RegistrationKey,sheetDef,null);
    }

    /**
    * 
    */
    public void upLoadSheetDefAsync(String RegistrationKey, SheetDef sheetDef, Object userState) throws Exception {
        if ((this.UpLoadSheetDefOperationCompleted == null))
        {
            this.UpLoadSheetDefOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpLoadSheetDefOperationCompleted);
        }
         
        this.InvokeAsync("UpLoadSheetDef", new Object[]{ RegistrationKey, sheetDef }, this.UpLoadSheetDefOperationCompleted, userState);
    }

    private void onUpLoadSheetDefOperationCompleted(Object arg) throws Exception {
        if ((this.UpLoadSheetDefCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpLoadSheetDefCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void cancelAsync(Object userState) throws Exception {
        super.CancelAsync(userState);
    }

    private boolean isLocalFileSystemWebService(String url) throws Exception {
        if (((url == null) || (StringSupport.equals(url, String.Empty))))
        {
            return false;
        }
         
        System.Uri wsUri = new System.Uri(url);
        if (((wsUri.Port >= 1024) && (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
        {
            return true;
        }
         
        return false;
    }

}


