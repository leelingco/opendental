//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:42 PM
//

package OpenDental.EmdeonITSTest;

import CS2JNet.JavaSupport.util.ListSupport;
import CS2JNet.System.StringSupport;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import OpenDental.EmdeonITSTest.AuthenticateCompletedEventArgs;
import OpenDental.EmdeonITSTest.AuthenticateCompletedEventHandler;
import OpenDental.EmdeonITSTest.ChangePasswordCompletedEventArgs;
import OpenDental.EmdeonITSTest.ChangePasswordCompletedEventHandler;
import OpenDental.EmdeonITSTest.GetFileCompletedEventArgs;
import OpenDental.EmdeonITSTest.GetFileCompletedEventHandler;
import OpenDental.EmdeonITSTest.ITSReturn;
import OpenDental.EmdeonITSTest.PutFileCompletedEventArgs;
import OpenDental.EmdeonITSTest.PutFileCompletedEventHandler;
import OpenDental.EmdeonITSTest.PutFileExtCompletedEventArgs;
import OpenDental.EmdeonITSTest.PutFileExtCompletedEventHandler;
import OpenDental.EmdeonITSTest.SendRequestCompletedEventArgs;
import OpenDental.EmdeonITSTest.SendRequestCompletedEventHandler;
import OpenDental.Properties.Settings;


//------------------------------------------------------------------------------// <auto-generated>//     This code was generated by a tool.//     Runtime Version:4.0.30319.239////     Changes to this file may cause incorrect behavior and will be lost if//     the code is regenerated.// </auto-generated>//------------------------------------------------------------------------------//// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.239.///**
* 
*/
public class ITSWS  extends System.Web.Services.Protocols.SoapHttpClientProtocol 
{

    private System.Threading.SendOrPostCallback AuthenticateOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SendRequestOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback PutFileExtOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback PutFileOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback GetFileOperationCompleted = new System.Threading.SendOrPostCallback();
    private boolean useDefaultCredentialsSetExplicitly = new boolean();
    /**
    * 
    */
    public ITSWS() throws Exception {
        this.setUrl(Settings.getDefault().getOpenDental_EmdeonITSTest_ITSWS());
        if ((this.isLocalFileSystemWebService(this.getUrl()) == true))
        {
            this.setUseDefaultCredentials(true);
            this.useDefaultCredentialsSetExplicitly = false;
        }
        else
        {
            this.useDefaultCredentialsSetExplicitly = true;
        } 
    }

    public String getUrl() throws Exception {
        return super.Url;
    }

    public void setUrl(String value) throws Exception {
        if ((((this.IsLocalFileSystemWebService(super.Url) == true) && (this.useDefaultCredentialsSetExplicitly == false)) && (this.isLocalFileSystemWebService(value) == false)))
        {
            super.UseDefaultCredentials = false;
        }
         
        super.Url = value;
    }

    public boolean getUseDefaultCredentials() throws Exception {
        return super.UseDefaultCredentials;
    }

    public void setUseDefaultCredentials(boolean value) throws Exception {
        super.UseDefaultCredentials = value;
        this.useDefaultCredentialsSetExplicitly = true;
    }

    /**
    * 
    */
    public AuthenticateCompletedEventHandler AuthenticateCompleted;
    /**
    * 
    */
    public ChangePasswordCompletedEventHandler ChangePasswordCompleted;
    /**
    * 
    */
    public SendRequestCompletedEventHandler SendRequestCompleted;
    /**
    * 
    */
    public PutFileExtCompletedEventHandler PutFileExtCompleted;
    /**
    * 
    */
    public PutFileCompletedEventHandler PutFileCompleted;
    /**
    * 
    */
    public GetFileCompletedEventHandler GetFileCompleted;
    /**
    * 
    */
    public ITSReturn authenticate(String sUserID, String sPassword) throws Exception {
        Object[] results = this.Invoke("Authenticate", new Object[]{ sUserID, sPassword });
        return ((ITSReturn)(results[0]));
    }

    /**
    * 
    */
    public void authenticateAsync(String sUserID, String sPassword) throws Exception {
        this.authenticateAsync(sUserID,sPassword,null);
    }

    /**
    * 
    */
    public void authenticateAsync(String sUserID, String sPassword, Object userState) throws Exception {
        if ((this.AuthenticateOperationCompleted == null))
        {
            this.AuthenticateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateOperationCompleted);
        }
         
        this.InvokeAsync("Authenticate", new Object[]{ sUserID, sPassword }, this.AuthenticateOperationCompleted, userState);
    }

    private void onAuthenticateOperationCompleted(Object arg) throws Exception {
        if ((this.AuthenticateCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AuthenticateCompleted.invoke(this,new AuthenticateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public ITSReturn changePassword(String sUserID, String sPassword, String sNewPassword) throws Exception {
        Object[] results = this.Invoke("ChangePassword", new Object[]{ sUserID, sPassword, sNewPassword });
        return ((ITSReturn)(results[0]));
    }

    /**
    * 
    */
    public void changePasswordAsync(String sUserID, String sPassword, String sNewPassword) throws Exception {
        this.changePasswordAsync(sUserID,sPassword,sNewPassword,null);
    }

    /**
    * 
    */
    public void changePasswordAsync(String sUserID, String sPassword, String sNewPassword, Object userState) throws Exception {
        if ((this.ChangePasswordOperationCompleted == null))
        {
            this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
        }
         
        this.InvokeAsync("ChangePassword", new Object[]{ sUserID, sPassword, sNewPassword }, this.ChangePasswordOperationCompleted, userState);
    }

    private void onChangePasswordOperationCompleted(Object arg) throws Exception {
        if ((this.ChangePasswordCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ChangePasswordCompleted.invoke(this,new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public ITSReturn sendRequest(String sUserID, String sPassword, String sMessageType, String sEncodedRequest) throws Exception {
        Object[] results = this.Invoke("SendRequest", new Object[]{ sUserID, sPassword, sMessageType, sEncodedRequest });
        return ((ITSReturn)(results[0]));
    }

    /**
    * 
    */
    public void sendRequestAsync(String sUserID, String sPassword, String sMessageType, String sEncodedRequest) throws Exception {
        this.sendRequestAsync(sUserID,sPassword,sMessageType,sEncodedRequest,null);
    }

    /**
    * 
    */
    public void sendRequestAsync(String sUserID, String sPassword, String sMessageType, String sEncodedRequest, Object userState) throws Exception {
        if ((this.SendRequestOperationCompleted == null))
        {
            this.SendRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendRequestOperationCompleted);
        }
         
        this.InvokeAsync("SendRequest", new Object[]{ sUserID, sPassword, sMessageType, sEncodedRequest }, this.SendRequestOperationCompleted, userState);
    }

    private void onSendRequestOperationCompleted(Object arg) throws Exception {
        if ((this.SendRequestCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SendRequestCompleted.invoke(this,new SendRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public ITSReturn putFileExt(String sUserID, String sPassword, String sMessageType, String sFileName, String sEncodedPutFile) throws Exception {
        Object[] results = this.Invoke("PutFileExt", new Object[]{ sUserID, sPassword, sMessageType, sFileName, sEncodedPutFile });
        return ((ITSReturn)(results[0]));
    }

    /**
    * 
    */
    public void putFileExtAsync(String sUserID, String sPassword, String sMessageType, String sFileName, String sEncodedPutFile) throws Exception {
        this.putFileExtAsync(sUserID,sPassword,sMessageType,sFileName,sEncodedPutFile,null);
    }

    /**
    * 
    */
    public void putFileExtAsync(String sUserID, String sPassword, String sMessageType, String sFileName, String sEncodedPutFile, Object userState) throws Exception {
        if ((this.PutFileExtOperationCompleted == null))
        {
            this.PutFileExtOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutFileExtOperationCompleted);
        }
         
        this.InvokeAsync("PutFileExt", new Object[]{ sUserID, sPassword, sMessageType, sFileName, sEncodedPutFile }, this.PutFileExtOperationCompleted, userState);
    }

    private void onPutFileExtOperationCompleted(Object arg) throws Exception {
        if ((this.PutFileExtCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PutFileExtCompleted.invoke(this,new PutFileExtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public ITSReturn putFile(String sUserID, String sPassword, String sMessageType, String sEncodedPutFile) throws Exception {
        Object[] results = this.Invoke("PutFile", new Object[]{ sUserID, sPassword, sMessageType, sEncodedPutFile });
        return ((ITSReturn)(results[0]));
    }

    /**
    * 
    */
    public void putFileAsync(String sUserID, String sPassword, String sMessageType, String sEncodedPutFile) throws Exception {
        this.putFileAsync(sUserID,sPassword,sMessageType,sEncodedPutFile,null);
    }

    /**
    * 
    */
    public void putFileAsync(String sUserID, String sPassword, String sMessageType, String sEncodedPutFile, Object userState) throws Exception {
        if ((this.PutFileOperationCompleted == null))
        {
            this.PutFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutFileOperationCompleted);
        }
         
        this.InvokeAsync("PutFile", new Object[]{ sUserID, sPassword, sMessageType, sEncodedPutFile }, this.PutFileOperationCompleted, userState);
    }

    private void onPutFileOperationCompleted(Object arg) throws Exception {
        if ((this.PutFileCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PutFileCompleted.invoke(this,new PutFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public ITSReturn getFile(String sUserID, String sPassword, String sMessageType) throws Exception {
        Object[] results = this.Invoke("GetFile", new Object[]{ sUserID, sPassword, sMessageType });
        return ((ITSReturn)(results[0]));
    }

    /**
    * 
    */
    public void getFileAsync(String sUserID, String sPassword, String sMessageType) throws Exception {
        this.getFileAsync(sUserID,sPassword,sMessageType,null);
    }

    /**
    * 
    */
    public void getFileAsync(String sUserID, String sPassword, String sMessageType, Object userState) throws Exception {
        if ((this.GetFileOperationCompleted == null))
        {
            this.GetFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileOperationCompleted);
        }
         
        this.InvokeAsync("GetFile", new Object[]{ sUserID, sPassword, sMessageType }, this.GetFileOperationCompleted, userState);
    }

    private void onGetFileOperationCompleted(Object arg) throws Exception {
        if ((this.GetFileCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetFileCompleted.invoke(this,new GetFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void cancelAsync(Object userState) throws Exception {
        super.CancelAsync(userState);
    }

    private boolean isLocalFileSystemWebService(String url) throws Exception {
        if (((url == null) || (StringSupport.equals(url, String.Empty))))
        {
            return false;
        }
         
        System.Uri wsUri = new System.Uri(url);
        if (((wsUri.Port >= 1024) && (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
        {
            return true;
        }
         
        return false;
    }

}


