//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:43 PM
//

package OpenDental.PayConnectService;

import CS2JNet.JavaSupport.util.ListSupport;
import CS2JNet.System.StringSupport;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import OpenDental.PayConnectService.checkRequest;
import OpenDental.PayConnectService.debitCardRequest;
import OpenDental.PayConnectService.getCardTypeCompletedEventArgs;
import OpenDental.PayConnectService.getCardTypeCompletedEventHandler;
import OpenDental.PayConnectService.getMerchantInfoCompletedEventArgs;
import OpenDental.PayConnectService.getMerchantInfoCompletedEventHandler;
import OpenDental.PayConnectService.isValidCardCompletedEventArgs;
import OpenDental.PayConnectService.isValidCardCompletedEventHandler;
import OpenDental.PayConnectService.isValidExpirationCompletedEventArgs;
import OpenDental.PayConnectService.isValidExpirationCompletedEventHandler;
import OpenDental.PayConnectService.merchantInfoRequest;
import OpenDental.PayConnectService.merchantInfoResponse;
import OpenDental.PayConnectService.processCheckCompletedEventArgs;
import OpenDental.PayConnectService.processCheckCompletedEventHandler;
import OpenDental.PayConnectService.processCreditCardCompletedEventArgs;
import OpenDental.PayConnectService.processCreditCardCompletedEventHandler;
import OpenDental.PayConnectService.processDebitCardCompletedEventArgs;
import OpenDental.PayConnectService.processDebitCardCompletedEventHandler;
import OpenDental.PayConnectService.Response;
import OpenDental.PayConnectService.transRequest;
import OpenDental.PayConnectService.transResponse;
import OpenDental.Properties.Settings;


//------------------------------------------------------------------------------// <auto-generated>//     This code was generated by a tool.//     Runtime Version:4.0.30319.235////     Changes to this file may cause incorrect behavior and will be lost if//     the code is regenerated.// </auto-generated>//------------------------------------------------------------------------------//// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.235.///**
* 
*/
public class MerchantService  extends System.Web.Services.Protocols.SoapHttpClientProtocol 
{

    private System.Threading.SendOrPostCallback getMerchantInfoOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback processCheckOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback processCreditCardOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback processDebitCardOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback isValidExpirationOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback isValidCardOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback getCardTypeOperationCompleted = new System.Threading.SendOrPostCallback();
    private boolean useDefaultCredentialsSetExplicitly = new boolean();
    /**
    * 
    */
    public MerchantService() throws Exception {
        this.setUrl(Settings.getDefault().getOpenDental_PayConnect_MerchantService());
        if ((this.isLocalFileSystemWebService(this.getUrl()) == true))
        {
            this.setUseDefaultCredentials(true);
            this.useDefaultCredentialsSetExplicitly = false;
        }
        else
        {
            this.useDefaultCredentialsSetExplicitly = true;
        } 
    }

    public String getUrl() throws Exception {
        return super.Url;
    }

    public void setUrl(String value) throws Exception {
        if ((((this.IsLocalFileSystemWebService(super.Url) == true) && (this.useDefaultCredentialsSetExplicitly == false)) && (this.isLocalFileSystemWebService(value) == false)))
        {
            super.UseDefaultCredentials = false;
        }
         
        super.Url = value;
    }

    public boolean getUseDefaultCredentials() throws Exception {
        return super.UseDefaultCredentials;
    }

    public void setUseDefaultCredentials(boolean value) throws Exception {
        super.UseDefaultCredentials = value;
        this.useDefaultCredentialsSetExplicitly = true;
    }

    /**
    * 
    */
    public getMerchantInfoCompletedEventHandler getMerchantInfoCompleted;
    /**
    * 
    */
    public processCheckCompletedEventHandler processCheckCompleted;
    /**
    * 
    */
    public processCreditCardCompletedEventHandler processCreditCardCompleted;
    /**
    * 
    */
    public processDebitCardCompletedEventHandler processDebitCardCompleted;
    /**
    * 
    */
    public isValidExpirationCompletedEventHandler isValidExpirationCompleted;
    /**
    * 
    */
    public isValidCardCompletedEventHandler isValidCardCompleted;
    /**
    * 
    */
    public getCardTypeCompletedEventHandler getCardTypeCompleted;
    /**
    * 
    */
    public merchantInfoResponse getMerchantInfo(OpenDental.PayConnectService.Credentials credentials, merchantInfoRequest request) throws Exception {
        Object[] results = this.Invoke("getMerchantInfo", new Object[]{ credentials, request });
        return ((merchantInfoResponse)(results[0]));
    }

    /**
    * 
    */
    public void getMerchantInfoAsync(OpenDental.PayConnectService.Credentials credentials, merchantInfoRequest request) throws Exception {
        this.getMerchantInfoAsync(credentials,request,null);
    }

    /**
    * 
    */
    public void getMerchantInfoAsync(OpenDental.PayConnectService.Credentials credentials, merchantInfoRequest request, Object userState) throws Exception {
        if ((this.getMerchantInfoOperationCompleted == null))
        {
            this.getMerchantInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMerchantInfoOperationCompleted);
        }
         
        this.InvokeAsync("getMerchantInfo", new Object[]{ credentials, request }, this.getMerchantInfoOperationCompleted, userState);
    }

    private void ongetMerchantInfoOperationCompleted(Object arg) throws Exception {
        if ((this.getMerchantInfoCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getMerchantInfoCompleted.invoke(this,new getMerchantInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public transResponse processCheck(OpenDental.PayConnectService.Credentials credentials, checkRequest request) throws Exception {
        Object[] results = this.Invoke("processCheck", new Object[]{ credentials, request });
        return ((transResponse)(results[0]));
    }

    /**
    * 
    */
    public void processCheckAsync(OpenDental.PayConnectService.Credentials credentials, checkRequest request) throws Exception {
        this.processCheckAsync(credentials,request,null);
    }

    /**
    * 
    */
    public void processCheckAsync(OpenDental.PayConnectService.Credentials credentials, checkRequest request, Object userState) throws Exception {
        if ((this.processCheckOperationCompleted == null))
        {
            this.processCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessCheckOperationCompleted);
        }
         
        this.InvokeAsync("processCheck", new Object[]{ credentials, request }, this.processCheckOperationCompleted, userState);
    }

    private void onprocessCheckOperationCompleted(Object arg) throws Exception {
        if ((this.processCheckCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.processCheckCompleted.invoke(this,new processCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public transResponse processCreditCard(OpenDental.PayConnectService.Credentials credentials, OpenDental.PayConnectService.creditCardRequest request) throws Exception {
        Object[] results = this.Invoke("processCreditCard", new Object[]{ credentials, request });
        return ((transResponse)(results[0]));
    }

    /**
    * 
    */
    public void processCreditCardAsync(OpenDental.PayConnectService.Credentials credentials, OpenDental.PayConnectService.creditCardRequest request) throws Exception {
        this.processCreditCardAsync(credentials,request,null);
    }

    /**
    * 
    */
    public void processCreditCardAsync(OpenDental.PayConnectService.Credentials credentials, OpenDental.PayConnectService.creditCardRequest request, Object userState) throws Exception {
        if ((this.processCreditCardOperationCompleted == null))
        {
            this.processCreditCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessCreditCardOperationCompleted);
        }
         
        this.InvokeAsync("processCreditCard", new Object[]{ credentials, request }, this.processCreditCardOperationCompleted, userState);
    }

    private void onprocessCreditCardOperationCompleted(Object arg) throws Exception {
        if ((this.processCreditCardCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.processCreditCardCompleted.invoke(this,new processCreditCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public transResponse processDebitCard(OpenDental.PayConnectService.Credentials credentials, debitCardRequest request) throws Exception {
        Object[] results = this.Invoke("processDebitCard", new Object[]{ credentials, request });
        return ((transResponse)(results[0]));
    }

    /**
    * 
    */
    public void processDebitCardAsync(OpenDental.PayConnectService.Credentials credentials, debitCardRequest request) throws Exception {
        this.processDebitCardAsync(credentials,request,null);
    }

    /**
    * 
    */
    public void processDebitCardAsync(OpenDental.PayConnectService.Credentials credentials, debitCardRequest request, Object userState) throws Exception {
        if ((this.processDebitCardOperationCompleted == null))
        {
            this.processDebitCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessDebitCardOperationCompleted);
        }
         
        this.InvokeAsync("processDebitCard", new Object[]{ credentials, request }, this.processDebitCardOperationCompleted, userState);
    }

    private void onprocessDebitCardOperationCompleted(Object arg) throws Exception {
        if ((this.processDebitCardCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.processDebitCardCompleted.invoke(this,new processDebitCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public boolean isValidExpiration(OpenDental.PayConnectService.expiration arg0) throws Exception {
        Object[] results = this.Invoke("isValidExpiration", new Object[]{ arg0 });
        return ((boolean)(results[0]));
    }

    /**
    * 
    */
    public void isValidExpirationAsync(OpenDental.PayConnectService.expiration arg0) throws Exception {
        this.isValidExpirationAsync(arg0,null);
    }

    /**
    * 
    */
    public void isValidExpirationAsync(OpenDental.PayConnectService.expiration arg0, Object userState) throws Exception {
        if ((this.isValidExpirationOperationCompleted == null))
        {
            this.isValidExpirationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisValidExpirationOperationCompleted);
        }
         
        this.InvokeAsync("isValidExpiration", new Object[]{ arg0 }, this.isValidExpirationOperationCompleted, userState);
    }

    private void onisValidExpirationOperationCompleted(Object arg) throws Exception {
        if ((this.isValidExpirationCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.isValidExpirationCompleted.invoke(this,new isValidExpirationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public boolean isValidCard(String arg0) throws Exception {
        Object[] results = this.Invoke("isValidCard", new Object[]{ arg0 });
        return ((boolean)(results[0]));
    }

    /**
    * 
    */
    public void isValidCardAsync(String arg0) throws Exception {
        this.isValidCardAsync(arg0,null);
    }

    /**
    * 
    */
    public void isValidCardAsync(String arg0, Object userState) throws Exception {
        if ((this.isValidCardOperationCompleted == null))
        {
            this.isValidCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisValidCardOperationCompleted);
        }
         
        this.InvokeAsync("isValidCard", new Object[]{ arg0 }, this.isValidCardOperationCompleted, userState);
    }

    private void onisValidCardOperationCompleted(Object arg) throws Exception {
        if ((this.isValidCardCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.isValidCardCompleted.invoke(this,new isValidCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public String getCardType(String arg0) throws Exception {
        Object[] results = this.Invoke("getCardType", new Object[]{ arg0 });
        return ((String)(results[0]));
    }

    /**
    * 
    */
    public void getCardTypeAsync(String arg0) throws Exception {
        this.getCardTypeAsync(arg0,null);
    }

    /**
    * 
    */
    public void getCardTypeAsync(String arg0, Object userState) throws Exception {
        if ((this.getCardTypeOperationCompleted == null))
        {
            this.getCardTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCardTypeOperationCompleted);
        }
         
        this.InvokeAsync("getCardType", new Object[]{ arg0 }, this.getCardTypeOperationCompleted, userState);
    }

    private void ongetCardTypeOperationCompleted(Object arg) throws Exception {
        if ((this.getCardTypeCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getCardTypeCompleted.invoke(this,new getCardTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void cancelAsync(Object userState) throws Exception {
        super.CancelAsync(userState);
    }

    private boolean isLocalFileSystemWebService(String url) throws Exception {
        if (((url == null) || (StringSupport.equals(url, String.Empty))))
        {
            return false;
        }
         
        System.Uri wsUri = new System.Uri(url);
        if (((wsUri.Port >= 1024) && (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
        {
            return true;
        }
         
        return false;
    }

}


