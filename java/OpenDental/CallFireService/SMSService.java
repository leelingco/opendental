//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:42 PM
//

package OpenDental.CallFireService;

import CS2JNet.JavaSupport.util.ListSupport;
import CS2JNet.System.StringSupport;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import OpenDental.CallFireService.sendSMSCampaignCompletedEventArgs;
import OpenDental.CallFireService.sendSMSCampaignCompletedEventHandler;
import OpenDental.Properties.Settings;


//------------------------------------------------------------------------------// <auto-generated>//     This code was generated by a tool.//     Runtime Version:4.0.30319.261////     Changes to this file may cause incorrect behavior and will be lost if//     the code is regenerated.// </auto-generated>//------------------------------------------------------------------------------//// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.261.///**
* 
*/
public class SMSService  extends System.Web.Services.Protocols.SoapHttpClientProtocol 
{

    private System.Threading.SendOrPostCallback sendSMSCampaignOperationCompleted = new System.Threading.SendOrPostCallback();
    private boolean useDefaultCredentialsSetExplicitly = new boolean();
    /**
    * 
    */
    public SMSService() throws Exception {
        this.setUrl(Settings.getDefault().getOpenDental_CallFireService_SMSService());
        if ((this.isLocalFileSystemWebService(this.getUrl()) == true))
        {
            this.setUseDefaultCredentials(true);
            this.useDefaultCredentialsSetExplicitly = false;
        }
        else
        {
            this.useDefaultCredentialsSetExplicitly = true;
        } 
    }

    public String getUrl() throws Exception {
        return super.Url;
    }

    public void setUrl(String value) throws Exception {
        if ((((this.IsLocalFileSystemWebService(super.Url) == true) && (this.useDefaultCredentialsSetExplicitly == false)) && (this.isLocalFileSystemWebService(value) == false)))
        {
            super.UseDefaultCredentials = false;
        }
         
        super.Url = value;
    }

    public boolean getUseDefaultCredentials() throws Exception {
        return super.UseDefaultCredentials;
    }

    public void setUseDefaultCredentials(boolean value) throws Exception {
        super.UseDefaultCredentials = value;
        this.useDefaultCredentialsSetExplicitly = true;
    }

    /**
    * 
    */
    public sendSMSCampaignCompletedEventHandler sendSMSCampaignCompleted;
    /**
    * 
    */
    public long sendSMSCampaign(String key, String[] numbers, String campaignName) throws Exception {
        Object[] results = this.Invoke("sendSMSCampaign", new Object[]{ key, numbers, campaignName });
        return ((long)(results[0]));
    }

    /**
    * 
    */
    public void sendSMSCampaignAsync(String key, String[] numbers, String campaignName) throws Exception {
        this.sendSMSCampaignAsync(key, numbers, campaignName, null);
    }

    /**
    * 
    */
    public void sendSMSCampaignAsync(String key, String[] numbers, String campaignName, Object userState) throws Exception {
        if ((this.sendSMSCampaignOperationCompleted == null))
        {
            this.sendSMSCampaignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendSMSCampaignOperationCompleted);
        }
         
        this.InvokeAsync("sendSMSCampaign", new Object[]{ key, numbers, campaignName }, this.sendSMSCampaignOperationCompleted, userState);
    }

    private void onsendSMSCampaignOperationCompleted(Object arg) throws Exception {
        if ((this.sendSMSCampaignCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.sendSMSCampaignCompleted.invoke(this,new sendSMSCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void cancelAsync(Object userState) throws Exception {
        super.CancelAsync(userState);
    }

    private boolean isLocalFileSystemWebService(String url) throws Exception {
        if (((url == null) || (StringSupport.equals(url, String.Empty))))
        {
            return false;
        }
         
        System.Uri wsUri = new System.Uri(url);
        if (((wsUri.Port >= 1024) && (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
        {
            return true;
        }
         
        return false;
    }

}


