//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:42 PM
//

package OpenDental.MobileWeb;

import CS2JNet.JavaSupport.util.ListSupport;
import CS2JNet.System.StringSupport;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import OpenDental.MobileWeb.DeleteAllRecordsCompletedEventHandler;
import OpenDental.MobileWeb.DeleteObjectsCompletedEventHandler;
import OpenDental.MobileWeb.DeletePatientsRecordsCompletedEventHandler;
import OpenDental.MobileWeb.GetCustomerNumCompletedEventArgs;
import OpenDental.MobileWeb.GetCustomerNumCompletedEventHandler;
import OpenDental.MobileWeb.GetPatientPortalAddressCompletedEventArgs;
import OpenDental.MobileWeb.GetPatientPortalAddressCompletedEventHandler;
import OpenDental.MobileWeb.GetUserNameCompletedEventArgs;
import OpenDental.MobileWeb.GetUserNameCompletedEventHandler;
import OpenDental.MobileWeb.IsPaidCustomerCompletedEventArgs;
import OpenDental.MobileWeb.IsPaidCustomerCompletedEventHandler;
import OpenDental.MobileWeb.ServiceExistsCompletedEventArgs;
import OpenDental.MobileWeb.ServiceExistsCompletedEventHandler;
import OpenDental.MobileWeb.SetMobileWebUserPasswordCompletedEventHandler;
import OpenDental.MobileWeb.SetPracticeTitleCompletedEventHandler;
import OpenDental.MobileWeb.SetPreferenceCompletedEventHandler;
import OpenDental.MobileWeb.SynchAllergiesCompletedEventHandler;
import OpenDental.MobileWeb.SynchAllergyDefsCompletedEventHandler;
import OpenDental.MobileWeb.SynchAppointmentsCompletedEventHandler;
import OpenDental.MobileWeb.SynchDiseaseDefsCompletedEventHandler;
import OpenDental.MobileWeb.SynchDiseasesCompletedEventHandler;
import OpenDental.MobileWeb.SynchDocumentsCompletedEventHandler;
import OpenDental.MobileWeb.SynchICD9sCompletedEventHandler;
import OpenDental.MobileWeb.SynchLabPanelsCompletedEventHandler;
import OpenDental.MobileWeb.SynchLabResultsCompletedEventHandler;
import OpenDental.MobileWeb.SynchMedicationPatsCompletedEventHandler;
import OpenDental.MobileWeb.SynchMedicationsCompletedEventHandler;
import OpenDental.MobileWeb.SynchPatientsCompletedEventHandler;
import OpenDental.MobileWeb.SynchPharmaciesCompletedEventHandler;
import OpenDental.MobileWeb.SynchPrescriptionsCompletedEventHandler;
import OpenDental.MobileWeb.SynchProvidersCompletedEventHandler;
import OpenDental.MobileWeb.SynchRecallsCompletedEventHandler;
import OpenDental.MobileWeb.SynchStatementsCompletedEventHandler;
import OpenDental.Properties.Settings;
import OpenDentBusiness.DeletedObject;
import OpenDentBusiness.Mobile.AllergyDefm;
import OpenDentBusiness.Mobile.Allergym;
import OpenDentBusiness.Mobile.Appointmentm;
import OpenDentBusiness.Mobile.DiseaseDefm;
import OpenDentBusiness.Mobile.Diseasem;
import OpenDentBusiness.Mobile.Documentm;
import OpenDentBusiness.Mobile.ICD9m;
import OpenDentBusiness.Mobile.LabPanelm;
import OpenDentBusiness.Mobile.LabResultm;
import OpenDentBusiness.Mobile.Medicationm;
import OpenDentBusiness.Mobile.MedicationPatm;
import OpenDentBusiness.Mobile.Patientm;
import OpenDentBusiness.Mobile.Pharmacym;
import OpenDentBusiness.Mobile.Prefm;
import OpenDentBusiness.Mobile.Providerm;
import OpenDentBusiness.Mobile.Recallm;
import OpenDentBusiness.Mobile.RxPatm;
import OpenDentBusiness.Mobile.Statementm;


//------------------------------------------------------------------------------// <auto-generated>//     This code was generated by a tool.//     Runtime Version:4.0.30319.235////     Changes to this file may cause incorrect behavior and will be lost if//     the code is regenerated.// </auto-generated>//------------------------------------------------------------------------------//// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.235.///**
* 
*/
public class Mobile  extends System.Web.Services.Protocols.SoapHttpClientProtocol 
{

    private System.Threading.SendOrPostCallback ServiceExistsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback GetCustomerNumOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback IsPaidCustomerOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback DeleteObjectsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback DeleteAllRecordsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SynchPatientsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SynchAppointmentsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SynchPrescriptionsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SynchProvidersOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SynchPharmaciesOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback GetUserNameOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SetMobileWebUserPasswordOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SetPracticeTitleOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SetPreferenceOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback GetPatientPortalAddressOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SynchLabPanelsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SynchLabResultsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SynchMedicationsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SynchMedicationPatsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SynchAllergiesOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SynchAllergyDefsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SynchDiseasesOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SynchDiseaseDefsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SynchICD9sOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SynchStatementsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SynchDocumentsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback SynchRecallsOperationCompleted = new System.Threading.SendOrPostCallback();
    private System.Threading.SendOrPostCallback DeletePatientsRecordsOperationCompleted = new System.Threading.SendOrPostCallback();
    private boolean useDefaultCredentialsSetExplicitly = new boolean();
    /**
    * 
    */
    public Mobile() throws Exception {
        this.setUrl(Settings.getDefault().getOpenDental_MobileWeb_Mobile());
        if ((this.isLocalFileSystemWebService(this.getUrl()) == true))
        {
            this.setUseDefaultCredentials(true);
            this.useDefaultCredentialsSetExplicitly = false;
        }
        else
        {
            this.useDefaultCredentialsSetExplicitly = true;
        } 
    }

    public String getUrl() throws Exception {
        return super.Url;
    }

    public void setUrl(String value) throws Exception {
        if ((((this.IsLocalFileSystemWebService(super.Url) == true) && (this.useDefaultCredentialsSetExplicitly == false)) && (this.isLocalFileSystemWebService(value) == false)))
        {
            super.UseDefaultCredentials = false;
        }
         
        super.Url = value;
    }

    public boolean getUseDefaultCredentials() throws Exception {
        return super.UseDefaultCredentials;
    }

    public void setUseDefaultCredentials(boolean value) throws Exception {
        super.UseDefaultCredentials = value;
        this.useDefaultCredentialsSetExplicitly = true;
    }

    /**
    * 
    */
    public ServiceExistsCompletedEventHandler ServiceExistsCompleted;
    /**
    * 
    */
    public GetCustomerNumCompletedEventHandler GetCustomerNumCompleted;
    /**
    * 
    */
    public IsPaidCustomerCompletedEventHandler IsPaidCustomerCompleted;
    /**
    * 
    */
    public DeleteObjectsCompletedEventHandler DeleteObjectsCompleted;
    /**
    * 
    */
    public DeleteAllRecordsCompletedEventHandler DeleteAllRecordsCompleted;
    /**
    * 
    */
    public SynchPatientsCompletedEventHandler SynchPatientsCompleted;
    /**
    * 
    */
    public SynchAppointmentsCompletedEventHandler SynchAppointmentsCompleted;
    /**
    * 
    */
    public SynchPrescriptionsCompletedEventHandler SynchPrescriptionsCompleted;
    /**
    * 
    */
    public SynchProvidersCompletedEventHandler SynchProvidersCompleted;
    /**
    * 
    */
    public SynchPharmaciesCompletedEventHandler SynchPharmaciesCompleted;
    /**
    * 
    */
    public GetUserNameCompletedEventHandler GetUserNameCompleted;
    /**
    * 
    */
    public SetMobileWebUserPasswordCompletedEventHandler SetMobileWebUserPasswordCompleted;
    /**
    * 
    */
    public SetPracticeTitleCompletedEventHandler SetPracticeTitleCompleted;
    /**
    * 
    */
    public SetPreferenceCompletedEventHandler SetPreferenceCompleted;
    /**
    * 
    */
    public GetPatientPortalAddressCompletedEventHandler GetPatientPortalAddressCompleted;
    /**
    * 
    */
    public SynchLabPanelsCompletedEventHandler SynchLabPanelsCompleted;
    /**
    * 
    */
    public SynchLabResultsCompletedEventHandler SynchLabResultsCompleted;
    /**
    * 
    */
    public SynchMedicationsCompletedEventHandler SynchMedicationsCompleted;
    /**
    * 
    */
    public SynchMedicationPatsCompletedEventHandler SynchMedicationPatsCompleted;
    /**
    * 
    */
    public SynchAllergiesCompletedEventHandler SynchAllergiesCompleted;
    /**
    * 
    */
    public SynchAllergyDefsCompletedEventHandler SynchAllergyDefsCompleted;
    /**
    * 
    */
    public SynchDiseasesCompletedEventHandler SynchDiseasesCompleted;
    /**
    * 
    */
    public SynchDiseaseDefsCompletedEventHandler SynchDiseaseDefsCompleted;
    /**
    * 
    */
    public SynchICD9sCompletedEventHandler SynchICD9sCompleted;
    /**
    * 
    */
    public SynchStatementsCompletedEventHandler SynchStatementsCompleted;
    /**
    * 
    */
    public SynchDocumentsCompletedEventHandler SynchDocumentsCompleted;
    /**
    * 
    */
    public SynchRecallsCompletedEventHandler SynchRecallsCompleted;
    /**
    * 
    */
    public DeletePatientsRecordsCompletedEventHandler DeletePatientsRecordsCompleted;
    /**
    * 
    */
    public boolean serviceExists() throws Exception {
        Object[] results = this.Invoke("ServiceExists", new Object[0]);
        return ((boolean)(results[0]));
    }

    /**
    * 
    */
    public void serviceExistsAsync() throws Exception {
        this.serviceExistsAsync(null);
    }

    /**
    * 
    */
    public void serviceExistsAsync(Object userState) throws Exception {
        if ((this.ServiceExistsOperationCompleted == null))
        {
            this.ServiceExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceExistsOperationCompleted);
        }
         
        this.InvokeAsync("ServiceExists", new Object[0], this.ServiceExistsOperationCompleted, userState);
    }

    private void onServiceExistsOperationCompleted(Object arg) throws Exception {
        if ((this.ServiceExistsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ServiceExistsCompleted.invoke(this,new ServiceExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public long getCustomerNum(String RegistrationKeyFromDentalOffice) throws Exception {
        Object[] results = this.Invoke("GetCustomerNum", new Object[]{ RegistrationKeyFromDentalOffice });
        return ((long)(results[0]));
    }

    /**
    * 
    */
    public void getCustomerNumAsync(String RegistrationKeyFromDentalOffice) throws Exception {
        this.getCustomerNumAsync(RegistrationKeyFromDentalOffice,null);
    }

    /**
    * 
    */
    public void getCustomerNumAsync(String RegistrationKeyFromDentalOffice, Object userState) throws Exception {
        if ((this.GetCustomerNumOperationCompleted == null))
        {
            this.GetCustomerNumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerNumOperationCompleted);
        }
         
        this.InvokeAsync("GetCustomerNum", new Object[]{ RegistrationKeyFromDentalOffice }, this.GetCustomerNumOperationCompleted, userState);
    }

    private void onGetCustomerNumOperationCompleted(Object arg) throws Exception {
        if ((this.GetCustomerNumCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCustomerNumCompleted.invoke(this,new GetCustomerNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public boolean isPaidCustomer(String RegistrationKey) throws Exception {
        Object[] results = this.Invoke("IsPaidCustomer", new Object[]{ RegistrationKey });
        return ((boolean)(results[0]));
    }

    /**
    * 
    */
    public void isPaidCustomerAsync(String RegistrationKey) throws Exception {
        this.isPaidCustomerAsync(RegistrationKey,null);
    }

    /**
    * 
    */
    public void isPaidCustomerAsync(String RegistrationKey, Object userState) throws Exception {
        if ((this.IsPaidCustomerOperationCompleted == null))
        {
            this.IsPaidCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPaidCustomerOperationCompleted);
        }
         
        this.InvokeAsync("IsPaidCustomer", new Object[]{ RegistrationKey }, this.IsPaidCustomerOperationCompleted, userState);
    }

    private void onIsPaidCustomerOperationCompleted(Object arg) throws Exception {
        if ((this.IsPaidCustomerCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IsPaidCustomerCompleted.invoke(this,new IsPaidCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void deleteObjects(String RegistrationKey, DeletedObject[] dOList) throws Exception {
        this.Invoke("DeleteObjects", new Object[]{ RegistrationKey, dOList });
    }

    /**
    * 
    */
    public void deleteObjectsAsync(String RegistrationKey, DeletedObject[] dOList) throws Exception {
        this.DeleteObjectsAsync(RegistrationKey, dOList, null);
    }

    /**
    * 
    */
    public void deleteObjectsAsync(String RegistrationKey, DeletedObject[] dOList, Object userState) throws Exception {
        if ((this.DeleteObjectsOperationCompleted == null))
        {
            this.DeleteObjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteObjectsOperationCompleted);
        }
         
        this.InvokeAsync("DeleteObjects", new Object[]{ RegistrationKey, dOList }, this.DeleteObjectsOperationCompleted, userState);
    }

    private void onDeleteObjectsOperationCompleted(Object arg) throws Exception {
        if ((this.DeleteObjectsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteObjectsCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void deleteAllRecords(String RegistrationKey) throws Exception {
        this.Invoke("DeleteAllRecords", new Object[]{ RegistrationKey });
    }

    /**
    * 
    */
    public void deleteAllRecordsAsync(String RegistrationKey) throws Exception {
        this.deleteAllRecordsAsync(RegistrationKey,null);
    }

    /**
    * 
    */
    public void deleteAllRecordsAsync(String RegistrationKey, Object userState) throws Exception {
        if ((this.DeleteAllRecordsOperationCompleted == null))
        {
            this.DeleteAllRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAllRecordsOperationCompleted);
        }
         
        this.InvokeAsync("DeleteAllRecords", new Object[]{ RegistrationKey }, this.DeleteAllRecordsOperationCompleted, userState);
    }

    private void onDeleteAllRecordsOperationCompleted(Object arg) throws Exception {
        if ((this.DeleteAllRecordsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteAllRecordsCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void synchPatients(String RegistrationKey, Patientm[] patientmList) throws Exception {
        this.Invoke("SynchPatients", new Object[]{ RegistrationKey, patientmList });
    }

    /**
    * 
    */
    public void synchPatientsAsync(String RegistrationKey, Patientm[] patientmList) throws Exception {
        this.SynchPatientsAsync(RegistrationKey, patientmList, null);
    }

    /**
    * 
    */
    public void synchPatientsAsync(String RegistrationKey, Patientm[] patientmList, Object userState) throws Exception {
        if ((this.SynchPatientsOperationCompleted == null))
        {
            this.SynchPatientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchPatientsOperationCompleted);
        }
         
        this.InvokeAsync("SynchPatients", new Object[]{ RegistrationKey, patientmList }, this.SynchPatientsOperationCompleted, userState);
    }

    private void onSynchPatientsOperationCompleted(Object arg) throws Exception {
        if ((this.SynchPatientsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SynchPatientsCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void synchAppointments(String RegistrationKey, Appointmentm[] appointmentList) throws Exception {
        this.Invoke("SynchAppointments", new Object[]{ RegistrationKey, appointmentList });
    }

    /**
    * 
    */
    public void synchAppointmentsAsync(String RegistrationKey, Appointmentm[] appointmentList) throws Exception {
        this.SynchAppointmentsAsync(RegistrationKey, appointmentList, null);
    }

    /**
    * 
    */
    public void synchAppointmentsAsync(String RegistrationKey, Appointmentm[] appointmentList, Object userState) throws Exception {
        if ((this.SynchAppointmentsOperationCompleted == null))
        {
            this.SynchAppointmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchAppointmentsOperationCompleted);
        }
         
        this.InvokeAsync("SynchAppointments", new Object[]{ RegistrationKey, appointmentList }, this.SynchAppointmentsOperationCompleted, userState);
    }

    private void onSynchAppointmentsOperationCompleted(Object arg) throws Exception {
        if ((this.SynchAppointmentsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SynchAppointmentsCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void synchPrescriptions(String RegistrationKey, RxPatm[] rxList) throws Exception {
        this.Invoke("SynchPrescriptions", new Object[]{ RegistrationKey, rxList });
    }

    /**
    * 
    */
    public void synchPrescriptionsAsync(String RegistrationKey, RxPatm[] rxList) throws Exception {
        this.SynchPrescriptionsAsync(RegistrationKey, rxList, null);
    }

    /**
    * 
    */
    public void synchPrescriptionsAsync(String RegistrationKey, RxPatm[] rxList, Object userState) throws Exception {
        if ((this.SynchPrescriptionsOperationCompleted == null))
        {
            this.SynchPrescriptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchPrescriptionsOperationCompleted);
        }
         
        this.InvokeAsync("SynchPrescriptions", new Object[]{ RegistrationKey, rxList }, this.SynchPrescriptionsOperationCompleted, userState);
    }

    private void onSynchPrescriptionsOperationCompleted(Object arg) throws Exception {
        if ((this.SynchPrescriptionsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SynchPrescriptionsCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void synchProviders(String RegistrationKey, Providerm[] providerList) throws Exception {
        this.Invoke("SynchProviders", new Object[]{ RegistrationKey, providerList });
    }

    /**
    * 
    */
    public void synchProvidersAsync(String RegistrationKey, Providerm[] providerList) throws Exception {
        this.SynchProvidersAsync(RegistrationKey, providerList, null);
    }

    /**
    * 
    */
    public void synchProvidersAsync(String RegistrationKey, Providerm[] providerList, Object userState) throws Exception {
        if ((this.SynchProvidersOperationCompleted == null))
        {
            this.SynchProvidersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchProvidersOperationCompleted);
        }
         
        this.InvokeAsync("SynchProviders", new Object[]{ RegistrationKey, providerList }, this.SynchProvidersOperationCompleted, userState);
    }

    private void onSynchProvidersOperationCompleted(Object arg) throws Exception {
        if ((this.SynchProvidersCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SynchProvidersCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void synchPharmacies(String RegistrationKey, Pharmacym[] pharmacyList) throws Exception {
        this.Invoke("SynchPharmacies", new Object[]{ RegistrationKey, pharmacyList });
    }

    /**
    * 
    */
    public void synchPharmaciesAsync(String RegistrationKey, Pharmacym[] pharmacyList) throws Exception {
        this.SynchPharmaciesAsync(RegistrationKey, pharmacyList, null);
    }

    /**
    * 
    */
    public void synchPharmaciesAsync(String RegistrationKey, Pharmacym[] pharmacyList, Object userState) throws Exception {
        if ((this.SynchPharmaciesOperationCompleted == null))
        {
            this.SynchPharmaciesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchPharmaciesOperationCompleted);
        }
         
        this.InvokeAsync("SynchPharmacies", new Object[]{ RegistrationKey, pharmacyList }, this.SynchPharmaciesOperationCompleted, userState);
    }

    private void onSynchPharmaciesOperationCompleted(Object arg) throws Exception {
        if ((this.SynchPharmaciesCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SynchPharmaciesCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public String getUserName(String RegistrationKey) throws Exception {
        Object[] results = this.Invoke("GetUserName", new Object[]{ RegistrationKey });
        return ((String)(results[0]));
    }

    /**
    * 
    */
    public void getUserNameAsync(String RegistrationKey) throws Exception {
        this.getUserNameAsync(RegistrationKey,null);
    }

    /**
    * 
    */
    public void getUserNameAsync(String RegistrationKey, Object userState) throws Exception {
        if ((this.GetUserNameOperationCompleted == null))
        {
            this.GetUserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserNameOperationCompleted);
        }
         
        this.InvokeAsync("GetUserName", new Object[]{ RegistrationKey }, this.GetUserNameOperationCompleted, userState);
    }

    private void onGetUserNameOperationCompleted(Object arg) throws Exception {
        if ((this.GetUserNameCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserNameCompleted.invoke(this,new GetUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void setMobileWebUserPassword(String RegistrationKey, String UserName, String Password) throws Exception {
        this.Invoke("SetMobileWebUserPassword", new Object[]{ RegistrationKey, UserName, Password });
    }

    /**
    * 
    */
    public void setMobileWebUserPasswordAsync(String RegistrationKey, String UserName, String Password) throws Exception {
        this.setMobileWebUserPasswordAsync(RegistrationKey,UserName,Password,null);
    }

    /**
    * 
    */
    public void setMobileWebUserPasswordAsync(String RegistrationKey, String UserName, String Password, Object userState) throws Exception {
        if ((this.SetMobileWebUserPasswordOperationCompleted == null))
        {
            this.SetMobileWebUserPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMobileWebUserPasswordOperationCompleted);
        }
         
        this.InvokeAsync("SetMobileWebUserPassword", new Object[]{ RegistrationKey, UserName, Password }, this.SetMobileWebUserPasswordOperationCompleted, userState);
    }

    private void onSetMobileWebUserPasswordOperationCompleted(Object arg) throws Exception {
        if ((this.SetMobileWebUserPasswordCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetMobileWebUserPasswordCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void setPracticeTitle(String RegistrationKey, String PracticeTitle) throws Exception {
        this.Invoke("SetPracticeTitle", new Object[]{ RegistrationKey, PracticeTitle });
    }

    /**
    * 
    */
    public void setPracticeTitleAsync(String RegistrationKey, String PracticeTitle) throws Exception {
        this.setPracticeTitleAsync(RegistrationKey,PracticeTitle,null);
    }

    /**
    * 
    */
    public void setPracticeTitleAsync(String RegistrationKey, String PracticeTitle, Object userState) throws Exception {
        if ((this.SetPracticeTitleOperationCompleted == null))
        {
            this.SetPracticeTitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPracticeTitleOperationCompleted);
        }
         
        this.InvokeAsync("SetPracticeTitle", new Object[]{ RegistrationKey, PracticeTitle }, this.SetPracticeTitleOperationCompleted, userState);
    }

    private void onSetPracticeTitleOperationCompleted(Object arg) throws Exception {
        if ((this.SetPracticeTitleCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetPracticeTitleCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void setPreference(String RegistrationKey, Prefm prefm) throws Exception {
        this.Invoke("SetPreference", new Object[]{ RegistrationKey, prefm });
    }

    /**
    * 
    */
    public void setPreferenceAsync(String RegistrationKey, Prefm prefm) throws Exception {
        this.setPreferenceAsync(RegistrationKey,prefm,null);
    }

    /**
    * 
    */
    public void setPreferenceAsync(String RegistrationKey, Prefm prefm, Object userState) throws Exception {
        if ((this.SetPreferenceOperationCompleted == null))
        {
            this.SetPreferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPreferenceOperationCompleted);
        }
         
        this.InvokeAsync("SetPreference", new Object[]{ RegistrationKey, prefm }, this.SetPreferenceOperationCompleted, userState);
    }

    private void onSetPreferenceOperationCompleted(Object arg) throws Exception {
        if ((this.SetPreferenceCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetPreferenceCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public String getPatientPortalAddress(String RegistrationKey) throws Exception {
        Object[] results = this.Invoke("GetPatientPortalAddress", new Object[]{ RegistrationKey });
        return ((String)(results[0]));
    }

    /**
    * 
    */
    public void getPatientPortalAddressAsync(String RegistrationKey) throws Exception {
        this.getPatientPortalAddressAsync(RegistrationKey,null);
    }

    /**
    * 
    */
    public void getPatientPortalAddressAsync(String RegistrationKey, Object userState) throws Exception {
        if ((this.GetPatientPortalAddressOperationCompleted == null))
        {
            this.GetPatientPortalAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientPortalAddressOperationCompleted);
        }
         
        this.InvokeAsync("GetPatientPortalAddress", new Object[]{ RegistrationKey }, this.GetPatientPortalAddressOperationCompleted, userState);
    }

    private void onGetPatientPortalAddressOperationCompleted(Object arg) throws Exception {
        if ((this.GetPatientPortalAddressCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetPatientPortalAddressCompleted.invoke(this,new GetPatientPortalAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void synchLabPanels(String RegistrationKey, LabPanelm[] labPanelmList) throws Exception {
        this.Invoke("SynchLabPanels", new Object[]{ RegistrationKey, labPanelmList });
    }

    /**
    * 
    */
    public void synchLabPanelsAsync(String RegistrationKey, LabPanelm[] labPanelmList) throws Exception {
        this.SynchLabPanelsAsync(RegistrationKey, labPanelmList, null);
    }

    /**
    * 
    */
    public void synchLabPanelsAsync(String RegistrationKey, LabPanelm[] labPanelmList, Object userState) throws Exception {
        if ((this.SynchLabPanelsOperationCompleted == null))
        {
            this.SynchLabPanelsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchLabPanelsOperationCompleted);
        }
         
        this.InvokeAsync("SynchLabPanels", new Object[]{ RegistrationKey, labPanelmList }, this.SynchLabPanelsOperationCompleted, userState);
    }

    private void onSynchLabPanelsOperationCompleted(Object arg) throws Exception {
        if ((this.SynchLabPanelsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SynchLabPanelsCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void synchLabResults(String RegistrationKey, LabResultm[] labResultmList) throws Exception {
        this.Invoke("SynchLabResults", new Object[]{ RegistrationKey, labResultmList });
    }

    /**
    * 
    */
    public void synchLabResultsAsync(String RegistrationKey, LabResultm[] labResultmList) throws Exception {
        this.SynchLabResultsAsync(RegistrationKey, labResultmList, null);
    }

    /**
    * 
    */
    public void synchLabResultsAsync(String RegistrationKey, LabResultm[] labResultmList, Object userState) throws Exception {
        if ((this.SynchLabResultsOperationCompleted == null))
        {
            this.SynchLabResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchLabResultsOperationCompleted);
        }
         
        this.InvokeAsync("SynchLabResults", new Object[]{ RegistrationKey, labResultmList }, this.SynchLabResultsOperationCompleted, userState);
    }

    private void onSynchLabResultsOperationCompleted(Object arg) throws Exception {
        if ((this.SynchLabResultsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SynchLabResultsCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void synchMedications(String RegistrationKey, Medicationm[] medicationmList) throws Exception {
        this.Invoke("SynchMedications", new Object[]{ RegistrationKey, medicationmList });
    }

    /**
    * 
    */
    public void synchMedicationsAsync(String RegistrationKey, Medicationm[] medicationmList) throws Exception {
        this.SynchMedicationsAsync(RegistrationKey, medicationmList, null);
    }

    /**
    * 
    */
    public void synchMedicationsAsync(String RegistrationKey, Medicationm[] medicationmList, Object userState) throws Exception {
        if ((this.SynchMedicationsOperationCompleted == null))
        {
            this.SynchMedicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchMedicationsOperationCompleted);
        }
         
        this.InvokeAsync("SynchMedications", new Object[]{ RegistrationKey, medicationmList }, this.SynchMedicationsOperationCompleted, userState);
    }

    private void onSynchMedicationsOperationCompleted(Object arg) throws Exception {
        if ((this.SynchMedicationsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SynchMedicationsCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void synchMedicationPats(String RegistrationKey, MedicationPatm[] medicationPatList) throws Exception {
        this.Invoke("SynchMedicationPats", new Object[]{ RegistrationKey, medicationPatList });
    }

    /**
    * 
    */
    public void synchMedicationPatsAsync(String RegistrationKey, MedicationPatm[] medicationPatList) throws Exception {
        this.SynchMedicationPatsAsync(RegistrationKey, medicationPatList, null);
    }

    /**
    * 
    */
    public void synchMedicationPatsAsync(String RegistrationKey, MedicationPatm[] medicationPatList, Object userState) throws Exception {
        if ((this.SynchMedicationPatsOperationCompleted == null))
        {
            this.SynchMedicationPatsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchMedicationPatsOperationCompleted);
        }
         
        this.InvokeAsync("SynchMedicationPats", new Object[]{ RegistrationKey, medicationPatList }, this.SynchMedicationPatsOperationCompleted, userState);
    }

    private void onSynchMedicationPatsOperationCompleted(Object arg) throws Exception {
        if ((this.SynchMedicationPatsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SynchMedicationPatsCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void synchAllergies(String RegistrationKey, Allergym[] allergyList) throws Exception {
        this.Invoke("SynchAllergies", new Object[]{ RegistrationKey, allergyList });
    }

    /**
    * 
    */
    public void synchAllergiesAsync(String RegistrationKey, Allergym[] allergyList) throws Exception {
        this.SynchAllergiesAsync(RegistrationKey, allergyList, null);
    }

    /**
    * 
    */
    public void synchAllergiesAsync(String RegistrationKey, Allergym[] allergyList, Object userState) throws Exception {
        if ((this.SynchAllergiesOperationCompleted == null))
        {
            this.SynchAllergiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchAllergiesOperationCompleted);
        }
         
        this.InvokeAsync("SynchAllergies", new Object[]{ RegistrationKey, allergyList }, this.SynchAllergiesOperationCompleted, userState);
    }

    private void onSynchAllergiesOperationCompleted(Object arg) throws Exception {
        if ((this.SynchAllergiesCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SynchAllergiesCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void synchAllergyDefs(String RegistrationKey, AllergyDefm[] allergyDefList) throws Exception {
        this.Invoke("SynchAllergyDefs", new Object[]{ RegistrationKey, allergyDefList });
    }

    /**
    * 
    */
    public void synchAllergyDefsAsync(String RegistrationKey, AllergyDefm[] allergyDefList) throws Exception {
        this.SynchAllergyDefsAsync(RegistrationKey, allergyDefList, null);
    }

    /**
    * 
    */
    public void synchAllergyDefsAsync(String RegistrationKey, AllergyDefm[] allergyDefList, Object userState) throws Exception {
        if ((this.SynchAllergyDefsOperationCompleted == null))
        {
            this.SynchAllergyDefsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchAllergyDefsOperationCompleted);
        }
         
        this.InvokeAsync("SynchAllergyDefs", new Object[]{ RegistrationKey, allergyDefList }, this.SynchAllergyDefsOperationCompleted, userState);
    }

    private void onSynchAllergyDefsOperationCompleted(Object arg) throws Exception {
        if ((this.SynchAllergyDefsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SynchAllergyDefsCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void synchDiseases(String RegistrationKey, Diseasem[] diseaseList) throws Exception {
        this.Invoke("SynchDiseases", new Object[]{ RegistrationKey, diseaseList });
    }

    /**
    * 
    */
    public void synchDiseasesAsync(String RegistrationKey, Diseasem[] diseaseList) throws Exception {
        this.SynchDiseasesAsync(RegistrationKey, diseaseList, null);
    }

    /**
    * 
    */
    public void synchDiseasesAsync(String RegistrationKey, Diseasem[] diseaseList, Object userState) throws Exception {
        if ((this.SynchDiseasesOperationCompleted == null))
        {
            this.SynchDiseasesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchDiseasesOperationCompleted);
        }
         
        this.InvokeAsync("SynchDiseases", new Object[]{ RegistrationKey, diseaseList }, this.SynchDiseasesOperationCompleted, userState);
    }

    private void onSynchDiseasesOperationCompleted(Object arg) throws Exception {
        if ((this.SynchDiseasesCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SynchDiseasesCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void synchDiseaseDefs(String RegistrationKey, DiseaseDefm[] diseaseDefList) throws Exception {
        this.Invoke("SynchDiseaseDefs", new Object[]{ RegistrationKey, diseaseDefList });
    }

    /**
    * 
    */
    public void synchDiseaseDefsAsync(String RegistrationKey, DiseaseDefm[] diseaseDefList) throws Exception {
        this.SynchDiseaseDefsAsync(RegistrationKey, diseaseDefList, null);
    }

    /**
    * 
    */
    public void synchDiseaseDefsAsync(String RegistrationKey, DiseaseDefm[] diseaseDefList, Object userState) throws Exception {
        if ((this.SynchDiseaseDefsOperationCompleted == null))
        {
            this.SynchDiseaseDefsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchDiseaseDefsOperationCompleted);
        }
         
        this.InvokeAsync("SynchDiseaseDefs", new Object[]{ RegistrationKey, diseaseDefList }, this.SynchDiseaseDefsOperationCompleted, userState);
    }

    private void onSynchDiseaseDefsOperationCompleted(Object arg) throws Exception {
        if ((this.SynchDiseaseDefsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SynchDiseaseDefsCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void synchICD9s(String RegistrationKey, ICD9m[] icd9List) throws Exception {
        this.Invoke("SynchICD9s", new Object[]{ RegistrationKey, icd9List });
    }

    /**
    * 
    */
    public void synchICD9sAsync(String RegistrationKey, ICD9m[] icd9List) throws Exception {
        this.SynchICD9sAsync(RegistrationKey, icd9List, null);
    }

    /**
    * 
    */
    public void synchICD9sAsync(String RegistrationKey, ICD9m[] icd9List, Object userState) throws Exception {
        if ((this.SynchICD9sOperationCompleted == null))
        {
            this.SynchICD9sOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchICD9sOperationCompleted);
        }
         
        this.InvokeAsync("SynchICD9s", new Object[]{ RegistrationKey, icd9List }, this.SynchICD9sOperationCompleted, userState);
    }

    private void onSynchICD9sOperationCompleted(Object arg) throws Exception {
        if ((this.SynchICD9sCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SynchICD9sCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void synchStatements(String RegistrationKey, Statementm[] statementList) throws Exception {
        this.Invoke("SynchStatements", new Object[]{ RegistrationKey, statementList });
    }

    /**
    * 
    */
    public void synchStatementsAsync(String RegistrationKey, Statementm[] statementList) throws Exception {
        this.SynchStatementsAsync(RegistrationKey, statementList, null);
    }

    /**
    * 
    */
    public void synchStatementsAsync(String RegistrationKey, Statementm[] statementList, Object userState) throws Exception {
        if ((this.SynchStatementsOperationCompleted == null))
        {
            this.SynchStatementsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchStatementsOperationCompleted);
        }
         
        this.InvokeAsync("SynchStatements", new Object[]{ RegistrationKey, statementList }, this.SynchStatementsOperationCompleted, userState);
    }

    private void onSynchStatementsOperationCompleted(Object arg) throws Exception {
        if ((this.SynchStatementsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SynchStatementsCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void synchDocuments(String RegistrationKey, Documentm[] documentList) throws Exception {
        this.Invoke("SynchDocuments", new Object[]{ RegistrationKey, documentList });
    }

    /**
    * 
    */
    public void synchDocumentsAsync(String RegistrationKey, Documentm[] documentList) throws Exception {
        this.SynchDocumentsAsync(RegistrationKey, documentList, null);
    }

    /**
    * 
    */
    public void synchDocumentsAsync(String RegistrationKey, Documentm[] documentList, Object userState) throws Exception {
        if ((this.SynchDocumentsOperationCompleted == null))
        {
            this.SynchDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchDocumentsOperationCompleted);
        }
         
        this.InvokeAsync("SynchDocuments", new Object[]{ RegistrationKey, documentList }, this.SynchDocumentsOperationCompleted, userState);
    }

    private void onSynchDocumentsOperationCompleted(Object arg) throws Exception {
        if ((this.SynchDocumentsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SynchDocumentsCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void synchRecalls(String RegistrationKey, Recallm[] recallList) throws Exception {
        this.Invoke("SynchRecalls", new Object[]{ RegistrationKey, recallList });
    }

    /**
    * 
    */
    public void synchRecallsAsync(String RegistrationKey, Recallm[] recallList) throws Exception {
        this.SynchRecallsAsync(RegistrationKey, recallList, null);
    }

    /**
    * 
    */
    public void synchRecallsAsync(String RegistrationKey, Recallm[] recallList, Object userState) throws Exception {
        if ((this.SynchRecallsOperationCompleted == null))
        {
            this.SynchRecallsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchRecallsOperationCompleted);
        }
         
        this.InvokeAsync("SynchRecalls", new Object[]{ RegistrationKey, recallList }, this.SynchRecallsOperationCompleted, userState);
    }

    private void onSynchRecallsOperationCompleted(Object arg) throws Exception {
        if ((this.SynchRecallsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SynchRecallsCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void deletePatientsRecords(String RegistrationKey, long[] patNumList) throws Exception {
        this.Invoke("DeletePatientsRecords", new Object[]{ RegistrationKey, patNumList });
    }

    /**
    * 
    */
    public void deletePatientsRecordsAsync(String RegistrationKey, long[] patNumList) throws Exception {
        this.DeletePatientsRecordsAsync(RegistrationKey, patNumList, null);
    }

    /**
    * 
    */
    public void deletePatientsRecordsAsync(String RegistrationKey, long[] patNumList, Object userState) throws Exception {
        if ((this.DeletePatientsRecordsOperationCompleted == null))
        {
            this.DeletePatientsRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePatientsRecordsOperationCompleted);
        }
         
        this.InvokeAsync("DeletePatientsRecords", new Object[]{ RegistrationKey, patNumList }, this.DeletePatientsRecordsOperationCompleted, userState);
    }

    private void onDeletePatientsRecordsOperationCompleted(Object arg) throws Exception {
        if ((this.DeletePatientsRecordsCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeletePatientsRecordsCompleted.invoke(this,new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void cancelAsync(Object userState) throws Exception {
        super.CancelAsync(userState);
    }

    private boolean isLocalFileSystemWebService(String url) throws Exception {
        if (((url == null) || (StringSupport.equals(url, String.Empty))))
        {
            return false;
        }
         
        System.Uri wsUri = new System.Uri(url);
        if (((wsUri.Port >= 1024) && (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
        {
            return true;
        }
         
        return false;
    }

}


