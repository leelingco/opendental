//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:41 PM
//

package MobileWeb;

import CS2JNet.JavaSupport.language.RefSupport;
import MobileWeb.Util;
import OpenDentBusiness.ApptStatus;
import OpenDentBusiness.Mobile.Allergym;
import OpenDentBusiness.Mobile.Allergyms;
import OpenDentBusiness.Mobile.Appointmentm;
import OpenDentBusiness.Mobile.Appointmentms;
import OpenDentBusiness.Mobile.Patientm;
import OpenDentBusiness.Mobile.Patientms;
import OpenDentBusiness.Mobile.RxPatm;
import OpenDentBusiness.Mobile.RxPatms;
import WebForms.Logger;


//------------------------------------------------------------------------------// <auto-generated>//     This code was generated by a tool.////     Changes to this file may cause incorrect behavior and will be lost if//     the code is regenerated.// </auto-generated>//------------------------------------------------------------------------------
public class PatientDetails  extends System.Web.UI.Page 
{

    public Patientm pat;
    public String DialLinkHmPhone = "";
    public String DialLinkWkPhone = "";
    public String DialLinkWirelessPhone = "";
    public String EmailString = "";
    public String PatName = "";
    private long PatNum = 0;
    private long CustomerNum = 0;
    private Util util = new Util();
    protected void page_Load(Object sender, EventArgs e) throws Exception {
        try
        {
            CustomerNum = util.GetCustomerNum(Message);
            if (CustomerNum == 0)
            {
                return ;
            }
             
            if (Request["PatNum"] != null)
            {
                RefSupport refVar___0 = new RefSupport();
                Int64.TryParse(Request["PatNum"].ToString().Trim(), refVar___0);
                PatNum = refVar___0.getValue();
            }
             
            RefSupport refVar___1 = new RefSupport();
            Int64.TryParse(Session["CustomerNum"].ToString(), refVar___1);
            CustomerNum = refVar___1.getValue();
            pat = Patientms.getOne(CustomerNum,PatNum);
            pat.Age = Patientms.dateToAge(pat.Birthdate);
            PatName = util.getPatientName(pat);
            String DialString1 = "&nbsp;&nbsp;&nbsp;<a href=\"tel:";
            String DialString2 = "\" class=\"style2\">dial</a>";
            if (!String.IsNullOrEmpty(pat.HmPhone))
            {
                DialLinkHmPhone = DialString1 + pat.HmPhone + DialString2;
            }
             
            if (!String.IsNullOrEmpty(pat.WkPhone))
            {
                DialLinkWkPhone = DialString1 + pat.WkPhone + DialString2;
            }
             
            if (!String.IsNullOrEmpty(pat.WirelessPhone))
            {
                DialLinkWirelessPhone = DialString1 + pat.WirelessPhone + DialString2;
            }
             
            if (!String.IsNullOrEmpty(pat.Email))
            {
                EmailString = "<a href=\"mailto:" + pat.Email + "\" class=\"style2\">" + pat.Email + "</a>";
            }
             
            List<Appointmentm> appointmentmList = Appointmentms.getAppointmentms(CustomerNum,PatNum);
            appointmentmList = appointmentmList.Where(/* [UNSUPPORTED] to translate lambda expressions we need an explicit delegate type, try adding a cast "(a) => {
                return a.AptStatus != ApptStatus.UnschedList && a.AptStatus != ApptStatus.Planned;
            }" */).ToList();
            //exclude unscheduled and planned appointments.
            Repeater1.DataSource = appointmentmList;
            Repeater1.DataBind();
            List<RxPatm> rxList = RxPatms.getRxPatms(CustomerNum,PatNum);
            Repeater2.DataSource = rxList;
            Repeater2.DataBind();
            List<Allergym> allergyList = Allergyms.getAllergyms(CustomerNum,PatNum);
            Repeater3.DataSource = allergyList;
            Repeater3.DataBind();
        }
        catch (Exception ex)
        {
            LabelError.Text = Util.ErrorMessage;
            Logger.logError(ex);
        }
    
    }

    private boolean setCustomerNum() throws Exception {
        Message.Text = "";
        if (Session["CustomerNum"] == null)
        {
            return false;
        }
         
        RefSupport refVar___2 = new RefSupport();
        Int64.TryParse(Session["CustomerNum"].ToString(), refVar___2);
        CustomerNum = refVar___2.getValue();
        if (CustomerNum != 0)
        {
            Message.Text = "LoggedIn";
        }
         
        return true;
    }

    /**
    * Message control.
    * 
    * Auto-generated field.
    * To modify move field declaration from designer file to code-behind file.
    */
    protected System.Web.UI.WebControls.Literal Message = new System.Web.UI.WebControls.Literal();
    /**
    * LabelError control.
    * 
    * Auto-generated field.
    * To modify move field declaration from designer file to code-behind file.
    */
    protected System.Web.UI.WebControls.Label LabelError = new System.Web.UI.WebControls.Label();
    /**
    * Repeater1 control.
    * 
    * Auto-generated field.
    * To modify move field declaration from designer file to code-behind file.
    */
    protected System.Web.UI.WebControls.Repeater Repeater1 = new System.Web.UI.WebControls.Repeater();
    /**
    * Repeater3 control.
    * 
    * Auto-generated field.
    * To modify move field declaration from designer file to code-behind file.
    */
    protected System.Web.UI.WebControls.Repeater Repeater3 = new System.Web.UI.WebControls.Repeater();
    /**
    * Repeater2 control.
    * 
    * Auto-generated field.
    * To modify move field declaration from designer file to code-behind file.
    */
    protected System.Web.UI.WebControls.Repeater Repeater2 = new System.Web.UI.WebControls.Repeater();
}


