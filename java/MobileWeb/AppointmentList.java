//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:40 PM
//

package MobileWeb;

import CS2JNet.JavaSupport.language.RefSupport;
import MobileWeb.Util;
import OpenDentBusiness.ApptStatus;
import OpenDentBusiness.Mobile.Appointmentm;
import OpenDentBusiness.Mobile.Appointmentms;
import OpenDentBusiness.Mobile.Providerm;
import OpenDentBusiness.Mobile.Providerms;
import WebForms.Logger;


//------------------------------------------------------------------------------// <auto-generated>//     This code was generated by a tool.////     Changes to this file may cause incorrect behavior and will be lost if//     the code is regenerated.// </auto-generated>//------------------------------------------------------------------------------
public class AppointmentList  extends System.Web.UI.Page 
{

    private long CustomerNum = 0;
    private Util util = new Util();
    public int PreviousDateDay = 0;
    public int PreviousDateMonth = 0;
    public int PreviousDateYear = 0;
    public int NextDateDay = 0;
    public int NextDateMonth = 0;
    public int NextDateYear = 0;
    protected void page_Load(Object sender, EventArgs e) throws Exception {
        try
        {
            CustomerNum = util.GetCustomerNum(Message);
            if (CustomerNum == 0)
            {
                return ;
            }
             
            int Year = 0;
            int Month = 0;
            int Day = 0;
            DateTime AppointmentDate = DateTime.MinValue;
            if (Request["year"] != null && Request["month"] != null && Request["day"] != null)
            {
                RefSupport<int> refVar___0 = new RefSupport<int>();
                Int32.TryParse(Request["year"].ToString().Trim(), refVar___0);
                Year = refVar___0.getValue();
                RefSupport<int> refVar___1 = new RefSupport<int>();
                Int32.TryParse(Request["month"].ToString().Trim(), refVar___1);
                Month = refVar___1.getValue();
                RefSupport<int> refVar___2 = new RefSupport<int>();
                Int32.TryParse(Request["day"].ToString().Trim(), refVar___2);
                Day = refVar___2.getValue();
                AppointmentDate = new DateTime(Year, Month, Day);
            }
            else
            {
                //dennis set cookies here this would be read by javascript on the client browser.
                HttpCookie DemoDateCookieY = new HttpCookie("DemoDateCookieY");
                HttpCookie DemoDateCookieM = new HttpCookie("DemoDateCookieM");
                HttpCookie DemoDateCookieD = new HttpCookie("DemoDateCookieD");
                if (CustomerNum == util.getDemoDentalOfficeID())
                {
                    AppointmentDate = util.getDemoTodayDate();
                    //for demo only. The date is set to a preset date in webconfig.
                    DemoDateCookieY.Value = AppointmentDate.Year + "";
                    DemoDateCookieM.Value = AppointmentDate.Month + "";
                    DemoDateCookieD.Value = AppointmentDate.Day + "";
                }
                else
                {
                    DemoDateCookieY.Value = "";
                    // these are explicitely set to empty, because the javascript on the browser is picking values from previously set cookies
                    DemoDateCookieM.Value = "";
                    DemoDateCookieD.Value = "";
                    AppointmentDate = DateTime.Today;
                } 
                Response.Cookies.Add(DemoDateCookieY);
                // if expiry is not specified the cookie lasts till the end of session
                Response.Cookies.Add(DemoDateCookieM);
                Response.Cookies.Add(DemoDateCookieD);
            } 
            DayLabel.Text = AppointmentDate.ToString("ddd") + ", " + AppointmentDate.ToString("MMM") + AppointmentDate.ToString("dd");
            DateTime PreviousDate = AppointmentDate.AddDays(-1);
            PreviousDateDay = PreviousDate.Day;
            PreviousDateMonth = PreviousDate.Month;
            PreviousDateYear = PreviousDate.Year;
            DateTime NextDate = AppointmentDate.AddDays(1);
            NextDateDay = NextDate.Day;
            NextDateMonth = NextDate.Month;
            NextDateYear = NextDate.Year;
            long ProvNum = 0;
            if (Request["ProvNum"] == null)
            {
                if (Session["ProvNum"] != null)
                {
                    RefSupport<long> refVar___3 = new RefSupport<long>();
                    Int64.TryParse(Session["ProvNum"].ToString(), refVar___3);
                    ProvNum = refVar___3.getValue();
                }
                 
            }
            else
            {
                RefSupport<long> refVar___4 = new RefSupport<long>();
                Int64.TryParse(Request["ProvNum"].ToString().Trim(), refVar___4);
                ProvNum = refVar___4.getValue();
                Session["ProvNum"] = ProvNum.ToString();
            } 
            List<Appointmentm> appointmentmList = new List<Appointmentm>();
            if (ProvNum == 0)
            {
                appointmentmList = Appointmentms.getAppointmentms(CustomerNum,AppointmentDate,AppointmentDate);
            }
            else
            {
                appointmentmList = Appointmentms.getAppointmentms(CustomerNum,ProvNum,AppointmentDate,AppointmentDate);
            } 
            appointmentmList = appointmentmList.Where(/* [UNSUPPORTED] to translate lambda expressions we need an explicit delegate type, try adding a cast "(a) => {
                return a.AptStatus != ApptStatus.UnschedList && a.AptStatus != ApptStatus.Planned;
            }" */).ToList();
            //exclude unscheduled and planned appointments.
            Repeater1.DataSource = appointmentmList;
            Repeater1.DataBind();
        }
        catch (Exception ex)
        {
            LabelError.Text = Util.ErrorMessage;
            Logger.logError(ex);
        }
    
    }

    public String getPatientName(long PatNum) throws Exception {
        return util.getPatientName(PatNum,CustomerNum);
    }

    public String getProviderColor(Appointmentm ap) throws Exception {
        String HexColor = "#FFFFFF";
        try
        {
            Providerm pv;
            if (ap.AptStatus == ApptStatus.Complete)
            {
                return "#808080";
            }
             
            //gray
            if (ap.IsHygiene)
            {
                if (ap.ProvHyg == 0)
                {
                    return HexColor;
                }
                 
                //no hygenist
                pv = Providerms.getOne(CustomerNum,ap.ProvHyg);
            }
            else
            {
                pv = Providerms.getOne(CustomerNum,ap.ProvNum);
            } 
            if (pv != null)
            {
                HexColor = ColorTranslator.ToHtml(pv.ProvColor);
            }
             
            return HexColor;
        }
        catch (Exception ex)
        {
            Logger.logError("CustomerNum=" + CustomerNum + " ap.ProvNum=" + ap.ProvNum,ex);
            return HexColor;
        }
    
    }

    public String getApptBrokenStatus(Appointmentm ap) throws Exception {
        if (ap.AptStatus == ApptStatus.Broken)
        {
            return "<div style=\"font-style: italic;color: #FF0000;font-weight:normal\">Broken</div>";
        }
         
        return "";
    }

    /**
    * Message control.
    * 
    * Auto-generated field.
    * To modify move field declaration from designer file to code-behind file.
    */
    protected System.Web.UI.WebControls.Literal Message = new System.Web.UI.WebControls.Literal();
    /**
    * LabelError control.
    * 
    * Auto-generated field.
    * To modify move field declaration from designer file to code-behind file.
    */
    protected System.Web.UI.WebControls.Label LabelError = new System.Web.UI.WebControls.Label();
    /**
    * DayLabel control.
    * 
    * Auto-generated field.
    * To modify move field declaration from designer file to code-behind file.
    */
    protected System.Web.UI.WebControls.Label DayLabel = new System.Web.UI.WebControls.Label();
    /**
    * Repeater1 control.
    * 
    * Auto-generated field.
    * To modify move field declaration from designer file to code-behind file.
    */
    protected System.Web.UI.WebControls.Repeater Repeater1 = new System.Web.UI.WebControls.Repeater();
}


