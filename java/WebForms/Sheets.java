//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:44 PM
//

package WebForms;

import CS2JNet.JavaSupport.language.RefSupport;
import CS2JNet.System.StringSupport;
import OpenDentBusiness.SheetFieldType;
import WebForms.Logger;
import WebForms.ODWebServiceEntities;
import WebForms.webforms_sheet;
import WebForms.webforms_sheetfield;
import WebForms.webforms_sheetfielddef;


/**
* Dennis Mathew: For using ADO.NET Entity Data Model/LINQ with Mysql/Visual Studio 2010, download and install Connector/Net from http://dev.mysql.com/downloads/connector/net/
* Connector/Net is a ADO.NET driver for MySQL.
* The web server which hosts the webservice will also need this install.
* The integration with Visual Studio can be flakey. So a few cycles of install/uninstall/restart may be needed. I've also tried the non-install options of adding dlls but they don't seem to work in the few attempts that I made.
* 
* Displays the Open Dental sheets on a web page.
*/
//------------------------------------------------------------------------------// <auto-generated>//     This code was generated by a tool.////     Changes to this file may cause incorrect behavior and will be lost if//     the code is regenerated.// </auto-generated>//------------------------------------------------------------------------------
public class Sheets  extends System.Web.UI.Page 
{

    private long DentalOfficeID = 0;
    private long WebSheetDefID = 0;
    private Hashtable FormValuesHashTable = new Hashtable();
    private Hashtable hiddenChkBoxGroupHashTable = new Hashtable();
    private List<long> dateTodayList = new List<long>();
    private List<WControl> listwc = new List<WControl>();
    private boolean doTabOrder = true;
    private String ReturnURL = "";
    //url the web forms will return to when all forms are complete
    private String ButtonText = "";
    protected void page_Load(Object sender, EventArgs e) throws Exception {
        try
        {
            if (Request["DentalOfficeID"] != null)
            {
                RefSupport refVar___0 = new RefSupport();
                Int64.TryParse(Request["DentalOfficeID"].ToString().Trim(), refVar___0);
                DentalOfficeID = refVar___0.getValue();
            }
             
            if (Request["WebSheetDefID"] != null)
            {
                RefSupport refVar___1 = new RefSupport();
                Int64.TryParse(Request["WebSheetDefID"].ToString().Trim(), refVar___1);
                WebSheetDefID = refVar___1.getValue();
            }
             
            if (Request["ReturnURL"] != null)
            {
                ReturnURL = Request["ReturnURL"].ToString().Trim();
            }
             
            if (Request["ButtonText"] != null)
            {
                ButtonText = Request["ButtonText"].ToString().Trim();
                Button1.Text = ButtonText;
            }
             
            Logger.information("Page requested from IpAddress=" + HttpContext.Current.Request.UserHostAddress + " for  DentalOfficeID=" + DentalOfficeID);
            Panel2.Visible = true;
            generatePage(DentalOfficeID,WebSheetDefID);
        }
        catch (Exception ex)
        {
            Logger.logError("IpAddress=" + HttpContext.Current.Request.UserHostAddress + " DentalOfficeID=" + DentalOfficeID + " WebSheetDefID=" + WebSheetDefID,ex);
            DisplayMessage("Error: Your form is not available. Please contact your Dental Office");
        }
    
    }

    private void generatePage(long DentalOfficeID, long WebSheetDefID) throws Exception {
        try
        {
            int FormXOffset = 37;
            int FormYOffset = 26;
            int ImageXOffset = 0;
            int ImageYOffset = 0;
            int ImageZIndex = 1;
            int DrawingZIndex = 2;
            int ElementZIndex = 3;
            int SubmitButtonWidth = 70;
            int SubmitButtonYoffset = 10;
            int RadioButtonXOffset = -4;
            int RadioButtonYOffset = -5;
            int RadioButtonXOffsetIE = 0;
            int RadioButtonXOffsetFirefox = -2;
            float CheckBoxXOffset = -4.0f;
            float CheckBoxYOffset = -4.0f;
            int SignatureFontSize = 16;
            String SignatureFont = "sans-serif";
            float heightfactor = 1.2f;
            System.Web.HttpBrowserCapabilities browser = Request.Browser;
            if (StringSupport.equals(browser.Browser, "Firefox"))
            {
                RadioButtonXOffset += RadioButtonXOffsetFirefox;
            }
             
            if (StringSupport.equals(browser.Browser, "IE"))
            {
                RadioButtonXOffset += RadioButtonXOffsetIE;
            }
             
            ODWebServiceEntities db = new ODWebServiceEntities();
            int ColorBorder = db.getwebforms_preference().Where(/* [UNSUPPORTED] to translate lambda expressions we need an explicit delegate type, try adding a cast "(pref) => {
                return pref.DentalOfficeID == DentalOfficeID;
            }" */).First().ColorBorder;
            bodytag.Attributes.Add("bgcolor", ColorTranslator.ToHtml(Color.FromArgb(ColorBorder)));
            /* [UNSUPPORTED] 'var' as type is unsupported "var" */ SheetDefObj = db.getwebforms_sheetdef().Where(/* [UNSUPPORTED] to translate lambda expressions we need an explicit delegate type, try adding a cast "(sd) => {
                return sd.WebSheetDefID == WebSheetDefID && sd.webforms_preference.DentalOfficeID == DentalOfficeID;
            }" */).First();
            int SheetDefWidth = SheetDefObj.Width;
            int SheetDefHeight = SheetDefObj.Height;
            boolean SheetDefIsLandscape = SheetDefObj.IsLandscape == (sbyte)1 ? true : false;
            if (SheetDefIsLandscape)
            {
                SheetDefWidth = SheetDefObj.Height;
                SheetDefHeight = SheetDefObj.Width;
            }
             
            form1.Style["position"] = "absolute";
            form1.Style["top"] = FormXOffset + "px";
            form1.Style["left"] = FormYOffset + "px";
            form1.Style["width"] = SheetDefWidth + "px";
            form1.Style["height"] = SheetDefHeight + "px";
            form1.Style["background-color"] = "white";
            /* [UNSUPPORTED] 'var' as type is unsupported "var" */ SheetFieldDefList = (db.getwebforms_sheetfielddef().Where(/* [UNSUPPORTED] to translate lambda expressions we need an explicit delegate type, try adding a cast "(sfd) => {
                return sfd.webforms_sheetdef.WebSheetDefID == WebSheetDefID && sfd.webforms_sheetdef.webforms_preference.DentalOfficeID == DentalOfficeID;
            }" */)).ToList();
            for (int j = 0;j < SheetFieldDefList.Count();j++)
            {
                String FieldName = SheetFieldDefList.ElementAt(j).FieldName;
                String FieldValue = SheetFieldDefList.ElementAt(j).FieldValue;
                SheetFieldType FieldType = (SheetFieldType)SheetFieldDefList.ElementAt(j).FieldType;
                int XPos = SheetFieldDefList.ElementAt(j).XPos;
                int YPos = SheetFieldDefList.ElementAt(j).YPos;
                int width = SheetFieldDefList.ElementAt(j).Width;
                int height = SheetFieldDefList.ElementAt(j).Height;
                float fontsize = SheetFieldDefList.ElementAt(j).FontSize;
                String fontname = SheetFieldDefList.ElementAt(j).FontName;
                //bool fontIsBold=SheetFieldDefList.ElementAt(j).FontIsBold==(sbyte)1?true:false;
                boolean fontIsBold = new boolean();
                if (SheetFieldDefList.ElementAt(j).FontIsBold == (sbyte)1)
                {
                    fontIsBold = true;
                }
                else
                {
                    fontIsBold = false;
                } 
                short TabOrder = (short)SheetFieldDefList.ElementAt(j).TabOrder;
                if (TabOrder != 0)
                {
                    doTabOrder = false;
                }
                 
                long WebSheetFieldDefID = SheetFieldDefList.ElementAt(j).WebSheetFieldDefID;
                WebControl wc = null;
                // WebControl is the parent class of all controls
                if (FieldType == SheetFieldType.InputField)
                {
                    TextBox tb = new TextBox();
                    int rowcount = (int)Math.Floor((double)height / fontsize);
                    if (rowcount > 1)
                    {
                        tb.TextMode = TextBoxMode.MultiLine;
                        tb.Rows = rowcount;
                    }
                     
                    tb.Text = FieldValue;
                    wc = tb;
                }
                 
                if (FieldType == SheetFieldType.CheckBox)
                {
                    wc = AddCheckBox(SheetFieldDefList.ElementAt(j));
                }
                 
                if (FieldType == SheetFieldType.StaticText)
                {
                    Label lb = new Label();
                    if (FieldValue.Contains("[dateToday]"))
                    {
                        dateTodayList.Add(WebSheetFieldDefID);
                    }
                     
                    // the replacing is done at the client side using javascript via a hidden variable.
                    lb.Text = FieldValue.Replace(Environment.NewLine, "<br />").Replace("\n", "<br />");
                    //it appears that the text contains only "\n" as the newline character and not Environment.NewLine (i.e "\n\r") as the line break, so the code takes into account both cases.
                    wc = lb;
                }
                 
                if (FieldType == SheetFieldType.Image || FieldType == SheetFieldType.Rectangle || FieldType == SheetFieldType.Line)
                {
                    System.Web.UI.WebControls.Image img = new System.Web.UI.WebControls.Image();
                    img.ImageUrl = ("~/Handler1.ashx?WebSheetFieldDefID=" + WebSheetFieldDefID);
                    wc = img;
                    if (width == 0 && height == 0)
                    {
                        wc = null;
                    }
                    else //Image won't be visible anyway so don't waste time trying to draw it.
                    if ((FieldType == SheetFieldType.Image || FieldType == SheetFieldType.Rectangle) && (width == 0 || height == 0))
                    {
                        wc = null;
                    }
                    else //Image with a width OR a height of 0 will cause an error.  Also, rectangles are stopped from having widths and heights of 0 within OD.
                    if (FieldType == SheetFieldType.Line)
                    {
                        //Horizontal and vertical lines may have a height or a width of zero.  To show up on a web page, the image that the line is drawn on needs to have some sort of a width or height.
                        if (width == 0)
                        {
                            width += 4;
                        }
                         
                        //Increases the width of the "canvas" that the image of the line will be drawn on.  Handler1.ashx.cs is where the actual line image itself is created.
                        if (height == 0)
                        {
                            height += 4;
                        }
                         
                    }
                       
                }
                 
                //Increases the height of the "canvas" that the image of the line will be drawn on.  Handler1.ashx.cs is where the actual line image itself is created.
                if (FieldType == SheetFieldType.SigBox)
                {
                    Panel pa = new Panel();
                    pa.BorderStyle = BorderStyle.Solid;
                    pa.BorderWidth = Unit.Pixel(1);
                    pa.HorizontalAlign = HorizontalAlign.Center;
                    Label lb = new Label();
                    lb.Style["font-family"] = SignatureFont;
                    lb.Style["font-size"] = SignatureFontSize + "px";
                    lb.Style["position"] = "relative";
                    lb.Style["top"] = (height - SignatureFontSize) / 2 + "px";
                    lb.Text = "Signature will be recorded later";
                    pa.Controls.Add(lb);
                    wc = pa;
                }
                 
                if (wc != null)
                {
                    wc.ID = "" + WebSheetFieldDefID;
                    wc.Style["position"] = "absolute";
                    wc.Style["width"] = width + "px";
                    wc.Style["height"] = height + "px";
                    wc.Style["top"] = YPos + "px";
                    wc.Style["left"] = XPos + "px";
                    wc.Style["z-index"] = "" + ElementZIndex;
                    wc.TabIndex = TabOrder;
                    if (FieldType == SheetFieldType.Image)
                    {
                        wc.Style["top"] = YPos + ImageYOffset + "px";
                        wc.Style["left"] = XPos + ImageXOffset + "px";
                        wc.Style["z-index"] = "" + ImageZIndex;
                    }
                     
                    if (FieldType == SheetFieldType.Rectangle || FieldType == SheetFieldType.Line)
                    {
                        wc.Style["z-index"] = "" + DrawingZIndex;
                    }
                     
                    if (FieldType == SheetFieldType.InputField)
                    {
                        //textboxes
                        wc.Style["font-family"] = fontname;
                        wc.Style["font-size"] = fontsize + "pt";
                        wc.Style["height"] = height / heightfactor + "px";
                        if (fontIsBold)
                        {
                            wc.Font.Bold = true;
                        }
                         
                        wc.BorderWidth = Unit.Pixel(0);
                        wc.BackColor = Color.LightYellow;
                        AddTextBoxValidator(SheetFieldDefList.ElementAt(j));
                        WControl wcobj = new WControl(XPos,YPos,wc);
                        listwc.Add(wcobj);
                    }
                     
                    if (wc.GetType() == RadioButtonList.class)
                    {
                        wc.Style["position"] = "static";
                        WControl wcobj = new WControl(XPos,YPos,wc);
                        listwc.Add(wcobj);
                    }
                     
                    if (wc.GetType() == CheckBox.class)
                    {
                        wc.Style["top"] = YPos + CheckBoxYOffset + "px";
                        wc.Style["left"] = XPos + CheckBoxXOffset + "px";
                        AddRequiredChkBoxValidator(SheetFieldDefList.ElementAt(j), CheckBoxXOffset, CheckBoxYOffset);
                        WControl wcobj = new WControl(XPos,YPos,wc);
                        listwc.Add(wcobj);
                    }
                     
                    if (FieldType == SheetFieldType.StaticText)
                    {
                        wc.Style["font-family"] = fontname;
                        wc.Style["font-size"] = fontsize + "pt";
                        if (fontIsBold)
                        {
                            wc.Font.Bold = true;
                        }
                         
                    }
                     
                    Panel1.Controls.Add(wc);
                }
                 
            }
            //for loop end here
            adjustErrorMessageForChkBoxes();
            createChkBoxValidatorsHiddenFields();
            createHiddenFieldForDateToday();
            if (doTabOrder)
            {
                assignTabOrder();
            }
             
            //position the submit button at the end of the page.
            Button1.Style["position"] = "absolute";
            Button1.Style["left"] = SheetDefWidth / 2 - (SubmitButtonWidth / 2) + "px";
            Button1.Style["top"] = SheetDefHeight + SubmitButtonYoffset + "px";
            Button1.Style["z-index"] = "" + ElementZIndex;
            Button1.Width = Unit.Pixel(SubmitButtonWidth);
            Panel3.Style["position"] = "absolute";
            Panel3.Style["top"] = FormXOffset + SheetDefHeight + SubmitButtonYoffset + "px";
        }
        catch (ApplicationException ex)
        {
            Logger.LogError("IpAddress=" + HttpContext.Current.Request.UserHostAddress + " DentalOfficeID=" + DentalOfficeID, ex);
            DisplayMessage("Error: Your form is not available. Please contact your Dental Office");
        }
    
    }

    private WebControl addCheckBox(webforms_sheetfielddef sfd) throws Exception {
        WebControl wc = null;
        CheckBox cb = new CheckBox();
        cb.ID = "" + sfd.getWebSheetFieldDefID();
        AjaxControlToolkit.MutuallyExclusiveCheckBoxExtender mecb = new AjaxControlToolkit.MutuallyExclusiveCheckBoxExtender();
        mecb.ID = cb.ID + "MutuallyExclusiveCheckBoxExtender";
        mecb.TargetControlID = cb.ID;
        mecb.Key = getChkBoxGroupName(sfd);
        Panel1.Controls.Add(mecb);
        wc = cb;
        return wc;
    }

    private String getChkBoxGroupName(webforms_sheetfielddef sfd) throws Exception {
        String FieldName = sfd.getFieldName();
        String RadioButtonValue = sfd.getRadioButtonValue();
        String RadioButtonGroup = sfd.getRadioButtonGroup();
        String ChkBoxGroupName = null;
        if (!String.IsNullOrEmpty(RadioButtonGroup) && StringSupport.equals(FieldName, "misc"))
        {
            ChkBoxGroupName = RadioButtonGroup;
        }
        else if (!String.IsNullOrEmpty(RadioButtonValue))
        {
            // cases like gender, position etc that have no value for RadioButtonGroup but have RadioButtonValue
            ChkBoxGroupName = FieldName;
        }
          
        return ChkBoxGroupName;
    }

    /**
    * A single check boxes which are 'required' have a different error message as opposed to a 'required' group of check boxes.
    * Also the position of the error message is adjusted by reassigning postions of the Textboxes related to each group
    */
    private void adjustErrorMessageForChkBoxes() throws Exception {
        IEnumerable<CustomValidator> ListCustomValidators = Panel1.Controls.<CustomValidator>OfType();
        for (Object __dummyForeachVar2 : hiddenChkBoxGroupHashTable.Keys)
        {
            String strkey = (String)__dummyForeachVar2;
            //foreach1
            String Value = (String)hiddenChkBoxGroupHashTable[strkey];
            long ControlID = 0;
            RefSupport<long> refVar___2 = new RefSupport<long>();
            Int64.TryParse(Value.Trim(), refVar___2);
            ControlID = refVar___2.getValue();
            if (ControlID == 0)
            {
                // this corresponds to a group of checkboxes. Re-positioning of  error messages  is done here. No need to change the error message itself.
                String[] ControlIdArray = Value.Split(new char[]{ ' ' });
                int MaxX = 0;
                for (Object __dummyForeachVar0 : ControlIdArray)
                {
                    //this variable will hold the position of the element that is to the extreme right.
                    String id = (String)__dummyForeachVar0;
                    //foreach2
                    /* [UNSUPPORTED] 'var' as type is unsupported "var" */ TbResult = Panel1.Controls.<TextBox>OfType().Where(/* [UNSUPPORTED] to translate lambda expressions we need an explicit delegate type, try adding a cast "(tb) => {
                        return StringSupport.equals(tb.ID, "TextBoxForCheckbox" + id);
                    }" */);
                    if (TbResult.Count() > 0)
                    {
                        String StrXpos = TbResult.ElementAt(0).Style["left"];
                        StrXpos = StrXpos.Substring(0, StrXpos.IndexOf("px")).Trim();
                        int XPos = 0;
                        RefSupport<int> refVar___3 = new RefSupport<int>();
                        Int32.TryParse(StrXpos, refVar___3);
                        XPos = refVar___3.getValue();
                        if (XPos > MaxX)
                        {
                            MaxX = XPos;
                        }
                         
                    }
                     
                }
                for (Object __dummyForeachVar1 : ControlIdArray)
                {
                    // end foreach2
                    // now assign the max value to all textboxes of that group.
                    String id = (String)__dummyForeachVar1;
                    //foreach2
                    /* [UNSUPPORTED] 'var' as type is unsupported "var" */ TbResult = Panel1.Controls.<TextBox>OfType().Where(/* [UNSUPPORTED] to translate lambda expressions we need an explicit delegate type, try adding a cast "(tb) => {
                        return StringSupport.equals(tb.ID, "TextBoxForCheckbox" + id);
                    }" */);
                    if (TbResult.Count() > 0)
                    {
                        TbResult.ElementAt(0).Style["left"] = MaxX + "px";
                    }
                     
                }
            }
            else
            {
                // end foreach2
                // this else corresponds to a single checkbox not part of a group. No re-position of the error message is done here. Only the error message is changed.
                /* [UNSUPPORTED] 'var' as type is unsupported "var" */ CvResult = ListCustomValidators.Where(/* [UNSUPPORTED] to translate lambda expressions we need an explicit delegate type, try adding a cast "(cv) => {
                    return StringSupport.equals(cv.ID, "CustomValidatorTextBoxForCheckbox" + ControlID);
                }" */);
                if (CvResult.Count() > 0)
                {
                    CvResult.ElementAt(0).ErrorMessage = "This is a required Check Box";
                }
                 
            } 
        }
    }

    // end foreach3
    /**
    * A single Hidden field is created which holds the ids of all dateTodays
    */
    private void createHiddenFieldForDateToday() throws Exception {
        HiddenField hf = new HiddenField();
        hf.ID = "dateToday";
        for (int i = 0;i < dateTodayList.Count();i++)
        {
            hf.Value += " " + dateTodayList.ElementAt(i);
        }
        Panel1.Controls.Add(hf);
    }

    private void assignTabOrder() throws Exception {
        /* [UNSUPPORTED] 'var' as type is unsupported "var" */ sortedlist = listwc.OrderBy(/* [UNSUPPORTED] to translate lambda expressions we need an explicit delegate type, try adding a cast "(wc) => {
            return wc.YPos;
        }" */).ThenBy(/* [UNSUPPORTED] to translate lambda expressions we need an explicit delegate type, try adding a cast "(wc) => {
            return wc.XPos;
        }" */).ToList();
        for (short i = 0;i < sortedlist.Count();i++)
        {
            sortedlist[i].wc.TabIndex = (short)(i + 1);
        }
    }

    private void createChkBoxValidatorsHiddenFields() throws Exception {
        try
        {
            HiddenField hfAllGroupsList = new HiddenField();
            hfAllGroupsList.ID = "hfAllGroupsList";
            for (Object __dummyForeachVar3 : hiddenChkBoxGroupHashTable.Keys)
            {
                String strkey = (String)__dummyForeachVar3;
                HiddenField hf = new HiddenField();
                hf.ID = strkey;
                hf.Value = (String)hiddenChkBoxGroupHashTable[strkey];
                Panel1.Controls.Add(hf);
                hfAllGroupsList.Value += " " + hf.ID;
            }
            hfAllGroupsList.Value = hfAllGroupsList.Value.Trim();
            Panel1.Controls.Add(hfAllGroupsList);
        }
        catch (Exception ex)
        {
            Logger.logError("IpAddress=" + HttpContext.Current.Request.UserHostAddress + " DentalOfficeID=" + DentalOfficeID + " WebSheetDefID=" + WebSheetDefID,ex);
        }
    
    }

    /**
    * A class made  just for sorting purposes - to assign tab order to the controls on a web page.
    */
    private static class WControl   
    {
        public int XPos = 0;
        public int YPos = 0;
        public WebControl wc = null;
        public WControl(int XPos, int YPos, WebControl wc) throws Exception {
            this.XPos = XPos;
            this.YPos = YPos;
            this.wc = wc;
        }
    
    }

    private void addTextBoxValidator(webforms_sheetfielddef sfd) throws Exception {
        String FieldName = sfd.getFieldName();
        String ErrorMessage = "";
        if (StringSupport.equals(FieldName.ToLower(), "fname") || StringSupport.equals(FieldName.ToLower(), "firstname"))
        {
            ErrorMessage = "First Name is a required field";
        }
        else if (StringSupport.equals(FieldName.ToLower(), "lname") || StringSupport.equals(FieldName.ToLower(), "lastname"))
        {
            ErrorMessage = "Last Name is a required field";
        }
        else if (StringSupport.equals(FieldName.ToLower(), "birthdate") || StringSupport.equals(FieldName.ToLower(), "bdate"))
        {
            ErrorMessage = "Birthdate is a required field";
        }
        else if (sfd.getIsRequired() == (sbyte)1)
        {
            ErrorMessage = "This is a required field";
        }
        else
        {
            return ;
        }    
        // required field validator
        RequiredFieldValidator rv = new RequiredFieldValidator();
        rv.ControlToValidate = "" + sfd.getWebSheetFieldDefID();
        rv.ErrorMessage = ErrorMessage;
        rv.Display = ValidatorDisplay.None;
        rv.SetFocusOnError = true;
        rv.ID = "RequiredFieldValidator" + rv.ControlToValidate;
        Panel1.Controls.Add(rv);
        //callout extender
        AjaxControlToolkit.ValidatorCalloutExtender vc = new AjaxControlToolkit.ValidatorCalloutExtender();
        vc.TargetControlID = rv.ID;
        vc.ID = "ValidatorCalloutExtender" + rv.ID;
        Panel1.Controls.Add(vc);
        if (StringSupport.equals(FieldName.ToLower(), "birthdate") || StringSupport.equals(FieldName.ToLower(), "bdate"))
        {
            //compare validator
            CompareValidator cv = new CompareValidator();
            cv.ControlToValidate = "" + sfd.getWebSheetFieldDefID();
            cv.ErrorMessage = "Invalid Date of Birth.";
            cv.Display = ValidatorDisplay.None;
            cv.Type = ValidationDataType.Date;
            cv.Operator = ValidationCompareOperator.DataTypeCheck;
            cv.SetFocusOnError = true;
            cv.ID = "CompareValidator" + cv.ControlToValidate;
            //callout extender
            AjaxControlToolkit.ValidatorCalloutExtender vc1 = new AjaxControlToolkit.ValidatorCalloutExtender();
            vc1.TargetControlID = cv.ID;
            vc1.ID = "ValidatorCalloutExtender" + cv.ID;
            Panel1.Controls.Add(cv);
            Panel1.Controls.Add(vc1);
        }
         
    }

    private void addRequiredChkBoxValidator(webforms_sheetfielddef sfd, float CheckBoxXOffset, float CheckBoxYOffset) throws Exception {
        if (sfd.getIsRequired() != (sbyte)1)
        {
            return ;
        }
         
        int XPosErrorMessageOffset = 2;
        int XPos = sfd.getXPos();
        int YPos = sfd.getYPos();
        String ErrorMessage = "This is a required section. Please check one of the Check Boxes";
        //add dummy textbox to get around the limitation of checkboxes not having validators and call outs.
        TextBox tb = new TextBox();
        tb.Rows = 1;
        tb.Text = ".";
        // there has to be some character here the least visible is the period.
        tb.MaxLength = 1;
        tb.Width = Unit.Pixel(1);
        tb.ID = "TextBoxForCheckbox" + sfd.getWebSheetFieldDefID();
        tb.Style["position"] = "absolute";
        tb.Style["top"] = YPos + CheckBoxYOffset + "px";
        tb.Style["left"] = XPos + CheckBoxXOffset + XPosErrorMessageOffset + sfd.getWidth() + "px";
        tb.Style["z-index"] = "-2";
        tb.ReadOnly = true;
        tb.BorderWidth = Unit.Pixel(0);
        Panel1.Controls.Add(tb);
        CustomValidator cv = new CustomValidator();
        cv.ControlToValidate = tb.ID;
        cv.ErrorMessage = ErrorMessage;
        cv.Display = ValidatorDisplay.None;
        cv.SetFocusOnError = true;
        cv.ID = "CustomValidator" + cv.ControlToValidate;
        cv.ClientValidationFunction = "CheckCheckBoxes";
        Panel1.Controls.Add(cv);
        //callout extender
        AjaxControlToolkit.ValidatorCalloutExtender vc = new AjaxControlToolkit.ValidatorCalloutExtender();
        vc.TargetControlID = cv.ID;
        vc.ID = "ValidatorCalloutExtender" + cv.ID;
        Panel1.Controls.Add(vc);
        addChkBoxIdsToHashTable(sfd);
    }

    /**
    * All checkboxes that require validation are stored in the format:
    * key=hiddenChkBoxGroup+(ChkBoxGroupName) and value= "chkbxid1 chkbxid1 chkbxid1"
    */
    private void addChkBoxIdsToHashTable(webforms_sheetfielddef sfd) throws Exception {
        String ChkBoxGroupName = getChkBoxGroupName(sfd);
        String Key = "hiddenChkBoxGroup" + ChkBoxGroupName;
        String Value = "" + sfd.getWebSheetFieldDefID();
        if (hiddenChkBoxGroupHashTable.ContainsKey(Key))
        {
            hiddenChkBoxGroupHashTable[Key] += " " + Value;
        }
        else
        {
            hiddenChkBoxGroupHashTable.Add(Key, Value);
        } 
    }

    private void loopThroughControls(Page p) throws Exception {
        try
        {
            for (Object __dummyForeachVar4 : p.Controls)
            {
                Control c = (Control)__dummyForeachVar4;
                if (c.HasControls())
                {
                    extractValue(c);
                    findControls(c);
                }
                else
                {
                    extractValue(c);
                } 
            }
        }
        catch (Exception ex)
        {
            Logger.logError("IpAddress=" + HttpContext.Current.Request.UserHostAddress + " DentalOfficeID=" + DentalOfficeID,ex);
        }
    
    }

    /**
    * This is a recursive function which searches through nested controls on a  webpage and stores the values in FormValuesHashTable
    */
    private void findControls(Control c) throws Exception {
        try
        {
            for (Object __dummyForeachVar5 : c.Controls)
            {
                Control ctl = (Control)__dummyForeachVar5;
                if (ctl.HasControls())
                {
                    extractValue(ctl);
                    findControls(ctl);
                }
                else
                {
                    extractValue(ctl);
                } 
            }
        }
        catch (Exception ex)
        {
            Logger.logError("IpAddress=" + HttpContext.Current.Request.UserHostAddress + " DentalOfficeID=" + DentalOfficeID,ex);
        }
    
    }

    /**
    * Fill the FormValuesHashTable here.
    */
    private void extractValue(Control c) throws Exception {
        try
        {
            if (c.GetType() == TextBox.class)
            {
                TextBox tbox = ((TextBox)c);
                if (!StringSupport.equals(tbox.Text.Trim(), ""))
                {
                    String FieldName = tbox.ID;
                    char[] charArr = tbox.Text.Trim().ToCharArray();
                    StringBuilder sb = new StringBuilder();
                    for (int i = 0;i < charArr.Length;i++)
                    {
                        if (XmlConvert.IsXmlChar(charArr[i]))
                        {
                            sb.Append(charArr[i]);
                        }
                         
                    }
                    FormValuesHashTable.Add(FieldName, sb.ToString());
                }
                 
            }
             
            //FormValuesHashTable.Add(FieldName,tbox.Text.Trim());
            if (c.GetType() == RadioButtonList.class)
            {
                RadioButtonList rbl = ((RadioButtonList)c);
                String FieldName = rbl.ID;
                if (rbl.SelectedIndex != -1)
                {
                    FormValuesHashTable.Add(FieldName, rbl.SelectedValue);
                }
                 
            }
             
            if (c.GetType() == CheckBox.class)
            {
                CheckBox cbox = ((CheckBox)c);
                String FieldName = cbox.ID;
                if (cbox.Checked == true)
                {
                    FormValuesHashTable.Add(FieldName, "X");
                }
                 
            }
             
            if (c.GetType() == HiddenField.class)
            {
                HiddenField hf = ((HiddenField)c);
                String FieldName = hf.ID;
                if (!StringSupport.equals(hf.Value.Trim(), ""))
                {
                    FormValuesHashTable.Add(FieldName, hf.Value.Trim());
                }
                 
            }
             
        }
        catch (Exception ex)
        {
            Logger.Information(ex.Message.ToString() + " IpAddress=" + HttpContext.Current.Request.UserHostAddress + " DentalOfficeID=" + DentalOfficeID);
        }
    
    }

    private void saveFieldValuesInDB(long DentalOfficeID, long WebSheetDefID) throws Exception {
        try
        {
            Logger.information("In SaveFieldValuesInDB" + " IpAddress=" + HttpContext.Current.Request.UserHostAddress + " DentalOfficeID=" + DentalOfficeID);
            ODWebServiceEntities db = new ODWebServiceEntities();
            /* [UNSUPPORTED] 'var' as type is unsupported "var" */ SheetDefObj = db.getwebforms_sheetdef().Where(/* [UNSUPPORTED] to translate lambda expressions we need an explicit delegate type, try adding a cast "(sd) => {
                return sd.WebSheetDefID == WebSheetDefID && sd.webforms_preference.DentalOfficeID == DentalOfficeID;
            }" */).First();
            webforms_sheet NewSheetObj = new webforms_sheet();
            NewSheetObj.setDateTimeSheet(DateTime.Now);
            NewSheetObj.setHeight(SheetDefObj.Height);
            NewSheetObj.setWidth(SheetDefObj.Width);
            NewSheetObj.setFontName(SheetDefObj.FontName);
            NewSheetObj.setFontSize(SheetDefObj.FontSize);
            NewSheetObj.setSheetType(SheetDefObj.SheetType);
            NewSheetObj.setDescription(SheetDefObj.Description);
            NewSheetObj.setIsLandscape(SheetDefObj.IsLandscape);
            SheetDefObj.webforms_sheetfielddef.Load();
            /* [UNSUPPORTED] 'var' as type is unsupported "var" */ SheetFieldDefResult = SheetDefObj.webforms_sheetfielddef;
            for (int i = 0;i < SheetFieldDefResult.Count();i++)
            {
                //copy sheetfielddef values to sheetfield.The FieldValue, if any is overwritten from the hash table.
                webforms_sheetfield NewSheetfieldObj = new webforms_sheetfield();
                /* [UNSUPPORTED] 'var' as type is unsupported "var" */ SheetFieldDefObj = SheetFieldDefResult.ElementAt(i);
                NewSheetfieldObj.setFieldName(SheetFieldDefObj.FieldName);
                NewSheetfieldObj.setFieldType(SheetFieldDefObj.FieldType);
                NewSheetfieldObj.setFontIsBold(SheetFieldDefObj.FontIsBold);
                NewSheetfieldObj.setFontName(SheetFieldDefObj.FontName);
                NewSheetfieldObj.setFontSize(SheetFieldDefObj.FontSize);
                NewSheetfieldObj.setHeight(SheetFieldDefObj.Height);
                NewSheetfieldObj.setWidth(SheetFieldDefObj.Width);
                NewSheetfieldObj.setXPos(SheetFieldDefObj.XPos);
                NewSheetfieldObj.setYPos(SheetFieldDefObj.YPos);
                NewSheetfieldObj.setIsRequired(SheetFieldDefObj.IsRequired);
                NewSheetfieldObj.setRadioButtonGroup(SheetFieldDefObj.RadioButtonGroup);
                NewSheetfieldObj.setRadioButtonValue(SheetFieldDefObj.RadioButtonValue);
                NewSheetfieldObj.setGrowthBehavior(SheetFieldDefObj.GrowthBehavior);
                NewSheetfieldObj.setTabOrder(SheetFieldDefObj.TabOrder);
                NewSheetfieldObj.setFieldValue(SheetFieldDefObj.FieldValue);
                long WebSheetFieldDefID = SheetFieldDefObj.WebSheetFieldDefID;
                if (FormValuesHashTable.ContainsKey(WebSheetFieldDefID + ""))
                {
                    NewSheetfieldObj.setFieldValue(FormValuesHashTable[WebSheetFieldDefID + ""].ToString());
                }
                 
                String FieldValue = NewSheetfieldObj.getFieldValue();
                String FieldName = NewSheetfieldObj.getFieldName();
                String CultureName = db.getwebforms_preference().Where(/* [UNSUPPORTED] to translate lambda expressions we need an explicit delegate type, try adding a cast "(pref) => {
                    return pref.DentalOfficeID == DentalOfficeID;
                }" */).First().CultureName;
                // culture of the opendental installation
                if (String.IsNullOrEmpty(CultureName))
                {
                    CultureName = "en-US";
                }
                 
                if (FieldValue.Contains("[dateToday]"))
                {
                    FieldValue = FieldValue.Replace("[dateToday]", extractBrowserDate().ToString("d", new CultureInfo(CultureName, false)));
                    Logger.information("FieldName=" + FieldName + " FieldValue=" + FieldValue);
                    NewSheetfieldObj.setFieldValue(FieldValue);
                }
                 
                if (StringSupport.equals(FieldName.ToLower(), "birthdate") || StringSupport.equals(FieldName.ToLower(), "bdate"))
                {
                    Logger.information("FieldName=" + FieldName + " FieldValue=" + FieldValue);
                    DateTime birthdate = DateTime.Parse(FieldValue, System.Threading.Thread.CurrentThread.CurrentCulture);
                    //use the browsers culture to get correct date.
                    FieldValue = birthdate.ToString("d", new CultureInfo(CultureName, false));
                    //now convert the birthdate into a string using the culture of the corresponding opendental installation.
                    NewSheetfieldObj.setFieldValue(FieldValue);
                }
                 
                NewSheetObj.getwebforms_sheetfield().Add(NewSheetfieldObj);
            }
            /* [UNSUPPORTED] 'var' as type is unsupported "var" */ PrefObj = db.getwebforms_preference().Where(/* [UNSUPPORTED] to translate lambda expressions we need an explicit delegate type, try adding a cast "(wp) => {
                return wp.DentalOfficeID == DentalOfficeID;
            }" */);
            if (PrefObj.Count() > 0)
            {
                PrefObj.First().webforms_sheet.Add(NewSheetObj);
                db.SaveChanges();
                DisplayMessage("Your details have been successfully submitted");
                Logger.information("Form values saved from IpAddress=" + HttpContext.Current.Request.UserHostAddress + " DentalOfficeID=" + DentalOfficeID);
            }
             
        }
        catch (Exception ex)
        {
            Logger.logError("IpAddress=" + HttpContext.Current.Request.UserHostAddress + " DentalOfficeID=" + DentalOfficeID + " WebSheetDefID=" + WebSheetDefID,ex);
            Panel1.Visible = false;
            DisplayMessage("There has been a problem submitting your details. <br /> We apologize for the inconvenience.");
        }
    
    }

    /**
    * The browser date is extracted via cookies set by the browser
    */
    private DateTime extractBrowserDate() throws Exception {
        DateTime BrowserDateToday = DateTime.Today;
        try
        {
            if (Request.Cookies["DateCookieY"] != null && Request.Cookies["DateCookieM"] != null && Request.Cookies["DateCookieD"] != null)
            {
                int y = 0;
                int m = 0;
                int d = 0;
                RefSupport<int> refVar___4 = new RefSupport<int>();
                int.TryParse(Request.Cookies["DateCookieY"].Value, refVar___4);
                y = refVar___4.getValue();
                RefSupport<int> refVar___5 = new RefSupport<int>();
                int.TryParse(Request.Cookies["DateCookieM"].Value, refVar___5);
                m = refVar___5.getValue();
                RefSupport<int> refVar___6 = new RefSupport<int>();
                int.TryParse(Request.Cookies["DateCookieD"].Value, refVar___6);
                d = refVar___6.getValue();
                BrowserDateToday = new DateTime(y, m, d);
            }
             
        }
        catch (Exception ex)
        {
            //default to todays date
            Logger.logError("IpAddress=" + HttpContext.Current.Request.UserHostAddress + " DentalOfficeID=" + DentalOfficeID,ex);
        }

        return BrowserDateToday;
    }

    private void displayMessage(String Message) throws Exception {
        LabelSubmitMessage.Text = Message;
        Panel1.Visible = false;
        // the form is reduced to size zero and the Panel2 is opened up. This is done because even when panels/forms are invisible only their controls are invisible. The pane is still shown on the web page
        form1.Style["width"] = "0px";
        form1.Style["height"] = "0px";
        Panel2.Width = Unit.Pixel(680);
        Panel2.Height = Unit.Pixel(300);
        Panel2.Visible = true;
    }

    protected void button1_Click(Object sender, EventArgs e) throws Exception {
        loopThroughControls(this.Page);
        // Fills FormValuesHashTable here
        saveFieldValuesInDB(DentalOfficeID,WebSheetDefID);
        if (ReturnURL != null && !StringSupport.equals(ReturnURL, ""))
        {
            //user has added a return url (there may or may not be NextFormIDs added to the URL to loop through before navigating to ReturnURL)
            buildURL_Redirect();
        }
         
    }

    ///<summary>Used to rebuild the url for the next form in the query string sequence. Example URL for 4 forms: https://opendentalsoft.com/WebForms/Sheets.aspx?DentalOfficeID=8526&WebSheetDefID=4321&ButtonText=Next&NextFormID=4322&NextFormID=4323&NextFormID=4324&ReturnURL=http://www.afiniadental.com/ </summary>
    private void buildURL_Redirect() throws Exception {
        if (Request["NextFormID"] == null)
        {
            //if there was a ReturnURL parameter, but no NextFormIDs, head back to homepage
            Response.Redirect(ReturnURL);
            return ;
        }
         
        String[] nextFormIDs = Request.QueryString.GetValues("NextFormID");
        //build new Base URL
        String newURL = "https://opendentalsoft.com/WebForms/Sheets.aspx?DentalOfficeID=" + DentalOfficeID + "&WebSheetDefID=" + nextFormIDs[0] + "&ButtonText=";
        if (StringSupport.equals(ButtonText, ""))
        {
            //There was no ButtonText parameter or it was not set, default to 'Submit'
            newURL += "Submit";
        }
        else
        {
            newURL += ButtonText;
        } 
        for (int i = 1;i < nextFormIDs.Length;i++)
        {
            //position 0 in the array is now the WebSheetDefID, start at position 1
            newURL += "&NextFormID=" + nextFormIDs[i];
        }
        newURL += "&ReturnURL=" + ReturnURL;
        Response.Redirect(newURL);
    }

    /**
    * bodytag control.
    * 
    * Auto-generated field.
    * To modify move field declaration from designer file to code-behind file.
    */
    protected System.Web.UI.HtmlControls.HtmlGenericControl bodytag = new System.Web.UI.HtmlControls.HtmlGenericControl();
    /**
    * form1 control.
    * 
    * Auto-generated field.
    * To modify move field declaration from designer file to code-behind file.
    */
    protected System.Web.UI.HtmlControls.HtmlForm form1 = new System.Web.UI.HtmlControls.HtmlForm();
    /**
    * ToolkitScriptManager1 control.
    * 
    * Auto-generated field.
    * To modify move field declaration from designer file to code-behind file.
    */
    protected AjaxControlToolkit.ToolkitScriptManager ToolkitScriptManager1 = new AjaxControlToolkit.ToolkitScriptManager();
    /**
    * Panel1 control.
    * 
    * Auto-generated field.
    * To modify move field declaration from designer file to code-behind file.
    */
    protected System.Web.UI.WebControls.Panel Panel1 = new System.Web.UI.WebControls.Panel();
    /**
    * ButtonDisableEnterKey control.
    * 
    * Auto-generated field.
    * To modify move field declaration from designer file to code-behind file.
    */
    protected System.Web.UI.WebControls.Button ButtonDisableEnterKey = new System.Web.UI.WebControls.Button();
    /**
    * Button1 control.
    * 
    * Auto-generated field.
    * To modify move field declaration from designer file to code-behind file.
    */
    protected System.Web.UI.WebControls.Button Button1 = new System.Web.UI.WebControls.Button();
    /**
    * Panel3 control.
    * 
    * Auto-generated field.
    * To modify move field declaration from designer file to code-behind file.
    */
    protected System.Web.UI.WebControls.Panel Panel3 = new System.Web.UI.WebControls.Panel();
    /**
    * Panel2 control.
    * 
    * Auto-generated field.
    * To modify move field declaration from designer file to code-behind file.
    */
    protected System.Web.UI.WebControls.Panel Panel2 = new System.Web.UI.WebControls.Panel();
    /**
    * LabelSubmitMessage control.
    * 
    * Auto-generated field.
    * To modify move field declaration from designer file to code-behind file.
    */
    protected System.Web.UI.WebControls.Label LabelSubmitMessage = new System.Web.UI.WebControls.Label();
}


