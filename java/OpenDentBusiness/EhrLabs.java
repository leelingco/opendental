//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:00:41 PM
//

package OpenDentBusiness;

import CS2JNet.System.StringSupport;
import EhrLaboratories.HL70065;
import EhrLaboratories.HL70085;
import EhrLaboratories.HL70119;
import EhrLaboratories.HL70123;
import EhrLaboratories.HL70125;
import EhrLaboratories.HL70190;
import EhrLaboratories.HL70200;
import EhrLaboratories.HL70203;
import EhrLaboratories.USPSAlphaStateCode;
import OpenDentBusiness.Db;
import OpenDentBusiness.EhrLab;
import OpenDentBusiness.EhrLabClinicalInfo;
import OpenDentBusiness.EhrLabClinicalInfos;
import OpenDentBusiness.EhrLabNote;
import OpenDentBusiness.EhrLabNotes;
import OpenDentBusiness.EhrLabResult;
import OpenDentBusiness.EhrLabResults;
import OpenDentBusiness.EhrLabResultsCopyTo;
import OpenDentBusiness.EhrLabResultsCopyTos;
import OpenDentBusiness.EhrLabSpecimen;
import OpenDentBusiness.EhrLabSpecimenCondition;
import OpenDentBusiness.EhrLabSpecimenRejectReason;
import OpenDentBusiness.EhrLabSpecimens;
import OpenDentBusiness.Meth;
import OpenDentBusiness.Patient;
import OpenDentBusiness.Patients;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;

/**
* 
*/
public class EhrLabs   
{
    /**
    * Given an HL7 message, will attempt to fin the corresponding patient.  Will return null if not found.
    *  @param message
    */
    public static Patient findAttachedPatient(String message) throws Exception {
        return null;
    }

    //TODO: implement this patient select function if needed.
    public static List<EhrLab> processHl7Message(String message) throws Exception {
        return processHl7Message(message,null,false);
    }

    public static List<EhrLab> processHl7Message(String message, Patient patCur) throws Exception {
        return processHl7Message(message,patCur,false);
    }

    /**
    * Allows message to be processed and imported and will initialize empty lists instead of leaving them null.
    *  @param IsImport Set to true if using for import preview.
    */
    public static List<EhrLab> processHl7Message(String message, boolean IsImport) throws Exception {
        return processHl7Message(message,null,IsImport);
    }

    /**
    * Surround with Try/Catch.  Processes an HL7 message into an EHRLab object.
    */
    public static List<EhrLab> processHl7Message(String message, Patient patCur, boolean isImport) throws Exception {
        //Patient patcur;
        String PIDSegment = "";
        //used to store the PID segment and attached to each lab order generated by this message.
        List<EhrLab> listRetVal = new List<EhrLab>();
        EhrLab ehrLabCur = new EhrLab();
        if (!message.StartsWith("MSH"))
        {
            throw new Exception("MSH segment not found.");
        }
         
        //cannnot parse message without message header at the very least
        String[] segments = message.Split(new String[]{ "\r\n" }, StringSplitOptions.None);
        String[] fields = new String[]();
        String noteSegment = "";
        for (int s = 0;s < segments.Length;s++)
        {
            //used to attach notes to the right objects.
            String segment = segments[s];
            fields = segment.Split('|');
            System.Array<System.String>.INDEXER __dummyScrutVar0 = fields[0];
            //Segment Identifier.
            if (__dummyScrutVar0.equals("MSH"))
            {
                if (!StringSupport.equals(fields[8], "ORU^R01^ORU_R01"))
                {
                    throw new Exception("MSH.9 contained wrong value.  \"" + fields[8] + "\" was found, \"ORU^R01^ORU_R01\" was expected.");
                }
                 
                if (!StringSupport.equals(fields[11], "2.5.1"))
                {
                    throw new Exception("MSH.12 shows message version \"" + fields[11] + "\", only version \"2.5.1\" is currently supported.");
                }
                 
                containsRequiredSegmentsHelper(message);
                //validate required segments here, after we have verified this is an ORU_R01 message
                if (fields[20].Split('~').Length == 0)
                {
                    throw new Exception("MSH.21 does not contain any values, the LRI_GU_RU_Profile value \"2.16.840.1.113883.9.17\" is expected.");
                }
                 
                for (int i = 0;i < fields[20].Split('~').Length;i++)
                {
                    if (i == fields[20].Split('~').Length)
                    {
                        throw new Exception("MSH.21 (" + i + ") indicates sender's message does not conform to LRI_GU_RU_Profile \"2.16.840.1.113883.9.17\"");
                    }
                     
                    if (StringSupport.equals(fields[20].Split('~')[i], "2.16.840.1.113883.9.17"))
                    {
                        break;
                    }
                     
                }
            }
            else //found expected value.
            //case "SFT": //Software Segment
            //	break;
            if (__dummyScrutVar0.equals("PID"))
            {
                PIDSegment = segment;
                noteSegment = "PID";
                for (int i = 0;i < fields[3].Split('~').Length;i++)
                {
                    if (patCur == null)
                    {
                        //ID Number
                        patCur = Patients.GetByGUID(fields[3].Split('~')[i].Split('^')[0], fields[3].Split('~')[i].Split('^')[3].Split('&')[1]);
                    }
                     
                    //Assigning Authority ID
                    if (patCur != null)
                    {
                        ehrLabCur.PatNum = patCur.PatNum;
                    }
                    else
                    {
                        ehrLabCur.PatNum = 0;
                    } 
                }
            }
            else //if(i==fields[3].Split('~').Length) {//we have checked all patient ID's and none of them were a valid patnum in our DB.
            //	throw new Exception("PID.3 does not contain a known patient ID.");//we should have an option to manually associate lab results with a patient record, in the UI layer.
            //}
            //all other PID segments are informative, PID.3 is the only one we need to process.
            //case "PD1": //patient demographics
            //	break;
            //case "NK1": //Next of Kin/Associated Parties
            //	break;
            //case "PV1": //Patient Visit
            //	break;
            //case "PV2": //Patient Visit addiotional information
            //	break;
            if (__dummyScrutVar0.equals("ORC"))
            {
                //Each new ORC segment designates a new EhrLabOrder attached to the same patient.
                if (ehrLabCur.PlacerOrderNum != null || ehrLabCur.FillerOrderNum != null)
                {
                    //these fields are filled by the ORC segment, if they are blank, this is the first ORC segment encountered.
                    listRetVal.Add(ehrLabCur);
                    ehrLabCur = new EhrLab();
                    ehrLabCur.PatNum = listRetVal[0].PatNum;
                }
                 
                ehrLabCur.OriginalPIDSegment = PIDSegment;
                try
                {
                    //may not match actual PatNum/Patient information.
                    ehrLabCur.OrderControlCode = (HL70119)Enum.Parse(HL70119.class, fields[1]);
                }
                catch (Exception __dummyCatchVar0)
                {
                    throw new Exception("ORC.1 does not contain a valid Order Control Code (HL70119 value set).");
                }

                //Placer Order Num
                if (fields[2].Length != 0)
                {
                    //optional field, length may be 0 if field was ommitted.
                    ehrLabCur.PlacerOrderNum = fields[2].Split('^')[0];
                    ehrLabCur.PlacerOrderNamespace = fields[2].Split('^')[1];
                    ehrLabCur.PlacerOrderUniversalID = fields[2].Split('^')[2];
                    ehrLabCur.PlacerOrderUniversalIDType = fields[2].Split('^')[3];
                }
                 
                //Filler Order Num
                ehrLabCur.FillerOrderNum = fields[3].Split('^')[0];
                ehrLabCur.FillerOrderNamespace = fields[3].Split('^')[1];
                ehrLabCur.FillerOrderUniversalID = fields[3].Split('^')[2];
                ehrLabCur.FillerOrderUniversalIDType = fields[3].Split('^')[3];
                //Filler Group Num
                if (fields[4].Length != 0)
                {
                    ehrLabCur.PlacerGroupNum = fields[4].Split('^')[0];
                    ehrLabCur.PlacerGroupNamespace = fields[4].Split('^')[1];
                    ehrLabCur.PlacerGroupUniversalID = fields[4].Split('^')[2];
                    ehrLabCur.PlacerGroupUniversalIDType = fields[4].Split('^')[3];
                }
                 
                //Ordering Provider
                ehrLabCur.OrderingProviderID = fields[12].Split('^')[0];
                ehrLabCur.OrderingProviderLName = fields[12].Split('^')[1];
                ehrLabCur.OrderingProviderFName = fields[12].Split('^')[2];
                ehrLabCur.OrderingProviderMiddleNames = fields[12].Split('^')[3];
                ehrLabCur.OrderingProviderSuffix = fields[12].Split('^')[4];
                ehrLabCur.OrderingProviderPrefix = fields[12].Split('^')[5];
                ehrLabCur.OrderingProviderAssigningAuthorityNamespaceID = fields[12].Split('^')[8].Split('&')[0];
                ehrLabCur.OrderingProviderAssigningAuthorityUniversalID = fields[12].Split('^')[8].Split('&')[1];
                ehrLabCur.OrderingProviderAssigningAuthorityIDType = fields[12].Split('^')[8].Split('&')[2];
                try
                {
                    ehrLabCur.OrderingProviderNameTypeCode = (HL70200)Enum.Parse(HL70200.class, fields[12].Split('^')[9]);
                }
                catch (Exception __dummyCatchVar1)
                {
                    throw new Exception("ORC.12.10 does not contain a valid Name Type Code (HL70200 value set).");
                }

                try
                {
                    ehrLabCur.OrderingProviderIdentifierTypeCode = (HL70203)Enum.Parse(HL70203.class, fields[12].Split('^')[12]);
                }
                catch (Exception __dummyCatchVar2)
                {
                    throw new Exception("ORC.12.13 does not contain a valid Identifier Type Code (HL70203 value set).");
                }
            
            }
            else if (__dummyScrutVar0.equals("OBR"))
            {
                noteSegment = "OBR";
                ehrLabCur.SetIdOBR = PIn.Long(fields[1]);
                if (isImport)
                {
                    ehrLabCur.setListEhrLabNotes(new List<EhrLabNote>());
                    ehrLabCur.setListEhrLabResults(new List<EhrLabResult>());
                }
                 
                //OBR order num should always be identical to OCR order number//Not true.
                if (!StringSupport.equals(ehrLabCur.FillerOrderNum, fields[3].Split('^')[0]))
                {
                    throw new Exception("Filler order numbers in OCR.3 and OBR.3 segments do not match.");
                }
                 
                //Universal Service ID
                ehrLabCur.UsiID = fields[4].Split('^')[0];
                ehrLabCur.UsiText = fields[4].Split('^')[1];
                try
                {
                    ehrLabCur.UsiCodeSystemName = fields[4].Split('^')[2];
                }
                catch (Exception __dummyCatchVar3)
                {
                }

                try
                {
                    ehrLabCur.UsiIDAlt = fields[4].Split('^')[3];
                }
                catch (Exception __dummyCatchVar4)
                {
                }

                try
                {
                    ehrLabCur.UsiTextAlt = fields[4].Split('^')[4];
                }
                catch (Exception __dummyCatchVar5)
                {
                }

                try
                {
                    ehrLabCur.UsiCodeSystemNameAlt = fields[4].Split('^')[5];
                }
                catch (Exception __dummyCatchVar6)
                {
                }

                try
                {
                    ehrLabCur.UsiTextOriginal = fields[4].Split('^')[6];
                }
                catch (Exception __dummyCatchVar7)
                {
                }

                //Observation Date Time
                ehrLabCur.ObservationDateTimeStart = fields[7];
                if (fields[8].Length != 0)
                {
                    ehrLabCur.ObservationDateTimeEnd = fields[8];
                }
                 
                try
                {
                    ehrLabCur.SpecimenActionCode = (HL70065)Enum.Parse(HL70065.class, fields[11]);
                }
                catch (Exception __dummyCatchVar8)
                {
                }

                if (isImport)
                {
                    ehrLabCur.setListRelevantClinicalInformations(new List<EhrLabClinicalInfo>());
                }
                 
                for (int i = 0;i < fields[13].Split('~').Length;i++)
                {
                    if (fields[13].Length == 0)
                    {
                        break;
                    }
                     
                    //nothing to process
                    String tempClinInfo = fields[13].Split('~')[i];
                    EhrLabClinicalInfo ehrLabClinicalInfo = new EhrLabClinicalInfo();
                    ehrLabClinicalInfo.ClinicalInfoID = tempClinInfo.Split('^')[0];
                    try
                    {
                        ehrLabClinicalInfo.ClinicalInfoText = tempClinInfo.Split('^')[1];
                    }
                    catch (Exception __dummyCatchVar9)
                    {
                    }

                    try
                    {
                        ehrLabClinicalInfo.ClinicalInfoCodeSystemName = tempClinInfo.Split('^')[2];
                    }
                    catch (Exception __dummyCatchVar10)
                    {
                    }

                    try
                    {
                        ehrLabClinicalInfo.ClinicalInfoIDAlt = tempClinInfo.Split('^')[3];
                    }
                    catch (Exception __dummyCatchVar11)
                    {
                    }

                    try
                    {
                        ehrLabClinicalInfo.ClinicalInfoTextAlt = tempClinInfo.Split('^')[4];
                    }
                    catch (Exception __dummyCatchVar12)
                    {
                    }

                    try
                    {
                        ehrLabClinicalInfo.ClinicalInfoCodeSystemNameAlt = tempClinInfo.Split('^')[5];
                    }
                    catch (Exception __dummyCatchVar13)
                    {
                    }

                    try
                    {
                        ehrLabClinicalInfo.ClinicalInfoTextOriginal = tempClinInfo.Split('^')[6];
                    }
                    catch (Exception __dummyCatchVar14)
                    {
                    }

                    ehrLabCur.getListRelevantClinicalInformations().Add(ehrLabClinicalInfo);
                }
                //OBR 16; Ordering Provider same as OCR. //not validating or checking at this time.
                ehrLabCur.ResultDateTime = fields[22];
                if (fields.Length <= 25)
                {
                    break;
                }
                 
                try
                {
                    //likely that fields beyond this are left out.
                    ehrLabCur.ResultStatus = (HL70123)Enum.Parse(HL70123.class, fields[25]);
                }
                catch (Exception __dummyCatchVar15)
                {
                }

                //Parent Result
                if (fields.Length <= 26)
                {
                    break;
                }
                 
                //likely that fields beyond this are left out.
                ehrLabCur.ParentObservationID = fields[26].Split('^')[0].Split('&')[0];
                try
                {
                    ehrLabCur.ParentObservationText = fields[26].Split('^')[0].Split('&')[1];
                }
                catch (Exception __dummyCatchVar16)
                {
                }

                try
                {
                    ehrLabCur.ParentObservationCodeSystemName = fields[26].Split('^')[0].Split('&')[2];
                }
                catch (Exception __dummyCatchVar17)
                {
                }

                try
                {
                    ehrLabCur.ParentObservationIDAlt = fields[26].Split('^')[0].Split('&')[3];
                }
                catch (Exception __dummyCatchVar18)
                {
                }

                try
                {
                    ehrLabCur.ParentObservationTextAlt = fields[26].Split('^')[0].Split('&')[4];
                }
                catch (Exception __dummyCatchVar19)
                {
                }

                try
                {
                    ehrLabCur.ParentObservationCodeSystemNameAlt = fields[26].Split('^')[0].Split('&')[5];
                }
                catch (Exception __dummyCatchVar20)
                {
                }

                try
                {
                    ehrLabCur.ParentObservationTextOriginal = fields[26].Split('^')[0].Split('&')[6];
                }
                catch (Exception __dummyCatchVar21)
                {
                }

                try
                {
                    ehrLabCur.ParentObservationSubID = fields[26].Split('^')[1];
                }
                catch (Exception __dummyCatchVar22)
                {
                }

                //Results Copy To
                if (isImport)
                {
                    ehrLabCur.setListEhrLabResultsCopyTo(new List<EhrLabResultsCopyTo>());
                }
                 
                if (fields.Length < 28)
                {
                    break;
                }
                 
                for (int i = 0;i < fields[28].Split('~').Length;i++)
                {
                    //likely that fields beyond this are left out.
                    EhrLabResultsCopyTo tempRCT = new EhrLabResultsCopyTo();
                    String stringRCT = fields[28].Split('~')[i];
                    if (stringRCT.Length == 0)
                    {
                        continue;
                    }
                     
                    //usually only if nothing was sent, but also if an empty field was sent.
                    tempRCT.CopyToID = stringRCT.Split('^')[0];
                    tempRCT.CopyToLName = stringRCT.Split('^')[1];
                    tempRCT.CopyToFName = stringRCT.Split('^')[2];
                    tempRCT.CopyToMiddleNames = stringRCT.Split('^')[3];
                    tempRCT.CopyToSuffix = stringRCT.Split('^')[4];
                    tempRCT.CopyToPrefix = stringRCT.Split('^')[5];
                    tempRCT.CopyToAssigningAuthorityUniversalID = stringRCT.Split('^')[8].Split('&')[0];
                    tempRCT.CopyToAssigningAuthorityNamespaceID = stringRCT.Split('^')[8].Split('&')[1];
                    tempRCT.CopyToAssigningAuthorityIDType = stringRCT.Split('^')[8].Split('&')[2];
                    try
                    {
                        tempRCT.CopyToNameTypeCode = (HL70200)Enum.Parse(HL70200.class, stringRCT.Split('^')[9]);
                    }
                    catch (Exception __dummyCatchVar23)
                    {
                        throw new Exception("ORC.12.10 does not contain a valid Name Type Code (HL70200 value set).");
                    }

                    try
                    {
                        ehrLabCur.OrderingProviderIdentifierTypeCode = (HL70203)Enum.Parse(HL70203.class, stringRCT.Split('^')[12]);
                    }
                    catch (Exception __dummyCatchVar24)
                    {
                        throw new Exception("ORC.12.13 does not contain a valid Identifier Type Code (HL70203 value set).");
                    }

                    ehrLabCur.getListEhrLabResultsCopyTo().Add(tempRCT);
                }
                //Parent Lab
                if (fields.Length < 29)
                {
                    break;
                }
                 
                //likely that fields beyond this are left out.
                ehrLabCur.ParentPlacerOrderNum = fields[29].Split('^')[0].Split('&')[0];
                try
                {
                    ehrLabCur.ParentPlacerOrderNamespace = fields[29].Split('^')[0].Split('&')[1];
                }
                catch (Exception __dummyCatchVar25)
                {
                }

                try
                {
                    ehrLabCur.ParentPlacerOrderUniversalID = fields[29].Split('^')[0].Split('&')[2];
                }
                catch (Exception __dummyCatchVar26)
                {
                }

                try
                {
                    ehrLabCur.ParentPlacerOrderUniversalIDType = fields[29].Split('^')[0].Split('&')[3];
                }
                catch (Exception __dummyCatchVar27)
                {
                }

                try
                {
                    ehrLabCur.ParentFillerOrderNum = fields[29].Split('^')[1].Split('&')[0];
                }
                catch (Exception __dummyCatchVar28)
                {
                }

                try
                {
                    ehrLabCur.ParentFillerOrderNamespace = fields[29].Split('^')[1].Split('&')[1];
                }
                catch (Exception __dummyCatchVar29)
                {
                }

                try
                {
                    ehrLabCur.ParentFillerOrderUniversalID = fields[29].Split('^')[1].Split('&')[2];
                }
                catch (Exception __dummyCatchVar30)
                {
                }

                try
                {
                    ehrLabCur.ParentFillerOrderUniversalIDType = fields[29].Split('^')[1].Split('&')[3];
                }
                catch (Exception __dummyCatchVar31)
                {
                }

                if (fields.Length < 31)
                {
                    break;
                }
                 
                //next segment. all additional fields were omitted from this one.
                if (fields.Length < 49)
                {
                    break;
                }
                 
                //likely that fields beyond this are left out.
                //result Handling
                ehrLabCur.ListEhrLabResultsHandlingF = fields[49].Contains("F");
                ehrLabCur.ListEhrLabResultsHandlingN = fields[49].Contains("N");
            }
            else if (__dummyScrutVar0.equals("NTE"))
            {
                //Each not can contain any number of comments, these comments will be carrot delimited. That will be handled later in the UI.  Just store this NTE Segment in an EHRLabNote
                EhrLabNote ehrNote = new EhrLabNote();
                //todo:No SetIDNTE?
                ehrNote.Comments = fields[3];
                System.String __dummyScrutVar1 = noteSegment;
                if (__dummyScrutVar1.equals("OBX"))
                {
                    //Attach note to observation.
                    ehrLabCur.getListEhrLabResults()[ehrLabCur.getListEhrLabResults().Count - 1].ListEhrLabResultNotes.Add(ehrNote);
                }
                else
                {
                    //if PID, OBR, or Other just attach note to the lab.
                    ehrLabCur.getListEhrLabNotes().Add(ehrNote);
                } 
            }
            else if (__dummyScrutVar0.equals("TQ1"))
            {
                ehrLabCur.TQ1SetId = PIn.Long(fields[1]);
                ehrLabCur.TQ1DateTimeStart = fields[7];
                ehrLabCur.TQ1DateTimeEnd = fields[8];
            }
            else //case "TQ2": //Timing/Quantity Order Sequence
            //	break;
            //case "CTD": //Contact Data
            //	break;
            if (__dummyScrutVar0.equals("OBX"))
            {
                noteSegment = "OBX";
                //if(ehrLabCur.ListEhrLabResults==null) {
                //	ehrLabCur.ListEhrLabResults=new List<EhrLabResult>();
                //}
                EhrLabResult labResult = new EhrLabResult();
                labResult.SetIdOBX = PIn.Long(fields[1]);
                try
                {
                    labResult.ValueType = (HL70125)Enum.Parse(HL70125.class, fields[2]);
                }
                catch (Exception __dummyCatchVar32)
                {
                }

                //Lab Result Observation Identifier (LOINC)
                labResult.ObservationIdentifierID = fields[3].Split('^')[0];
                try
                {
                    labResult.ObservationIdentifierText = fields[3].Split('^')[1];
                }
                catch (Exception __dummyCatchVar33)
                {
                }

                try
                {
                    labResult.ObservationIdentifierCodeSystemName = fields[3].Split('^')[2];
                }
                catch (Exception __dummyCatchVar34)
                {
                }

                try
                {
                    labResult.ObservationIdentifierIDAlt = fields[3].Split('^')[3];
                }
                catch (Exception __dummyCatchVar35)
                {
                }

                try
                {
                    labResult.ObservationIdentifierTextAlt = fields[3].Split('^')[4];
                }
                catch (Exception __dummyCatchVar36)
                {
                }

                try
                {
                    labResult.ObservationIdentifierCodeSystemNameAlt = fields[3].Split('^')[5];
                }
                catch (Exception __dummyCatchVar37)
                {
                }

                if (fields[3].Split('^').Length > 6)
                {
                    labResult.ObservationIdentifierTextOriginal = fields[3].Split('^')[6];
                }
                 
                labResult.ObservationIdentifierSub = fields[4];
                //Observation Value
                switch(labResult.ValueType)
                {
                    case CE: 
                    case CWE: 
                        labResult.ObservationValueCodedElementID = fields[5].Split('^')[0];
                        try
                        {
                            labResult.ObservationValueCodedElementText = fields[5].Split('^')[1];
                        }
                        catch (Exception __dummyCatchVar38)
                        {
                        }

                        try
                        {
                            labResult.ObservationValueCodedElementCodeSystemName = fields[5].Split('^')[2];
                        }
                        catch (Exception __dummyCatchVar39)
                        {
                        }

                        try
                        {
                            labResult.ObservationValueCodedElementIDAlt = fields[5].Split('^')[3];
                        }
                        catch (Exception __dummyCatchVar40)
                        {
                        }

                        try
                        {
                            labResult.ObservationValueCodedElementTextAlt = fields[5].Split('^')[4];
                        }
                        catch (Exception __dummyCatchVar41)
                        {
                        }

                        try
                        {
                            labResult.ObservationValueCodedElementCodeSystemNameAlt = fields[5].Split('^')[5];
                        }
                        catch (Exception __dummyCatchVar42)
                        {
                        }

                        if (labResult.ValueType == HL70125.CWE)
                        {
                            labResult.ObservationValueCodedElementTextOriginal = fields[5].Split('^')[6];
                        }
                         
                        break;
                    case DT: 
                    case TS: 
                        labResult.ObservationValueDateTime = fields[5];
                        break;
                    case FT: 
                    case ST: 
                    case TX: 
                        //formatted text
                        //string
                        //text
                        labResult.ObservationValueText = fields[5];
                        break;
                    case NM: 
                        //data may contain positive or negative sign.  Below, the sign is handled first, and then multiplied by PIn.Double(val)
                        labResult.ObservationValueNumeric = (fields[5].Contains("-") ? -1f : 1f) * PIn.Double(fields[5].Trim('+').Trim('-'));
                        break;
                    case SN: 
                        labResult.ObservationValueComparator = fields[5].Split('^')[0];
                        try
                        {
                            labResult.ObservationValueNumber1 = PIn.Double(fields[5].Split('^')[1]);
                        }
                        catch (Exception __dummyCatchVar43)
                        {
                        }

                        try
                        {
                            //optional, may be a null reference
                            labResult.ObservationValueSeparatorOrSuffix = fields[5].Split('^')[2];
                        }
                        catch (Exception __dummyCatchVar44)
                        {
                        }

                        try
                        {
                            //optional, may be a null reference
                            labResult.ObservationValueNumber2 = PIn.Double(fields[5].Split('^')[3]);
                        }
                        catch (Exception __dummyCatchVar45)
                        {
                        }

                        break;
                    case TM: 
                        //optional, may be a null reference
                        labResult.ObservationValueTime = PIn.Time(fields[5]);
                        break;
                
                }
                //Units
                if (fields[6].Length != 0)
                {
                    labResult.UnitsID = fields[6].Split('^')[0];
                    labResult.UnitsText = fields[6].Split('^')[1];
                    try
                    {
                        labResult.UnitsCodeSystemName = fields[6].Split('^')[2];
                    }
                    catch (Exception __dummyCatchVar46)
                    {
                    }

                    try
                    {
                        labResult.UnitsIDAlt = fields[6].Split('^')[3];
                    }
                    catch (Exception __dummyCatchVar47)
                    {
                    }

                    try
                    {
                        labResult.UnitsTextAlt = fields[6].Split('^')[4];
                    }
                    catch (Exception __dummyCatchVar48)
                    {
                    }

                    try
                    {
                        labResult.UnitsCodeSystemNameAlt = fields[6].Split('^')[5];
                    }
                    catch (Exception __dummyCatchVar49)
                    {
                    }

                    try
                    {
                        labResult.UnitsTextOriginal = fields[6].Split('^')[6];
                    }
                    catch (Exception __dummyCatchVar50)
                    {
                    }
                
                }
                 
                labResult.referenceRange = fields[7];
                labResult.AbnormalFlags = fields[8].Replace('~', ',');
                try
                {
                    //TODO: may need additional formatting/testing
                    labResult.ObservationResultStatus = (HL70085)Enum.Parse(HL70085.class, fields[11]);
                }
                catch (Exception __dummyCatchVar51)
                {
                }

                labResult.ObservationDateTime = fields[14];
                labResult.AnalysisDateTime = fields[19];
                //performing organization Name (with additional info)
                labResult.PerformingOrganizationName = fields[23].Split('^')[0];
                labResult.PerformingOrganizationNameAssigningAuthorityNamespaceId = fields[23].Split('^')[5].Split('&')[0];
                labResult.PerformingOrganizationNameAssigningAuthorityUniversalId = fields[23].Split('^')[5].Split('&')[1];
                labResult.PerformingOrganizationNameAssigningAuthorityUniversalIdType = fields[23].Split('^')[5].Split('&')[2];
                try
                {
                    labResult.PerformingOrganizationIdentifierTypeCode = (HL70203)Enum.Parse(HL70203.class, fields[23].Split('^')[7]);
                }
                catch (Exception __dummyCatchVar52)
                {
                }

                labResult.PerformingOrganizationIdentifier = fields[23].Split('^')[9];
                //Performing Organization Address
                labResult.PerformingOrganizationAddressStreet = fields[24].Split('^')[0].Split('&')[0];
                try
                {
                    labResult.PerformingOrganizationAddressOtherDesignation = fields[24].Split('^')[1];
                }
                catch (Exception __dummyCatchVar53)
                {
                }

                try
                {
                    labResult.PerformingOrganizationAddressCity = fields[24].Split('^')[2];
                }
                catch (Exception __dummyCatchVar54)
                {
                }

                try
                {
                    labResult.PerformingOrganizationAddressStateOrProvince = (USPSAlphaStateCode)Enum.Parse(USPSAlphaStateCode.class, fields[24].Split('^')[3]);
                }
                catch (Exception __dummyCatchVar55)
                {
                }

                try
                {
                    labResult.PerformingOrganizationAddressZipOrPostalCode = fields[24].Split('^')[4];
                }
                catch (Exception __dummyCatchVar56)
                {
                }

                try
                {
                    labResult.PerformingOrganizationAddressCountryCode = fields[24].Split('^')[5];
                }
                catch (Exception __dummyCatchVar57)
                {
                }

                try
                {
                    labResult.PerformingOrganizationAddressAddressType = (HL70190)Enum.Parse(HL70190.class, fields[24].Split('^')[6]);
                }
                catch (Exception __dummyCatchVar58)
                {
                }

                try
                {
                    labResult.PerformingOrganizationAddressCountyOrParishCode = fields[24].Split('^')[7];
                }
                catch (Exception __dummyCatchVar59)
                {
                }

                //Performing Organization Medical Director
                if (fields.Length <= 25)
                {
                    break;
                }
                 
                //next segment. this one is finished.
                labResult.MedicalDirectorID = fields[25].Split('^')[0];
                try
                {
                    labResult.MedicalDirectorFName = fields[25].Split('^')[1];
                }
                catch (Exception __dummyCatchVar60)
                {
                }

                try
                {
                    labResult.MedicalDirectorLName = fields[25].Split('^')[2];
                }
                catch (Exception __dummyCatchVar61)
                {
                }

                try
                {
                    labResult.MedicalDirectorMiddleNames = fields[25].Split('^')[3];
                }
                catch (Exception __dummyCatchVar62)
                {
                }

                try
                {
                    labResult.MedicalDirectorSuffix = fields[25].Split('^')[4];
                }
                catch (Exception __dummyCatchVar63)
                {
                }

                try
                {
                    labResult.MedicalDirectorPrefix = fields[25].Split('^')[5];
                }
                catch (Exception __dummyCatchVar64)
                {
                }

                try
                {
                    labResult.MedicalDirectorAssigningAuthorityNamespaceID = fields[25].Split('^')[8].Split('&')[0];
                }
                catch (Exception __dummyCatchVar65)
                {
                }

                try
                {
                    labResult.MedicalDirectorAssigningAuthorityUniversalID = fields[25].Split('^')[8].Split('&')[1];
                }
                catch (Exception __dummyCatchVar66)
                {
                }

                try
                {
                    labResult.MedicalDirectorAssigningAuthorityIDType = fields[25].Split('^')[8].Split('&')[2];
                }
                catch (Exception __dummyCatchVar67)
                {
                }

                try
                {
                    labResult.MedicalDirectorNameTypeCode = (HL70200)Enum.Parse(HL70200.class, fields[25].Split('^')[9]);
                }
                catch (Exception __dummyCatchVar68)
                {
                }

                try
                {
                    labResult.MedicalDirectorIdentifierTypeCode = (HL70203)Enum.Parse(HL70203.class, fields[25].Split('^')[12]);
                }
                catch (Exception __dummyCatchVar69)
                {
                }

                ehrLabCur.getListEhrLabResults().Add(labResult);
            }
            else //case "FTI": //Financial Transaction
            //	break;
            //case "CTI": //Clinical Trial Identification
            //	break;
            if (__dummyScrutVar0.equals("SPM"))
            {
                //if(retVal.ListEhrLabSpecimin==null) {
                //	retVal.ListEhrLabSpecimin=new List<EhrLabSpecimen>();
                //}
                EhrLabSpecimen ehrLabSpecimen = new EhrLabSpecimen();
                ehrLabSpecimen.SetIdSPM = PIn.Long(fields[1]);
                //Specimen Type
                ehrLabSpecimen.SpecimenTypeID = fields[4].Split('^')[0];
                try
                {
                    ehrLabSpecimen.SpecimenTypeText = fields[4].Split('^')[1];
                }
                catch (Exception __dummyCatchVar70)
                {
                }

                try
                {
                    ehrLabSpecimen.SpecimenTypeCodeSystemName = fields[4].Split('^')[2];
                }
                catch (Exception __dummyCatchVar71)
                {
                }

                try
                {
                    ehrLabSpecimen.SpecimenTypeIDAlt = fields[4].Split('^')[3];
                }
                catch (Exception __dummyCatchVar72)
                {
                }

                try
                {
                    ehrLabSpecimen.SpecimenTypeTextAlt = fields[4].Split('^')[4];
                }
                catch (Exception __dummyCatchVar73)
                {
                }

                try
                {
                    ehrLabSpecimen.SpecimenTypeCodeSystemNameAlt = fields[4].Split('^')[5];
                }
                catch (Exception __dummyCatchVar74)
                {
                }

                try
                {
                    ehrLabSpecimen.SpecimenTypeTextOriginal = fields[4].Split('^')[6];
                }
                catch (Exception __dummyCatchVar75)
                {
                }

                //TODO:? check to see if either triplet contained a valid code.
                //Collection Date Time
                ehrLabSpecimen.CollectionDateTimeStart = fields[17].Split('^')[0];
                try
                {
                    ehrLabSpecimen.CollectionDateTimeEnd = fields[17].Split('^')[1];
                }
                catch (Exception __dummyCatchVar76)
                {
                }

                if (fields.Length < 19)
                {
                    ehrLabCur.getListEhrLabSpecimens().Add(ehrLabSpecimen);
                    break;
                }
                 
                for (int i = 0;i < fields[21].Split('~').Length;i++)
                {
                    //next segment. This one has no more fields
                    //if(ehrLabSpecimen.ListEhrLabSpecimenRejectReason==null) {
                    //	ehrLabSpecimen.ListEhrLabSpecimenRejectReason=new List<EhrLabSpecimenRejectReason>();
                    //}
                    //Reject Reason
                    if (fields[21].Length == 0)
                    {
                        break;
                    }
                     
                    //nothing in this field
                    EhrLabSpecimenRejectReason ehrLabRR = new EhrLabSpecimenRejectReason();
                    ehrLabRR.SpecimenRejectReasonID = fields[21].Split('~')[i].Split('^')[0];
                    try
                    {
                        ehrLabRR.SpecimenRejectReasonText = fields[21].Split('~')[i].Split('^')[1];
                    }
                    catch (Exception __dummyCatchVar77)
                    {
                    }

                    try
                    {
                        ehrLabRR.SpecimenRejectReasonCodeSystemName = fields[21].Split('~')[i].Split('^')[2];
                    }
                    catch (Exception __dummyCatchVar78)
                    {
                    }

                    try
                    {
                        ehrLabRR.SpecimenRejectReasonIDAlt = fields[21].Split('~')[i].Split('^')[3];
                    }
                    catch (Exception __dummyCatchVar79)
                    {
                    }

                    try
                    {
                        ehrLabRR.SpecimenRejectReasonTextAlt = fields[21].Split('~')[i].Split('^')[4];
                    }
                    catch (Exception __dummyCatchVar80)
                    {
                    }

                    try
                    {
                        ehrLabRR.SpecimenRejectReasonCodeSystemNameAlt = fields[21].Split('~')[i].Split('^')[5];
                    }
                    catch (Exception __dummyCatchVar81)
                    {
                    }

                    try
                    {
                        ehrLabRR.SpecimenRejectReasonTextOriginal = fields[21].Split('~')[i].Split('^')[6];
                    }
                    catch (Exception __dummyCatchVar82)
                    {
                    }

                    //TODO:? check to see if either triplet contained a valid code.
                    ehrLabSpecimen.getListEhrLabSpecimenRejectReason().Add(ehrLabRR);
                }
                for (int i = 0;i < fields[24].Split('~').Length;i++)
                {
                    //Specimen Condition
                    if (fields[24].Length == 0)
                    {
                        break;
                    }
                     
                    //nothing in this field
                    EhrLabSpecimenCondition ehrLabSC = new EhrLabSpecimenCondition();
                    ehrLabSC.SpecimenConditionID = fields[24].Split('~')[i].Split('^')[0];
                    try
                    {
                        ehrLabSC.SpecimenConditionText = fields[24].Split('~')[i].Split('^')[1];
                    }
                    catch (Exception __dummyCatchVar83)
                    {
                    }

                    try
                    {
                        ehrLabSC.SpecimenConditionCodeSystemName = fields[24].Split('~')[i].Split('^')[2];
                    }
                    catch (Exception __dummyCatchVar84)
                    {
                    }

                    try
                    {
                        ehrLabSC.SpecimenConditionIDAlt = fields[24].Split('~')[i].Split('^')[3];
                    }
                    catch (Exception __dummyCatchVar85)
                    {
                    }

                    try
                    {
                        ehrLabSC.SpecimenConditionTextAlt = fields[24].Split('~')[i].Split('^')[4];
                    }
                    catch (Exception __dummyCatchVar86)
                    {
                    }

                    try
                    {
                        ehrLabSC.SpecimenConditionCodeSystemNameAlt = fields[24].Split('~')[i].Split('^')[5];
                    }
                    catch (Exception __dummyCatchVar87)
                    {
                    }

                    try
                    {
                        ehrLabSC.SpecimenConditionTextOriginal = fields[24].Split('~')[i].Split('^')[6];
                    }
                    catch (Exception __dummyCatchVar88)
                    {
                    }

                    ehrLabSpecimen.getListEhrLabSpecimenCondition().Add(ehrLabSC);
                }
                ehrLabCur.getListEhrLabSpecimens().Add(ehrLabSpecimen);
            }
            else
            {
            }        
        }
        //to catch unsupported or malformed segments.
        //end switch
        //end foreach segment
        //TODO:Message has been processed into an EHR Lab... Now we can do other things if we want to...
        listRetVal.Add(ehrLabCur);
        return listRetVal;
    }

    //other labs may have already been added to retval in the code above.
    /**
    * Not implemented. We do not yet need to acknowledge incoming messages.
    */
    public String generateAckMsg(String message) throws Exception {
        StringBuilder strb = new StringBuilder();
        return strb.ToString();
    }

    //we do not need to implement this yet. But probably will for EHR Round 3...
    /**
    * Throws an exception if message does not contain all required segments, or contains too many segments of a given type.  Does not validate contents of segments.
    */
    private static void containsRequiredSegmentsHelper(String message) throws Exception {
        String errors = "";
        String[] segments = message.Split(new String[]{ "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
        for (int i = 0;i < segments.Length;i++)
        {
            segments[i] = segments[i].Split('|')[0];
        }
        /**
        * now each segment only contains the segment identifier.
        */
        //Look for each element/error sperately because there can be many variation of message structure
        //MSH
        int mshCount = 0;
        for (int i = 0;i < segments.Length;i++)
        {
            if (StringSupport.equals(segments[i], "MSH"))
            {
                mshCount++;
            }
             
        }
        if (mshCount != 1)
        {
            errors += "Message should contain exactly 1 MSH segment, " + mshCount + " MSH segments found.\r\n";
        }
         
        //PID
        int pidCount = 0;
        for (int i = 0;i < segments.Length;i++)
        {
            if (StringSupport.equals(segments[i], "PID"))
            {
                pidCount++;
            }
             
        }
        if (pidCount != 1)
        {
            errors += "Message should contain exactly 1 PID segment, " + pidCount + " PID segments found.\r\n";
        }
         
        //ORC
        int orcCount = 0;
        for (int i = 0;i < segments.Length;i++)
        {
            if (StringSupport.equals(segments[i], "ORC"))
            {
                orcCount++;
            }
             
        }
        if (pidCount == 0)
        {
            errors += "Message should contain 1 or more ORC segments, " + pidCount + " PID segments found.\r\n";
        }
         
        for (int i = 0;i < segments.Length;i++)
        {
            //ORC followed by OBR
            if (StringSupport.equals(segments[i], "ORC"))
            {
                if (i + 1 == segments.Length || !StringSupport.equals(segments[i + 1], "OBR"))
                {
                    errors += "Message contains \"ORC\" segment that is not followed by \"OBR\" segment.\r\n";
                    continue;
                }
                 
                continue;
            }
             
        }
        for (int i = 0;i < segments.Length;i++)
        {
            //All other segments are optional according to the LRI standard.
            System.Array<System.String>.INDEXER __dummyScrutVar3 = segments[i];
            if (__dummyScrutVar3.equals("MSH") || __dummyScrutVar3.equals("SFT") || __dummyScrutVar3.equals("PID") || __dummyScrutVar3.equals("PD1") || __dummyScrutVar3.equals("NTE") || __dummyScrutVar3.equals("NK1") || __dummyScrutVar3.equals("PV1") || __dummyScrutVar3.equals("PV2") || __dummyScrutVar3.equals("ORC") || __dummyScrutVar3.equals("OBR") || __dummyScrutVar3.equals("TQ1") || __dummyScrutVar3.equals("TQ2") || __dummyScrutVar3.equals("CTD") || __dummyScrutVar3.equals("OBX") || __dummyScrutVar3.equals("FTI") || __dummyScrutVar3.equals("CTI") || __dummyScrutVar3.equals("SPM"))
            {
            }
            else
            {
                //these are the only allowed segments in this message type.
                errors += "\"" + segments[i] + " is not a supported segment type.";
            } 
        }
        if (!StringSupport.equals(errors, ""))
        {
            throw new Exception(errors);
        }
         
    }

    /**
    * Saves EhrLab to DB and all child elements.  Note: this can be used to overwrite new data with old data when viewing old messages.
    * Make sure you want to save all new data.
    */
    public static EhrLab saveToDB(EhrLab ehrLab) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            return Meth.<EhrLab>GetObject(MethodBase.GetCurrentMethod(), ehrLab);
        }
         
        //check for existing EhrLab by universal identifier.
        if (getByGUID(ehrLab.PlacerOrderUniversalID,ehrLab.PlacerOrderNum) != null)
        {
            ehrLab.EhrLabNum = getByGUID(ehrLab.PlacerOrderUniversalID,ehrLab.PlacerOrderNum).EhrLabNum;
        }
        else //identified by placer order num... should be the case
        if (getByGUID(ehrLab.FillerOrderUniversalID,ehrLab.FillerOrderNum) != null)
        {
            ehrLab.EhrLabNum = getByGUID(ehrLab.FillerOrderUniversalID,ehrLab.FillerOrderNum).EhrLabNum;
        }
          
        //identified by the filler order num... rarely
        //Insert or update everything
        if (ehrLab.EhrLabNum == 0)
        {
            //new; Insert new EhrLab, Insert all new children
            ehrLab.EhrLabNum = insert(ehrLab);
        }
        else
        {
            //existing; update EhrLab, Delete All children so new ones can be reinserted.
            update(ehrLab);
            EhrLabNotes.deleteForLab(ehrLab.EhrLabNum);
            EhrLabResults.deleteForLab(ehrLab.EhrLabNum);
            EhrLabResultsCopyTos.deleteForLab(ehrLab.EhrLabNum);
            EhrLabClinicalInfos.deleteForLab(ehrLab.EhrLabNum);
            EhrLabSpecimens.deleteForLab(ehrLab.EhrLabNum);
        } 
        for (int i = 0;i < ehrLab.getListEhrLabNotes().Count;i++)
        {
            //Insert new child elements
            //must be before lab results.
            ehrLab.getListEhrLabNotes()[i].EhrLabNum = ehrLab.EhrLabNum;
            ehrLab.getListEhrLabNotes()[i].EhrLabNoteNum = EhrLabNotes.Insert(ehrLab.getListEhrLabNotes()[i]);
        }
        for (int i = 0;i < ehrLab.getListEhrLabResults().Count;i++)
        {
            ehrLab.getListEhrLabResults()[i].EhrLabNum = ehrLab.EhrLabNum;
            ehrLab.getListEhrLabResults()[i] = EhrLabResults.InsertItem(ehrLab.getListEhrLabResults()[i]);
        }
        for (int i = 0;i < ehrLab.getListEhrLabResultsCopyTo().Count;i++)
        {
            //insert/return entire object so that child objects are also updated.
            ehrLab.getListEhrLabResultsCopyTo()[i].EhrLabNum = ehrLab.EhrLabNum;
            ehrLab.getListEhrLabResultsCopyTo()[i].EhrLabResultsCopyToNum = EhrLabResultsCopyTos.Insert(ehrLab.getListEhrLabResultsCopyTo()[i]);
        }
        for (int i = 0;i < ehrLab.getListEhrLabSpecimens().Count;i++)
        {
            ehrLab.getListEhrLabSpecimens()[i].EhrLabNum = ehrLab.EhrLabNum;
            ehrLab.getListEhrLabSpecimens()[i] = EhrLabSpecimens.InsertItem(ehrLab.getListEhrLabSpecimens()[i]);
        }
        for (int i = 0;i < ehrLab.getListRelevantClinicalInformations().Count;i++)
        {
            //Insert item to return the whole object.
            ehrLab.getListRelevantClinicalInformations()[i].EhrLabNum = ehrLab.EhrLabNum;
            ehrLab.getListRelevantClinicalInformations()[i].EhrLabClinicalInfoNum = EhrLabClinicalInfos.Insert(ehrLab.getListRelevantClinicalInformations()[i]);
        }
        return ehrLab;
    }

    /**
    * Gets one EhrLab from the db.
    */
    public static EhrLab getOne(long ehrLabNum) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            return Meth.<EhrLab>GetObject(MethodBase.GetCurrentMethod(), ehrLabNum);
        }
         
        return Crud.EhrLabCrud.SelectOne(ehrLabNum);
    }

    public static long getNextOrderNum() throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            return Meth.GetLong(MethodBase.GetCurrentMethod());
        }
         
        String command = "SELECT MAX(EhrLabNum) FROM ehrlab";
        long retVal = 0;
        try
        {
            retVal = PIn.long(Db.getScalar(command));
        }
        catch (Exception __dummyCatchVar89)
        {
        }

        return retVal + 1;
    }

    //can be null if table is empty.
    /**
    * //Gets one EhrLab from the db.
    */
    //public static long GetNumFromMessage(string message) {
    //	if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
    //		return Meth.GetObject<EhrLab>(MethodBase.GetCurrentMethod(),message);
    //	}
    //	long retVal=0;
    //	string[] segments=message.Split(new string[] { "\r\n" },StringSplitOptions.RemoveEmptyEntries);
    //	foreach(string segment in segments) {
    //		if(!segment.StartsWith("ORC")) {
    //			continue;
    //		}
    //		string[] fields=segment.Split('|');
    //	}
    //	return retVal;
    //}
    /**
    * Gets one EhrLab from the db.
    */
    public static EhrLab getByGUID(String root, String extension) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            return Meth.<EhrLab>GetObject(MethodBase.GetCurrentMethod(), root, extension);
        }
         
        String command = "SELECT * FROM ehrlab WHERE (PlacerOrderNum='" + extension + "' AND PlacerOrderUniversalID='" + root + "'AND PlacerOrderNum!='' AND PlacerOrderUniversalID!='') " + "OR (FillerOrderNum='" + extension + "' AND FillerOrderUniversalID='" + root + "' AND FillerOrderNum!='' AND FillerOrderUniversalID!='')";
        return Crud.EhrLabCrud.SelectOne(command);
    }

    /**
    * 
    */
    public static List<EhrLab> getAllForPat(long patNum) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            return Meth.<List<EhrLab>>GetObject(MethodBase.GetCurrentMethod(), patNum);
        }
         
        String command = "SELECT * FROM ehrlab WHERE PatNum = " + POut.long(patNum);
        List<EhrLab> retVal = Crud.EhrLabCrud.SelectMany(command);
        return retVal;
    }

    /**
    * 
    */
    public static List<EhrLab> getAllForPatInDateRange(long patNum, DateTime dateStart, DateTime dateEnd) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            return Meth.<List<EhrLab>>GetObject(MethodBase.GetCurrentMethod(), patNum);
        }
         
        //TODO: Finish this with Travis' Stuff
        String command = "SELECT * FROM ehrlab WHERE PatNum = " + POut.long(patNum);
        List<EhrLab> retVal = Crud.EhrLabCrud.SelectMany(command);
        return retVal;
    }

    /**
    * Helper function to return a list of descriptions for the HL70203 enumeration.  First item in the list is blank.
    */
    public static List<String> getHL70203Descriptions() throws Exception {
        List<String> retVal = new List<String>();
        retVal.Add("");
        //Blank
        retVal.Add("Account number");
        //AN
        retVal.Add("Account number creditor");
        //ANC
        retVal.Add("Account number debitor");
        //AND
        retVal.Add("Advanced practice registered nurse");
        //APRN
        retVal.Add("American express");
        //AM
        retVal.Add("Anonymous identifier");
        //ANON
        retVal.Add("Bank account number");
        //BA
        retVal.Add("Bank card number");
        //BC
        retVal.Add("Birth registry number");
        //BR
        retVal.Add("Breed registry number");
        //BRN
        retVal.Add("Cost center number");
        //CC
        retVal.Add("County number");
        //CY
        retVal.Add("Dentist license number");
        //DDS
        retVal.Add("Diner's club card");
        //DI
        retVal.Add("Discover card");
        //DS
        retVal.Add("Doctor number");
        //DN
        retVal.Add("Donor registration number");
        //DR
        retVal.Add("Driver's license number");
        //DL
        retVal.Add("Drug enforcement administration");
        //DEA
        retVal.Add("Drug furnishing number");
        //DFN
        retVal.Add("Employee number");
        //EI
        retVal.Add("Employer number");
        //EN
        retVal.Add("Facility ID");
        //FI
        retVal.Add("General ledger number");
        //GL
        retVal.Add("Guarantor external identifier");
        //GN
        retVal.Add("Guarantor internal identifier");
        //GI
        retVal.Add("Health card number");
        //HC
        retVal.Add("Indigenous/Aboriginal");
        //IND
        retVal.Add("Jurisdictional health number");
        //JHN
        retVal.Add("Labor and industries number");
        //LI
        retVal.Add("License number");
        //LN
        retVal.Add("Living subject enterprise number");
        //PE
        retVal.Add("Local registry ID");
        //LR
        retVal.Add("MasterCard");
        //MS
        retVal.Add("Medical license number");
        //MD
        retVal.Add("Medical record number");
        //MR
        retVal.Add("Universal physician identification numbers");
        //UPIN
        retVal.Add("Member number");
        //MB
        retVal.Add("Microchip number");
        //MCN
        retVal.Add("Military ID number");
        //MI
        retVal.Add("National employer identifier");
        //NE
        retVal.Add("National health plan identifier");
        //NH
        retVal.Add("National insurance organization identifier");
        //NII
        retVal.Add("National insurance payor identifier");
        //NIIP
        retVal.Add("National person identifier");
        //NNxxx
        retVal.Add("National provider identifier");
        //NPI
        retVal.Add("National unique individual identifier");
        //NI
        retVal.Add("Nurse practitioner number");
        //NP
        retVal.Add("Optometrist license number");
        //OD
        retVal.Add("Organization identifier");
        //XX
        retVal.Add("Osteopathic license number");
        //DO
        retVal.Add("Passport number");
        //PPN
        retVal.Add("Patient external identifier");
        //PT
        retVal.Add("Patient internal identifier");
        //PI
        retVal.Add("Patient Medicaid number");
        //MA
        retVal.Add("Patient's Medicare number");
        //MC
        retVal.Add("Penitentiary institution number");
        //PCN
        retVal.Add("Pension number");
        //PEN
        retVal.Add("Permanent resident card number");
        //PRC
        retVal.Add("Person number");
        //PN
        retVal.Add("Pharmacist license number");
        //RPH
        retVal.Add("Physician assistant number");
        //PA
        retVal.Add("Podiatrist license number");
        //DPM
        retVal.Add("Practitioner Medicaid number");
        //MCD
        retVal.Add("Practitioner Medicare number");
        //MCR
        retVal.Add("Provider number");
        //PRN
        retVal.Add("QA number");
        //QA
        retVal.Add("Railroad retirement number");
        //RR
        retVal.Add("Regional registry ID");
        //RRI
        retVal.Add("Registered nurse number");
        //RN
        retVal.Add("Resource identifier");
        //RI
        retVal.Add("Social security number");
        //SS
        retVal.Add("Specimen identifier");
        //SID
        retVal.Add("State license");
        //SL
        retVal.Add("State registry ID");
        //SR
        retVal.Add("Subscriber number");
        //SN
        retVal.Add("Tax ID number");
        //TAX
        retVal.Add("Temporary account number");
        //ANT
        retVal.Add("Temporary living subject number");
        //PNT
        retVal.Add("Temporary medical record number");
        //MRT
        retVal.Add("Treaty Number");
        //TN
        retVal.Add("Unspecified identifier");
        //U
        retVal.Add("VISA");
        //VS
        retVal.Add("Visit number");
        //VN
        retVal.Add("WIC identifier");
        //WC
        retVal.Add("Workers' comp number");
        return retVal;
    }

    //WCN
    /**
    * Helper function to return a list of descriptions for the HL70065 enumeration.  First item in the list is blank.
    */
    public static List<String> getHL70065Descriptions() throws Exception {
        //No need to check RemotingRole;
        List<String> retVal = new List<String>();
        retVal.Add("");
        //Blank
        retVal.Add("Add ordered tests to the existing specimen");
        //A,
        retVal.Add("Generated order; reflex order");
        //G,
        retVal.Add("Lab to obtain specimen from patient");
        //L,
        retVal.Add("Specimen obtained by service other than lab");
        return retVal;
    }

    //O
    /**
    * Helper function to return a list of descriptions for the HL70123 enumeration.  First item in the list is blank.
    */
    public static List<String> getHL70123Descriptions() throws Exception {
        //No need to check RemotingRole;
        List<String> retVal = new List<String>();
        retVal.Add("");
        //Blank
        retVal.Add("Some but not all results available.");
        //A,
        retVal.Add("Correction to results.");
        //C,
        retVal.Add("Final Results; results stored and verified. Can only be changed with a corrected result.");
        //F,
        retVal.Add("No results available; specimen received, procedure incomplete.");
        //I,
        retVal.Add("Order received; specimen not yet received.");
        //O,
        retVal.Add("Preliminary: A verified early result is available, final results not yet obtained.");
        //P,
        retVal.Add("Results stored; not yet verified.");
        //R,
        retVal.Add("No results available; procedure scheduled but not done.");
        //S,
        retVal.Add("No results available; Order canceled.");
        return retVal;
    }

    //X
    /**
    * 
    */
    public static long insert(EhrLab ehrLab) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            ehrLab.EhrLabNum = Meth.GetLong(MethodBase.GetCurrentMethod(), ehrLab);
            return ehrLab.EhrLabNum;
        }
         
        return Crud.EhrLabCrud.Insert(ehrLab);
    }

    /**
    * 
    */
    public static void update(EhrLab ehrLab) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            Meth.GetVoid(MethodBase.GetCurrentMethod(), ehrLab);
            return ;
        }
         
        Crud.EhrLabCrud.Update(ehrLab);
    }

    /**
    * Deletes EhrLab, EhrLabResults, EhrLabResultsCopyTos, EhrLabClinicalInfos, and EhrLabSpecimens.
    */
    public static void delete(long ehrLabNum) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            Meth.GetVoid(MethodBase.GetCurrentMethod(), ehrLabNum);
            return ;
        }
         
        String command = "DELETE FROM ehrlab WHERE EhrLabNum = " + POut.long(ehrLabNum);
        Db.nonQ(command);
        EhrLabNotes.deleteForLab(ehrLabNum);
        EhrLabResults.deleteForLab(ehrLabNum);
        EhrLabResultsCopyTos.deleteForLab(ehrLabNum);
        EhrLabClinicalInfos.deleteForLab(ehrLabNum);
        EhrLabSpecimens.deleteForLab(ehrLabNum);
    }

}


//If this table type will exist as cached data, uncomment the CachePattern region below and edit.
/*
		#region CachePattern
		//This region can be eliminated if this is not a table type with cached data.
		//If leaving this region in place, be sure to add RefreshCache and FillCache 
		//to the Cache.cs file with all the other Cache types.
		///<summary>A list of all EhrLabs.</summary>
		private static List<EhrLab> listt;
		///<summary>A list of all EhrLabs.</summary>
		public static List<EhrLab> Listt{
			get {
				if(listt==null) {
					RefreshCache();
				}
				return listt;
			}
			set {
				listt=value;
			}
		}
		///<summary></summary>
		public static DataTable RefreshCache(){
			//No need to check RemotingRole; Calls GetTableRemotelyIfNeeded().
			string command="SELECT * FROM ehrlab ORDER BY ItemOrder";//stub query probably needs to be changed
			DataTable table=Cache.GetTableRemotelyIfNeeded(MethodBase.GetCurrentMethod(),command);
			table.TableName="EhrLab";
			FillCache(table);
			return table;
		}
		///<summary></summary>
		public static void FillCache(DataTable table){
			//No need to check RemotingRole; no call to db.
			listt=Crud.EhrLabCrud.TableToList(table);
		}
		#endregion
		*/
/*
		Only pull out the methods below as you need them.  Otherwise, leave them commented out.
		///<summary></summary>
		public static long Insert(EhrLab ehrLab){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb){
				ehrLab.EhrLabNum=Meth.GetLong(MethodBase.GetCurrentMethod(),ehrLab);
				return ehrLab.EhrLabNum;
			}
			return Crud.EhrLabCrud.Insert(ehrLab);
		}
		///<summary></summary>
		public static void Update(EhrLab ehrLab){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb){
				Meth.GetVoid(MethodBase.GetCurrentMethod(),ehrLab);
				return;
			}
			Crud.EhrLabCrud.Update(ehrLab);
		}
		*/