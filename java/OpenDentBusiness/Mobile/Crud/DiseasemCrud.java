//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:05 PM
//

package OpenDentBusiness.Mobile.Crud;

import OpenDentBusiness.Db;
import OpenDentBusiness.Disease;
import OpenDentBusiness.DiseaseDefs;
import OpenDentBusiness.ICD9s;
import OpenDentBusiness.Mobile.Diseasem;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.ProblemStatus;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class DiseasemCrud   
{
    /**
    * Gets one Diseasem object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.
    */
    public static Diseasem selectOne(long customerNum, long diseaseNum) throws Exception {
        String command = "SELECT * FROM diseasem " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND DiseaseNum = " + POut.long(diseaseNum);
        List<Diseasem> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Diseasem object from the database using a query.
    */
    public static Diseasem selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Diseasem> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Diseasem objects from the database using a query.
    */
    public static List<Diseasem> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Diseasem> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Diseasem> tableToList(DataTable table) throws Exception {
        List<Diseasem> retVal = new List<Diseasem>();
        Diseasem diseasem;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            diseasem = new Diseasem();
            diseasem.CustomerNum = PIn.Long(table.Rows[i]["CustomerNum"].ToString());
            diseasem.DiseaseNum = PIn.Long(table.Rows[i]["DiseaseNum"].ToString());
            diseasem.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            diseasem.DiseaseDefNum = PIn.Long(table.Rows[i]["DiseaseDefNum"].ToString());
            diseasem.PatNote = PIn.String(table.Rows[i]["PatNote"].ToString());
            diseasem.ICD9Num = PIn.Long(table.Rows[i]["ICD9Num"].ToString());
            diseasem.ProbStatus = (ProblemStatus)PIn.Int(table.Rows[i]["ProbStatus"].ToString());
            diseasem.DateStart = PIn.Date(table.Rows[i]["DateStart"].ToString());
            diseasem.DateStop = PIn.Date(table.Rows[i]["DateStop"].ToString());
            retVal.Add(diseasem);
        }
        return retVal;
    }

    /**
    * Usually set useExistingPK=true.  Inserts one Diseasem into the database.
    */
    public static long insert(Diseasem diseasem, boolean useExistingPK) throws Exception {
        if (!useExistingPK)
        {
            diseasem.DiseaseNum = ReplicationServers.getKey("diseasem","DiseaseNum");
        }
         
        String command = "INSERT INTO diseasem (";
        command += "DiseaseNum,";
        command += "CustomerNum,PatNum,DiseaseDefNum,PatNote,ICD9Num,ProbStatus,DateStart,DateStop) VALUES(";
        command += POut.long(diseasem.DiseaseNum) + ",";
        command += POut.long(diseasem.CustomerNum) + "," + POut.long(diseasem.PatNum) + "," + POut.long(diseasem.DiseaseDefNum) + "," + "'" + POut.string(diseasem.PatNote) + "'," + POut.long(diseasem.ICD9Num) + "," + POut.int((int)diseasem.ProbStatus) + "," + POut.date(diseasem.DateStart) + "," + POut.date(diseasem.DateStop) + ")";
        Db.nonQ(command);
        return diseasem.DiseaseNum;
    }

    //There is no autoincrement in the mobile server.
    /**
    * Updates one Diseasem in the database.
    */
    public static void update(Diseasem diseasem) throws Exception {
        String command = "UPDATE diseasem SET " + "PatNum       =  " + POut.long(diseasem.PatNum) + ", " + "DiseaseDefNum=  " + POut.long(diseasem.DiseaseDefNum) + ", " + "PatNote      = '" + POut.string(diseasem.PatNote) + "', " + "ICD9Num      =  " + POut.long(diseasem.ICD9Num) + ", " + "ProbStatus   =  " + POut.int((int)diseasem.ProbStatus) + ", " + "DateStart    =  " + POut.date(diseasem.DateStart) + ", " + "DateStop     =  " + POut.date(diseasem.DateStop) + " " + "WHERE CustomerNum = " + POut.long(diseasem.CustomerNum) + " AND DiseaseNum = " + POut.long(diseasem.DiseaseNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one Diseasem from the database.
    */
    public static void delete(long customerNum, long diseaseNum) throws Exception {
        String command = "DELETE FROM diseasem " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND DiseaseNum = " + POut.long(diseaseNum);
        Db.nonQ(command);
    }

    /**
    * Converts one Disease object to its mobile equivalent.  Warning! CustomerNum will always be 0.
    */
    public static Diseasem convertToM(Disease disease) throws Exception {
        Diseasem diseasem = new Diseasem();
        //CustomerNum cannot be set.  Remains 0.
        diseasem.DiseaseNum = disease.DiseaseNum;
        diseasem.PatNum = disease.PatNum;
        diseasem.DiseaseDefNum = disease.DiseaseDefNum;
        diseasem.PatNote = disease.PatNote;
        diseasem.ICD9Num = ICD9s.getByCode(DiseaseDefs.getItem(disease.DiseaseDefNum).ICD9Code).ICD9Num;
        diseasem.ProbStatus = disease.ProbStatus;
        diseasem.DateStart = disease.DateStart;
        diseasem.DateStop = disease.DateStop;
        return diseasem;
    }

}


