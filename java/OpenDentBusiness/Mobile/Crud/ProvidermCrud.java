//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:06 PM
//

package OpenDentBusiness.Mobile.Crud;

import OpenDentBusiness.Db;
import OpenDentBusiness.Mobile.Providerm;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.Provider;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ProvidermCrud   
{
    /**
    * Gets one Providerm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.
    */
    public static Providerm selectOne(long customerNum, long provNum) throws Exception {
        String command = "SELECT * FROM providerm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND ProvNum = " + POut.long(provNum);
        List<Providerm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Providerm object from the database using a query.
    */
    public static Providerm selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Providerm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Providerm objects from the database using a query.
    */
    public static List<Providerm> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Providerm> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Providerm> tableToList(DataTable table) throws Exception {
        List<Providerm> retVal = new List<Providerm>();
        Providerm providerm;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            providerm = new Providerm();
            providerm.CustomerNum = PIn.Long(table.Rows[i]["CustomerNum"].ToString());
            providerm.ProvNum = PIn.Long(table.Rows[i]["ProvNum"].ToString());
            providerm.Abbr = PIn.String(table.Rows[i]["Abbr"].ToString());
            providerm.IsSecondary = PIn.Bool(table.Rows[i]["IsSecondary"].ToString());
            providerm.ProvColor = Color.FromArgb(PIn.Int(table.Rows[i]["ProvColor"].ToString()));
            retVal.Add(providerm);
        }
        return retVal;
    }

    /**
    * Usually set useExistingPK=true.  Inserts one Providerm into the database.
    */
    public static long insert(Providerm providerm, boolean useExistingPK) throws Exception {
        if (!useExistingPK)
        {
            providerm.ProvNum = ReplicationServers.getKey("providerm","ProvNum");
        }
         
        String command = "INSERT INTO providerm (";
        command += "ProvNum,";
        command += "CustomerNum,Abbr,IsSecondary,ProvColor) VALUES(";
        command += POut.long(providerm.ProvNum) + ",";
        command += POut.long(providerm.CustomerNum) + "," + "'" + POut.string(providerm.Abbr) + "'," + POut.bool(providerm.IsSecondary) + "," + POut.Int(providerm.ProvColor.ToArgb()) + ")";
        Db.nonQ(command);
        return providerm.ProvNum;
    }

    //There is no autoincrement in the mobile server.
    /**
    * Updates one Providerm in the database.
    */
    public static void update(Providerm providerm) throws Exception {
        String command = "UPDATE providerm SET " + "Abbr       = '" + POut.string(providerm.Abbr) + "', " + "IsSecondary=  " + POut.bool(providerm.IsSecondary) + ", " + "ProvColor  =  " + POut.Int(providerm.ProvColor.ToArgb()) + " " + "WHERE CustomerNum = " + POut.long(providerm.CustomerNum) + " AND ProvNum = " + POut.long(providerm.ProvNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one Providerm from the database.
    */
    public static void delete(long customerNum, long provNum) throws Exception {
        String command = "DELETE FROM providerm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND ProvNum = " + POut.long(provNum);
        Db.nonQ(command);
    }

    /**
    * Converts one Provider object to its mobile equivalent.  Warning! CustomerNum will always be 0.
    */
    public static Providerm convertToM(Provider provider) throws Exception {
        Providerm providerm = new Providerm();
        //CustomerNum cannot be set.  Remains 0.
        providerm.ProvNum = provider.ProvNum;
        providerm.Abbr = provider.Abbr;
        providerm.IsSecondary = provider.IsSecondary;
        providerm.ProvColor = provider.ProvColor;
        return providerm;
    }

}


