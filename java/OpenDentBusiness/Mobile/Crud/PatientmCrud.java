//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:06 PM
//

package OpenDentBusiness.Mobile.Crud;

import OpenDentBusiness.ContactMethod;
import OpenDentBusiness.Db;
import OpenDentBusiness.Mobile.Patientm;
import OpenDentBusiness.Patient;
import OpenDentBusiness.PatientGender;
import OpenDentBusiness.PatientPosition;
import OpenDentBusiness.PatientStatus;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class PatientmCrud   
{
    /**
    * Gets one Patientm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.
    */
    public static Patientm selectOne(long customerNum, long patNum) throws Exception {
        String command = "SELECT * FROM patientm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND PatNum = " + POut.long(patNum);
        List<Patientm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Patientm object from the database using a query.
    */
    public static Patientm selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Patientm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Patientm objects from the database using a query.
    */
    public static List<Patientm> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Patientm> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Patientm> tableToList(DataTable table) throws Exception {
        List<Patientm> retVal = new List<Patientm>();
        Patientm patientm;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            patientm = new Patientm();
            patientm.CustomerNum = PIn.Long(table.Rows[i]["CustomerNum"].ToString());
            patientm.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            patientm.LName = PIn.String(table.Rows[i]["LName"].ToString());
            patientm.FName = PIn.String(table.Rows[i]["FName"].ToString());
            patientm.MiddleI = PIn.String(table.Rows[i]["MiddleI"].ToString());
            patientm.Preferred = PIn.String(table.Rows[i]["Preferred"].ToString());
            patientm.PatStatus = (PatientStatus)PIn.Int(table.Rows[i]["PatStatus"].ToString());
            patientm.Gender = (PatientGender)PIn.Int(table.Rows[i]["Gender"].ToString());
            patientm.Position = (PatientPosition)PIn.Int(table.Rows[i]["Position"].ToString());
            patientm.Birthdate = PIn.Date(table.Rows[i]["Birthdate"].ToString());
            patientm.Address = PIn.String(table.Rows[i]["Address"].ToString());
            patientm.Address2 = PIn.String(table.Rows[i]["Address2"].ToString());
            patientm.City = PIn.String(table.Rows[i]["City"].ToString());
            patientm.State = PIn.String(table.Rows[i]["State"].ToString());
            patientm.Zip = PIn.String(table.Rows[i]["Zip"].ToString());
            patientm.HmPhone = PIn.String(table.Rows[i]["HmPhone"].ToString());
            patientm.WkPhone = PIn.String(table.Rows[i]["WkPhone"].ToString());
            patientm.WirelessPhone = PIn.String(table.Rows[i]["WirelessPhone"].ToString());
            patientm.Guarantor = PIn.Long(table.Rows[i]["Guarantor"].ToString());
            patientm.Email = PIn.String(table.Rows[i]["Email"].ToString());
            patientm.AddrNote = PIn.String(table.Rows[i]["AddrNote"].ToString());
            patientm.ClinicNum = PIn.Long(table.Rows[i]["ClinicNum"].ToString());
            patientm.InsEst = PIn.Double(table.Rows[i]["InsEst"].ToString());
            patientm.BalTotal = PIn.Double(table.Rows[i]["BalTotal"].ToString());
            patientm.PreferContactMethod = (ContactMethod)PIn.Int(table.Rows[i]["PreferContactMethod"].ToString());
            patientm.OnlinePassword = PIn.String(table.Rows[i]["OnlinePassword"].ToString());
            retVal.Add(patientm);
        }
        return retVal;
    }

    /**
    * Usually set useExistingPK=true.  Inserts one Patientm into the database.
    */
    public static long insert(Patientm patientm, boolean useExistingPK) throws Exception {
        if (!useExistingPK)
        {
            patientm.PatNum = ReplicationServers.getKey("patientm","PatNum");
        }
         
        String command = "INSERT INTO patientm (";
        command += "PatNum,";
        command += "CustomerNum,LName,FName,MiddleI,Preferred,PatStatus,Gender,Position,Birthdate,Address,Address2,City,State,Zip,HmPhone,WkPhone,WirelessPhone,Guarantor,Email,AddrNote,ClinicNum,InsEst,BalTotal,PreferContactMethod,OnlinePassword) VALUES(";
        command += POut.long(patientm.PatNum) + ",";
        command += POut.long(patientm.CustomerNum) + "," + "'" + POut.string(patientm.LName) + "'," + "'" + POut.string(patientm.FName) + "'," + "'" + POut.string(patientm.MiddleI) + "'," + "'" + POut.string(patientm.Preferred) + "'," + POut.int((int)patientm.PatStatus) + "," + POut.int((int)patientm.Gender) + "," + POut.int((int)patientm.Position) + "," + POut.date(patientm.Birthdate) + "," + "'" + POut.string(patientm.Address) + "'," + "'" + POut.string(patientm.Address2) + "'," + "'" + POut.string(patientm.City) + "'," + "'" + POut.string(patientm.State) + "'," + "'" + POut.string(patientm.Zip) + "'," + "'" + POut.string(patientm.HmPhone) + "'," + "'" + POut.string(patientm.WkPhone) + "'," + "'" + POut.string(patientm.WirelessPhone) + "'," + POut.long(patientm.Guarantor) + "," + "'" + POut.string(patientm.Email) + "'," + "'" + POut.string(patientm.AddrNote) + "'," + POut.long(patientm.ClinicNum) + "," + "'" + POut.double(patientm.InsEst) + "'," + "'" + POut.double(patientm.BalTotal) + "'," + POut.int((int)patientm.PreferContactMethod) + "," + "'" + POut.string(patientm.OnlinePassword) + "')";
        Db.nonQ(command);
        return patientm.PatNum;
    }

    //There is no autoincrement in the mobile server.
    /**
    * Updates one Patientm in the database.
    */
    public static void update(Patientm patientm) throws Exception {
        String command = "UPDATE patientm SET " + "LName              = '" + POut.string(patientm.LName) + "', " + "FName              = '" + POut.string(patientm.FName) + "', " + "MiddleI            = '" + POut.string(patientm.MiddleI) + "', " + "Preferred          = '" + POut.string(patientm.Preferred) + "', " + "PatStatus          =  " + POut.int((int)patientm.PatStatus) + ", " + "Gender             =  " + POut.int((int)patientm.Gender) + ", " + "Position           =  " + POut.int((int)patientm.Position) + ", " + "Birthdate          =  " + POut.date(patientm.Birthdate) + ", " + "Address            = '" + POut.string(patientm.Address) + "', " + "Address2           = '" + POut.string(patientm.Address2) + "', " + "City               = '" + POut.string(patientm.City) + "', " + "State              = '" + POut.string(patientm.State) + "', " + "Zip                = '" + POut.string(patientm.Zip) + "', " + "HmPhone            = '" + POut.string(patientm.HmPhone) + "', " + "WkPhone            = '" + POut.string(patientm.WkPhone) + "', " + "WirelessPhone      = '" + POut.string(patientm.WirelessPhone) + "', " + "Guarantor          =  " + POut.long(patientm.Guarantor) + ", " + "Email              = '" + POut.string(patientm.Email) + "', " + "AddrNote           = '" + POut.string(patientm.AddrNote) + "', " + "ClinicNum          =  " + POut.long(patientm.ClinicNum) + ", " + "InsEst             = '" + POut.double(patientm.InsEst) + "', " + "BalTotal           = '" + POut.double(patientm.BalTotal) + "', " + "PreferContactMethod=  " + POut.int((int)patientm.PreferContactMethod) + ", " + "OnlinePassword     = '" + POut.string(patientm.OnlinePassword) + "' " + "WHERE CustomerNum = " + POut.long(patientm.CustomerNum) + " AND PatNum = " + POut.long(patientm.PatNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one Patientm from the database.
    */
    public static void delete(long customerNum, long patNum) throws Exception {
        String command = "DELETE FROM patientm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND PatNum = " + POut.long(patNum);
        Db.nonQ(command);
    }

    /**
    * Converts one Patient object to its mobile equivalent.  Warning! CustomerNum will always be 0.
    */
    public static Patientm convertToM(Patient patient) throws Exception {
        Patientm patientm = new Patientm();
        //CustomerNum cannot be set.  Remains 0.
        patientm.PatNum = patient.PatNum;
        patientm.LName = patient.LName;
        patientm.FName = patient.FName;
        patientm.MiddleI = patient.MiddleI;
        patientm.Preferred = patient.Preferred;
        patientm.PatStatus = patient.PatStatus;
        patientm.Gender = patient.Gender;
        patientm.Position = patient.Position;
        patientm.Birthdate = patient.Birthdate;
        patientm.Address = patient.Address;
        patientm.Address2 = patient.Address2;
        patientm.City = patient.City;
        patientm.State = patient.State;
        patientm.Zip = patient.Zip;
        patientm.HmPhone = patient.HmPhone;
        patientm.WkPhone = patient.WkPhone;
        patientm.WirelessPhone = patient.WirelessPhone;
        patientm.Guarantor = patient.Guarantor;
        patientm.Email = patient.Email;
        patientm.AddrNote = patient.AddrNote;
        patientm.ClinicNum = patient.ClinicNum;
        patientm.InsEst = patient.InsEst;
        patientm.BalTotal = patient.BalTotal;
        patientm.PreferContactMethod = patient.PreferContactMethod;
        patientm.OnlinePassword = patient.OnlinePassword;
        return patientm;
    }

}


