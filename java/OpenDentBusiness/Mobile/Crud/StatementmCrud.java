//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:06 PM
//

package OpenDentBusiness.Mobile.Crud;

import OpenDentBusiness.Db;
import OpenDentBusiness.Mobile.Statementm;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;
import OpenDentBusiness.Statement;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class StatementmCrud   
{
    /**
    * Gets one Statementm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.
    */
    public static Statementm selectOne(long customerNum, long statementNum) throws Exception {
        String command = "SELECT * FROM statementm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND StatementNum = " + POut.long(statementNum);
        List<Statementm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Statementm object from the database using a query.
    */
    public static Statementm selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Statementm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Statementm objects from the database using a query.
    */
    public static List<Statementm> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Statementm> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Statementm> tableToList(DataTable table) throws Exception {
        List<Statementm> retVal = new List<Statementm>();
        Statementm statementm;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            statementm = new Statementm();
            statementm.CustomerNum = PIn.Long(table.Rows[i]["CustomerNum"].ToString());
            statementm.StatementNum = PIn.Long(table.Rows[i]["StatementNum"].ToString());
            statementm.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            statementm.DateSent = PIn.Date(table.Rows[i]["DateSent"].ToString());
            statementm.DocNum = PIn.Long(table.Rows[i]["DocNum"].ToString());
            retVal.Add(statementm);
        }
        return retVal;
    }

    /**
    * Usually set useExistingPK=true.  Inserts one Statementm into the database.
    */
    public static long insert(Statementm statementm, boolean useExistingPK) throws Exception {
        if (!useExistingPK)
        {
            statementm.StatementNum = ReplicationServers.getKey("statementm","StatementNum");
        }
         
        String command = "INSERT INTO statementm (";
        command += "StatementNum,";
        command += "CustomerNum,PatNum,DateSent,DocNum) VALUES(";
        command += POut.long(statementm.StatementNum) + ",";
        command += POut.long(statementm.CustomerNum) + "," + POut.long(statementm.PatNum) + "," + POut.date(statementm.DateSent) + "," + POut.long(statementm.DocNum) + ")";
        Db.nonQ(command);
        return statementm.StatementNum;
    }

    //There is no autoincrement in the mobile server.
    /**
    * Updates one Statementm in the database.
    */
    public static void update(Statementm statementm) throws Exception {
        String command = "UPDATE statementm SET " + "PatNum      =  " + POut.long(statementm.PatNum) + ", " + "DateSent    =  " + POut.date(statementm.DateSent) + ", " + "DocNum      =  " + POut.long(statementm.DocNum) + " " + "WHERE CustomerNum = " + POut.long(statementm.CustomerNum) + " AND StatementNum = " + POut.long(statementm.StatementNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one Statementm from the database.
    */
    public static void delete(long customerNum, long statementNum) throws Exception {
        String command = "DELETE FROM statementm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND StatementNum = " + POut.long(statementNum);
        Db.nonQ(command);
    }

    /**
    * Converts one Statement object to its mobile equivalent.  Warning! CustomerNum will always be 0.
    */
    public static Statementm convertToM(Statement statement) throws Exception {
        Statementm statementm = new Statementm();
        //CustomerNum cannot be set.  Remains 0.
        statementm.StatementNum = statement.StatementNum;
        statementm.PatNum = statement.PatNum;
        statementm.DateSent = statement.DateSent;
        statementm.DocNum = statement.DocNum;
        return statementm;
    }

}


