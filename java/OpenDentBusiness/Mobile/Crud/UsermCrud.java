//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:06 PM
//

package OpenDentBusiness.Mobile.Crud;

import OpenDentBusiness.Db;
import OpenDentBusiness.Mobile.Userm;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class UsermCrud   
{
    /**
    * Gets one Userm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.
    */
    public static Userm selectOne(long customerNum, long usermNum) throws Exception {
        String command = "SELECT * FROM userm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND UsermNum = " + POut.long(usermNum);
        List<Userm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Userm object from the database using a query.
    */
    public static Userm selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Userm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Userm objects from the database using a query.
    */
    public static List<Userm> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Userm> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Userm> tableToList(DataTable table) throws Exception {
        List<Userm> retVal = new List<Userm>();
        Userm userm;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            userm = new Userm();
            userm.CustomerNum = PIn.Long(table.Rows[i]["CustomerNum"].ToString());
            userm.UsermNum = PIn.Long(table.Rows[i]["UsermNum"].ToString());
            userm.UserName = PIn.String(table.Rows[i]["UserName"].ToString());
            userm.Password = PIn.String(table.Rows[i]["Password"].ToString());
            retVal.Add(userm);
        }
        return retVal;
    }

    /**
    * Usually set useExistingPK=true.  Inserts one Userm into the database.
    */
    public static long insert(Userm userm, boolean useExistingPK) throws Exception {
        if (!useExistingPK)
        {
            userm.UsermNum = ReplicationServers.getKey("userm","UsermNum");
        }
         
        String command = "INSERT INTO userm (";
        command += "UsermNum,";
        command += "CustomerNum,UserName,Password) VALUES(";
        command += POut.long(userm.UsermNum) + ",";
        command += POut.long(userm.CustomerNum) + "," + "'" + POut.string(userm.UserName) + "'," + "'" + POut.string(userm.Password) + "')";
        Db.nonQ(command);
        return userm.UsermNum;
    }

    //There is no autoincrement in the mobile server.
    /**
    * Updates one Userm in the database.
    */
    public static void update(Userm userm) throws Exception {
        String command = "UPDATE userm SET " + "UserName   = '" + POut.string(userm.UserName) + "', " + "Password   = '" + POut.string(userm.Password) + "' " + "WHERE CustomerNum = " + POut.long(userm.CustomerNum) + " AND UsermNum = " + POut.long(userm.UsermNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one Userm from the database.
    */
    public static void delete(long customerNum, long usermNum) throws Exception {
        String command = "DELETE FROM userm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND UsermNum = " + POut.long(usermNum);
        Db.nonQ(command);
    }

}


//ConvertToM not applicable.