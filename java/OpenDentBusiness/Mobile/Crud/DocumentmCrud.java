//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:05 PM
//

package OpenDentBusiness.Mobile.Crud;

import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.Mobile.Documentm;
import OpenDentBusiness.OdDbType;
import OpenDentBusiness.OdSqlParameter;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class DocumentmCrud   
{
    /**
    * Gets one Documentm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.
    */
    public static Documentm selectOne(long customerNum, long docNum) throws Exception {
        String command = "SELECT * FROM documentm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND DocNum = " + POut.long(docNum);
        List<Documentm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Documentm object from the database using a query.
    */
    public static Documentm selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Documentm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Documentm objects from the database using a query.
    */
    public static List<Documentm> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Documentm> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Documentm> tableToList(DataTable table) throws Exception {
        List<Documentm> retVal = new List<Documentm>();
        Documentm documentm;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            documentm = new Documentm();
            documentm.CustomerNum = PIn.Long(table.Rows[i]["CustomerNum"].ToString());
            documentm.DocNum = PIn.Long(table.Rows[i]["DocNum"].ToString());
            documentm.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            documentm.RawBase64 = PIn.String(table.Rows[i]["RawBase64"].ToString());
            retVal.Add(documentm);
        }
        return retVal;
    }

    /**
    * Usually set useExistingPK=true.  Inserts one Documentm into the database.
    */
    public static long insert(Documentm documentm, boolean useExistingPK) throws Exception {
        if (!useExistingPK)
        {
            documentm.DocNum = ReplicationServers.getKey("documentm","DocNum");
        }
         
        String command = "INSERT INTO documentm (";
        command += "DocNum,";
        command += "CustomerNum,PatNum,RawBase64) VALUES(";
        command += POut.long(documentm.DocNum) + ",";
        command += POut.long(documentm.CustomerNum) + "," + POut.long(documentm.PatNum) + "," + DbHelper.getParamChar() + "paramRawBase64)";
        if (documentm.RawBase64 == null)
        {
            documentm.RawBase64 = "";
        }
         
        OdSqlParameter paramRawBase64 = new OdSqlParameter("paramRawBase64", OdDbType.Text, documentm.RawBase64);
        Db.nonQ(command,paramRawBase64);
        return documentm.DocNum;
    }

    //There is no autoincrement in the mobile server.
    /**
    * Updates one Documentm in the database.
    */
    public static void update(Documentm documentm) throws Exception {
        String command = "UPDATE documentm SET " + "PatNum     =  " + POut.long(documentm.PatNum) + ", " + "RawBase64  =  " + DbHelper.getParamChar() + "paramRawBase64 " + "WHERE CustomerNum = " + POut.long(documentm.CustomerNum) + " AND DocNum = " + POut.long(documentm.DocNum);
        if (documentm.RawBase64 == null)
        {
            documentm.RawBase64 = "";
        }
         
        OdSqlParameter paramRawBase64 = new OdSqlParameter("paramRawBase64", OdDbType.Text, documentm.RawBase64);
        Db.nonQ(command,paramRawBase64);
    }

    /**
    * Deletes one Documentm from the database.
    */
    public static void delete(long customerNum, long docNum) throws Exception {
        String command = "DELETE FROM documentm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND DocNum = " + POut.long(docNum);
        Db.nonQ(command);
    }

    /**
    * Converts one Document object to its mobile equivalent.  Warning! CustomerNum will always be 0.
    */
    public static Documentm convertToM(OpenDentBusiness.Document document) throws Exception {
        Documentm documentm = new Documentm();
        //CustomerNum cannot be set.  Remains 0.
        documentm.DocNum = document.DocNum;
        documentm.PatNum = document.PatNum;
        documentm.RawBase64 = document.RawBase64;
        return documentm;
    }

}


