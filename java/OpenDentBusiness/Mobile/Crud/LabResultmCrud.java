//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:06 PM
//

package OpenDentBusiness.Mobile.Crud;

import OpenDentBusiness.Db;
import OpenDentBusiness.LabAbnormalFlag;
import OpenDentBusiness.LabResult;
import OpenDentBusiness.Mobile.LabResultm;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class LabResultmCrud   
{
    /**
    * Gets one LabResultm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.
    */
    public static LabResultm selectOne(long customerNum, long labResultNum) throws Exception {
        String command = "SELECT * FROM labresultm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND LabResultNum = " + POut.long(labResultNum);
        List<LabResultm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one LabResultm object from the database using a query.
    */
    public static LabResultm selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<LabResultm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of LabResultm objects from the database using a query.
    */
    public static List<LabResultm> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<LabResultm> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<LabResultm> tableToList(DataTable table) throws Exception {
        List<LabResultm> retVal = new List<LabResultm>();
        LabResultm labResultm;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            labResultm = new LabResultm();
            labResultm.CustomerNum = PIn.Long(table.Rows[i]["CustomerNum"].ToString());
            labResultm.LabResultNum = PIn.Long(table.Rows[i]["LabResultNum"].ToString());
            labResultm.LabPanelNum = PIn.Long(table.Rows[i]["LabPanelNum"].ToString());
            labResultm.DateTimeTest = PIn.DateT(table.Rows[i]["DateTimeTest"].ToString());
            labResultm.TestName = PIn.String(table.Rows[i]["TestName"].ToString());
            labResultm.TestID = PIn.String(table.Rows[i]["TestID"].ToString());
            labResultm.ObsValue = PIn.String(table.Rows[i]["ObsValue"].ToString());
            labResultm.ObsUnits = PIn.String(table.Rows[i]["ObsUnits"].ToString());
            labResultm.ObsRange = PIn.String(table.Rows[i]["ObsRange"].ToString());
            labResultm.AbnormalFlag = (LabAbnormalFlag)PIn.Int(table.Rows[i]["AbnormalFlag"].ToString());
            retVal.Add(labResultm);
        }
        return retVal;
    }

    /**
    * Usually set useExistingPK=true.  Inserts one LabResultm into the database.
    */
    public static long insert(LabResultm labResultm, boolean useExistingPK) throws Exception {
        if (!useExistingPK)
        {
            labResultm.LabResultNum = ReplicationServers.getKey("labresultm","LabResultNum");
        }
         
        String command = "INSERT INTO labresultm (";
        command += "LabResultNum,";
        command += "CustomerNum,LabPanelNum,DateTimeTest,TestName,TestID,ObsValue,ObsUnits,ObsRange,AbnormalFlag) VALUES(";
        command += POut.long(labResultm.LabResultNum) + ",";
        command += POut.long(labResultm.CustomerNum) + "," + POut.long(labResultm.LabPanelNum) + "," + POut.dateT(labResultm.DateTimeTest) + "," + "'" + POut.string(labResultm.TestName) + "'," + "'" + POut.string(labResultm.TestID) + "'," + "'" + POut.string(labResultm.ObsValue) + "'," + "'" + POut.string(labResultm.ObsUnits) + "'," + "'" + POut.string(labResultm.ObsRange) + "'," + POut.int((int)labResultm.AbnormalFlag) + ")";
        Db.nonQ(command);
        return labResultm.LabResultNum;
    }

    //There is no autoincrement in the mobile server.
    /**
    * Updates one LabResultm in the database.
    */
    public static void update(LabResultm labResultm) throws Exception {
        String command = "UPDATE labresultm SET " + "LabPanelNum =  " + POut.long(labResultm.LabPanelNum) + ", " + "DateTimeTest=  " + POut.dateT(labResultm.DateTimeTest) + ", " + "TestName    = '" + POut.string(labResultm.TestName) + "', " + "TestID      = '" + POut.string(labResultm.TestID) + "', " + "ObsValue    = '" + POut.string(labResultm.ObsValue) + "', " + "ObsUnits    = '" + POut.string(labResultm.ObsUnits) + "', " + "ObsRange    = '" + POut.string(labResultm.ObsRange) + "', " + "AbnormalFlag=  " + POut.int((int)labResultm.AbnormalFlag) + " " + "WHERE CustomerNum = " + POut.long(labResultm.CustomerNum) + " AND LabResultNum = " + POut.long(labResultm.LabResultNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one LabResultm from the database.
    */
    public static void delete(long customerNum, long labResultNum) throws Exception {
        String command = "DELETE FROM labresultm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND LabResultNum = " + POut.long(labResultNum);
        Db.nonQ(command);
    }

    /**
    * Converts one LabResult object to its mobile equivalent.  Warning! CustomerNum will always be 0.
    */
    public static LabResultm convertToM(LabResult labResult) throws Exception {
        LabResultm labResultm = new LabResultm();
        //CustomerNum cannot be set.  Remains 0.
        labResultm.LabResultNum = labResult.LabResultNum;
        labResultm.LabPanelNum = labResult.LabPanelNum;
        labResultm.DateTimeTest = labResult.DateTimeTest;
        labResultm.TestName = labResult.TestName;
        labResultm.TestID = labResult.TestID;
        labResultm.ObsValue = labResult.ObsValue;
        labResultm.ObsUnits = labResult.ObsUnits;
        labResultm.ObsRange = labResult.ObsRange;
        labResultm.AbnormalFlag = labResult.AbnormalFlag;
        return labResultm;
    }

}


