//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:06 PM
//

package OpenDentBusiness.Mobile.Crud;

import OpenDentBusiness.Db;
import OpenDentBusiness.Mobile.Recallm;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.Recall;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class RecallmCrud   
{
    /**
    * Gets one Recallm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.
    */
    public static Recallm selectOne(long customerNum, long recallNum) throws Exception {
        String command = "SELECT * FROM recallm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND RecallNum = " + POut.long(recallNum);
        List<Recallm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Recallm object from the database using a query.
    */
    public static Recallm selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Recallm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Recallm objects from the database using a query.
    */
    public static List<Recallm> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Recallm> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Recallm> tableToList(DataTable table) throws Exception {
        List<Recallm> retVal = new List<Recallm>();
        Recallm recallm;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            recallm = new Recallm();
            recallm.CustomerNum = PIn.Long(table.Rows[i]["CustomerNum"].ToString());
            recallm.RecallNum = PIn.Long(table.Rows[i]["RecallNum"].ToString());
            recallm.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            recallm.DateDue = PIn.Date(table.Rows[i]["DateDue"].ToString());
            recallm.DatePrevious = PIn.Date(table.Rows[i]["DatePrevious"].ToString());
            recallm.RecallStatus = PIn.Long(table.Rows[i]["RecallStatus"].ToString());
            recallm.Note = PIn.String(table.Rows[i]["Note"].ToString());
            recallm.IsDisabled = PIn.Bool(table.Rows[i]["IsDisabled"].ToString());
            recallm.DisableUntilBalance = PIn.Double(table.Rows[i]["DisableUntilBalance"].ToString());
            recallm.DisableUntilDate = PIn.Date(table.Rows[i]["DisableUntilDate"].ToString());
            retVal.Add(recallm);
        }
        return retVal;
    }

    /**
    * Usually set useExistingPK=true.  Inserts one Recallm into the database.
    */
    public static long insert(Recallm recallm, boolean useExistingPK) throws Exception {
        if (!useExistingPK)
        {
            recallm.RecallNum = ReplicationServers.getKey("recallm","RecallNum");
        }
         
        String command = "INSERT INTO recallm (";
        command += "RecallNum,";
        command += "CustomerNum,PatNum,DateDue,DatePrevious,RecallStatus,Note,IsDisabled,DisableUntilBalance,DisableUntilDate) VALUES(";
        command += POut.long(recallm.RecallNum) + ",";
        command += POut.long(recallm.CustomerNum) + "," + POut.long(recallm.PatNum) + "," + POut.date(recallm.DateDue) + "," + POut.date(recallm.DatePrevious) + "," + POut.long(recallm.RecallStatus) + "," + "'" + POut.string(recallm.Note) + "'," + POut.bool(recallm.IsDisabled) + "," + "'" + POut.double(recallm.DisableUntilBalance) + "'," + POut.date(recallm.DisableUntilDate) + ")";
        Db.nonQ(command);
        return recallm.RecallNum;
    }

    //There is no autoincrement in the mobile server.
    /**
    * Updates one Recallm in the database.
    */
    public static void update(Recallm recallm) throws Exception {
        String command = "UPDATE recallm SET " + "PatNum             =  " + POut.long(recallm.PatNum) + ", " + "DateDue            =  " + POut.date(recallm.DateDue) + ", " + "DatePrevious       =  " + POut.date(recallm.DatePrevious) + ", " + "RecallStatus       =  " + POut.long(recallm.RecallStatus) + ", " + "Note               = '" + POut.string(recallm.Note) + "', " + "IsDisabled         =  " + POut.bool(recallm.IsDisabled) + ", " + "DisableUntilBalance= '" + POut.double(recallm.DisableUntilBalance) + "', " + "DisableUntilDate   =  " + POut.date(recallm.DisableUntilDate) + " " + "WHERE CustomerNum = " + POut.long(recallm.CustomerNum) + " AND RecallNum = " + POut.long(recallm.RecallNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one Recallm from the database.
    */
    public static void delete(long customerNum, long recallNum) throws Exception {
        String command = "DELETE FROM recallm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND RecallNum = " + POut.long(recallNum);
        Db.nonQ(command);
    }

    /**
    * Converts one Recall object to its mobile equivalent.  Warning! CustomerNum will always be 0.
    */
    public static Recallm convertToM(Recall recall) throws Exception {
        Recallm recallm = new Recallm();
        //CustomerNum cannot be set.  Remains 0.
        recallm.RecallNum = recall.RecallNum;
        recallm.PatNum = recall.PatNum;
        recallm.DateDue = recall.DateDue;
        recallm.DatePrevious = recall.DatePrevious;
        recallm.RecallStatus = recall.RecallStatus;
        recallm.Note = recall.Note;
        recallm.IsDisabled = recall.IsDisabled;
        recallm.DisableUntilBalance = recall.DisableUntilBalance;
        recallm.DisableUntilDate = recall.DisableUntilDate;
        return recallm;
    }

}


