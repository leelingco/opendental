//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:05 PM
//

package OpenDentBusiness.Mobile.Crud;

import OpenDentBusiness.AllergyDef;
import OpenDentBusiness.Db;
import OpenDentBusiness.Mobile.AllergyDefm;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;
import OpenDentBusiness.SnomedAllergy;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class AllergyDefmCrud   
{
    /**
    * Gets one AllergyDefm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.
    */
    public static AllergyDefm selectOne(long customerNum, long allergyDefNum) throws Exception {
        String command = "SELECT * FROM allergydefm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND AllergyDefNum = " + POut.long(allergyDefNum);
        List<AllergyDefm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one AllergyDefm object from the database using a query.
    */
    public static AllergyDefm selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<AllergyDefm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of AllergyDefm objects from the database using a query.
    */
    public static List<AllergyDefm> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<AllergyDefm> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<AllergyDefm> tableToList(DataTable table) throws Exception {
        List<AllergyDefm> retVal = new List<AllergyDefm>();
        AllergyDefm allergyDefm;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            allergyDefm = new AllergyDefm();
            allergyDefm.CustomerNum = PIn.Long(table.Rows[i]["CustomerNum"].ToString());
            allergyDefm.AllergyDefNum = PIn.Long(table.Rows[i]["AllergyDefNum"].ToString());
            allergyDefm.Description = PIn.String(table.Rows[i]["Description"].ToString());
            allergyDefm.Snomed = (SnomedAllergy)PIn.Int(table.Rows[i]["SnomedType"].ToString());
            allergyDefm.MedicationNum = PIn.Long(table.Rows[i]["MedicationNum"].ToString());
            retVal.Add(allergyDefm);
        }
        return retVal;
    }

    /**
    * Usually set useExistingPK=true.  Inserts one AllergyDefm into the database.
    */
    public static long insert(AllergyDefm allergyDefm, boolean useExistingPK) throws Exception {
        if (!useExistingPK)
        {
            allergyDefm.AllergyDefNum = ReplicationServers.getKey("allergydefm","AllergyDefNum");
        }
         
        String command = "INSERT INTO allergydefm (";
        command += "AllergyDefNum,";
        command += "CustomerNum,Description,Snomed,MedicationNum) VALUES(";
        command += POut.long(allergyDefm.AllergyDefNum) + ",";
        command += POut.long(allergyDefm.CustomerNum) + "," + "'" + POut.string(allergyDefm.Description) + "'," + POut.int((int)allergyDefm.Snomed) + "," + POut.long(allergyDefm.MedicationNum) + ")";
        Db.nonQ(command);
        return allergyDefm.AllergyDefNum;
    }

    //There is no autoincrement in the mobile server.
    /**
    * Updates one AllergyDefm in the database.
    */
    public static void update(AllergyDefm allergyDefm) throws Exception {
        String command = "UPDATE allergydefm SET " + "Description  = '" + POut.string(allergyDefm.Description) + "', " + "Snomed       =  " + POut.int((int)allergyDefm.Snomed) + ", " + "MedicationNum=  " + POut.long(allergyDefm.MedicationNum) + " " + "WHERE CustomerNum = " + POut.long(allergyDefm.CustomerNum) + " AND AllergyDefNum = " + POut.long(allergyDefm.AllergyDefNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one AllergyDefm from the database.
    */
    public static void delete(long customerNum, long allergyDefNum) throws Exception {
        String command = "DELETE FROM allergydefm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND AllergyDefNum = " + POut.long(allergyDefNum);
        Db.nonQ(command);
    }

    /**
    * Converts one AllergyDef object to its mobile equivalent.  Warning! CustomerNum will always be 0.
    */
    public static AllergyDefm convertToM(AllergyDef allergyDef) throws Exception {
        AllergyDefm allergyDefm = new AllergyDefm();
        //CustomerNum cannot be set.  Remains 0.
        allergyDefm.AllergyDefNum = allergyDef.AllergyDefNum;
        allergyDefm.Description = allergyDef.Description;
        allergyDefm.Snomed = allergyDef.SnomedType;
        allergyDefm.MedicationNum = allergyDef.MedicationNum;
        return allergyDefm;
    }

}


