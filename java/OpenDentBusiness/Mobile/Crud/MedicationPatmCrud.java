//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:06 PM
//

package OpenDentBusiness.Mobile.Crud;

import OpenDentBusiness.Db;
import OpenDentBusiness.MedicationPat;
import OpenDentBusiness.Mobile.MedicationPatm;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class MedicationPatmCrud   
{
    /**
    * Gets one MedicationPatm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.
    */
    public static MedicationPatm selectOne(long customerNum, long medicationPatNum) throws Exception {
        String command = "SELECT * FROM medicationpatm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND MedicationPatNum = " + POut.long(medicationPatNum);
        List<MedicationPatm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one MedicationPatm object from the database using a query.
    */
    public static MedicationPatm selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<MedicationPatm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of MedicationPatm objects from the database using a query.
    */
    public static List<MedicationPatm> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<MedicationPatm> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<MedicationPatm> tableToList(DataTable table) throws Exception {
        List<MedicationPatm> retVal = new List<MedicationPatm>();
        MedicationPatm medicationPatm;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            medicationPatm = new MedicationPatm();
            medicationPatm.CustomerNum = PIn.Long(table.Rows[i]["CustomerNum"].ToString());
            medicationPatm.MedicationPatNum = PIn.Long(table.Rows[i]["MedicationPatNum"].ToString());
            medicationPatm.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            medicationPatm.MedicationNum = PIn.Long(table.Rows[i]["MedicationNum"].ToString());
            medicationPatm.PatNote = PIn.String(table.Rows[i]["PatNote"].ToString());
            medicationPatm.DateStart = PIn.Date(table.Rows[i]["DateStart"].ToString());
            medicationPatm.DateStop = PIn.Date(table.Rows[i]["DateStop"].ToString());
            retVal.Add(medicationPatm);
        }
        return retVal;
    }

    /**
    * Usually set useExistingPK=true.  Inserts one MedicationPatm into the database.
    */
    public static long insert(MedicationPatm medicationPatm, boolean useExistingPK) throws Exception {
        if (!useExistingPK)
        {
            medicationPatm.MedicationPatNum = ReplicationServers.getKey("medicationpatm","MedicationPatNum");
        }
         
        String command = "INSERT INTO medicationpatm (";
        command += "MedicationPatNum,";
        command += "CustomerNum,PatNum,MedicationNum,PatNote,DateStart,DateStop) VALUES(";
        command += POut.long(medicationPatm.MedicationPatNum) + ",";
        command += POut.long(medicationPatm.CustomerNum) + "," + POut.long(medicationPatm.PatNum) + "," + POut.long(medicationPatm.MedicationNum) + "," + "'" + POut.string(medicationPatm.PatNote) + "'," + POut.date(medicationPatm.DateStart) + "," + POut.date(medicationPatm.DateStop) + ")";
        Db.nonQ(command);
        return medicationPatm.MedicationPatNum;
    }

    //There is no autoincrement in the mobile server.
    /**
    * Updates one MedicationPatm in the database.
    */
    public static void update(MedicationPatm medicationPatm) throws Exception {
        String command = "UPDATE medicationpatm SET " + "PatNum          =  " + POut.long(medicationPatm.PatNum) + ", " + "MedicationNum   =  " + POut.long(medicationPatm.MedicationNum) + ", " + "PatNote         = '" + POut.string(medicationPatm.PatNote) + "', " + "DateStart       =  " + POut.date(medicationPatm.DateStart) + ", " + "DateStop        =  " + POut.date(medicationPatm.DateStop) + " " + "WHERE CustomerNum = " + POut.long(medicationPatm.CustomerNum) + " AND MedicationPatNum = " + POut.long(medicationPatm.MedicationPatNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one MedicationPatm from the database.
    */
    public static void delete(long customerNum, long medicationPatNum) throws Exception {
        String command = "DELETE FROM medicationpatm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND MedicationPatNum = " + POut.long(medicationPatNum);
        Db.nonQ(command);
    }

    /**
    * Converts one MedicationPat object to its mobile equivalent.  Warning! CustomerNum will always be 0.
    */
    public static MedicationPatm convertToM(MedicationPat medicationPat) throws Exception {
        MedicationPatm medicationPatm = new MedicationPatm();
        //CustomerNum cannot be set.  Remains 0.
        medicationPatm.MedicationPatNum = medicationPat.MedicationPatNum;
        medicationPatm.PatNum = medicationPat.PatNum;
        medicationPatm.MedicationNum = medicationPat.MedicationNum;
        medicationPatm.PatNote = medicationPat.PatNote;
        medicationPatm.DateStart = medicationPat.DateStart;
        medicationPatm.DateStop = medicationPat.DateStop;
        return medicationPatm;
    }

}


