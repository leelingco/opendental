//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:05 PM
//

package OpenDentBusiness.Mobile.Crud;

import OpenDentBusiness.Db;
import OpenDentBusiness.DiseaseDef;
import OpenDentBusiness.Mobile.DiseaseDefm;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class DiseaseDefmCrud   
{
    /**
    * Gets one DiseaseDefm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.
    */
    public static DiseaseDefm selectOne(long customerNum, long diseaseDefNum) throws Exception {
        String command = "SELECT * FROM diseasedefm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND DiseaseDefNum = " + POut.long(diseaseDefNum);
        List<DiseaseDefm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one DiseaseDefm object from the database using a query.
    */
    public static DiseaseDefm selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<DiseaseDefm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of DiseaseDefm objects from the database using a query.
    */
    public static List<DiseaseDefm> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<DiseaseDefm> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<DiseaseDefm> tableToList(DataTable table) throws Exception {
        List<DiseaseDefm> retVal = new List<DiseaseDefm>();
        DiseaseDefm diseaseDefm;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            diseaseDefm = new DiseaseDefm();
            diseaseDefm.CustomerNum = PIn.Long(table.Rows[i]["CustomerNum"].ToString());
            diseaseDefm.DiseaseDefNum = PIn.Long(table.Rows[i]["DiseaseDefNum"].ToString());
            diseaseDefm.DiseaseName = PIn.String(table.Rows[i]["DiseaseName"].ToString());
            retVal.Add(diseaseDefm);
        }
        return retVal;
    }

    /**
    * Usually set useExistingPK=true.  Inserts one DiseaseDefm into the database.
    */
    public static long insert(DiseaseDefm diseaseDefm, boolean useExistingPK) throws Exception {
        if (!useExistingPK)
        {
            diseaseDefm.DiseaseDefNum = ReplicationServers.getKey("diseasedefm","DiseaseDefNum");
        }
         
        String command = "INSERT INTO diseasedefm (";
        command += "DiseaseDefNum,";
        command += "CustomerNum,DiseaseName) VALUES(";
        command += POut.long(diseaseDefm.DiseaseDefNum) + ",";
        command += POut.long(diseaseDefm.CustomerNum) + "," + "'" + POut.string(diseaseDefm.DiseaseName) + "')";
        Db.nonQ(command);
        return diseaseDefm.DiseaseDefNum;
    }

    //There is no autoincrement in the mobile server.
    /**
    * Updates one DiseaseDefm in the database.
    */
    public static void update(DiseaseDefm diseaseDefm) throws Exception {
        String command = "UPDATE diseasedefm SET " + "DiseaseName  = '" + POut.string(diseaseDefm.DiseaseName) + "' " + "WHERE CustomerNum = " + POut.long(diseaseDefm.CustomerNum) + " AND DiseaseDefNum = " + POut.long(diseaseDefm.DiseaseDefNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one DiseaseDefm from the database.
    */
    public static void delete(long customerNum, long diseaseDefNum) throws Exception {
        String command = "DELETE FROM diseasedefm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND DiseaseDefNum = " + POut.long(diseaseDefNum);
        Db.nonQ(command);
    }

    /**
    * Converts one DiseaseDef object to its mobile equivalent.  Warning! CustomerNum will always be 0.
    */
    public static DiseaseDefm convertToM(DiseaseDef diseaseDef) throws Exception {
        DiseaseDefm diseaseDefm = new DiseaseDefm();
        //CustomerNum cannot be set.  Remains 0.
        diseaseDefm.DiseaseDefNum = diseaseDef.DiseaseDefNum;
        diseaseDefm.DiseaseName = diseaseDef.DiseaseName;
        return diseaseDefm;
    }

}


