//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:06 PM
//

package OpenDentBusiness.Mobile.Crud;

import OpenDentBusiness.Db;
import OpenDentBusiness.Medication;
import OpenDentBusiness.Mobile.Medicationm;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class MedicationmCrud   
{
    /**
    * Gets one Medicationm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.
    */
    public static Medicationm selectOne(long customerNum, long medicationNum) throws Exception {
        String command = "SELECT * FROM medicationm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND MedicationNum = " + POut.long(medicationNum);
        List<Medicationm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Medicationm object from the database using a query.
    */
    public static Medicationm selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Medicationm> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Medicationm objects from the database using a query.
    */
    public static List<Medicationm> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Medicationm> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Medicationm> tableToList(DataTable table) throws Exception {
        List<Medicationm> retVal = new List<Medicationm>();
        Medicationm medicationm;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            medicationm = new Medicationm();
            medicationm.CustomerNum = PIn.Long(table.Rows[i]["CustomerNum"].ToString());
            medicationm.MedicationNum = PIn.Long(table.Rows[i]["MedicationNum"].ToString());
            medicationm.MedName = PIn.String(table.Rows[i]["MedName"].ToString());
            medicationm.GenericNum = PIn.Long(table.Rows[i]["GenericNum"].ToString());
            medicationm.RxCui = PIn.Long(table.Rows[i]["RxCui"].ToString());
            retVal.Add(medicationm);
        }
        return retVal;
    }

    /**
    * Usually set useExistingPK=true.  Inserts one Medicationm into the database.
    */
    public static long insert(Medicationm medicationm, boolean useExistingPK) throws Exception {
        if (!useExistingPK)
        {
            medicationm.MedicationNum = ReplicationServers.getKey("medicationm","MedicationNum");
        }
         
        String command = "INSERT INTO medicationm (";
        command += "MedicationNum,";
        command += "CustomerNum,MedName,GenericNum,RxCui) VALUES(";
        command += POut.long(medicationm.MedicationNum) + ",";
        command += POut.long(medicationm.CustomerNum) + "," + "'" + POut.string(medicationm.MedName) + "'," + POut.long(medicationm.GenericNum) + "," + POut.long(medicationm.RxCui) + ")";
        Db.nonQ(command);
        return medicationm.MedicationNum;
    }

    //There is no autoincrement in the mobile server.
    /**
    * Updates one Medicationm in the database.
    */
    public static void update(Medicationm medicationm) throws Exception {
        String command = "UPDATE medicationm SET " + "MedName      = '" + POut.string(medicationm.MedName) + "', " + "GenericNum   =  " + POut.long(medicationm.GenericNum) + ", " + "RxCui        =  " + POut.long(medicationm.RxCui) + " " + "WHERE CustomerNum = " + POut.long(medicationm.CustomerNum) + " AND MedicationNum = " + POut.long(medicationm.MedicationNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one Medicationm from the database.
    */
    public static void delete(long customerNum, long medicationNum) throws Exception {
        String command = "DELETE FROM medicationm " + "WHERE CustomerNum = " + POut.long(customerNum) + " AND MedicationNum = " + POut.long(medicationNum);
        Db.nonQ(command);
    }

    /**
    * Converts one Medication object to its mobile equivalent.  Warning! CustomerNum will always be 0.
    */
    public static Medicationm convertToM(Medication medication) throws Exception {
        Medicationm medicationm = new Medicationm();
        //CustomerNum cannot be set.  Remains 0.
        medicationm.MedicationNum = medication.MedicationNum;
        medicationm.MedName = medication.MedName;
        medicationm.GenericNum = medication.GenericNum;
        medicationm.RxCui = medication.RxCui;
        return medicationm;
    }

}


