//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:43 PM
//

package OpenDentBusiness.OpenDentalServer;

import CS2JNet.JavaSupport.util.ListSupport;
import CS2JNet.System.StringSupport;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import OpenDentBusiness.OpenDentalServer.ProcessRequestCompletedEventArgs;
import OpenDentBusiness.OpenDentalServer.ProcessRequestCompletedEventHandler;
import OpenDentBusiness.Properties.Settings;


//------------------------------------------------------------------------------// <auto-generated>//     This code was generated by a tool.//     Runtime Version:4.0.30319.235////     Changes to this file may cause incorrect behavior and will be lost if//     the code is regenerated.// </auto-generated>//------------------------------------------------------------------------------//// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.235.///**
* 
*/
public class ServiceMain  extends System.Web.Services.Protocols.SoapHttpClientProtocol 
{

    private System.Threading.SendOrPostCallback ProcessRequestOperationCompleted = new System.Threading.SendOrPostCallback();
    private boolean useDefaultCredentialsSetExplicitly = new boolean();
    /**
    * 
    */
    public ServiceMain() throws Exception {
        this.setUrl(Settings.getDefault().getOpenDentBusiness_OpenDentalServer_ServiceMain());
        if ((this.isLocalFileSystemWebService(this.getUrl()) == true))
        {
            this.setUseDefaultCredentials(true);
            this.useDefaultCredentialsSetExplicitly = false;
        }
        else
        {
            this.useDefaultCredentialsSetExplicitly = true;
        } 
    }

    public String getUrl() throws Exception {
        return super.Url;
    }

    public void setUrl(String value) throws Exception {
        if ((((this.IsLocalFileSystemWebService(super.Url) == true) && (this.useDefaultCredentialsSetExplicitly == false)) && (this.isLocalFileSystemWebService(value) == false)))
        {
            super.UseDefaultCredentials = false;
        }
         
        super.Url = value;
    }

    public boolean getUseDefaultCredentials() throws Exception {
        return super.UseDefaultCredentials;
    }

    public void setUseDefaultCredentials(boolean value) throws Exception {
        super.UseDefaultCredentials = value;
        this.useDefaultCredentialsSetExplicitly = true;
    }

    /**
    * 
    */
    public ProcessRequestCompletedEventHandler ProcessRequestCompleted;
    /**
    * 
    */
    public String processRequest(String dtoString) throws Exception {
        Object[] results = this.Invoke("ProcessRequest", new Object[]{ dtoString });
        return ((String)(results[0]));
    }

    /**
    * 
    */
    public void processRequestAsync(String dtoString) throws Exception {
        this.processRequestAsync(dtoString,null);
    }

    /**
    * 
    */
    public void processRequestAsync(String dtoString, Object userState) throws Exception {
        if ((this.ProcessRequestOperationCompleted == null))
        {
            this.ProcessRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessRequestOperationCompleted);
        }
         
        this.InvokeAsync("ProcessRequest", new Object[]{ dtoString }, this.ProcessRequestOperationCompleted, userState);
    }

    private void onProcessRequestOperationCompleted(Object arg) throws Exception {
        if ((this.ProcessRequestCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ProcessRequestCompleted.invoke(this,new ProcessRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
         
    }

    /**
    * 
    */
    public void cancelAsync(Object userState) throws Exception {
        super.CancelAsync(userState);
    }

    private boolean isLocalFileSystemWebService(String url) throws Exception {
        if (((url == null) || (StringSupport.equals(url, String.Empty))))
        {
            return false;
        }
         
        System.Uri wsUri = new System.Uri(url);
        if (((wsUri.Port >= 1024) && (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
        {
            return true;
        }
         
        return false;
    }

}


