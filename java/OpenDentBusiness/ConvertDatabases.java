//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:01:43 PM
//

package OpenDentBusiness;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.BenefitQuantity;
import OpenDentBusiness.BenefitTimePeriod;
import OpenDentBusiness.Db;
import OpenDentBusiness.EbenefitCategory;
import OpenDentBusiness.FeeScheduleType;
import OpenDentBusiness.InsBenefitType;
import OpenDentBusiness.Interval;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.PrefName;
import OpenDentBusiness.PrintSituation;
import OpenDentBusiness.ToolBarsAvail;
import OpenDentBusiness.ToothPaintingType;
import OpenDentBusiness.YN;
import OpenDentBusiness.Appointment;
import OpenDentBusiness.Appointments;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.DefC;
import OpenDentBusiness.DefCat;
import OpenDentBusiness.Procedure;
import OpenDentBusiness.ProcedureCode;
import OpenDentBusiness.ProcedureCodes;
import OpenDentBusiness.Procedures;
import OpenDentBusiness.SheetTypeEnum;
import OpenDentBusiness.Tooth;


/**
* 
*/
//using System.Windows.Forms;//using OpenDentBusiness;//The other file was simply getting too big.  It was bogging down VS speed./**
* 
*/
public class ConvertDatabases   
{

    public static System.Version FromVersion = new System.Version();
    //private System.Version ToVersion;
    /**
    * Takes a text file with a series of SQL commands, and sends them as queries to the database.  Used in version upgrades until version 4.4.  But the ConversionFiles folder was a constant source of frustration for new programmers, so it was decided to deprecate the use of the "ConversionFiles" folder.  Since then, all SQL commands needed for upgrades have been included in the source code instead.  The filename is always relative to the application directory.  Throws an exception if it fails.  Due to spotty support for batch commands in the MySQL connector, this function is no longer used.
    */
    public static void executeFile(String fileName) throws Exception {
        String path = Path.Combine("ConversionFiles", fileName);
        String content = File.ReadAllText(path).Trim();
        Db.nonQ32(content);
    }

    public static void to2_8_2() throws Exception {
        if (FromVersion < new Version("2.8.2.0"))
        {
            String[] commands = new String[]{ "ALTER TABLE insplan DROP TemplateNum", "DROP TABLE instemplate", "UPDATE preference SET ValueString = '2.8.2.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to2_8_3();
    }

    private static void to2_8_3() throws Exception {
        if (FromVersion < new Version("2.8.3.0"))
        {
            String[] commands = new String[]{ "INSERT INTO preference VALUES ('RenaissanceLastBatchNumber','0')", "INSERT INTO preference VALUES ('PatientSelectUsesSearchButton','0')", "UPDATE preference SET ValueString = '2.8.3.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to2_8_6();
    }

    private static void to2_8_6() throws Exception {
        if (FromVersion < new Version("2.8.6.0"))
        {
            String[] commands = new String[]{ "ALTER TABLE patient CHANGE City City VARCHAR(100) NOT NULL", "ALTER TABLE patient CHANGE State State VARCHAR(100) NOT NULL", "ALTER TABLE patient CHANGE Zip Zip VARCHAR(100) NOT NULL", "ALTER TABLE patient CHANGE SSN SSN VARCHAR(100) NOT NULL", "UPDATE preference SET ValueString = '2.8.6.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to2_8_10();
    }

    private static void to2_8_10() throws Exception {
        if (FromVersion < new Version("2.8.10.0"))
        {
            String[] commands = new String[]{ "ALTER TABLE employer ADD Address varchar(255) NOT NULL", "ALTER TABLE employer ADD Address2 varchar(255) NOT NULL", "ALTER TABLE employer ADD City varchar(255) NOT NULL", "ALTER TABLE employer ADD State varchar(255) NOT NULL", "ALTER TABLE employer ADD Zip varchar(255) NOT NULL", "ALTER TABLE employer ADD Phone varchar(255) NOT NULL", "INSERT INTO preference VALUES ('CustomizedForPracticeWeb','0')", "UPDATE preference SET ValueString = '2.8.10.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to2_8_14();
    }

    private static void to2_8_14() throws Exception {
        if (FromVersion < new Version("2.8.14.0"))
        {
            String[] commands = new String[]{ "ALTER TABLE adjustment CHANGE AdjType AdjType smallint unsigned NOT NULL", "ALTER TABLE appointment CHANGE Confirmed Confirmed smallint unsigned NOT NULL", "ALTER TABLE payment CHANGE PayType PayType smallint unsigned NOT NULL", "ALTER TABLE procedurecode CHANGE ProcCat ProcCat smallint unsigned NOT NULL", "ALTER TABLE procedurelog CHANGE Priority Priority smallint unsigned NOT NULL", "ALTER TABLE procedurelog CHANGE Dx Dx smallint unsigned NOT NULL", "UPDATE preference SET ValueString = '2.8.14.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to2_9_1();
    }

    private static void to2_9_1() throws Exception {
        if (FromVersion < new Version("2.9.1.0"))
        {
            executeFile("convert_2_9_1.txt");
            //might throw an exception which we handle.
            String[] commands = new String[]{ "UPDATE preference SET ValueString = '2.9.1.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to2_9_2();
    }

    private static void to2_9_2() throws Exception {
        if (FromVersion < new Version("2.9.2.0"))
        {
            String[] commands = new String[]{ "ALTER TABLE patient ADD PriPending tinyint(1) unsigned NOT NULL", "ALTER TABLE patient ADD SecPending tinyint(1) unsigned NOT NULL", "ALTER TABLE appointment ADD Assistant smallint unsigned NOT NULL", "UPDATE preference SET ValueString = '2.9.2.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to2_9_5();
    }

    private static void to2_9_5() throws Exception {
        if (FromVersion < new Version("2.9.5.0"))
        {
            String[] commands = new String[]{ "ALTER TABLE autocode ADD LessIntrusive tinyint(1) unsigned NOT NULL", "UPDATE preference SET ValueString = '2.9.5.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to2_9_8();
    }

    private static void to2_9_8() throws Exception {
        if (FromVersion < new Version("2.9.8.0"))
        {
            String claimFormNum = new String();
            //Change the PlaceNumericCode field for both HCFA forms
            String command = "SELECT ClaimFormNum FROM claimform WHERE UniqueID = '4'";
            DataTable table = Db.getTable(command);
            String[] commands = new String[]();
            if (table.Rows.Count > 0)
            {
                claimFormNum = table.Rows[0][0].ToString();
                commands = new String[]{ "UPDATE claimformitem SET FieldName='P1PlaceNumericCode' " + "WHERE FieldName='PlaceNumericCode' && ClaimFormNum='" + claimFormNum + "' " + "&& YPos='751'", "UPDATE claimformitem SET FieldName='P2PlaceNumericCode' " + "WHERE FieldName='PlaceNumericCode' && ClaimFormNum='" + claimFormNum + "' " + "&& YPos='784'", "UPDATE claimformitem SET FieldName='P3PlaceNumericCode' " + "WHERE FieldName='PlaceNumericCode' && ClaimFormNum='" + claimFormNum + "' " + "&& YPos='817'", "UPDATE claimformitem SET FieldName='P4PlaceNumericCode' " + "WHERE FieldName='PlaceNumericCode' && ClaimFormNum='" + claimFormNum + "' " + "&& YPos='850'", "UPDATE claimformitem SET FieldName='P5PlaceNumericCode' " + "WHERE FieldName='PlaceNumericCode' && ClaimFormNum='" + claimFormNum + "' " + "&& YPos='884'", "UPDATE claimformitem SET FieldName='P6PlaceNumericCode' " + "WHERE FieldName='PlaceNumericCode' && ClaimFormNum='" + claimFormNum + "' " + "&& YPos='917'" };
                Db.NonQ32(commands);
            }
             
            command = "SELECT ClaimFormNum FROM claimform WHERE UniqueID = '5'";
            table = Db.getTable(command);
            if (table.Rows.Count > 0)
            {
                claimFormNum = table.Rows[0][0].ToString();
                commands = new String[]{ "UPDATE claimformitem SET FieldName='P1PlaceNumericCode' " + "WHERE FieldName='PlaceNumericCode' && ClaimFormNum='" + claimFormNum + "' " + "&& YPos='751'", "UPDATE claimformitem SET FieldName='P2PlaceNumericCode' " + "WHERE FieldName='PlaceNumericCode' && ClaimFormNum='" + claimFormNum + "' " + "&& YPos='784'", "UPDATE claimformitem SET FieldName='P3PlaceNumericCode' " + "WHERE FieldName='PlaceNumericCode' && ClaimFormNum='" + claimFormNum + "' " + "&& YPos='817'", "UPDATE claimformitem SET FieldName='P4PlaceNumericCode' " + "WHERE FieldName='PlaceNumericCode' && ClaimFormNum='" + claimFormNum + "' " + "&& YPos='850'", "UPDATE claimformitem SET FieldName='P5PlaceNumericCode' " + "WHERE FieldName='PlaceNumericCode' && ClaimFormNum='" + claimFormNum + "' " + "&& YPos='884'", "UPDATE claimformitem SET FieldName='P6PlaceNumericCode' " + "WHERE FieldName='PlaceNumericCode' && ClaimFormNum='" + claimFormNum + "' " + "&& YPos='917'" };
                Db.NonQ32(commands);
            }
             
            //ADA2002 medicaid id's
            command = "SELECT ClaimFormNum FROM claimform WHERE UniqueID = '1'";
            table = Db.getTable(command);
            if (table.Rows.Count > 0)
            {
                claimFormNum = table.Rows[0][0].ToString();
                commands = new String[]{ "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + "'" + claimFormNum + "','TreatingDentistMedicaidID','492','946','117','14')", "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + "'" + claimFormNum + "','BillingDentistMedicaidID','39','990','120','14')" };
                Db.NonQ32(commands);
            }
             
            //ADA2000 employer and 3 radiograph fields.
            command = "SELECT ClaimFormNum FROM claimform WHERE UniqueID = '3'";
            table = Db.getTable(command);
            if (table.Rows.Count > 0)
            {
                claimFormNum = table.Rows[0][0].ToString();
                commands = new String[]{ "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + "'" + claimFormNum + "','EmployerName','482','391','140','14')", "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + "'" + claimFormNum + "','IsRadiographsAttached','388','548','0','0')", "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + "'" + claimFormNum + "','RadiographsNotAttached','495','547','0','0')", "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + "'" + claimFormNum + "','RadiographsNumAttached','460','545','35','14')" };
                Db.NonQ32(commands);
            }
             
            commands = new String[]{ "UPDATE preference SET ValueString = '2.9.8.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to3_0_1();
    }

    /**
    * Used by To3_0_1. IMPORTANT: remember that this method alters TableQ.
    */
    private static int getPercent(int patNum, int priPlanNum, int secPlanNum, String procCode, String priORsec) throws Exception {
        //command="SELECT
        //get the covCatNum for this Code
        String command = "SELECT CovCatNum FROM covspan " + "WHERE '" + POut.string(procCode) + "' > FromCode " + "AND '" + POut.string(procCode) + "' < ToCode";
        DataTable table = Db.getTable(command);
        if (table.Rows.Count == 0)
        {
            return 0;
        }
         
        //this code is not in any category, so coverage=0
        int covCatNum = PIn.Int(table.Rows[0][0].ToString());
        command = "SELECT PlanNum,PriPatNum,SecPatNum,Percent FROM covpat WHERE " + "CovCatNum = '" + covCatNum.ToString() + "' " + "AND (PlanNum = '" + priPlanNum.ToString() + "' " + "OR PlanNum = '" + secPlanNum.ToString() + "' " + "OR PriPatNum = '" + patNum.ToString() + "' " + "OR SecPatNum = '" + patNum.ToString() + "')";
        table = Db.getTable(command);
        if (table.Rows.Count == 0)
        {
            return 0;
        }
         
        for (int i = 0;i < table.Rows.Count;i++)
        {
            //no percentages have been entered for this patient or plan
            //first handle the patient overrides
            if (StringSupport.equals(priORsec, "pri") && PIn.Long(table.Rows[i][1].ToString()) == patNum)
            {
                return PIn.Int(table.Rows[i][3].ToString());
            }
             
            if (StringSupport.equals(priORsec, "sec") && PIn.Long(table.Rows[i][2].ToString()) == patNum)
            {
                return PIn.Int(table.Rows[i][3].ToString());
            }
             
            //then handle the percentages attached to plans(much more common)
            if (StringSupport.equals(priORsec, "pri") && PIn.Long(table.Rows[i][0].ToString()) == priPlanNum)
            {
                return PIn.Int(table.Rows[i][3].ToString());
            }
             
            if (StringSupport.equals(priORsec, "sec") && PIn.Long(table.Rows[i][0].ToString()) == secPlanNum)
            {
                return PIn.Int(table.Rows[i][3].ToString());
            }
             
        }
        return 0;
    }

    private static void to3_0_1() throws Exception {
        if (FromVersion < new Version("3.0.1.0"))
        {
            executeFile("convert_3_0_1.txt");
            //might throw an exception which we handle.
            //convert appointment patterns from ten minute to five minute intervals---------------------
            String command = "SELECT AptNum,Pattern FROM appointment";
            DataTable table = Db.getTable(command);
            StringBuilder sb = new StringBuilder();
            String pattern = new String();
            for (int i = 0;i < table.Rows.Count;i++)
            {
                pattern = PIn.String(table.Rows[i][1].ToString());
                sb = new StringBuilder();
                for (int j = 0;j < pattern.Length;j++)
                {
                    sb.Append(pattern.Substring(j, 1));
                    sb.Append(pattern.Substring(j, 1));
                }
                command = "UPDATE appointment SET " + "Pattern='" + POut.String(sb.ToString()) + "' " + "WHERE AptNum='" + table.Rows[i][0].ToString() + "'";
                Db.nonQ32(command);
            }
            //add the default 5 Elements to each ApptView-----------------------------------------------
            command = "SELECT ApptViewNum FROM apptview";
            table = Db.getTable(command);
            String[] commands = new String[]();
            for (int i = 0;i < table.Rows.Count;i++)
            {
                commands = new String[]{ "INSERT INTO apptviewitem(ApptViewNum,ElementDesc,ElementOrder,ElementColor) " + "VALUES('" + table.Rows[i][0].ToString() + "','PatientName','0','-16777216')", "INSERT INTO apptviewitem(ApptViewNum,ElementDesc,ElementOrder,ElementColor) " + "VALUES('" + table.Rows[i][0].ToString() + "','Lab','1','-65536')", "INSERT INTO apptviewitem(ApptViewNum,ElementDesc,ElementOrder,ElementColor) " + "VALUES('" + table.Rows[i][0].ToString() + "','Procs','2','-16777216')", "INSERT INTO apptviewitem(ApptViewNum,ElementDesc,ElementOrder,ElementColor) " + "VALUES('" + table.Rows[i][0].ToString() + "','Note','3','-16777216')", "INSERT INTO apptviewitem(ApptViewNum,ElementDesc,ElementOrder,ElementColor) " + "VALUES('" + table.Rows[i][0].ToString() + "','Production','4','-16777216')" };
                Db.NonQ32(commands);
            }
            //MessageBox.Show("Appointments converted.");
            //Any claimprocs attached to claims with ins being Cap, should be CapClaim, even if paid
            command = "SELECT claimproc.ClaimProcNum FROM claimproc,insplan " + "WHERE claimproc.PlanNum=insplan.PlanNum " + "AND claimproc.ClaimNum != '0' " + "AND insplan.PlanType='c'";
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                //CapClaim
                command = "UPDATE claimproc SET Status='5' " + "WHERE ClaimProcNum='" + table.Rows[i][0].ToString() + "'";
                Db.nonQ32(command);
            }
            //edit any existing claimprocs-------------------------------------------------------------
            //These are all associated with claims, but we are not changing the claim values,
            //just some of the estimates.  None of these changes affect any claim or balance.
            //Ignore any status=CapClaim since these are all duplicates just for sending the claim
            //Add percentages etc from procedure
            int percentage = 0;
            int planNum = 0;
            double baseEst = 0;
            double overrideAmt = 0;
            DataTable procTable = new DataTable();
            command = "SELECT claimproc.ClaimProcNum,patient.PriPlanNum," + "patient.SecPlanNum,patient.PatNum,claimproc.PlanNum,procedurelog.ADACode," + "procedurelog.OverridePri,procedurelog.OverrideSec,procedurelog.ProcFee " + "FROM claimproc,procedurelog,patient " + "WHERE claimproc.ProcNum=procedurelog.ProcNum " + "AND patient.PatNum=procedurelog.PatNum " + "AND claimproc.Status != 2 " + "AND claimproc.Status != 4 " + "AND claimproc.Status != 5 ";
            //0,1
            //2,3,4,5
            //6,7,8
            //this next line ignores any claimprocs not attached to a proc. so skips adjustments.
            //skips preauths
            //skips supplemental
            //skips capClaim
            table = Db.getTable(command);
            procTable = table.Copy();
            for (int i = 0;i < procTable.Rows.Count;i++)
            {
                //so that we can perform other queries
                planNum = PIn.Int(procTable.Rows[i][4].ToString());
                //claimproc.PlanNum
                //if primary
                if (planNum == PIn.Long(procTable.Rows[i][1].ToString()))
                {
                    //priPlanNum
                    //patNum
                    //priPlanNum
                    //secPlanNum
                    percentage = GetPercent(PIn.Int(procTable.Rows[i][3].ToString()), PIn.Int(procTable.Rows[i][1].ToString()), PIn.Int(procTable.Rows[i][2].ToString()), PIn.String(procTable.Rows[i][5].ToString()), "pri");
                    //ADACode
                    overrideAmt = PIn.Double(procTable.Rows[i][6].ToString());
                }
                else //else if secondary
                if (planNum == PIn.Long(procTable.Rows[i][2].ToString()))
                {
                    //priPlanNum
                    //patNum
                    //priPlanNum
                    //secPlanNum
                    percentage = GetPercent(PIn.Int(procTable.Rows[i][3].ToString()), PIn.Int(procTable.Rows[i][1].ToString()), PIn.Int(procTable.Rows[i][2].ToString()), PIn.String(procTable.Rows[i][5].ToString()), "sec");
                    //ADACode
                    overrideAmt = PIn.Double(procTable.Rows[i][7].ToString());
                }
                else
                {
                    continue;
                }  
                //plan is neither pri or sec, so disregard
                //fee x percentage:
                baseEst = PIn.Double(procTable.Rows[i][8].ToString()) * (double)percentage / 100;
                //+"Allowed Amt='-1',"
                //+"PercentOverride='-1',"
                //+"CopayAmt='-1',"
                //+"OverAnnualMax='-1',"
                //+"PaidOtherIns='-1',"
                //+"CopayOverride='-1'"
                command = "UPDATE claimproc SET " + "Percentage='" + percentage.ToString() + "'," + "OverrideInsEst='" + overrideAmt.ToString() + "'," + "BaseEst='" + baseEst.ToString() + "'" + " WHERE ClaimProcNum='" + procTable.Rows[i][0].ToString() + "'";
                //MessageBox.Show(command);
                Db.nonQ32(command);
            }
            //convert all estimates into claimprocs-------------------------------------------------
            command = "SELECT procedurelog.ProcNum,procedurelog.PatNum," + "procedurelog.ProvNum,patient.PriPlanNum,patient.SecPlanNum," + "procedurelog.ADACode,procedurelog.ProcDate," + "procedurelog.OverridePri,procedurelog.OverrideSec,procedurelog.NoBillIns," + "procedurelog.CapCoPay,procedurelog.ProcStatus,procedurelog.ProcFee," + "insplan.PlanType, '' as Dummy " + "FROM procedurelog,patient,insplan " + "WHERE procedurelog.PatNum=patient.PatNum " + "AND patient.PriPlanNum=insplan.PlanNum " + "AND (procedurelog.ProcStatus=1 " + "OR procedurelog.ProcStatus=2) " + "AND NOT EXISTS (SELECT * FROM claimproc WHERE claimproc.ProcNum=procedurelog.ProcNum)";
            //0,1
            //2,3,4
            //+"claimproc.ClaimProcNum,
            //5,6
            //7,8,9
            //10,11,12
            //13
            //+"LEFT JOIN claimproc ON claimproc.ProcNum=procedurelog.ProcNum "//only interested in NULL
            //this is to test for capitation. It also limits results to patients with insurance.
            //+"AND patient.PriPlanNum > 0 "//only patients with insurance
            //status TP
            //status C
            //claimproc.ClaimProcNum IS NULL "//only if not already attached to a claim
            //+"OR claimproc.Status='5')";//or CapClaim
            table = Db.getTable(command);
            procTable = table.Copy();
            //so that we can perform other queries
            int status = 0;
            double copay = 0;
            double writeoff = 0;
            for (int i = 0;i < procTable.Rows.Count;i++)
            {
                //loop procedures
                //1. noBillIns
                //if noBillIns
                if (PIn.Bool(procTable.Rows[i][10].ToString()) && PIn.Double(procTable.Rows[i][11].ToString()) == -1)
                {
                    //and not a cap procedure
                    //primary
                    if (PIn.Long(procTable.Rows[i][3].ToString()) != 0)
                    {
                        //if has pri ins
                        //procnum
                        //patnum
                        //provnum
                        //status:Estimate
                        //priPlanNum
                        command = "INSERT INTO claimproc(ProcNum,PatNum,ProvNum,Status,PlanNum," + "DateCP,AllowedAmt,Percentage,PercentOverride,CopayAmt,OverrideInsEst," + "NoBillIns,OverAnnualMax,PaidOtherIns) " + "VALUES (" + "'" + procTable.Rows[i][0].ToString() + "'," + "'" + procTable.Rows[i][1].ToString() + "'," + "'" + procTable.Rows[i][2].ToString() + "'," + "'6'," + "'" + procTable.Rows[i][3].ToString() + "'," + POut.Date(PIn.Date(procTable.Rows[i][7].ToString())) + "," + "'-1'," + "'-1'," + "'-1'," + "'-1'," + "'-1'," + "'1'," + "'-1'," + "'-1'" + ")";
                        //dateCP
                        //these -1's are unnecessary, but I already added them, so they are here.
                        //allowed amt
                        //percentage
                        //percentoverride
                        //copayamt
                        //overrideInsEst
                        //NoBillIns,
                        //OverAnnualMax
                        //PaidOtherIns
                        Db.nonQ32(command);
                    }
                     
                    //secondary
                    if (PIn.Long(procTable.Rows[i][4].ToString()) != 0)
                    {
                        //if has sec ins
                        //procnum
                        //patnum
                        //provnum
                        //status:Estimate
                        //secPlanNum
                        command = "INSERT INTO claimproc(ProcNum,PatNum,ProvNum,Status,PlanNum," + "DateCP,AllowedAmt,Percentage,PercentOverride,CopayAmt,OverrideInsEst," + "NoBillIns,OverAnnualMax,PaidOtherIns) " + "VALUES (" + "'" + procTable.Rows[i][0].ToString() + "'," + "'" + procTable.Rows[i][1].ToString() + "'," + "'" + procTable.Rows[i][2].ToString() + "'," + "'6'," + "'" + procTable.Rows[i][4].ToString() + "'," + POut.Date(PIn.Date(procTable.Rows[i][7].ToString())) + "," + "'-1'," + "'-1'," + "'-1'," + "'-1'," + "'-1'," + "'1'," + "'-1'," + "'-1'" + ")";
                        //dateCP
                        //allowed amt
                        //percentage
                        //percentoverride
                        //copayamt
                        //overrideInsEst
                        //NoBillIns,
                        //OverAnnualMax
                        //PaidOtherIns
                        Db.nonQ32(command);
                    }
                     
                    continue;
                }
                 
                //1. noBillIns
                //2. capitation. Always primary. If C, then affects aging via CapComplete.
                //Never attached to claim.
                copay = PIn.Double(procTable.Rows[i][11].ToString());
                //if CapCoPay not -1, and priIns is cap, then this is a cap proc
                if (copay != -1 && StringSupport.equals(PIn.String(procTable.Rows[i][14].ToString()), "c"))
                {
                    if (PIn.Long(procTable.Rows[i][12].ToString()) == 1)
                    {
                        //proc status =tp
                        status = 8;
                    }
                     
                    //claimProc status=CapEstimate
                    if (PIn.Long(procTable.Rows[i][12].ToString()) == 2)
                    {
                        //proc status =c
                        status = 7;
                    }
                     
                    //claimProc status=CapComplete
                    //procFee
                    writeoff = PIn.Double(procTable.Rows[i][13].ToString()) - copay;
                    //procnum
                    //patnum
                    //provnum
                    //status
                    //priPlanNum
                    //dateCP
                    //writeoff
                    //allowed amt
                    //percentage
                    //percentoverride
                    //copayamt
                    //overrideInsEst
                    //OverAnnualMax
                    //PaidOtherIns
                    command = "INSERT INTO claimproc(ProcNum,PatNum,ProvNum," + "Status,PlanNum,DateCP,WriteOff,AllowedAmt,Percentage,PercentOverride," + "CopayAmt,OverrideInsEst,OverAnnualMax,PaidOtherIns,NoBillIns) " + "VALUES (" + "'" + procTable.Rows[i][0].ToString() + "'," + "'" + procTable.Rows[i][1].ToString() + "'," + "'" + procTable.Rows[i][2].ToString() + "'," + "'" + status.ToString() + "'," + "'" + procTable.Rows[i][3].ToString() + "'," + POut.Date(PIn.Date(procTable.Rows[i][7].ToString())) + "," + "'" + writeoff.ToString() + "'," + "'-1'," + "'-1'," + "'-1'," + "'" + copay.ToString() + "'," + "'-1'," + "'-1'," + "'-1'," + "'" + procTable.Rows[i][10].ToString() + "'" + ")";
                    //noBillIns is allowed for cap
                    Db.nonQ32(command);
                    continue;
                }
                 
                //3. standard primary estimate:
                //always a primary estimate because original query excluded patients with no ins.
                planNum = PIn.Int(procTable.Rows[i][3].ToString());
                //priPlanNum
                //patNum
                //priPlanNum
                //secPlanNum
                percentage = GetPercent(PIn.Int(procTable.Rows[i][1].ToString()), PIn.Int(procTable.Rows[i][3].ToString()), PIn.Int(procTable.Rows[i][4].ToString()), PIn.String(procTable.Rows[i][6].ToString()), "pri");
                //ADACode
                baseEst = PIn.Double(procTable.Rows[i][13].ToString()) * (double)percentage / 100;
                //procnum
                //patnum
                //provnum
                //status:Estimate
                //plannum
                //dateCP
                //writeoff
                //allowed amt
                //percentage
                //percentoverride
                //copayamt
                //overrideInsEst-pri
                //NoBillIns,
                //OverAnnualMax
                //PaidOtherIns
                command = "INSERT INTO claimproc(ProcNum,PatNum,ProvNum," + "Status,PlanNum,DateCP,WriteOff,AllowedAmt,Percentage,PercentOverride," + "CopayAmt,OverrideInsEst,NoBillIns,OverAnnualMax,PaidOtherIns,BaseEst) " + "VALUES (" + "'" + procTable.Rows[i][0].ToString() + "'," + "'" + procTable.Rows[i][1].ToString() + "'," + "'" + procTable.Rows[i][2].ToString() + "'," + "'6'," + "'" + planNum.ToString() + "'," + POut.Date(PIn.Date(procTable.Rows[i][7].ToString())) + "," + "'0'," + "'-1'," + "'" + percentage.ToString() + "'," + "'-1'," + "'-1'," + "'" + procTable.Rows[i][8].ToString() + "'," + "'0'," + "'-1'," + "'-1'," + "'" + baseEst.ToString() + "'" + ")";
                //BaseEst
                Db.nonQ32(command);
                //4. standard secondary estimate
                //secondary can be in addition to primary, or not at all
                planNum = PIn.Int(procTable.Rows[i][4].ToString());
                //secPlanNum
                if (planNum == 0)
                {
                    continue;
                }
                 
                //patNum
                //priPlanNum
                //secPlanNum
                percentage = GetPercent(PIn.Int(procTable.Rows[i][1].ToString()), PIn.Int(procTable.Rows[i][3].ToString()), PIn.Int(procTable.Rows[i][4].ToString()), PIn.String(procTable.Rows[i][6].ToString()), "sec");
                //ADACode
                baseEst = PIn.Double(procTable.Rows[i][13].ToString()) * (double)percentage / 100;
                //procnum
                //patnum
                //provnum
                //status:Estimate
                //plannum
                //dateCP
                //writeoff
                //allowed amt
                //percentage
                //percentoverride
                //copayamt
                //overrideInsEst-pri
                //NoBillIns,
                //OverAnnualMax
                //PaidOtherIns
                command = "INSERT INTO claimproc(ProcNum,PatNum,ProvNum," + "Status,PlanNum,DateCP,WriteOff,AllowedAmt,Percentage,PercentOverride," + "CopayAmt,OverrideInsEst,NoBillIns,OverAnnualMax,PaidOtherIns,BaseEst) " + "VALUES (" + "'" + procTable.Rows[i][0].ToString() + "'," + "'" + procTable.Rows[i][1].ToString() + "'," + "'" + procTable.Rows[i][2].ToString() + "'," + "'6'," + "'" + planNum.ToString() + "'," + POut.Date(PIn.Date(procTable.Rows[i][7].ToString())) + "," + "'0'," + "'-1'," + "'" + percentage.ToString() + "'," + "'-1'," + "'-1'," + "'" + procTable.Rows[i][9].ToString() + "'," + "'0'," + "'-1'," + "'-1'," + "'" + baseEst.ToString() + "'" + ")";
                //BaseEst
                Db.nonQ32(command);
            }
            //loop procedures
            command = "UPDATE claimproc SET ProcDate=DateCP";
            //affects ALL patients
            Db.nonQ32(command);
            //MessageBox.Show("Procedure percentages converted to claimprocs.");
            commands = new String[]{ "UPDATE procedurelog SET OverridePri='0',OverrideSec='0',NoBillIns='0'," + "IsCovIns='0',CapCoPay='0'" };
            Db.NonQ32(commands);
            //convert medical/service notes from defs table to quickpaste notes----------------------
            commands = new String[]{ "INSERT INTO quickpastecat " + "VALUES ('1','Medical Urgent','0','22')", "INSERT INTO quickpastecat " + "VALUES ('2','Medical Summary','1','9')", "INSERT INTO quickpastecat " + "VALUES ('3','Service Notes','2','10')", "INSERT INTO quickpastecat " + "VALUES ('4','Medical History','3','11')" };
            Db.NonQ32(commands);
            command = "SELECT * FROM definition WHERE Category='8'";
            //Medical Notes
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "INSERT INTO quickpastenote (QuickPasteCatNum,ItemOrder,Note) " + "VALUES ('1','" + i.ToString() + "','" + POut.String(table.Rows[i][3].ToString()) + "')";
                Db.nonQ32(command);
                command = "INSERT INTO quickpastenote (QuickPasteCatNum,ItemOrder,Note) " + "VALUES ('2','" + i.ToString() + "','" + POut.String(table.Rows[i][3].ToString()) + "')";
                Db.nonQ32(command);
                command = "INSERT INTO quickpastenote (QuickPasteCatNum,ItemOrder,Note) " + "VALUES ('4','" + i.ToString() + "','" + POut.String(table.Rows[i][3].ToString()) + "')";
                Db.nonQ32(command);
            }
            command = "SELECT * FROM definition WHERE Category='14'";
            //Service Notes
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "INSERT INTO quickpastenote (QuickPasteCatNum,ItemOrder,Note) " + "VALUES ('3','" + i.ToString() + "','" + POut.String(table.Rows[i][3].ToString()) + "')";
                Db.nonQ32(command);
            }
            //add image categories to the chart module-----------------------------------------------
            command = "SELECT MAX(ItemOrder) FROM definition WHERE Category=18";
            table = Db.getTable(command);
            int lastI = PIn.Int(table.Rows[0][0].ToString());
            commands = new String[]{ "INSERT INTO definition(Category,ItemOrder,ItemName,ItemValue) " + "VALUES(18," + POut.Long(lastI + 1) + ",'BWs','X')", "INSERT INTO definition(Category,ItemOrder,ItemName,ItemValue) " + "VALUES(18," + POut.Long(lastI + 2) + ",'FMXs','X')", "INSERT INTO definition(Category,ItemOrder,ItemName,ItemValue) " + "VALUES(18," + POut.Long(lastI + 3) + ",'Panos','X')", "INSERT INTO definition(Category,ItemOrder,ItemName,ItemValue) " + "VALUES(18," + POut.Long(lastI + 4) + ",'Photos','X')", "UPDATE preference SET ValueString = '3.0.1.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to3_0_2();
    }

    private static void to3_0_2() throws Exception {
        if (FromVersion < new Version("3.0.2.0"))
        {
            String[] commands = new String[]{ "INSERT INTO preference VALUES('TreatPlanShowGraphics','1')", "INSERT INTO preference VALUES('TreatPlanShowCompleted','1')", "INSERT INTO preference VALUES('TreatPlanShowIns','1')", "UPDATE preference SET ValueString = '3.0.2.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to3_0_3();
    }

    private static void to3_0_3() throws Exception {
        if (FromVersion < new Version("3.0.3.0"))
        {
            String command = "SELECT CONCAT(CONCAT(LName,', '),FName) FROM payplan,patient " + "WHERE patient.PatNum=payplan.PatNum";
            DataTable table = Db.getTable(command);
            if (table.Rows.Count > 0)
            {
                String planPats = "";
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    if (i > 0)
                    {
                        planPats += ",";
                    }
                     
                    planPats += PIn.String(table.Rows[i][0].ToString());
                }
            }
             
            /*
            					MessageBox.Show("You have payment plans for the following patients: "
            						+planPats+".  "
            						+"There was a bug in the way the amount due was being calculated, so you will "
            						+"want to follow these steps to correct the amounts due.  For each payment plan, "
            						+"simply open the plan from the patient account and then click OK.  This will "
            						+"reset the amount due.");*/
            String[] commands = new String[]{ "ALTER TABLE payplan ADD TotalCost double NOT NULL", "UPDATE payplan SET TotalCost = TotalAmount", "UPDATE preference SET ValueString = '3.0.3.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to3_0_4();
    }

    private static void to3_0_4() throws Exception {
        if (FromVersion < new Version("3.0.4.0"))
        {
            String[] commands = new String[]{ "ALTER TABLE procedurelog ADD HideGraphical tinyint unsigned NOT NULL", "ALTER TABLE adjustment CHANGE AdjNote AdjNote text NOT NULL", "UPDATE preference SET ValueString = '3.0.4.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to3_0_5();
    }

    private static void to3_0_5() throws Exception {
        if (FromVersion < new Version("3.0.5.0"))
        {
            //Delete procedures for patients that have been deleted:
            String command = "SELECT patient.PatNum FROM patient,procedurelog " + "WHERE patient.PatNum=procedurelog.PatNum " + "AND patient.PatStatus=4";
            DataTable table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "DELETE FROM procedurelog " + "WHERE PatNum=" + table.Rows[i][0].ToString();
                Db.nonQ32(command);
            }
            //Delete extra est entries caused when patient switched plans before conversion:
            command = "SELECT \r\n" + 
            "\t\t\t\t\tcp1.ClaimProcNum,patient.PatNum,patient.LName,patient.FName\r\n" + 
            "\t\t\t\t\tFROM claimproc cp1,claimproc cp2,patient\r\n" + 
            "\t\t\t\t\tWHERE patient.PatNum=cp1.PatNum\r\n" + 
            "\t\t\t\t\tAND patient.PatNum=cp2.PatNum\r\n" + 
            "\t\t\t\t\tAND patient.PriPlanNum=cp1.PlanNum\r\n" + 
            "\t\t\t\t\tAND patient.SecPlanNum=0\r\n" + 
            "\t\t\t\t\tAND cp1.ProcNum=cp2.ProcNum\r\n" + 
            "\t\t\t\t\tAND cp1.ClaimProcNum!=cp2.ClaimProcNum\r\n" + 
            "\t\t\t\t\tAND cp1.Status=6";
            //estimate
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "DELETE FROM claimproc " + "WHERE ClaimProcNum=" + table.Rows[i][0].ToString();
                Db.nonQ32(command);
            }
            String[] commands = new String[]{ "ALTER TABLE claimform CHANGE UniqueID UniqueID varchar(255) NOT NULL", "UPDATE claimform SET UniqueID=concat('OD',UniqueID)", "UPDATE claimform SET UniqueID='' WHERE UniqueID='OD0'", "UPDATE preference SET ValueString = '3.0.5.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to3_1_0();
    }

    private static void to3_1_0() throws Exception {
        if (FromVersion < new Version("3.1.0.0"))
        {
            executeFile("convert_3_1_0.txt");
            //Might throw an exception which we handle
            //add Sirona Sidexis:
            String command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Sirona', " + "'Sirona Sidexis from www.sirona.com', " + "'0', " + "'" + POut.string("C:\\sidexis\\sidexis.exe") + "', " + "'', " + "'')";
            int programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + programNum.ToString() + "', " + "'" + (((Enum)ToolBarsAvail.ChartModule).ordinal()).ToString() + "', " + "'Sirona')";
            Db.nonQ32(command);
            //convert recall
            //For inactive patients, assume no meaningful info if patients inactive,
            //so no need to create a recall. Only convert active patients.
            command = "SELECT PatNum,RecallStatus,RecallInterval " + "FROM patient WHERE PatStatus=0";
            DataTable patTable = Db.getTable(command);
            DataTable table = new DataTable();
            DateTime previousDate = new DateTime();
            DateTime dueDate = new DateTime();
            int patNum = new int();
            int status = new int();
            int interval = new int();
            Interval newInterval = new Interval();
            for (int i = 0;i < patTable.Rows.Count;i++)
            {
                patNum = PIn.Int(patTable.Rows[i][0].ToString());
                status = PIn.Int(patTable.Rows[i][1].ToString());
                interval = PIn.Int(patTable.Rows[i][2].ToString());
                //get previous date
                command = "SELECT MAX(procedurelog.procdate) " + "FROM procedurelog,procedurecode " + "WHERE procedurelog.PatNum=" + patNum.ToString() + " AND procedurecode.ADACode = procedurelog.ADACode " + "AND procedurecode.SetRecall = 1 " + "AND (procedurelog.ProcStatus = 2 " + "OR procedurelog.ProcStatus = 3 " + "OR procedurelog.ProcStatus = 4) " + "GROUP BY procedurelog.PatNum";
                table = Db.getTable(command);
                if (table.Rows.Count == 0)
                {
                    previousDate = DateTime.MinValue;
                }
                else
                {
                    previousDate = PIn.Date(table.Rows[0][0].ToString());
                } 
                //If no useful info and no trigger. No recall created
                if (status == 0 && (interval == 0 || interval == 6) && previousDate == DateTime.MinValue)
                {
                    continue;
                }
                 
                //and no trigger
                if (interval == 0)
                {
                    newInterval = new Interval(0,0,6,0);
                }
                else
                {
                    newInterval = new Interval(0,0,interval,0);
                } 
                if (previousDate == DateTime.MinValue)
                {
                    dueDate = DateTime.MinValue;
                }
                else
                {
                    dueDate = previousDate + newInterval;
                } 
                command = "INSERT INTO recall (PatNum,DateDueCalc,DateDue,DatePrevious," + "RecallInterval,RecallStatus" + ") VALUES (" + "'" + POut.Long(patNum) + "', " + POut.date(dueDate) + ", " + POut.date(dueDate) + ", " + POut.date(previousDate) + ", " + "'" + POut.Long(newInterval.toInt()) + "', " + "'" + POut.Long(status) + "')";
                Db.nonQ32(command);
            }
            //for int i<patTable
            command = "UPDATE preference SET ValueString = '3.1.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_1_3();
    }

    private static void to3_1_3() throws Exception {
        if (FromVersion < new Version("3.1.3.0"))
        {
            //0 values in date fields are causing a lot of program slowdown
            String[] commands = new String[]{ "UPDATE adjustment SET AdjDate='0001-01-01' WHERE AdjDate='0000-00-00'", "UPDATE appointment SET AptDateTime='0001-01-01 00:00:00' " + "WHERE AptDateTime LIKE '0000-00-00%'", "UPDATE claim SET DateService='0001-01-01' WHERE DateService='0000-00-00'", "UPDATE claim SET DateSent='0001-01-01' WHERE DateSent='0000-00-00'", "UPDATE claim SET DateReceived='0001-01-01' WHERE DateReceived='0000-00-00'", "UPDATE claim SET PriorDate='0001-01-01' WHERE PriorDate='0000-00-00'", "UPDATE claim SET AccidentDate='0001-01-01' WHERE AccidentDate='0000-00-00'", "UPDATE claim SET OrthoDate='0001-01-01' WHERE OrthoDate='0000-00-00'", "UPDATE claimpayment SET CheckDate='0001-01-01' WHERE CheckDate='0000-00-00'", "UPDATE claimproc SET DateCP='0001-01-01' WHERE DateCP='0000-00-00'", "UPDATE claimproc SET ProcDate='0001-01-01' WHERE ProcDate='0000-00-00'", "UPDATE insplan SET DateEffective='0001-01-01' WHERE DateEffective='0000-00-00'", "UPDATE insplan SET DateTerm='0001-01-01' WHERE DateTerm='0000-00-00'", "UPDATE insplan SET RenewMonth='1' WHERE RenewMonth='0'", "UPDATE patient SET Birthdate='0001-01-01' WHERE Birthdate='0000-00-00'", "UPDATE patient SET DateFirstVisit='0001-01-01' WHERE DateFirstVisit='0000-00-00'", "UPDATE procedurelog SET ProcDate='0001-01-01' WHERE ProcDate='0000-00-00'", "UPDATE procedurelog SET DateOriginalProsth='0001-01-01' " + "WHERE DateOriginalProsth='0000-00-00'", "UPDATE procedurelog SET DateLocked='0001-01-01' WHERE DateLocked='0000-00-00'", "UPDATE recall SET DateDueCalc='0001-01-01' WHERE DateDueCalc='0000-00-00'", "UPDATE recall SET DateDue='0001-01-01' WHERE DateDue='0000-00-00'", "UPDATE recall SET DatePrevious='0001-01-01' WHERE DatePrevious='0000-00-00'", "ALTER table adjustment CHANGE AdjDate AdjDate date NOT NULL default '0001-01-01'", "ALTER table appointment CHANGE AptDateTime AptDateTime datetime NOT NULL " + "default '0001-01-01 00:00:00'", "ALTER table claim CHANGE DateService DateService date NOT NULL default '0001-01-01'", "ALTER table claim CHANGE DateSent DateSent date NOT NULL default '0001-01-01'", "ALTER table claim CHANGE DateReceived DateReceived date NOT NULL default '0001-01-01'", "ALTER table claim CHANGE PriorDate PriorDate date NOT NULL default '0001-01-01'", "ALTER table claim CHANGE AccidentDate AccidentDate date NOT NULL default '0001-01-01'", "ALTER table claim CHANGE OrthoDate OrthoDate date NOT NULL default '0001-01-01'", "ALTER table claimpayment CHANGE CheckDate CheckDate date NOT NULL default '0001-01-01'", "ALTER table claimproc CHANGE DateCP DateCP date NOT NULL default '0001-01-01'", "ALTER table claimproc CHANGE ProcDate ProcDate date NOT NULL default '0001-01-01'", "ALTER table insplan CHANGE DateEffective DateEffective date NOT NULL default '0001-01-01'", "ALTER table insplan CHANGE DateTerm DateTerm date NOT NULL default '0001-01-01'", "ALTER table insplan CHANGE RenewMonth RenewMonth tinyint unsigned NOT NULL default '1'", "ALTER table patient CHANGE Birthdate Birthdate date NOT NULL default '0001-01-01'", "ALTER table patient CHANGE DateFirstVisit DateFirstVisit date NOT NULL default '0001-01-01'", "ALTER table procedurelog CHANGE ProcDate ProcDate date NOT NULL default '0001-01-01'", "ALTER table procedurelog CHANGE DateOriginalProsth DateOriginalProsth " + "date NOT NULL default '0001-01-01'", "ALTER table procedurelog CHANGE DateLocked DateLocked date NOT NULL default '0001-01-01'", "ALTER table recall CHANGE DateDueCalc DateDueCalc date NOT NULL default '0001-01-01'", "ALTER table recall CHANGE DateDue DateDue date NOT NULL default '0001-01-01'", "ALTER table recall CHANGE DatePrevious DatePrevious date NOT NULL default '0001-01-01'", "UPDATE procedurecode SET IsProsth=1 WHERE ADACode='D2740' || ADACode='D2750' " + "|| ADACode='D2751' || ADACode='D2752' || ADACode='D2790' || ADACode='D2791' " + "|| ADACode='D2792' || ADACode='D5110' || ADACode='D5120' || ADACode='D5130' " + "|| ADACode='D5140' || ADACode='D5211' || ADACode='D5212' || ADACode='D5213' " + "|| ADACode='D5214' || ADACode='D5225' || ADACode='D5226' || ADACode='D5281'" + "|| ADACode='D5810' || ADACode='D5811' || ADACode='D5820' || ADACode='D5821'" + "|| ADACode LIKE 'D62%' || ADACode LIKE 'D65%' || ADACode LIKE 'D66%' " + "|| ADACode LIKE 'D67%'", "INSERT INTO definition(Category,ItemOrder,ItemName,ItemValue,ItemColor,IsHidden) " + "VALUES ('21','7','Commlog Appt Related','','-886','0')", "UPDATE preference SET ValueString = '3.1.3.0' WHERE PrefName = 'DataBaseVersion'" };
            //Set prosth codes
            //add new ada codes
            //,"INSERT INTO procedurecode "
            Db.NonQ32(commands);
        }
         
        to3_1_4();
    }

    private static void to3_1_4() throws Exception {
        if (FromVersion < new Version("3.1.4.0"))
        {
            String[] commands = new String[]{ "ALTER table clearinghouse ADD LoginID varchar(255) NOT NULL", "UPDATE clearinghouse SET ReceiverID='0135WCH00' WHERE ReceiverID='WebMD'", "ALTER table provider ADD OutlineColor int NOT NULL", "UPDATE provider SET OutlineColor ='-11711155'", "UPDATE preference SET ValueString = '3.1.4.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to3_1_13();
    }

    private static void to3_1_13() throws Exception {
        if (FromVersion < new Version("3.1.13.0"))
        {
            //get rid of any medication pats where medication no longer exists.
            String command = "SELECT medicationpat.MedicationPatNum FROM medicationpat " + "LEFT JOIN medication ON medicationpat.MedicationNum=medication.MedicationNum " + "WHERE medication.MedicationNum IS NULL";
            DataTable table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "DELETE FROM medicationpat WHERE MedicationPatNum=" + table.Rows[i][0].ToString();
                Db.nonQ32(command);
            }
            String[] commands = new String[]{ "INSERT INTO clearinghouse(Description,ExportPath,IsDefault,Payors,Eformat,ReceiverID," + "SenderID,Password,ResponsePath,CommBridge,ClientProgram) " + "VALUES(\'RECS\',\'C:\\\\Recscom\\\\\',\'0\',\'\',\'1\',\'RECS\',\'\',\'\'," + "\'\',\'5\',\'C:\\\\Recscom\\\\Recscom.exe\')", "UPDATE preference SET ValueString = '3.1.13.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to3_1_16();
    }

    private static void to3_1_16() throws Exception {
        if (FromVersion < new Version("3.1.16.0"))
        {
            //this functionality is all copied directly from the Check Database tool.
            String command = "SELECT PatNum FROM patient\r\n" + 
            "\t\t\t\t\tLEFT JOIN insplan on patient.PriPlanNum=insplan.PlanNum\r\n" + 
            "\t\t\t\t\tWHERE patient.PriPlanNum != 0\r\n" + 
            "\t\t\t\t\tAND insplan.PlanNum IS NULL";
            DataTable table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "UPDATE patient set PriPlanNum=0 " + "WHERE PatNum=" + table.Rows[i][0].ToString();
                Db.nonQ32(command);
            }
            command = "SELECT ClaimProcNum FROM claimproc\r\n" + 
            "\t\t\t\t\tLEFT JOIN insplan ON claimproc.PlanNum=insplan.PlanNum\r\n" + 
            "\t\t\t\t\tWHERE insplan.PlanNum IS NULL";
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "DELETE FROM claimproc " + "WHERE ClaimProcNum=" + table.Rows[i][0].ToString();
                Db.nonQ32(command);
            }
            command = "SELECT ClaimNum FROM claim\r\n" + 
            "\t\t\t\t\tLEFT JOIN insplan ON claim.PlanNum=insplan.PlanNum\r\n" + 
            "\t\t\t\t\tWHERE insplan.PlanNum IS NULL";
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "DELETE FROM claim " + "WHERE ClaimNum=" + table.Rows[i][0].ToString();
                Db.nonQ32(command);
            }
            command = "UPDATE preference SET ValueString = '3.1.16.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_4_0();
    }

    private static void to3_4_0() throws Exception {
        if (FromVersion < new Version("3.4.0.0"))
        {
            executeFile("convert_3_4_0.txt");
            //Might throw an exception which we handle.
            //----------------Clone payment dates into paysplits--------------------------------------
            String command = "SELECT paysplit.SplitNum,payment.PayDate FROM payment,paysplit " + "WHERE payment.PayNum=paysplit.PayNum";
            DataTable table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "UPDATE paysplit SET " + "DatePay=" + POut.Date(PIn.Date(table.Rows[i][1].ToString())) + " " + "WHERE SplitNum=" + table.Rows[i][0].ToString();
                Db.nonQ32(command);
            }
            //----------------Convert all discounts to adjustments-----------------------------------
            //add adjustment categories.
            command = "SELECT Max(ItemOrder) FROM definition WHERE Category=1";
            table = Db.getTable(command);
            int firstItemOrder = PIn.Int(table.Rows[0][0].ToString()) + 1;
            command = "SELECT * FROM definition WHERE Category=15 ORDER BY ItemOrder";
            //cat=DiscountTypes
            table = Db.getTable(command);
            Hashtable HDiscToAdj = new Hashtable();
            //key=original defNum(discountType. value=new defNum(AdjType)
            int numAdj = 0;
            for (int i = 0;i < table.Rows.Count;i++)
            {
                //category=AdjTypes
                //itemOrder
                //item name
                //itemValue. All discounts are negative
                command = "INSERT INTO definition (category,itemorder,itemname,itemvalue,ishidden) VALUES(" + "1, " + "'" + POut.Long(firstItemOrder + i) + "', " + "'" + POut.String(PIn.String(table.Rows[i][3].ToString())) + "', " + "'-', " + "'" + table.Rows[i][6].ToString() + "')";
                //is hidden
                numAdj = Db.nonQ32(command,true);
                //defNum of disc
                HDiscToAdj.Add(PIn.Long(table.Rows[i][0].ToString()), numAdj);
            }
            //defNum of adj
            //handle 0:
            HDiscToAdj.Add(0, numAdj);
            //create new adjustments from existing discounts
            command = "SELECT * FROM paysplit WHERE IsDiscount=1";
            //0=SplitNum,1=SplitAmt,2=PatNum,3=ProcDate,
            //4=PayNum,5=IsDiscount,6=DiscountType,7=ProvNum,8=PayPlanNum,9=DatePay
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                //AdjNote
                //entryDate
                //amt
                //patNum
                //type
                //provNum
                command = "INSERT INTO adjustment (AdjDate,AdjAmt,PatNum, " + "AdjType,ProvNum,ProcDate) " + "VALUES(" + POut.Date(PIn.Date(table.Rows[i][9].ToString())) + ", " + "'" + POut.Double(-PIn.Double(table.Rows[i][1].ToString())) + "', " + "'" + POut.Long(PIn.Long(table.Rows[i][2].ToString())) + "', " + "'" + POut.Long((int)HDiscToAdj[PIn.Long(table.Rows[i][6].ToString())]) + "', " + "'" + POut.Long(PIn.Long(table.Rows[i][7].ToString())) + "', " + POut.Date(PIn.Date(table.Rows[i][3].ToString())) + ")";
                //procDate
                //note
                Db.nonQ32(command);
            }
            command = "DELETE FROM paysplit WHERE IsDiscount=1";
            Db.nonQ32(command);
            //--------------------Printers----------------------------------------------------------
            command = "SELECT * FROM computer WHERE PrinterName != ''";
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "INSERT INTO printer (ComputerNum,PrintSit,PrinterName," + "DisplayPrompt) " + "VALUES(" + "'" + POut.Long(PIn.Long(table.Rows[i][0].ToString())) + "', " + "'" + POut.Long(((Enum)PrintSituation.Default).ordinal()) + "', " + "'" + POut.String(PIn.String(table.Rows[i][2].ToString())) + "', " + "'1')";
                Db.nonQ32(command);
            }
            command = "UPDATE computer SET PrinterName = ''";
            Db.nonQ32(command);
            //HouseCalls link-----------------------------------------------------------------------
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'HouseCalls', " + "'HouseCalls from www.housecallsweb.com', " + "'0', " + "'', " + "'', " + "'" + POut.string("Typical Export Path is C:\\HouseCalls\\") + "')";
            int programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Export Path', " + "'" + POut.string("C:\\HouseCalls\\") + "')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + programNum.ToString() + "', " + "'" + (((Enum)ToolBarsAvail.ChartModule).ordinal()).ToString() + "', " + "'HouseCalls')";
            Db.nonQ32(command);
            //Delete program links for WebClaim and Renaissance--------------------------------------
            //Final cleanup-------------------------------------------------------------------------
            command = "UPDATE preference SET ValueString = '3.4.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_4_7();
    }

    private static void to3_4_7() throws Exception {
        if (FromVersion < new Version("3.4.7.0"))
        {
            String[] commands = new String[]{ "INSERT INTO clearinghouse(Description,ExportPath,IsDefault,Payors,Eformat,ReceiverID," + "SenderID,Password,ResponsePath,CommBridge,ClientProgram) " + "VALUES(\'WebClaim\',\'C:\\\\WebClaim\\\\Upload\\\\\',\'0\',\'\',\'1\',\'330989922\',\'\',\'\'," + "\'\',\'4\',\'\')", "UPDATE preference SET ValueString = '3.4.7.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to3_4_10();
    }

    private static void to3_4_10() throws Exception {
        //the only purpose of this is to check the bug fix in conversions
        if (FromVersion < new Version("3.4.10.0"))
        {
            String[] commands = new String[]{ "UPDATE preference SET ValueString = '3.4.10.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to3_4_11();
    }

    private static void to3_4_11() throws Exception {
        if (FromVersion < new Version("3.4.11.0"))
        {
            //Planmeca link-----------------------------------------------------------------------
            String command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Planmeca', " + "'Dimaxis from Planmeca', " + "'0', " + "'DxStart.exe', " + "'', " + "'" + POut.string("Typical file path is DxStart.exe which is available from Planmeca and should be placed in the same folder as this program.") + "')";
            int programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + programNum.ToString() + "', " + "'" + (((Enum)ToolBarsAvail.ChartModule).ordinal()).ToString() + "', " + "'Planmeca')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '3.4.11.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_4_16();
    }

    private static void to3_4_16() throws Exception {
        if (FromVersion < new Version("3.4.16.0"))
        {
            String[] commands = new String[]{ "UPDATE clearinghouse SET Description=\'ClaimConnect\',ExportPath=\'C:\\\\ClaimConnect\\\\Upload\\\\\' WHERE Description=\'WebClaim\'", "UPDATE preference SET ValueString = '3.4.16.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to3_4_17();
    }

    private static void to3_4_17() throws Exception {
        if (FromVersion < new Version("3.4.17.0"))
        {
            String[] commands = new String[]{ "UPDATE patient SET DateFirstVisit='0001-01-01' WHERE DateFirstVisit='0000-00-00'", "UPDATE preference SET ValueString = '3.4.17.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to3_4_24();
    }

    private static void to3_4_24() throws Exception {
        if (FromVersion < new Version("3.4.24.0"))
        {
            //Delete program links for WebClaim and Renaissance--------------------------------------
            String command = "SELECT ProgramNum FROM program WHERE ProgName='WebClaim' OR ProgName='Renaissance'";
            DataTable table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "DELETE FROM program WHERE ProgramNum=" + table.Rows[i][0].ToString();
                Db.nonQ32(command);
                command = "DELETE FROM toolbutitem WHERE ProgramNum=" + table.Rows[i][0].ToString();
                Db.nonQ32(command);
            }
            //Fix utf8 binary collations for ADACode columns-------------------------------------------
            command = "SELECT @@version";
            table = Db.getTable(command);
            String thisVersion = PIn.String(table.Rows[0][0].ToString());
            String[] commands = new String[]();
            if (StringSupport.equals(thisVersion.Substring(0, 3), "4.1") || StringSupport.equals(thisVersion.Substring(0, 3), "5.0"))
            {
                commands = new String[]{ "ALTER TABLE procedurecode CHANGE ADACode ADACode varchar(15) character set utf8 collate utf8_bin NOT NULL", "ALTER TABLE procedurecode DEFAULT character set utf8", "ALTER TABLE procedurecode MODIFY Descript varchar(255) character set utf8 NOT NULL", "ALTER TABLE procedurecode MODIFY AbbrDesc varchar(50) character set utf8 NOT NULL", "ALTER TABLE procedurecode MODIFY ProcTime varchar(24) character set utf8 NOT NULL", "ALTER TABLE procedurecode MODIFY DefaultNote text character set utf8 NOT NULL", "ALTER TABLE procedurecode MODIFY AlternateCode1 varchar(15) character set utf8 NOT NULL", "ALTER TABLE procedurelog MODIFY ADACode varchar(15) character set utf8 collate utf8_bin NOT NULL", "ALTER TABLE autocodeitem MODIFY ADACode varchar(15) character set utf8 collate utf8_bin NOT NULL", "ALTER TABLE procbuttonitem MODIFY ADACode varchar(15) character set utf8 collate utf8_bin NOT NULL", "ALTER TABLE covspan MODIFY FromCode varchar(15) character set utf8 collate utf8_bin NOT NULL", "ALTER TABLE covspan MODIFY ToCode varchar(15) character set utf8 collate utf8_bin NOT NULL" };
                Db.NonQ32(commands);
            }
             
            commands = new String[]{ "INSERT INTO clearinghouse(Description,ExportPath,IsDefault,Payors,Eformat,ReceiverID," + "SenderID,Password,ResponsePath,CommBridge,ClientProgram) " + "VALUES(\'Inmediata Health Group Corp\',\'C:\\\\Inmediata\\\\Claims\\\\\',\'0\',\'\',\'1\',\'660610220\',\'\',\'\'," + "\'C:\\\\Inmediata\\\\Reports\\\\\',\'6\',\'C:\\\\Program Files\\\\Inmediata\\\\IMPlug.exe\')", "UPDATE preference SET ValueString = '3.4.24.0' WHERE PrefName = 'DataBaseVersion'" };
            //Inmediata clearinghouse--------------------------------------------------------------
            Db.NonQ32(commands);
        }
         
        to3_5_0();
    }

    private static void to3_5_0() throws Exception {
        if (FromVersion < new Version("3.5.0.0"))
        {
            executeFile("convert_3_5_0.txt");
            //Might throw an exception which we handle.
            //Add patient picture category to images
            String command = "SELECT MAX(ItemOrder) FROM definition WHERE Category=18";
            DataTable table = Db.getTable(command);
            int lastI = PIn.Int(table.Rows[0][0].ToString());
            command = "INSERT INTO definition(Category,ItemOrder,ItemName,ItemValue) " + "VALUES(18," + POut.Long(lastI + 1) + ",'Patient Pictures','P')";
            Db.nonQ32(command);
            //ImageFX link-----------------------------------------------------------------------
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'ImageFX', " + "'ImageFX from scican.com', " + "'0', " + "'" + POut.string("C:\\ImageFX\\ImageFX.exe") + "', " + "'', " + "'" + POut.string("Typical file path is C:\\ImageFX\\ImageFX.exe") + "')";
            int programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + programNum.ToString() + "', " + "'" + (((Enum)ToolBarsAvail.ChartModule).ordinal()).ToString() + "', " + "'ImageFX')";
            Db.nonQ32(command);
            //fix the provider ID field----------------------------------------------------------------
            command = "SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD1'";
            table = Db.getTable(command);
            if (table.Rows.Count > 0)
            {
                command = "UPDATE claimformitem SET FieldName='BillingDentistProviderID' WHERE FieldName='BillingDentistMedicaidID' " + "AND ClaimFormNum=" + table.Rows[0][0].ToString();
                Db.nonQ32(command);
            }
             
            command = "UPDATE preference SET ValueString = '3.5.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_5_1();
    }

    private static void to3_5_1() throws Exception {
        if (FromVersion < new Version("3.5.1.0"))
        {
            String[] commands = new String[]{ "ALTER TABLE schedule CHANGE Note Note TEXT NOT NULL", "UPDATE preference SET ValueString = '3.5.1.0' WHERE PrefName = 'DataBaseVersion'" };
            Db.NonQ32(commands);
        }
         
        to3_5_3();
    }

    private static void to3_5_3() throws Exception {
        if (FromVersion < new Version("3.5.3.0"))
        {
            //DentForms link-----------------------------------------------------------------------
            String command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'DentForms', " + "'DentForms from medictalk.com', " + "'0', " + "'" + POut.string("C:\\MedicTalk\\reports\\mtconnector.exe") + "', " + "'', " + "'" + POut.string("No command line is needed.  Typical path is C:\\MedicTalk\\reports\\mtconnector.exe") + "')";
            int programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + programNum.ToString() + "', " + "'" + (((Enum)ToolBarsAvail.ChartModule).ordinal()).ToString() + "', " + "'DentForms')";
            Db.nonQ32(command);
            command = "UPDATE tasklist SET DateType=0 WHERE Parent !=0";
            Db.nonQ32(command);
            command = "UPDATE task SET DateType=0, TaskStatus=0 WHERE TaskListNum !=0";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '3.5.3.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_6_0();
    }

    private static void to3_6_0() throws Exception {
        if (FromVersion < new Version("3.6.0.0"))
        {
            executeFile("convert_3_6_0.txt");
            //Might throw an exception which we handle.
            String command = new String();
            command = "UPDATE preference SET ValueString = '3.6.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_6_1();
    }

    private static void to3_6_1() throws Exception {
        if (FromVersion < new Version("3.6.1.0"))
        {
            String command = new String();
            //Not sure how some of the dates got out of synch:
            command = "UPDATE payment,paysplit SET paysplit.DatePay=payment.PayDate WHERE paysplit.PayNum=payment.PayNum";
            Db.nonQ32(command);
            //or how procedures can accidently get attached to appointments for different patients:
            command = "UPDATE procedurelog,appointment SET procedurelog.AptNum=0 " + "WHERE procedurelog.AptNum=appointment.AptNum AND appointment.PatNum!=procedurelog.PatNum";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '3.6.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_6_4();
    }

    private static void to3_6_4() throws Exception {
        //duplicate of To3_5_6 because we needed to fix for users who had already upgraded to 3.6
        if (FromVersion < new Version("3.6.4.0"))
        {
            String[] commands = new String[]{ "ALTER TABLE procedurecode CHANGE ADACode ADACode varchar(15) character set utf8 collate utf8_bin NOT NULL", "ALTER TABLE procedurecode DEFAULT character set utf8", "ALTER TABLE procedurecode MODIFY Descript varchar(255) character set utf8 NOT NULL", "ALTER TABLE procedurecode MODIFY AbbrDesc varchar(50) character set utf8 NOT NULL", "ALTER TABLE procedurecode MODIFY ProcTime varchar(24) character set utf8 NOT NULL", "ALTER TABLE procedurecode MODIFY DefaultNote text character set utf8 NOT NULL", "ALTER TABLE procedurecode MODIFY AlternateCode1 varchar(15) character set utf8 NOT NULL", "ALTER TABLE procedurelog MODIFY ADACode varchar(15) character set utf8 collate utf8_bin NOT NULL", "ALTER TABLE autocodeitem MODIFY ADACode varchar(15) character set utf8 collate utf8_bin NOT NULL", "ALTER TABLE procbuttonitem MODIFY ADACode varchar(15) character set utf8 collate utf8_bin NOT NULL", "ALTER TABLE covspan MODIFY FromCode varchar(15) character set utf8 collate utf8_bin NOT NULL", "ALTER TABLE covspan MODIFY ToCode varchar(15) character set utf8 collate utf8_bin NOT NULL", "ALTER TABLE fee MODIFY ADACode varchar(15) character set utf8 collate utf8_bin NOT NULL" };
            Db.NonQ32(commands);
            commands = new String[]{ "INSERT INTO clearinghouse(Description,ExportPath,IsDefault,Payors,Eformat,ReceiverID," + "SenderID,Password,ResponsePath,CommBridge,ClientProgram) " + "VALUES(\'AOS Data systems\',\'C:\\\\Program Files\\\\AOS\\\\\',\'0\',\'\',\'1\',\'AOS\',\'\',\'\'," + "\'C:\\\\Program Files\\\\AOS\\\\\',\'7\',\'C:\\\\Program Files\\\\AOS\\\\AOSCommunicator\\\\AOSCommunicator.exe\')" };
            //AOS DATA clearinghouse----------------------------------------ADDED by SPK 7/13/05----------------------
            Db.NonQ32(commands);
            String command = "UPDATE preference SET ValueString = '3.6.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_6_5();
    }

    private static void to3_6_5() throws Exception {
        if (FromVersion < new Version("3.6.5.0"))
        {
            //delete any unattached adjustments
            String command = "SELECT adjustment.AdjNum,procedurelog.ProcNum FROM adjustment " + "LEFT JOIN procedurelog ON procedurelog.ProcNum=adjustment.ProcNum " + "WHERE adjustment.ProcNum !=0 " + "AND procedurelog.ProcNum IS NULL";
            DataTable table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "DELETE FROM adjustment WHERE AdjNum=" + table.Rows[i][0].ToString();
                Db.nonQ32(command);
            }
            command = "UPDATE preference SET ValueString = '3.6.5.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_7_0();
    }

    private static void to3_7_0() throws Exception {
        if (FromVersion < new Version("3.7.0.0"))
        {
            executeFile("convert_3_7_0.txt");
            //Might throw an exception which we handle.
            String command = new String();
            //Convert pay plans-----------------------------------------------------------------------------
            command = "SELECT PayPlanNum,PatNum,Guarantor,PayPlanDate,TotalAmount,APR," + "PeriodPayment,Term,AccumulatedDue,DateFirstPay,DownPayment," + "Note,TotalCost,LastPayment " + "FROM payplan";
            //0-5
            //6-10
            //11-13
            DataTable table = Db.getTable(command);
            int payPlanNum = new int();
            //0
            int patNum = new int();
            //1
            int guarantor = new int();
            //2
            DateTime payPlanDate = new DateTime();
            // 3
            double totalAmount = new double();
            //4 aka principal. This gets reduced to 0 in loop
            double APR = new double();
            // 5
            double monthlyPayment = new double();
            //6
            int term = new int();
            //7
            //CurrentDue 8
            DateTime dateFirstPay = new DateTime();
            //9
            double downPayment = new double();
            //10
            //Note 11
            double totalCost = new double();
            // 12. Princ+Int. This gets reduced to 0 in loop
            double lastPayment = new double();
            //13
            //variables used for the individual charges:
            DateTime chargeDate = new DateTime();
            double principal = new double();
            double interest = new double();
            double monthlyRate = new double();
            for (int i = 0;i < table.Rows.Count;i++)
            {
                payPlanNum = PIn.Int(table.Rows[i][0].ToString());
                patNum = PIn.Int(table.Rows[i][1].ToString());
                guarantor = PIn.Int(table.Rows[i][2].ToString());
                payPlanDate = PIn.Date(table.Rows[i][3].ToString());
                totalAmount = PIn.Double(table.Rows[i][4].ToString());
                APR = PIn.Double(table.Rows[i][5].ToString());
                monthlyPayment = PIn.Double(table.Rows[i][6].ToString());
                term = PIn.Int(table.Rows[i][7].ToString());
                dateFirstPay = PIn.Date(table.Rows[i][9].ToString());
                downPayment = PIn.Double(table.Rows[i][10].ToString());
                totalCost = PIn.Double(table.Rows[i][12].ToString());
                lastPayment = PIn.Double(table.Rows[i][13].ToString());
                //down payment
                if (downPayment > 0)
                {
                    chargeDate = payPlanDate;
                    principal = downPayment;
                    totalCost -= downPayment;
                    totalAmount -= downPayment;
                    interest = 0;
                    command = "INSERT INTO payplancharge (PayPlanNum,Guarantor,PatNum,ChargeDate,Principal,Interest,Note) VALUES(" + "'" + POut.Long(payPlanNum) + "', " + "'" + POut.Long(guarantor) + "', " + "'" + POut.Long(patNum) + "', " + POut.date(chargeDate) + ", " + "'" + POut.double(principal) + "', " + "'" + POut.double(interest) + "', " + "'Downpayment')";
                    Db.nonQ32(command);
                }
                 
                if (APR == 0)
                {
                    monthlyRate = 0;
                }
                else
                {
                    monthlyRate = APR / 100 / 12;
                } 
                for (int j = 0;j < term;j++)
                {
                    chargeDate = dateFirstPay.AddMonths(j);
                    if (j == term - 1 && lastPayment == 0)
                    {
                        //if this is the very last payment
                        //all remaining principal gets applied
                        principal = totalAmount;
                        totalCost -= totalAmount;
                        totalAmount = 0;
                        //all remaining interest gets applied
                        interest = totalCost;
                        totalCost = 0;
                    }
                    else
                    {
                        interest = Math.Round((totalAmount * monthlyRate), 2);
                        //2 decimals
                        principal = monthlyPayment - interest;
                        totalAmount -= principal;
                        totalCost -= monthlyPayment;
                    } 
                    if (principal < 0)
                    {
                        principal = 0;
                    }
                     
                    if (interest < 0)
                    {
                        interest = 0;
                    }
                     
                    command = "INSERT INTO payplancharge (PayPlanNum,Guarantor,PatNum,ChargeDate,Principal,Interest) VALUES(" + "'" + POut.Long(payPlanNum) + "', " + "'" + POut.Long(guarantor) + "', " + "'" + POut.Long(patNum) + "', " + POut.date(chargeDate) + ", " + "'" + POut.double(principal) + "', " + "'" + POut.double(interest) + "')";
                    Db.nonQ32(command);
                }
                //loop term
                //last payment
                if (lastPayment != 0)
                {
                    chargeDate = dateFirstPay.AddMonths(term);
                    //all remaining principal gets applied
                    principal = totalAmount;
                    totalCost -= totalAmount;
                    totalAmount = 0;
                    //all remaining interest gets applied
                    interest = totalCost;
                    totalCost = 0;
                    command = "INSERT INTO payplancharge (PayPlanNum,Guarantor,PatNum,ChargeDate,Principal,Interest) VALUES(" + "'" + POut.Long(payPlanNum) + "', " + "'" + POut.Long(guarantor) + "', " + "'" + POut.Long(patNum) + "', " + POut.date(chargeDate) + ", " + "'" + POut.double(principal) + "', " + "'" + POut.double(interest) + "')";
                    Db.nonQ32(command);
                }
                 
            }
            //get rid of unwanted columns in pay plans
            String[] commands = new String[]{ "ALTER TABLE payplan DROP TotalAmount", "ALTER TABLE payplan DROP PeriodPayment", "ALTER TABLE payplan DROP Term", "ALTER TABLE payplan DROP AccumulatedDue", "ALTER TABLE payplan DROP DateFirstPay", "ALTER TABLE payplan DROP DownPayment", "ALTER TABLE payplan DROP TotalCost", "ALTER TABLE payplan DROP LastPayment" };
            Db.NonQ32(commands);
            //Operatories----------------------------------------------------------------------------------------------
            command = "SELECT DefNum,ItemOrder,ItemName,ItemValue,IsHidden FROM definition WHERE Category=9 ORDER BY ItemOrder";
            table = Db.getTable(command);
            //Hashtable hashOps=new Hashtable();//key=defNum,value=OperatoryNum
            int defNum = new int();
            //represents the old opNum as it was in the database
            int opNum = new int();
            //the newly assigned key
            String itemName = new String();
            String itemValue = new String();
            for (int i = 0;i < table.Rows.Count;i++)
            {
                defNum = PIn.Int(table.Rows[i][0].ToString());
                itemName = PIn.String(table.Rows[i][2].ToString());
                itemValue = PIn.String(table.Rows[i][3].ToString());
                command = "INSERT INTO operatory (OpName,Abbrev,ItemOrder,IsHidden) VALUES(" + "'" + POut.string(itemName) + "', " + "'" + POut.string(itemValue) + "', " + "'" + table.Rows[i][1].ToString() + "', " + "'" + table.Rows[i][4].ToString() + "')";
                opNum = Db.nonQ32(command,true);
                command = "UPDATE appointment SET Op=" + POut.Long(opNum) + " WHERE Op=" + POut.Long(defNum);
                Db.nonQ32(command);
                command = "UPDATE scheddefault SET Op=" + POut.Long(opNum) + " WHERE Op=" + POut.Long(defNum);
                Db.nonQ32(command);
                command = "UPDATE apptviewitem SET OpNum=" + POut.Long(opNum) + " WHERE OpNum=" + POut.Long(defNum);
                Db.nonQ32(command);
            }
            command = "DELETE FROM definition WHERE Category=9";
            Db.nonQ32(command);
            //final cleanup-----------------------------------------------------------------------------------------
            command = "UPDATE preference SET ValueString = '3.7.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_7_2();
    }

    private static void to3_7_2() throws Exception {
        if (FromVersion < new Version("3.7.2.0"))
        {
            //add the new permission types to each group
            String command = "SELECT UserGroupNum FROM usergroup";
            DataTable table = Db.getTable(command);
            int groupNum = new int();
            for (int i = 0;i < table.Rows.Count;i++)
            {
                groupNum = PIn.Int(table.Rows[i][0].ToString());
                command = "INSERT INTO grouppermission (UserGroupNum,PermType) VALUES(" + POut.Long(groupNum) + ",25)";
                Db.nonQ32(command);
                command = "INSERT INTO grouppermission (UserGroupNum,PermType) VALUES(" + POut.Long(groupNum) + ",26)";
                Db.nonQ32(command);
                command = "INSERT INTO grouppermission (UserGroupNum,PermType) VALUES(" + POut.Long(groupNum) + ",27)";
                Db.nonQ32(command);
            }
            //by default, nobody will have permission to backup
            //command="INSERT INTO grouppermission (UserGroupNum,PermType) VALUES("+POut.PInt(groupNum)+",28)";
            //Db.NonQ32(command);
            //also by default, nobody will have permission to TimcardsEditAll
            command = "ALTER TABLE user ADD EmployeeNum smallint NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '3.7.2.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_7_3();
    }

    private static void to3_7_3() throws Exception {
        if (FromVersion < new Version("3.7.3.0"))
        {
            String command = "ALTER TABLE securitylog ADD PatNum mediumint unsigned NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE tasklist ADD DateTimeEntry datetime NOT NULL default '0001-01-01'";
            Db.nonQ32(command);
            command = "ALTER TABLE task ADD DateTimeEntry datetime NOT NULL default '0001-01-01'";
            Db.nonQ32(command);
            command = "INSERT INTO preference VALUES ('BalancesDontSubtractIns','0')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '3.7.3.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_7_4();
    }

    private static void to3_7_4() throws Exception {
        if (FromVersion < new Version("3.7.4.0"))
        {
            //Easy Notes Pro link-----------------------------------------------------------------------
            String command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'EasyNotesPro', " + "'Easy Notes Pro from easynotespro.com', " + "'0', " + "'" + POut.string("C:\\Program Files\\EasyNotesPro\\AppBarProcess.exe") + "', " + "'" + POut.string("\"" + "C:\\Program Files\\EasyNotesPro\\DefaultDentalToolbar.etb" + "\"" + " OpenDental false") + "', " + "'" + POut.string("Do not try to add buttons to your toolbars because that won\'t work.  Typical path is C:\\Program Files\\EasyNotesPro\\AppBarProcess.exe") + "')";
            Db.nonQ32(command,true);
            command = "UPDATE preference SET ValueString = '3.7.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_7_5();
    }

    private static void to3_7_5() throws Exception {
        if (FromVersion < new Version("3.7.5.0"))
        {
            String command = "INSERT INTO preference VALUES ('TimecardSecurityEnabled','0')";
            Db.nonQ32(command);
            command = "INSERT INTO preference VALUES ('RecallCardsShowReturnAdd','1')";
            Db.nonQ32(command);
            command = "ALTER TABLE insplan ADD BenefitNotes text NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '3.7.5.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_7_6();
    }

    private static void to3_7_6() throws Exception {
        if (FromVersion < new Version("3.7.6.0"))
        {
            String command = "ALTER TABLE clinic ADD DefaultPlaceService tinyint unsigned NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '3.7.6.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_8_0();
    }

    private static void to3_8_0() throws Exception {
        if (FromVersion < new Version("3.8.0.0"))
        {
            executeFile("convert_3_8_0.txt");
            //Might throw an exception which we handle.
            //add deposit slip permission to each group
            String command = "SELECT UserGroupNum FROM usergroup";
            DataTable table = Db.getTable(command);
            int groupNum = new int();
            for (int i = 0;i < table.Rows.Count;i++)
            {
                groupNum = PIn.Int(table.Rows[i][0].ToString());
                command = "INSERT INTO grouppermission (UserGroupNum,PermType) VALUES(" + POut.Long(groupNum) + ",30)";
                Db.nonQ32(command);
            }
            //Populate the new column: claimpayment.CarrierName
            command = "SELECT claimpayment.ClaimPaymentNum,carrier.CarrierName " + "FROM claimpayment,claimproc,insplan,carrier " + "WHERE claimproc.ClaimPaymentNum = claimpayment.ClaimPaymentNum " + "AND claimproc.PlanNum = insplan.PlanNum " + "AND insplan.CarrierNum = carrier.CarrierNum " + "GROUP BY claimpayment.ClaimPaymentNum";
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "UPDATE claimpayment SET CarrierName='" + POut.String(PIn.String(table.Rows[i][1].ToString())) + "' " + "WHERE ClaimPaymentNum=" + table.Rows[i][0].ToString();
                Db.nonQ32(command);
            }
            command = "UPDATE preference SET ValueString = '3.8.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_8_5();
    }

    private static void to3_8_5() throws Exception {
        if (FromVersion < new Version("3.8.5.0"))
        {
            //Make a few changes to the paths in the ENP bridge
            String command = new String();
            //="SELECT ProgramNum FROM program WHERE ProgName='EasyNotesPro'";
            //DataTable table=Db.GetTable(command);
            //if(table.Rows.Count>0){//otherwise user might have deleted the bridge
            //int programNum=PIn.PInt(table.Rows[0][0].ToString());
            command = "UPDATE program SET " + "CommandLine='" + POut.string("\"" + "C:\\Program Files\\EasyNotesPro\\DefaultDentalToolbar.etb" + "\"" + " standalone true") + "' " + "WHERE ProgName='EasyNotesPro'";
            //+POut.PInt(programNum);
            Db.nonQ32(command);
            //}
            command = "UPDATE preference SET ValueString = '3.8.5.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_9_0();
    }

    private static void to3_9_0() throws Exception {
        if (FromVersion < new Version("3.9.0.0"))
        {
            ExecuteFile(Path.Combine("Version 3 9 0", "convert_3_9_0.txt"));
            //Might throw an exception which we handle.
            //convert two letter languages to 5 char specific culture names-------------------------------------------------
            String command = "";
            DataTable table = new DataTable();
            if (StringSupport.equals(CultureInfo.CurrentCulture.Name, "en-US"))
            {
                command = "DELETE FROM languageforeign";
                Db.nonQ32(command);
            }
            else
            {
            } 
            /*
            					command="SELECT DISTINCT Culture FROM languageforeign";
            					table=Db.GetTable(command);
            					CultureInfo ci;
            					for(int i=0;i<table.Rows.Count;i++) {
            						try {
            							ci=new CultureInfo(table.Rows[i][0].ToString());
            						}
            						catch {
            							//MessageBox.Show("Invalid culture: "+table.Rows[i][0].ToString());
            							continue;
            						}
            						FormConvertLang39 FormC=new FormConvertLang39();
            						FormC.OldCulture=ci;
            						FormC.ShowDialog();
            						if(FormC.DialogResult!=DialogResult.OK) {
            							continue;
            						}
            						command="UPDATE languageforeign SET Culture='"+FormC.NewName+"' "
            							+"WHERE Culture='"+table.Rows[i][0].ToString()+"'";
            						Db.NonQ32(command);
            					}*/
            //------------------------------------------------------------------------------------------------------------
            //move all patient.PriPlanNum,PriRelationship,SecPlanNum,SecRelationship,
            //PriPending,SecPending,PriPatID,SecPatID to PatPlan objects
            command = "SELECT PatNum,PriPlanNum,PriRelationship,PriPending,PriPatID FROM patient WHERE PriPlanNum>0";
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                //patnum
                //planNum
                //Ordinal
                //IsPending
                //Relationship
                command = "INSERT INTO patplan (PatNum,PlanNum,Ordinal,IsPending,Relationship,PatID) VALUES (" + table.Rows[i][0].ToString() + "," + table.Rows[i][1].ToString() + "," + "1," + table.Rows[i][3].ToString() + "," + table.Rows[i][2].ToString() + "," + "'" + POut.String(PIn.String(table.Rows[i][4].ToString())) + "'" + ")";
                //PatID
                Db.nonQ32(command);
            }
            command = "SELECT PatNum,SecPlanNum,SecRelationship,SecPending,SecPatID FROM patient WHERE SecPlanNum>0";
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                //patnum
                //planNum
                //Ordinal
                //IsPending
                //Relationship
                command = "INSERT INTO patplan (PatNum,PlanNum,Ordinal,IsPending,Relationship,PatID) VALUES (" + table.Rows[i][0].ToString() + "," + table.Rows[i][1].ToString() + "," + "2," + table.Rows[i][3].ToString() + "," + table.Rows[i][2].ToString() + "," + "'" + POut.String(PIn.String(table.Rows[i][4].ToString())) + "'" + ")";
                //PatID
                Db.nonQ32(command);
            }
            //convert all covpat.PriPatNum and SecPatNum to PatPlanNum-----------------------------------------------------
            //primary
            command = "SELECT covpat.CovPatNum,patplan.PatPlanNum FROM covpat,patplan " + "WHERE covpat.PriPatNum=patplan.PatNum " + "AND patplan.Ordinal=1";
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "UPDATE covpat SET PatPlanNum=" + table.Rows[i][1].ToString() + " WHERE CovPatNum=" + table.Rows[i][0].ToString();
                Db.nonQ32(command);
            }
            //secondary
            command = "SELECT covpat.CovPatNum,patplan.PatPlanNum FROM covpat,patplan " + "WHERE covpat.PriPatNum=patplan.PatNum " + "AND patplan.Ordinal=2";
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "UPDATE covpat SET PatPlanNum=" + table.Rows[i][1].ToString() + " WHERE CovPatNum=" + table.Rows[i][0].ToString();
                Db.nonQ32(command);
            }
            //set patient.HasInsurance for everyone-----------------------------------------------------------------------
            command = "SELECT DISTINCT PatNum FROM patplan";
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "UPDATE patient SET HasIns='I'" + " WHERE PatNum=" + table.Rows[i][0].ToString();
                Db.nonQ32(command);
            }
            //delete unwanted columns-------------------------------------------------------------------------------------
            String[] commands = new String[]{ "ALTER TABLE covpat DROP PriPatNum", "ALTER TABLE covpat DROP SecPatNum", "ALTER TABLE patient DROP PriPlanNum", "ALTER TABLE patient DROP SecPlanNum", "ALTER TABLE patient DROP PriRelationship", "ALTER TABLE patient DROP SecRelationship", "ALTER TABLE patient DROP RecallInterval", "ALTER TABLE patient DROP RecallStatus", "ALTER TABLE patient DROP PriPending", "ALTER TABLE patient DROP SecPending", "ALTER TABLE patient DROP PriPatID", "ALTER TABLE patient DROP SecPatID", "ALTER TABLE insplan DROP Carrier", "ALTER TABLE insplan DROP Phone", "ALTER TABLE insplan DROP Address", "ALTER TABLE insplan DROP Address2", "ALTER TABLE insplan DROP City", "ALTER TABLE insplan DROP State", "ALTER TABLE insplan DROP Zip", "ALTER TABLE insplan DROP NoSendElect", "ALTER TABLE insplan DROP ElectID", "ALTER TABLE insplan DROP Employer" };
            Db.NonQ32(commands);
            //final cleanup----------------------------------------------------------------------------------------------
            command = "UPDATE preference SET ValueString = '3.9.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_9_1();
    }

    private static void to3_9_1() throws Exception {
        if (FromVersion < new Version("3.9.1.0"))
        {
            String command = "UPDATE preference SET PrefName = 'BackupToPath' WHERE PrefName = 'BackupPath'";
            Db.nonQ32(command);
            command = "INSERT INTO preference VALUES ('BackupFromPath', '" + POut.string("C:\\mysql\\data\\") + "')";
            Db.nonQ32(command);
            command = "INSERT INTO preference VALUES ('BackupRestoreFromPath', '" + POut.string("D:\\") + "')";
            Db.nonQ32(command);
            command = "INSERT INTO preference VALUES ('BackupRestoreToPath', '" + POut.string("C:\\mysql\\data\\") + "')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '3.9.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_9_2();
    }

    private static void to3_9_2() throws Exception {
        if (FromVersion < new Version("3.9.2.0"))
        {
            //DBSWin link-----------------------------------------------------------------------
            String command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'DBSWin', " + "'DBSWin from www.duerruk.com', " + "'0', " + "'', " + "'', " + "'" + POut.string("No command line or path is needed.") + "')";
            int programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Text file path', " + "'" + POut.string("C:\\patdata.txt") + "')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + programNum.ToString() + "', " + "'" + (((Enum)ToolBarsAvail.ChartModule).ordinal()).ToString() + "', " + "'DBSWin')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '3.9.2.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_9_3();
    }

    private static void to3_9_3() throws Exception {
        if (FromVersion < new Version("3.9.3.0"))
        {
            String command = "UPDATE preference SET ValueString = '-1' WHERE PrefName = 'InsBillingProv' AND ValueString='1'";
            Db.nonQ32(command);
            //Add diagnosis fields to HCFA-1500
            int claimFormNum = new int();
            command = "SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD4'";
            DataTable table = Db.getTable(command);
            if (table.Rows.Count > 0)
            {
                claimFormNum = PIn.Int(table.Rows[0][0].ToString());
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P1Diagnosis',446,749,75,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P2Diagnosis',446,781,75,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P3Diagnosis',446,816,75,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P4Diagnosis',446,849,75,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P5Diagnosis',446,882,75,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P6Diagnosis',446,915,75,16)";
                Db.nonQ32(command);
            }
             
            command = "SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD5'";
            table = Db.getTable(command);
            if (table.Rows.Count > 0)
            {
                claimFormNum = PIn.Int(table.Rows[0][0].ToString());
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P1Diagnosis',446,749,75,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P2Diagnosis',446,781,75,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P3Diagnosis',446,816,75,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P4Diagnosis',446,849,75,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P5Diagnosis',446,882,75,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P6Diagnosis',446,915,75,16)";
                Db.nonQ32(command);
            }
             
            command = "ALTER TABLE procedurelog ADD IsPrincDiag tinyint unsigned NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '3.9.3.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_9_4();
    }

    private static void to3_9_4() throws Exception {
        if (FromVersion < new Version("3.9.4.0"))
        {
            String command = "INSERT INTO preference VALUES ('BillingIncludeChanged', '1')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '3.9.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_9_5();
    }

    private static void to3_9_5() throws Exception {
        if (FromVersion < new Version("3.9.5.0"))
        {
            String command = "INSERT INTO preference VALUES ('BackupRestoreAtoZToPath', '" + POut.string("C:\\OpenDentalData\\") + "')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '3.9.5.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_9_6();
    }

    private static void to3_9_6() throws Exception {
        if (FromVersion < new Version("3.9.6.0"))
        {
            String command = "ALTER TABLE referral CHANGE PatNum PatNum int NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE refattach CHANGE PatNum PatNum int NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '3.9.6.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_9_8();
    }

    private static void to3_9_8() throws Exception {
        if (FromVersion < new Version("3.9.8.0"))
        {
            //DentX link-----------------------------------------------------------------------
            String command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'DentX', " + "'ProImage from www.dent-x.com', " + "'0', " + "'', " + "'', " + "'" + POut.string("No command line or path is needed.") + "')";
            int programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + programNum.ToString() + "', " + "'" + (((Enum)ToolBarsAvail.ChartModule).ordinal()).ToString() + "', " + "'DentX')";
            Db.nonQ32(command);
            //Lightyear bridge--------------------------------------------------------------------------
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Lightyear', " + "'SpeedVision from www.lightyeardirect.com', " + "'0', " + "'" + POut.string("C:\\Program Files\\Speedvision\\speedvision.exe") + "', " + "'', " + "'" + POut.string("Path is usually C:\\Program Files\\Speedvision\\speedvision.exe.  No command line is needed.") + "')";
            programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + programNum.ToString() + "', " + "'" + (((Enum)ToolBarsAvail.ChartModule).ordinal()).ToString() + "', " + "'Lightyear')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '3.9.8.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_9_9();
    }

    private static void to3_9_9() throws Exception {
        if (FromVersion < new Version("3.9.9.0"))
        {
            //TrackNPost clearinghouse
            String command = "INSERT INTO clearinghouse(Description,ExportPath,IsDefault,Payors,Eformat,ReceiverID," + "SenderID,Password,ResponsePath,CommBridge,ClientProgram) " + "VALUES(\'Post-n-Track\',\'C:\\\\PostnTrack\\\\Exports\\\\\',\'0\',\'\',\'1\',\'PostnTrack\',\'\',\'\'," + "\'C:\\\\PostnTrack\\\\Reports\\\\\',\'8\',\'\')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '3.9.9.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_9_17();
    }

    private static void to3_9_17() throws Exception {
        if (FromVersion < new Version("3.9.17.0"))
        {
            //Rename VixWin to VixWinOld-----------------------------------------------------------------------
            String command = "UPDATE program SET ProgName='VixWinOld' WHERE ProgName='VixWin'";
            Db.nonQ32(command);
            //Add new VixWin bridge---------------------------------------------------------------------------
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'VixWin', " + "'VixWin(new) from www.gendexxray.com', " + "'0', " + "'" + POut.string("C:\\VixWin\\VixWin.exe") + "', " + "'', " + "'')";
            int programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + programNum.ToString() + "', " + "'" + (((Enum)ToolBarsAvail.ChartModule).ordinal()).ToString() + "', " + "'VixWin')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '3.9.17.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to3_9_18();
    }

    private static void to3_9_18() throws Exception {
        if (FromVersion < new Version("3.9.18.0"))
        {
            //fixes random keys problems:
            String command = "ALTER TABLE referral CHANGE ReferralNum ReferralNum mediumint unsigned NOT NULL auto_increment";
            Db.nonQ32(command);
            //these two lines were previously in place and must be accounted for.
            //command="ALTER TABLE patient CHANGE NextAptNum NextAptNum mediumint unsigned NOT NULL";
            //Db.NonQ32(command);
            command = "UPDATE preference SET ValueString = '3.9.18.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_0_0();
    }

    private static void to4_0_0() throws Exception {
        if (FromVersion < new Version("4.0.0.0"))
        {
            ExecuteFile(Path.Combine("Version 4 0 0", "convert_4_0_0.txt"));
            //Might throw an exception which we handle.
            //first, get rid of a slight database inconsistency------------------------------------------------------------
            //In my database, I found 65 duplicate covpat entries for certain plans. Users would not notice.
            //Running this loop adds a few minutes to the process, but is unavoidable.
            //Add some indexes to make this query go faster
            String command = "ALTER TABLE covpat ADD INDEX indexPlanNum (PlanNum)";
            Db.nonQ32(command);
            command = "ALTER TABLE covpat ADD INDEX indexCovCatNum (CovCatNum)";
            Db.nonQ32(command);
            command = "ALTER TABLE covpat ADD INDEX indexPatPlanNum (PatPlanNum)";
            Db.nonQ32(command);
            command = "ALTER TABLE covpat ADD INDEX indexCovPatNum (CovPatNum)";
            Db.nonQ32(command);
            command = "SELECT * FROM covpat c1\r\n" + 
            "\t\t\t\t\tWHERE EXISTS(SELECT * FROM covpat c2 \r\n" + 
            "\t\t\t\t\tWHERE c1.PlanNum=c2.PlanNum\r\n" + 
            "\t\t\t\t\tAND c1.CovCatNum=c2.CovCatNum\r\n" + 
            "\t\t\t\t\tAND c1.PatPlanNum=c2.PatPlanNum\r\n" + 
            "\t\t\t\t\tAND c1.CovPatNum<c2.CovPatNum)";
            DataTable table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "DELETE FROM covpat WHERE CovPatNum=" + table.Rows[i][0].ToString();
                Db.nonQ32(command);
            }
            //Add a CovCat for Db------------------------------------------------------------------------------
            command = "UPDATE covcat SET CovOrder=CovOrder+1";
            //Move all other covcats down one in order
            Db.nonQ32(command);
            command = "INSERT INTO covcat (Description,DefaultPercent,IsPreventive," + "CovOrder,IsHidden) VALUES('General',-1,0,0,0)";
            int covCatNumGeneral = Db.nonQ32(command,true);
            command = "INSERT INTO covspan (CovCatNum,FromCode,ToCode) VALUES(" + POut.Long(covCatNumGeneral) + ",'D0000','D9999')";
            Db.nonQ32(command);
            //Add a note to all InsPlans that do not renew in Jan----------------------------------------------------------
            command = "SELECT PlanNum,RenewMonth FROM insplan WHERE RenewMonth != '1'";
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "UPDATE insplan SET " + "PlanNote = CONCAT('BENEFIT YEAR BEGINS IN MONTH " + table.Rows[i][1].ToString() + ". SET EFFECTIVE DATE TO MATCH.',PlanNote) " + "WHERE PlanNum='" + table.Rows[i][0].ToString() + "'";
                Db.nonQ32(command);
            }
            //Convert CovPats to Benefits---------------------------------------------------------------------------------
            command = "SELECT DISTINCT covpat.CovCatNum,covpat.PlanNum,covpat.Percent,covpat.PatPlanNum," + "IFNULL(insplan.DeductWaivPrev,1),covcat.IsPreventive,insplan.Deductible," + "IFNULL(insplan.RenewMonth,1) " + "FROM covpat " + "LEFT JOIN insplan ON covpat.PlanNum=insplan.PlanNum " + "LEFT JOIN covcat ON covpat.CovCatNum=covcat.CovCatNum";
            //0-3
            //4-6
            //7
            Debug.WriteLine(command);
            //+"ORDER BY covpat.PatPlanNum DESC";
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                //percentages
                //planNum=1
                //patPlanNum=3
                //CovCatNum=0
                //benefitType=Percentage
                command = "INSERT INTO benefit (PlanNum,PatPlanNum,CovCatNum,BenefitType,Percent,MonetaryAmt,TimePeriod" + ") VALUES(" + "'" + table.Rows[i][1].ToString() + "', " + "'" + table.Rows[i][3].ToString() + "', " + "'" + table.Rows[i][0].ToString() + "', " + "'1', " + "'" + table.Rows[i][2].ToString() + "', " + "'0', ";
                //Percent=2
                //MonetaryAmt
                if (StringSupport.equals(table.Rows[i][7].ToString(), "1"))
                {
                    //RenewMonth=Jan
                    command += "'2')";
                }
                else
                {
                    //TimePeriod=CalendarYear
                    command += "'1')";
                } 
                //TimePeriod=ServiceYear
                Db.nonQ32(command);
                //deductibles waived on preventive
                //deductible=-1(unknown)
                //deductible=0
                //not preventive
                //deductWaivPrev=-1 (not known if waived)
                if (StringSupport.equals(table.Rows[i][6].ToString(), "-1") || StringSupport.equals(table.Rows[i][6].ToString(), "0") || StringSupport.equals(table.Rows[i][5].ToString(), "0") || StringSupport.equals(table.Rows[i][4].ToString(), "-1") || StringSupport.equals(table.Rows[i][4].ToString(), "0"))
                {
                    continue;
                }
                 
                //deductWaivPrev=0 (not waived)
                //planNum=1
                //patPlanNum=3
                command = "INSERT INTO benefit (PlanNum,PatPlanNum,CovCatNum,BenefitType,Percent,MonetaryAmt,TimePeriod" + ") VALUES(" + "'" + table.Rows[i][1].ToString() + "', " + "'" + table.Rows[i][3].ToString() + "', " + "'" + table.Rows[i][0].ToString() + "', " + "'2', " + "'0', " + "'0', ";
                //CovCatNum=0
                //benefitType=Deductible
                //Percent=3
                //MonetaryAmt=0 since waived
                if (StringSupport.equals(table.Rows[i][7].ToString(), "1"))
                {
                    //RenewMonth=Jan
                    command += "'2')";
                }
                else
                {
                    //TimePeriod=CalendarYear
                    command += "'1')";
                } 
                //TimePeriod=ServiceYear
                Db.nonQ32(command);
            }
            //Convert remaining InsPlan fields to benefits-------------------------------------------------------------
            command = "SELECT PlanNum,AnnualMax,Deductible,FloToAge,MissToothExcl,MajorWait,OrthoMax,RenewMonth " + "FROM insplan";
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                //AnnualMax
                if (PIn.Double(table.Rows[i][1].ToString()) > 0)
                {
                    //if there is an annual max
                    //planNum
                    //patPlanNum
                    //CovCatNum
                    //percent
                    command = "INSERT INTO benefit (PlanNum,PatPlanNum,CovCatNum,BenefitType,Percent,MonetaryAmt,TimePeriod" + ") VALUES(" + "'" + table.Rows[i][0].ToString() + "', " + "'0'," + "'" + POut.Long(covCatNumGeneral) + "'," + "'" + POut.Long(((Enum)InsBenefitType.Limitations).ordinal()) + "', " + "'0'," + "'" + table.Rows[i][1].ToString() + "', ";
                    //max
                    if (StringSupport.equals(table.Rows[i][7].ToString(), "1"))
                    {
                        //RenewMonth=Jan
                        command += "'" + POut.Long(((Enum)BenefitTimePeriod.CalendarYear).ordinal()) + "')";
                    }
                    else
                    {
                        command += "'" + POut.Long(((Enum)BenefitTimePeriod.ServiceYear).ordinal()) + "')";
                    } 
                    Db.nonQ32(command);
                }
                 
                //Deductible
                if (PIn.Double(table.Rows[i][2].ToString()) > -1)
                {
                    //if there is a deductible
                    //planNum
                    //patPlanNum
                    //CovCatNum
                    //percent
                    command = "INSERT INTO benefit (PlanNum,PatPlanNum,CovCatNum,BenefitType,Percent,MonetaryAmt,TimePeriod" + ") VALUES(" + "'" + table.Rows[i][0].ToString() + "', " + "'0'," + "'" + POut.Long(covCatNumGeneral) + "'," + "'" + POut.Long(((Enum)InsBenefitType.Deductible).ordinal()) + "', " + "'0'," + "'" + table.Rows[i][2].ToString() + "', ";
                    //deductible amt
                    if (StringSupport.equals(table.Rows[i][7].ToString(), "1"))
                    {
                        //RenewMonth=Jan
                        command += "'" + POut.Long(((Enum)BenefitTimePeriod.CalendarYear).ordinal()) + "')";
                    }
                    else
                    {
                        command += "'" + POut.Long(((Enum)BenefitTimePeriod.ServiceYear).ordinal()) + "')";
                    } 
                    Db.nonQ32(command);
                }
                 
                //FloToAge
                if (StringSupport.equals(CultureInfo.CurrentCulture.Name, "en-US") && !StringSupport.equals(table.Rows[i][3].ToString(), "-1"))
                {
                    //planNum
                    //patPlanNum
                    //CovCatNum=general. But ignored because of ADACode
                    //ADACode for Adult Flo
                    command = "INSERT INTO benefit (PlanNum,PatPlanNum,CovCatNum,ADACode,BenefitType,Percent,MonetaryAmt," + "TimePeriod,QuantityQualifier,Quantity) VALUES(" + "'" + table.Rows[i][0].ToString() + "', " + "'0'," + "'" + POut.Long(covCatNumGeneral) + "'," + "'D1204'," + "'" + POut.Long(((Enum)InsBenefitType.Limitations).ordinal()) + "', " + "'0'," + "'0', ";
                    //percent
                    //amt
                    if (StringSupport.equals(table.Rows[i][7].ToString(), "1"))
                    {
                        //RenewMonth=Jan
                        command += "'" + POut.Long(((Enum)BenefitTimePeriod.CalendarYear).ordinal()) + "', ";
                    }
                    else
                    {
                        command += "'" + POut.Long(((Enum)BenefitTimePeriod.ServiceYear).ordinal()) + "', ";
                    } 
                    command += "'" + POut.Long(((Enum)BenefitQuantity.AgeLimit).ordinal()) + "', " + "'" + table.Rows[i][3].ToString() + "')";
                    //this should work for 0,18, and 99
                    Db.nonQ32(command);
                }
                 
                //MissToothExcl
                if (!StringSupport.equals(table.Rows[i][4].ToString(), "0"))
                {
                    //if it's not unknown
                    command = "UPDATE insplan SET " + "PlanNote = CONCAT('Missing tooth exclusion: " + ((YN)PIn.Long(table.Rows[i][4].ToString())).ToString() + ". ',PlanNote) " + "WHERE PlanNum='" + table.Rows[i][0].ToString() + "'";
                    Db.nonQ32(command);
                }
                 
                //MajorWait
                if (!StringSupport.equals(table.Rows[i][5].ToString(), "0"))
                {
                    //if it's not unknown
                    command = "UPDATE insplan SET " + "PlanNote = CONCAT('Wait on major: " + ((YN)PIn.Long(table.Rows[i][5].ToString())).ToString() + ". ',PlanNote) " + "WHERE PlanNum='" + table.Rows[i][0].ToString() + "'";
                    Db.nonQ32(command);
                }
                 
                //OrthoMax
                if (PIn.Long(table.Rows[i][6].ToString()) > 0)
                {
                    //not -1 or 0
                    command = "UPDATE insplan SET " + "PlanNote = CONCAT('Ortho Max: " + table.Rows[i][6].ToString() + ". ',PlanNote) " + "WHERE PlanNum='" + table.Rows[i][0].ToString() + "'";
                    Db.nonQ32(command);
                }
                 
            }
            String[] commands = new String[]{ "ALTER TABLE insplan DROP AnnualMax", "ALTER TABLE insplan DROP RenewMonth", "ALTER TABLE insplan DROP Deductible", "ALTER TABLE insplan DROP DeductWaivPrev", "ALTER TABLE insplan DROP OrthoMax", "ALTER TABLE insplan DROP FloToAge", "ALTER TABLE insplan DROP MissToothExcl", "ALTER TABLE insplan DROP MajorWait", "ALTER TABLE insplan DROP IsWrittenOff", "DROP TABLE covpat", "ALTER TABLE covcat DROP IsPreventive", "ALTER TABLE covcat ADD EbenefitCat tinyint unsigned NOT NULL", "UPDATE insplan SET SubscNote=PlanNote", "UPDATE insplan SET PlanNote=''" };
            Db.NonQ32(commands);
            //Add enhanced Trophy bridge---------------------------------------------------------------------------
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'TrophyEnhanced', " + "'Trophy(enhanced) from www.trophy-imaging.com', " + "'0', " + "'" + POut.string("TW.exe") + "', " + "'', " + "'" + POut.string("The storage path is where all images are stored.  For instance \\\\SERVER\\TrophyImages (no trailing \\).  Each patient must also have a folder specified in the patient edit window.  For instance S\\SmithJohn or whatever the current folder structure is.") + "')";
            int programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Storage Path', " + "'')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + programNum.ToString() + "', " + "'" + (((Enum)ToolBarsAvail.ChartModule).ordinal()).ToString() + "', " + "'Trophy')";
            Db.nonQ32(command);
            //Add DentalEye bridge----------------------------------------------------------------------------------------
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'DentalEye', " + "'DentalEye from www.dentaleye.com', " + "'0', " + "'" + POut.string("C:\\DentalEye\\DentalEye.exe") + "', " + "'', " + "'')";
            programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + programNum.ToString() + "', " + "'" + (((Enum)ToolBarsAvail.ChartModule).ordinal()).ToString() + "', " + "'DentalEye')";
            Db.nonQ32(command);
            //Add lab fee fields to Canadian claim form
            int claimFormNum = new int();
            command = "SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD6'";
            table = Db.getTable(command);
            if (table.Rows.Count > 0)
            {
                claimFormNum = PIn.Int(table.Rows[0][0].ToString());
                //get rid of the existing dentist fee column.
                command = "DELETE FROM claimformitem WHERE ClaimFormNum='" + POut.Long(claimFormNum) + "' AND XPos=342 AND FieldName LIKE '%Fee'";
                Db.nonQ32(command);
                //add the lab fee column
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P1Lab',440,394,66,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P2Lab',440,411,66,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P3Lab',440,428,66,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P4Lab',440,445,66,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P5Lab',440,462,66,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P6Lab',440,479,66,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P7Lab',440,496,66,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P8Lab',440,513,66,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P9Lab',440,530,66,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P10Lab',440,547,66,16)";
                Db.nonQ32(command);
                //add the dentist fee column (fee-lab)
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P1FeeMinusLab',342,394,62,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P2FeeMinusLab',342,411,62,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P3FeeMinusLab',342,428,62,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P4FeeMinusLab',342,445,62,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P5FeeMinusLab',342,462,62,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P6FeeMinusLab',342,479,62,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P7FeeMinusLab',342,496,62,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P8FeeMinusLab',342,513,62,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P9FeeMinusLab',342,530,62,16)";
                Db.nonQ32(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES(" + POut.Long(claimFormNum) + ",'P10FeeMinusLab',342,547,62,16)";
                Db.nonQ32(command);
                //make dates wider so the year doesn't get cut off
                command = "UPDATE claimformitem SET Width=85,XPos=28 " + "WHERE FieldName LIKE 'P%Date' AND XPos=38 " + "AND ClaimFormNum=" + POut.Long(claimFormNum);
                Db.nonQ32(command);
            }
             
            //add chart of accounts-----------------------------------------------------------------
            commands = new String[]{ "INSERT INTO account (Description,AcctType) VALUES('Checking Account',0)", "INSERT INTO account (Description,AcctType) VALUES('Cash Box',0)", "INSERT INTO account (Description,AcctType) VALUES('Employee Advances',0)", "INSERT INTO account (Description,AcctType) VALUES('Equipment',0)", "INSERT INTO account (Description,AcctType) VALUES('Accumulated Depreciation, Equipment',0)", "INSERT INTO account (Description,AcctType) VALUES('Bank Loans Payable',1)", "INSERT INTO account (Description,AcctType) VALUES('Stated Capital',2)", "INSERT INTO account (Description,AcctType) VALUES('Retained Earnings',2)", "INSERT INTO account (Description,AcctType) VALUES('Patient Fee Income',3)", "INSERT INTO account (Description,AcctType) VALUES('Employee Benefits',4)", "INSERT INTO account (Description,AcctType) VALUES('Supplies',4)", "INSERT INTO account (Description,AcctType) VALUES('Services',4)", "INSERT INTO account (Description,AcctType) VALUES('Wages',4)" };
            Db.NonQ32(commands);
            command = "UPDATE preference SET ValueString = '4.0.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_0_2();
    }

    private static void to4_0_2() throws Exception {
        if (FromVersion < new Version("4.0.2.0"))
        {
            String command = "ALTER TABLE account ADD Inactive tinyint unsigned NOT NULL";
            Db.nonQ32(command);
            //add accounting permission to each admin group------------------------------------------------------
            command = "SELECT UserGroupNum FROM grouppermission " + "WHERE PermType=" + POut.Long(((Enum)OpenDentBusiness.Permissions.SecurityAdmin).ordinal());
            DataTable table = Db.getTable(command);
            int groupNum = new int();
            for (int i = 0;i < table.Rows.Count;i++)
            {
                groupNum = PIn.Int(table.Rows[i][0].ToString());
                command = "INSERT INTO grouppermission (UserGroupNum,PermType) " + "VALUES(" + POut.Long(groupNum) + "," + POut.Long(((Enum)OpenDentBusiness.Permissions.AccountingCreate).ordinal()) + ")";
                Db.nonQ32(command);
                command = "INSERT INTO grouppermission (UserGroupNum,PermType) " + "VALUES(" + POut.Long(groupNum) + "," + POut.Long(((Enum)OpenDentBusiness.Permissions.AccountingEdit).ordinal()) + ")";
                Db.nonQ32(command);
            }
            //fix the planned appointment 'done' feature--------------------------------------------------------------
            command = "ALTER TABLE patient ADD PlannedIsDone tinyint unsigned NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE patient SET PlannedIsDone=1 WHERE NextAptNum = -1";
            Db.nonQ32(command);
            //these two lines were previously in place in version 3.9.18.  Calling them again doesn't hurt
            command = "ALTER TABLE patient CHANGE NextAptNum NextAptNum mediumint unsigned NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.0.2.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_0_3();
    }

    private static void to4_0_3() throws Exception {
        if (FromVersion < new Version("4.0.3.0"))
        {
            String command = "ALTER TABLE account ADD AccountColor int NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE account SET AccountColor = -1";
            //white
            Db.nonQ32(command);
            command = "INSERT INTO preference VALUES ('AccountingDepositAccounts','')";
            Db.nonQ32(command);
            command = "INSERT INTO preference VALUES ('AccountingIncomeAccount','')";
            Db.nonQ32(command);
            //two of these were simply deleted in the very next upgrade.
            //command="INSERT INTO preference VALUES ('AccountingCashDepAccounts','')";
            //Db.NonQ32(command);
            command = "INSERT INTO preference VALUES ('AccountingCashIncomeAccount','')";
            Db.nonQ32(command);
            //command="INSERT INTO preference VALUES ('AccountingCashPaymentType','')";
            //Db.NonQ32(command);
            command = "UPDATE preference SET ValueString = '4.0.3.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_0_4();
    }

    private static void to4_0_4() throws Exception {
        if (FromVersion < new Version("4.0.4.0"))
        {
            String command = "CREATE TABLE accountingautopay(\r\n" + 
            "\t\t\t\t\tAccountingAutoPayNum mediumint unsigned NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tPayType smallint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tPickList varchar(255) NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (AccountingAutoPayNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8;";
            Db.nonQ32(command);
            command = "DELETE FROM preference WHERE PrefName='AccountingCashDepAccounts'";
            Db.nonQ32(command);
            command = "DELETE FROM preference WHERE PrefName='AccountingCashPaymentType'";
            Db.nonQ32(command);
            command = "ALTER TABLE transaction ADD PayNum mediumint unsigned NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.0.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_0_5();
    }

    private static void to4_0_5() throws Exception {
        if (FromVersion < new Version("4.0.5.0"))
        {
            String command = "CREATE TABLE reconcile(\r\n" + 
            "\t\t\t\t\tReconcileNum mediumint unsigned NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tAccountNum mediumint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tStartingBal double NOT NULL,\r\n" + 
            "\t\t\t\t\tEndingBal double NOT NULL,\r\n" + 
            "\t\t\t\t\tDateReconcile date NOT NULL default \'0001-01-01\',\r\n" + 
            "\t\t\t\t\tIsLocked tinyint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (ReconcileNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8;";
            Db.nonQ32(command);
            command = "ALTER TABLE journalentry ADD ReconcileNum mediumint unsigned NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.0.5.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_0_9();
    }

    private static void to4_0_9() throws Exception {
        if (FromVersion < new Version("4.0.9.0"))
        {
            String command = "INSERT INTO preference VALUES ('SkipComputeAgingInAccount','0')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.0.9.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_0_10();
    }

    private static void to4_0_10() throws Exception {
        if (FromVersion < new Version("4.0.10.0"))
        {
            //Add Trojan bridge----------------------------------------------------------------------------------------
            String command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Trojan', " + "'Trojan from www.trojanonline.com', " + "'0', " + "'', " + "'', " + "'No path is needed.  No buttons are available.  Uses the standalone Trojan program.')";
            Db.nonQ32(command);
            //Add IAP bridge----------------------------------------------------------------------------------------
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'IAP', " + "'Insurance Answers Plus from www.iaplus.com', " + "'0', " + "'', " + "'', " + "'No path is needed.  No buttons are available.')";
            Db.nonQ32(command);
            //fix referrals
            command = "ALTER TABLE refattach CHANGE ReferralNum ReferralNum mediumint unsigned NOT NULL";
            Db.nonQ32(command);
            //disable medical claims
            command = "INSERT INTO preference VALUES ('MedicalEclaimsEnabled','0')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.0.10.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_0_11();
    }

    private static void to4_0_11() throws Exception {
        if (FromVersion < new Version("4.0.11.0"))
        {
            //delete all percentages for medicaid and capitation plans
            String command = "SELECT BenefitNum\r\n" + 
            "\t\t\t\t\tFROM insplan,benefit \r\n" + 
            "\t\t\t\t\tWHERE benefit.PlanNum=insplan.PlanNum\r\n" + 
            "\t\t\t\t\tAND (PlanType=\'f\' OR PlanType=\'c\')\r\n" + 
            "\t\t\t\t\tAND BenefitType=1";
            DataTable table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "DELETE FROM benefit WHERE BenefitNum=" + table.Rows[i][0].ToString();
                Db.nonQ32(command);
            }
            command = "UPDATE preference SET ValueString = '4.0.11.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_0_13();
    }

    private static void to4_0_13() throws Exception {
        if (FromVersion < new Version("4.0.13.0"))
        {
            //Add sales tax fields. Even though we will not use them yet, some customers might make user of them.
            String command = "INSERT INTO preference VALUES ('SalesTaxPercentage','0')";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurecode ADD IsTaxed tinyint unsigned NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.0.13.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_1_0();
    }

    private static void to4_1_0() throws Exception {
        if (FromVersion < new Version("4.1.0.0"))
        {
            String command = new String();
            if (StringSupport.equals(CultureInfo.CurrentCulture.Name, "en-US"))
            {
                //Convert CovCats to new names and ranges----------------------------------------------------------------------
                //Db
                command = "UPDATE covcat SET EbenefitCat=1 WHERE Description='General'";
                Db.nonQ32(command);
                //Hide all previous covcats.
                command = "UPDATE covcat SET IsHidden=1 WHERE Description != 'General'";
                Db.nonQ32(command);
                //Create all the new cateories from scratch
                int covCatNum = new int();
                //Diagnostic
                command = "INSERT INTO covcat (Description,DefaultPercent,EbenefitCat) VALUES('Diagnostic','100','" + POut.Long(((Enum)EbenefitCategory.Diagnostic).ordinal()) + "')";
                covCatNum = Db.nonQ32(command,true);
                command = "INSERT INTO covspan (CovCatNum,FromCode,ToCode) VALUES(" + POut.Long(covCatNum) + ",'D0000','D0999')";
                Db.nonQ32(command);
                //RoutinePreventive
                command = "INSERT INTO covcat (Description,DefaultPercent,EbenefitCat) VALUES('Preventive','100','" + POut.Long(((Enum)EbenefitCategory.RoutinePreventive).ordinal()) + "')";
                covCatNum = Db.nonQ32(command,true);
                command = "INSERT INTO covspan (CovCatNum,FromCode,ToCode) VALUES(" + POut.Long(covCatNum) + ",'D1000','D1999')";
                Db.nonQ32(command);
                //Restorative
                command = "INSERT INTO covcat (Description,DefaultPercent,EbenefitCat) VALUES('Restorative','80','" + POut.Long(((Enum)EbenefitCategory.Restorative).ordinal()) + "')";
                covCatNum = Db.nonQ32(command,true);
                command = "INSERT INTO covspan (CovCatNum,FromCode,ToCode) VALUES(" + POut.Long(covCatNum) + ",'D2000','D2999')";
                Db.nonQ32(command);
                //Endo
                command = "INSERT INTO covcat (Description,DefaultPercent,EbenefitCat) VALUES('Endo','80','" + POut.Long(((Enum)EbenefitCategory.Endodontics).ordinal()) + "')";
                covCatNum = Db.nonQ32(command,true);
                command = "INSERT INTO covspan (CovCatNum,FromCode,ToCode) VALUES(" + POut.Long(covCatNum) + ",'D3000','D3999')";
                Db.nonQ32(command);
                //Perio
                command = "INSERT INTO covcat (Description,DefaultPercent,EbenefitCat) VALUES('Perio','80','" + POut.Long(((Enum)EbenefitCategory.Periodontics).ordinal()) + "')";
                covCatNum = Db.nonQ32(command,true);
                command = "INSERT INTO covspan (CovCatNum,FromCode,ToCode) VALUES(" + POut.Long(covCatNum) + ",'D4000','D4999')";
                Db.nonQ32(command);
                //OralSurgery
                command = "INSERT INTO covcat (Description,DefaultPercent,EbenefitCat) VALUES('Oral Surgery','80','" + POut.Long(((Enum)EbenefitCategory.OralSurgery).ordinal()) + "')";
                covCatNum = Db.nonQ32(command,true);
                command = "INSERT INTO covspan (CovCatNum,FromCode,ToCode) VALUES(" + POut.Long(covCatNum) + ",'D7000','D7999')";
                Db.nonQ32(command);
                //Crowns
                command = "INSERT INTO covcat (Description,DefaultPercent,EbenefitCat) VALUES('Crowns','50','" + POut.Long(((Enum)EbenefitCategory.Crowns).ordinal()) + "')";
                covCatNum = Db.nonQ32(command,true);
                command = "INSERT INTO covspan (CovCatNum,FromCode,ToCode) VALUES(" + POut.Long(covCatNum) + ",'D2700','D2799')";
                Db.nonQ32(command);
                //Prosth
                command = "INSERT INTO covcat (Description,DefaultPercent,EbenefitCat) VALUES('Prosth','50','" + POut.Long(((Enum)EbenefitCategory.Prosthodontics).ordinal()) + "')";
                covCatNum = Db.nonQ32(command,true);
                command = "INSERT INTO covspan (CovCatNum,FromCode,ToCode) VALUES(" + POut.Long(covCatNum) + ",'D5000','D5899')";
                Db.nonQ32(command);
                command = "INSERT INTO covspan (CovCatNum,FromCode,ToCode) VALUES(" + POut.Long(covCatNum) + ",'D6200','D6899')";
                Db.nonQ32(command);
                //MaxProsth
                command = "INSERT INTO covcat (Description,DefaultPercent,EbenefitCat) VALUES('Maxillofacial Prosth','-1','" + POut.Long(((Enum)EbenefitCategory.MaxillofacialProsth).ordinal()) + "')";
                covCatNum = Db.nonQ32(command,true);
                command = "INSERT INTO covspan (CovCatNum,FromCode,ToCode) VALUES(" + POut.Long(covCatNum) + ",'D5900','D5999')";
                Db.nonQ32(command);
                //Accident
                command = "INSERT INTO covcat (Description,DefaultPercent,EbenefitCat) VALUES('Accident','-1','" + POut.Long(((Enum)EbenefitCategory.Accident).ordinal()) + "')";
                covCatNum = Db.nonQ32(command,true);
                //Ortho
                command = "INSERT INTO covcat (Description,DefaultPercent,EbenefitCat) VALUES('Ortho','-1','" + POut.Long(((Enum)EbenefitCategory.Orthodontics).ordinal()) + "')";
                covCatNum = Db.nonQ32(command,true);
                command = "INSERT INTO covspan (CovCatNum,FromCode,ToCode) VALUES(" + POut.Long(covCatNum) + ",'D8000','D8999')";
                Db.nonQ32(command);
                //Then, order everything
                //subcategory of Restorative
                command = "SELECT * FROM covcat ORDER BY " + "EbenefitCat != " + POut.Long(((Enum)EbenefitCategory.General).ordinal()) + ",EbenefitCat != " + POut.Long(((Enum)EbenefitCategory.Diagnostic).ordinal()) + ",EbenefitCat != " + POut.Long(((Enum)EbenefitCategory.RoutinePreventive).ordinal()) + ",EbenefitCat != " + POut.Long(((Enum)EbenefitCategory.Restorative).ordinal()) + ",EbenefitCat != " + POut.Long(((Enum)EbenefitCategory.Endodontics).ordinal()) + ",EbenefitCat != " + POut.Long(((Enum)EbenefitCategory.Periodontics).ordinal()) + ",EbenefitCat != " + POut.Long(((Enum)EbenefitCategory.OralSurgery).ordinal()) + ",EbenefitCat != " + POut.Long(((Enum)EbenefitCategory.Crowns).ordinal()) + ",EbenefitCat != " + POut.Long(((Enum)EbenefitCategory.Prosthodontics).ordinal()) + ",EbenefitCat != " + POut.Long(((Enum)EbenefitCategory.MaxillofacialProsth).ordinal()) + ",EbenefitCat != " + POut.Long(((Enum)EbenefitCategory.Accident).ordinal()) + ",EbenefitCat != " + POut.Long(((Enum)EbenefitCategory.Orthodontics).ordinal());
                DataTable table = Db.getTable(command);
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    command = "UPDATE covcat SET CovOrder=" + POut.Long(i) + " WHERE CovCatNum=" + table.Rows[i][0].ToString();
                    Db.nonQ32(command);
                }
            }
             
            command = "ALTER TABLE fee ADD INDEX indexADACode (ADACode)";
            Db.nonQ32(command);
            command = "ALTER TABLE fee ADD INDEX indexFeeSched (FeeSched)";
            Db.nonQ32(command);
            //ProcButton categories---------------------------------------------------------------------------------
            command = "ALTER TABLE procbutton ADD Category smallint unsigned NOT NULL";
            Db.nonQ32(command);
            command = "INSERT INTO definition (category,itemorder,itemname) VALUES(26,0,'All')";
            int defNum = Db.nonQ32(command,true);
            command = "UPDATE procbutton SET Category=" + POut.Long(defNum);
            Db.nonQ32(command);
            command = "ALTER TABLE procbutton ADD ButtonImage text NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.1.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_1_2();
    }

    private static void to4_1_2() throws Exception {
        if (FromVersion < new Version("4.1.2.0"))
        {
            String command = new String();
            command = "DELETE FROM preference WHERE PrefName= 'SkipComputeAgingInAccount'";
            Db.nonQ32(command);
            command = "INSERT INTO preference VALUES ('StatementShowReturnAddress','1')";
            Db.nonQ32(command);
            command = "INSERT INTO preference VALUES ('ShowIDinTitleBar','0')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.1.2.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_2_0();
    }

    private static void to4_2_0() throws Exception {
        if (FromVersion < new Version("4.2.0.0"))
        {
            String command = new String();
            //string[] commands;//=new string[] {
            command = "ALTER TABLE procedurecode ADD PaintType tinyint NOT NULL";
            Db.nonQ32(command);
            command = "SELECT * FROM definition WHERE Category=22 ORDER BY ItemOrder";
            DataTable table = Db.getTable(command);
            Color cDark = new Color();
            Color cLight = new Color();
            for (int i = 0;i < table.Rows.Count;i++)
            {
                cDark = Color.FromArgb(PIn.Int(table.Rows[i][5].ToString()));
                cLight = Color.FromArgb((cDark.R + 255) / 2, (cDark.G + 255) / 2, (cDark.B + 255) / 2);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor) VALUES(22," + POut.Long(i + 5) + ",'" + POut.String(PIn.String(table.Rows[i][3].ToString()) + " (light)") + "','" + POut.Long(cLight.ToArgb()) + "')";
                Db.nonQ32(command);
            }
            //Conversions to painting type are listed in order previously displayed.
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.Extraction).ordinal()) + " WHERE GTypeNum=1";
            Db.nonQ32(command);
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.Implant).ordinal()) + " WHERE GTypeNum=10";
            Db.nonQ32(command);
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.RCT).ordinal()) + " WHERE GTypeNum=4";
            Db.nonQ32(command);
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.PostBU).ordinal()) + " WHERE GTypeNum=5";
            Db.nonQ32(command);
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.FillingDark).ordinal()) + " WHERE GTypeNum=2";
            Db.nonQ32(command);
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.FillingLight).ordinal()) + " WHERE GTypeNum=3";
            Db.nonQ32(command);
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.FillingLight).ordinal()) + " WHERE GTypeNum=19";
            Db.nonQ32(command);
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.FillingLight).ordinal()) + " WHERE GTypeNum=11";
            Db.nonQ32(command);
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.CrownDark).ordinal()) + " WHERE GTypeNum=6";
            Db.nonQ32(command);
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.CrownLight).ordinal()) + " WHERE GTypeNum=7";
            Db.nonQ32(command);
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.CrownLight).ordinal()) + " WHERE GTypeNum=20";
            Db.nonQ32(command);
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.CrownLight).ordinal()) + " WHERE GTypeNum=9";
            Db.nonQ32(command);
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.BridgeDark).ordinal()) + " WHERE GTypeNum=12";
            Db.nonQ32(command);
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.BridgeLight).ordinal()) + " WHERE GTypeNum=13";
            Db.nonQ32(command);
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.BridgeLight).ordinal()) + " WHERE GTypeNum=21";
            Db.nonQ32(command);
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.BridgeLight).ordinal()) + " WHERE GTypeNum=14";
            Db.nonQ32(command);
            //veneer not painted
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.DentureDark).ordinal()) + " WHERE GTypeNum=24";
            Db.nonQ32(command);
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.DentureLight).ordinal()) + " WHERE GTypeNum=25";
            Db.nonQ32(command);
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.DentureLight).ordinal()) + " WHERE GTypeNum=26";
            Db.nonQ32(command);
            command = "UPDATE procedurecode SET PaintType=" + POut.Long(((Enum)ToothPaintingType.DentureLight).ordinal()) + " WHERE GTypeNum=27";
            Db.nonQ32(command);
            command = "CREATE TABLE toothinitial(\r\n" + 
            "\t\t\t\t\tToothInitialNum mediumint unsigned NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tPatNum mediumint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tToothNum varchar(2) NOT NULL,\r\n" + 
            "\t\t\t\t\tInitialType tinyint unsigned NOT NULL,\r\n" + 
            "          Movement float NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (ToothInitialNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ32(command);
            //convert all previous extractions to missing teeth.
            command = "SELECT PatNum,ToothNum FROM procedurelog,procedurecode " + "WHERE procedurelog.ADACode=procedurecode.ADACode " + "AND procedurecode.RemoveTooth=1 " + "AND (procedurelog.ProcStatus=2 OR procedurelog.ProcStatus=3 OR procedurelog.ProcStatus=4)";
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "INSERT INTO toothinitial(PatNum,ToothNum,InitialType) VALUES(" + table.Rows[i][0].ToString() + ",'" + POut.String(PIn.String(table.Rows[i][1].ToString())) + "',0)";
                Db.nonQ32(command);
            }
            command = "UPDATE preference SET ValueString = '4.2.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_2_1();
    }

    private static void to4_2_1() throws Exception {
        if (FromVersion < new Version("4.2.1.0"))
        {
            String command = "SELECT PatNum,PrimaryTeeth FROM patient WHERE PrimaryTeeth != ''";
            DataTable table = Db.getTable(command);
            String[] priTeeth = new String[]();
            for (int i = 0;i < table.Rows.Count;i++)
            {
                priTeeth = (PIn.String(table.Rows[i][1].ToString())).Split(new char[]{ ',' });
                for (int t = 0;t < priTeeth.Length;t++)
                {
                    if (StringSupport.equals(priTeeth[t], ""))
                    {
                        continue;
                    }
                     
                    command = "INSERT INTO toothinitial (PatNum,ToothNum,InitialType) VALUES(" + table.Rows[i][0].ToString() + ",'" + POut.String(priTeeth[t]) + "',2)";
                    Db.nonQ32(command);
                }
            }
            command = "UPDATE preference SET ValueString = '4.2.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_2_8();
    }

    private static void to4_2_8() throws Exception {
        if (FromVersion < new Version("4.2.8.0"))
        {
            String command = "UPDATE procedurecode SET PaintType=13, TreatArea=2 WHERE ADACode='D1351'";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.2.8.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_2_9();
    }

    private static void to4_2_9() throws Exception {
        if (FromVersion < new Version("4.2.9.0"))
        {
            String command = new String();
            //Add Florida probe bridge----------------------------------------------------------------------------------------
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'FloridaProbe', " + "'Florida Probe from www.floridaprobe.com', " + "'0', " + "'" + POut.string("fp32") + "', " + "'', " + "'No command line is needed.')";
            int programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + programNum.ToString() + "', " + "'" + (((Enum)ToolBarsAvail.ChartModule).ordinal()).ToString() + "', " + "'Florida Probe')";
            Db.nonQ32(command);
            //Add Dr Ceph bridge----------------------------------------------------------------------------------------
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'DrCeph', " + "'Dr. Ceph from www.fyitek.com', " + "'0', " + "'', " + "'', " + "'No path or command line is needed.')";
            programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + programNum.ToString() + "', " + "'" + (((Enum)ToolBarsAvail.ChartModule).ordinal()).ToString() + "', " + "'Dr Ceph')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.2.9.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_2_10();
    }

    private static void to4_2_10() throws Exception {
        if (FromVersion < new Version("4.2.10.0"))
        {
            String command = "ALTER TABLE procedurecode ADD GraphicColor int NOT NULL";
            Db.nonQ32(command);
            command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor) VALUES(12,6," + "'CommLog',-65536)";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.2.10.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_3_0();
    }

    private static void to4_3_0() throws Exception {
        if (FromVersion < new Version("4.3.0.0"))
        {
            ExecuteFile(Path.Combine("Version 4 3 0", "convert_4_3_0.txt"));
            //Might throw an exception which we handle.
            String command = new String();
            //Add NewPatientForm bridge-----------------------------------------------------------------------------------
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'NewPatientForm.com', " + "'NewPatientForm.com - Online Registration', " + "'0', " + "'" + POut.string("https://secure.newpatientform.com/ODXNewForms.aspx?un=[username]&pw=[password]") + "', " + "'', " + "'This function automatically downloads and imports new patient forms that have been completed online.  The button only works from the Images module.')";
            int programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + programNum.ToString() + "', " + "'" + (((Enum)ToolBarsAvail.ImagesModule).ordinal()).ToString() + "', " + "'NewPatientForm')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.3.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_3_3();
    }

    private static void to4_3_3() throws Exception {
        if (FromVersion < new Version("4.3.3.0"))
        {
            String command = "INSERT INTO preference VALUES ('ReportFolderName','Reports')";
            Db.nonQ32(command);
            String imagePath = PrefC.getString(PrefName.DocPath);
            String reportDir = CodeBase.ODFileUtils.combinePaths(imagePath,"Reports");
            if (!Directory.Exists(reportDir))
            {
                if (Directory.Exists(imagePath))
                {
                    Directory.CreateDirectory(reportDir);
                }
                 
            }
             
            command = "UPDATE preference SET ValueString = '4.3.3.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_3_4();
    }

    private static void to4_3_4() throws Exception {
        if (FromVersion < new Version("4.3.4.0"))
        {
            //get rid of any leading ? in quickpastenote
            String command = "SELECT QuickPasteNoteNum,Abbreviation FROM quickpastenote";
            DataTable table = Db.getTable(command);
            String note = new String();
            for (int i = 0;i < table.Rows.Count;i++)
            {
                note = PIn.String(table.Rows[i][1].ToString());
                if (note.Contains("?"))
                {
                    note = note.Replace("?", "");
                    command = "UPDATE quickpastenote SET Abbreviation='" + POut.string(note) + "' " + "WHERE QuickPasteNoteNum=" + table.Rows[i][0].ToString();
                    Db.nonQ32(command);
                }
                 
            }
            command = "UPDATE preference SET ValueString = '4.3.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_4_0();
    }

    private static void to4_4_0() throws Exception {
        if (FromVersion < new Version("4.4.0.0"))
        {
            ExecuteFile(Path.Combine("Version 4 4 0", "convert_4_4_0.txt"));
            //Might throw an exception which we handle.
            String command = new String();
            //add PerioPal bridge
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'PerioPal', " + "'PerioPal from www.periopal.com', " + "'0', " + "'" + POut.string("C:\\Program Files\\PerioPal\\PerioPal.exe") + "', " + "'', " + "'')";
            int programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + programNum.ToString() + "', " + "'" + (((Enum)ToolBarsAvail.ChartModule).ordinal()).ToString() + "', " + "'PerioPal')";
            Db.nonQ32(command);
            //add MediaDent bridge
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'MediaDent', " + "'MediaDent from www.mediadentusa.com', " + "'0', " + "'mediadent.exe', " + "'', " + "'" + POut.string("Example of image folder: C:\\Mediadent\\patients\\") + "')";
            programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Image Folder', " + "'" + POut.string("C:\\Mediadent\\patients\\") + "')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + programNum.ToString() + "', " + "'" + (((Enum)ToolBarsAvail.ChartModule).ordinal()).ToString() + "', " + "'MediaDent')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.4.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_4_9();
    }

    private static void to4_4_9() throws Exception {
        if (FromVersion < new Version("4.4.9.0"))
        {
            String command = "INSERT INTO preference VALUES ('EasyHideHospitals','1')";
            Db.nonQ32(command);
            command = "ALTER TABLE patient ADD Ward varchar(255) NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE schedule CHANGE ScheduleNum ScheduleNum mediumint unsigned NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.4.9.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_4_10();
    }

    private static void to4_4_10() throws Exception {
        if (FromVersion < new Version("4.4.10.0"))
        {
            String command = new String();
            //EMS clearinghouse------------------------------------
            command = "INSERT INTO clearinghouse(Description,ExportPath,IsDefault,Payors,Eformat,ReceiverID," + "SenderID,Password,ResponsePath,CommBridge,ClientProgram) " + "VALUES(\'EMS\',\'C:\\\\EMS\\\\Exports\\\\\',\'0\',\'\',\'1\',\'EMS\',\'\',\'\'," + "\'\',\'0\',\'\')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.4.10.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_5_0();
    }

    private static void to4_5_0() throws Exception {
        if (FromVersion < new Version("4.5.0.0"))
        {
            String command = new String();
            String[] commands = new String[]{ "ALTER TABLE procedurelog DROP OverridePri", "ALTER TABLE procedurelog DROP OverrideSec", "ALTER TABLE procedurelog DROP NoBillIns", "ALTER TABLE procedurelog DROP IsCovIns", "ALTER TABLE procedurelog DROP CapCoPay", "ALTER TABLE procedurelog DROP HideGraphical", "ALTER TABLE procedurelog CHANGE NextAptNum PlannedAptNum  mediumint unsigned NOT NULL" };
            Db.NonQ32(commands);
            command = "DROP TABLE IF EXISTS procnote";
            Db.nonQ32(command);
            command = "CREATE TABLE procnote(\r\n" + 
            "\t\t\t\t\tProcNoteNum mediumint unsigned NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tPatNum mediumint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tProcNum mediumint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tEntryDateTime datetime NOT NULL default \'0001-01-01 00:00:00\',\r\n" + 
            "\t\t\t\t\tUserNum mediumint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tNote text NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (ProcNoteNum),\r\n" + 
            "\t\t\t\t\tINDEX (PatNum),\r\n" + 
            "\t\t\t\t\tINDEX (ProcNum),\r\n" + 
            "\t\t\t\t\tINDEX (UserNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ32(command);
            //All previous notes will not have a user assigned.
            command = "INSERT INTO procnote (PatNum,ProcNum,EntryDateTime,Note)\r\n" + 
            "\t\t\t\t\tSELECT PatNum,ProcNum,DateLocked,ProcNote\r\n" + 
            "\t\t\t\t\tFROM procedurelog\r\n" + 
            "\t\t\t\t\tWHERE ProcNote != \'\'";
            Db.nonQ32(command);
            commands = new String[]{ "ALTER TABLE procedurelog DROP DateLocked", "ALTER TABLE procedurelog DROP ProcNote" };
            Db.NonQ32(commands);
            commands = new String[]{ "ALTER TABLE procnote ADD SigIsTopaz tinyint unsigned NOT NULL", "ALTER TABLE procnote ADD Signature text NOT NULL" };
            Db.NonQ32(commands);
            commands = new String[]{ "INSERT INTO preference VALUES ('EmailUsername','')", "INSERT INTO preference VALUES ('EmailPassword','')", "INSERT INTO preference VALUES ('EmailPort','587')" };
            Db.NonQ32(commands);
            command = "DROP TABLE IF EXISTS emailattach";
            Db.nonQ32(command);
            command = "CREATE TABLE emailattach(\r\n" + 
            "\t\t\t\t\tEmailAttachNum mediumint unsigned NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tEmailMessageNum mediumint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tDisplayedFileName varchar(255) NOT NULL,\r\n" + 
            "\t\t\t\t\tActualFileName varchar(255) NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (EmailAttachNum),\r\n" + 
            "\t\t\t\t\tINDEX (EmailMessageNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ32(command);
            //We never change previous conversion scripts to support new features.  This code gets skipped on Linux.
            if (!Directory.Exists(PrefC.getString(PrefName.DocPath) + "EmailAttachments"))
            {
                if (Directory.Exists(PrefC.getString(PrefName.DocPath)))
                {
                    Directory.CreateDirectory(PrefC.getString(PrefName.DocPath) + "EmailAttachments");
                }
                 
            }
             
            if (!Directory.Exists(PrefC.getString(PrefName.DocPath) + "Forms"))
            {
                if (Directory.Exists(PrefC.getString(PrefName.DocPath)))
                {
                    Directory.CreateDirectory(PrefC.getString(PrefName.DocPath) + "Forms");
                }
                 
            }
             
            commands = new String[]{ "ALTER TABLE document ADD Note text NOT NULL", "ALTER TABLE document ADD SigIsTopaz tinyint unsigned NOT NULL", "ALTER TABLE document ADD Signature text NOT NULL", "INSERT INTO preference VALUES ('BankRouting','')", "INSERT INTO preference VALUES ('BankAddress','')", "ALTER TABLE procedurelog CHANGE ProcDate ProcDate datetime NOT NULL default '0001-01-01 00:00:00'" };
            Db.NonQ32(commands);
            command = "UPDATE preference SET ValueString = '4.5.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_5_1();
    }

    private static void to4_5_1() throws Exception {
        if (FromVersion < new Version("4.5.1.0"))
        {
            String command = "UPDATE procedurelog SET AptNum=0 WHERE ProcStatus=6";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString='' WHERE PrefName='BillingSelectBillingTypes'";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.5.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_5_14();
    }

    private static void to4_5_14() throws Exception {
        if (FromVersion < new Version("4.5.14.0"))
        {
            //add XDR bridge:
            String command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'XDR', " + "'XDR from www.XDRradiology.com', " + "'0', " + "'" + POut.string("C:\\Program Files\\DxS\\bin\\XDR.exe") + "', " + "'', " + "'')";
            int programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'InfoFile path', " + "'" + POut.string("C:\\Program Files\\Dxs\\bin\\infofile.txt") + "')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + programNum.ToString() + "', " + "'" + (((Enum)ToolBarsAvail.ChartModule).ordinal()).ToString() + "', " + "'XDR')";
            Db.nonQ32(command);
            command = "ALTER TABLE insplan ADD FilingCode tinyint unsigned NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.5.14.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_5_21();
    }

    private static void to4_5_21() throws Exception {
        if (FromVersion < new Version("4.5.21.0"))
        {
            //All 4 of these fields added on 12/21/06:
            String command = "ALTER TABLE patient ADD PreferConfirmMethod tinyint unsigned NOT NULL AFTER Ward";
            Db.nonQ32(command);
            command = "ALTER TABLE patient ADD SchedBeforeTime time AFTER PreferConfirmMethod";
            Db.nonQ32(command);
            command = "ALTER TABLE patient ADD SchedAfterTime time AFTER SchedBeforeTime";
            Db.nonQ32(command);
            command = "ALTER TABLE patient ADD SchedDayOfWeek tinyint unsigned NOT NULL AFTER SchedAfterTime";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.5.21.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_6_0();
    }

    private static void to4_6_0() throws Exception {
        if (FromVersion < new Version("4.6.0.0"))
        {
            String command = new String();
            command = "DROP TABLE IF EXISTS formpat";
            Db.nonQ32(command);
            command = "CREATE TABLE formpat(\r\n" + 
            "\t\t\t\t\tFormPatNum mediumint unsigned NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tPatNum mediumint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tFormDateTime datetime NOT NULL default \'0001-01-01\',\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (FormPatNum),\r\n" + 
            "\t\t\t\t\tINDEX (PatNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ32(command);
            command = "ALTER TABLE emailmessage ADD SentOrReceived tinyint unsigned NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE emailmessage SET SentOrReceived = 1 WHERE YEAR(MsgDateTime) > '1900'";
            Db.nonQ32(command);
            command = "UPDATE emailmessage SET MsgDateTime = NOW() WHERE YEAR(MsgDateTime) < '1900'";
            Db.nonQ32(command);
            command = "DELETE FROM commlog WHERE EmailMessageNum > 0";
            Db.nonQ32(command);
            command = "ALTER TABLE commlog DROP EmailMessageNum";
            Db.nonQ32(command);
            command = "ALTER TABLE question ADD FormPatNum mediumint unsigned NOT NULL";
            Db.nonQ32(command);
            command = "SELECT DISTINCT PatNum FROM question";
            DataTable table = Db.getTable(command);
            int formPatNum = new int();
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "INSERT INTO formpat (PatNum,FormDateTime) VALUES(" + "'" + table.Rows[i][0].ToString() + "', NOW())";
                formPatNum = Db.nonQ32(command,true);
                command = "UPDATE question SET FormPatNum=" + POut.Long(formPatNum) + " WHERE PatNum=" + table.Rows[i][0].ToString();
                Db.nonQ32(command);
            }
            command = "DROP TABLE IF EXISTS etrans";
            Db.nonQ32(command);
            command = "CREATE TABLE etrans(\r\n" + 
            "\t\t\t\t\tEtransNum mediumint unsigned NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tDateTimeTrans datetime NOT NULL default \'0001-01-01\',\r\n" + 
            "\t\t\t\t\tClearinghouseNum mediumint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tEtype tinyint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tClaimNum mediumint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tOfficeSequenceNumber mediumint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tCarrierTransCounter mediumint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tCarrierTransCounter2 mediumint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tCarrierNum mediumint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tCarrierNum2 mediumint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tPatNum mediumint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (EtransNum),\r\n" + 
            "\t\t\t\t\tINDEX (ClaimNum),\r\n" + 
            "\t\t\t\t\tINDEX (CarrierNum),\r\n" + 
            "\t\t\t\t\tINDEX (CarrierNum2)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ32(command);
            command = "DROP TABLE IF EXISTS canadianclaim";
            Db.nonQ32(command);
            command = "CREATE TABLE canadianclaim(\r\n" + 
            "\t\t\t\t\tClaimNum mediumint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tMaterialsForwarded char(5) NOT NULL,\r\n" + 
            "\t\t\t\t\tReferralProviderNum char(10) NOT NULL,\r\n" + 
            "\t\t\t\t\tReferralReason tinyint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tSecondaryCoverage char(1) NOT NULL,\r\n" + 
            "\t\t\t\t\tIsInitialLower char(1) NOT NULL,\r\n" + 
            "\t\t\t\t\tDateInitialLower date NOT NULL default \'0001-01-01\',\r\n" + 
            "\t\t\t\t\tMandProsthMaterial tinyint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tIsInitialUpper char(1) NOT NULL,\r\n" + 
            "\t\t\t\t\tDateInitialUpper date NOT NULL default \'0001-01-01\',\r\n" + 
            "\t\t\t\t\tMaxProsthMaterial tinyint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tEligibilityCode tinyint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tSchoolName varchar(25) NOT NULL,\r\n" + 
            "\t\t\t\t\tPayeeCode tinyint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (ClaimNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ32(command);
            command = "ALTER TABLE carrier ADD IsCDA tinyint unsigned NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE carrier ADD IsPMP tinyint unsigned NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE provider ADD CanadianOfficeNum varchar(100) NOT NULL";
            Db.nonQ32(command);
            command = "INSERT INTO preference VALUES ('LanguagesUsedByPatients','')";
            Db.nonQ32(command);
            command = "ALTER TABLE patient ADD Language varchar(100) NOT NULL";
            Db.nonQ32(command);
            command = "DROP TABLE IF EXISTS canadianextract";
            Db.nonQ32(command);
            command = "CREATE TABLE canadianextract(\r\n" + 
            "\t\t\t\t\tCanadianExtractNum mediumint unsigned NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tClaimNum mediumint unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tToothNum varchar(10) NOT NULL,\r\n" + 
            "\t\t\t\t\tDateExtraction date NOT NULL default \'0001-01-01\',\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (CanadianExtractNum),\r\n" + 
            "\t\t\t\t\tINDEX (ClaimNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ32(command);
            command = "ALTER TABLE insplan ADD DentaideCardSequence tinyint unsigned NOT NULL";
            Db.nonQ32(command);
            //added 11/30/06 after r42.
            command = "ALTER TABLE etrans ADD MessageText text NOT NULL";
            Db.nonQ32(command);
            //added 12/2/06 after r46:
            command = "ALTER TABLE procedurelog DROP LabFee";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurelog ADD ProcNumLab mediumint unsigned NOT NULL";
            Db.nonQ32(command);
            //added 12/8/06 after r57:
            command = "ALTER TABLE procedurecode ADD IsCanadianLab tinyint unsigned NOT NULL";
            Db.nonQ32(command);
            //added 12/21/06 after r71:
            //Also, see the previous method at line 3450, where 4 more fields were added.
            command = "ALTER TABLE claimproc ADD LineNumber tinyint unsigned NOT NULL";
            Db.nonQ32(command);
            //added 12/22/06 after r72:
            command = "DROP TABLE IF EXISTS canadiannetwork";
            Db.nonQ32(command);
            command = "CREATE TABLE canadiannetwork(\r\n" + 
            "\t\t\t\t\tCanadianNetworkNum mediumint unsigned NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tAbbrev varchar(20) NOT NULL,\r\n" + 
            "\t\t\t\t\tDescript varchar(255) NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (CanadianNetworkNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ32(command);
            String[] commands = new String[]{ "INSERT INTO canadiannetwork VALUES (1,'AHI','BC Emergis (formerly Assure Health Inc)')", "INSERT INTO canadiannetwork VALUES (2,'NDC','National Data Corporation')", "INSERT INTO canadiannetwork VALUES (3,'CD','Centre Dentaide')", "INSERT INTO canadiannetwork VALUES (4,'ABC','Alberta Blue Cross')", "INSERT INTO canadiannetwork VALUES (5,'MBC','Manitoba Blue Cross')", "INSERT INTO canadiannetwork VALUES (6,'PBC','Pacific Blue Cross')" };
            Db.NonQ32(commands);
            command = "UPDATE preference SET ValueString = '4.6.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_6_2();
    }

    private static void to4_6_2() throws Exception {
        if (FromVersion < new Version("4.6.2.0"))
        {
            String command = new String();
            command = "ALTER TABLE carrier ADD CDAnetVersion varchar(100) NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE carrier ADD CanadianNetworkNum mediumint unsigned NOT NULL";
            Db.nonQ32(command);
            //CDAnet clearinghouse------------------------------------------------------------------------------------
            command = "INSERT INTO clearinghouse(Description,ExportPath,IsDefault,Payors,Eformat,ReceiverID," + "SenderID,Password,ResponsePath,CommBridge,ClientProgram) " + "VALUES(\'CDAnet\',\'C:\\\\CCD\\\\\',\'0\',\'\',\'3\',\'\',\'\',\'\'," + "\'\',\'9\',\'C:\\\\CCD\\\\CCD32.exe\')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.6.2.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_6_6();
    }

    private static void to4_6_6() throws Exception {
        if (FromVersion < new Version("4.6.6.0"))
        {
            String command = "DROP TABLE IF EXISTS userod";
            Db.nonQ32(command);
            command = "ALTER TABLE user RENAME TO userod";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.6.6.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_6_9();
    }

    /**
    * The following string is used to upgrade MySQL databases into a compatible format for conversion to Oracle. A similar table will also used for the database maintinence tool in order to ensure that the columns below do not contain null data. The array below is composed of groups of 3 strings, following the format: tablename columnname type.
    */
    private static String[] removeNotNullFieldCommands = new String[]{ "account", "Description", "varchar(255)", "account", "BankNumber", "varchar(255)", "accountingautopay", "PickList", "varchar(255)", "adjustment", "AdjNote", "text", "appointment", "Pattern", "varchar(255)", "appointment", "Note", "text", "appointment", "ProcDescript", "varchar(255)", "appointmentrule", "RuleDesc", "varchar(255)", "appointmentrule", "ADACodeStart", "varchar(15) character set utf8 collate utf8_bin", "appointmentrule", "ADACodeEnd", "varchar(15) character set utf8 collate utf8_bin", "apptview", "Description", "varchar(255)", "apptviewitem", "ElementDesc", "varchar(255)", "autocode", "Description", "varchar(255)", "autocodeitem", "ADACode", "varchar(15) character set utf8 collate utf8_bin", "benefit", "ADACode", "varchar(15) character set utf8 collate utf8_bin", "canadianclaim", "MaterialsForwarded", "char(5)", "canadianclaim", "ReferralProviderNum", "char(10)", "canadianclaim", "SecondaryCoverage", "char(1)", "canadianclaim", "IsInitialLower", "char(1)", "canadianclaim", "IsInitialUpper", "char(1)", "canadianclaim", "SchoolName", "varchar(25)", "canadianextract", "ToothNum", "varchar(10)", "canadiannetwork", "Abbrev", "varchar(20)", "canadiannetwork", "Descript", "varchar(255)", "carrier", "CarrierName", "varchar(255)", "carrier", "Address", "varchar(255)", "carrier", "Address2", "varchar(255)", "carrier", "City", "varchar(255)", "carrier", "State", "varchar(255)", "carrier", "Zip", "varchar(255)", "carrier", "Phone", "varchar(255)", "carrier", "ElectID", "varchar(255)", "carrier", "CDAnetVersion", "varchar(100)", "claim", "ClaimStatus", "char(1)", "claim", "PreAuthString", "varchar(40)", "claim", "IsProsthesis", "char(1)", "claim", "ReasonUnderPaid", "varchar(255)", "claim", "ClaimNote", "varchar(255)", "claim", "ClaimType", "varchar(255)", "claim", "RefNumString", "varchar(40)", "claim", "AccidentRelated", "char(1)", "claim", "AccidentST", "varchar(2)", "claimform", "Description", "varchar(50)", "claimform", "FontName", "varchar(255)", "claimform", "UniqueID", "varchar(255)", "claimformitem", "ImageFileName", "varchar(255)", "claimformitem", "FieldName", "varchar(255)", "claimformitem", "FormatString", "varchar(255)", "claimpayment", "CheckNum", "varchar(25)", "claimpayment", "BankBranch", "varchar(25)", "claimpayment", "Note", "varchar(255)", "claimpayment", "CarrierName", "varchar(255)", "claimproc", "Remarks", "varchar(255)", "claimproc", "CodeSent", "varchar(15)", "clearinghouse", "Description", "varchar(255)", "clearinghouse", "ExportPath", "text", "clearinghouse", "Payors", "text", "clearinghouse", "ReceiverID", "varchar(255)", "clearinghouse", "SenderID", "varchar(255)", "clearinghouse", "Password", "varchar(255)", "clearinghouse", "ResponsePath", "varchar(255)", "clearinghouse", "ClientProgram", "varchar(255)", "clearinghouse", "LoginID", "varchar(255)", "clinic", "Description", "varchar(255)", "clinic", "Address", "varchar(255)", "clinic", "Address2", "varchar(255)", "clinic", "City", "varchar(255)", "clinic", "State", "varchar(255)", "clinic", "Zip", "varchar(255)", "clinic", "Phone", "varchar(255)", "clinic", "BankNumber", "varchar(255)", "clockevent", "Note", "text", "commlog", "Note", "text", "computer", "CompName", "varchar(100)", "computer", "PrinterName", "varchar(255)", "contact", "LName", "varchar(255)", "contact", "FName", "varchar(255)", "contact", "WkPhone", "varchar(255)", "contact", "Fax", "varchar(255)", "contact", "Notes", "text", "county", "CountyName", "varchar(255)", "county", "CountyCode", "varchar(255)", "covcat", "Description", "varchar(50)", "covspan", "FromCode", "varchar(15) character set utf8 collate utf8_bin", "covspan", "ToCode", "varchar(15) character set utf8 collate utf8_bin", "definition", "ItemName", "varchar(255)", "definition", "ItemValue", "varchar(255)", "deposit", "BankAccountInfo", "text", "disease", "PatNote", "text", "diseasedef", "DiseaseName", "varchar(255)", "document", "Description", "varchar(255)", "document", "FileName", "varchar(255)", "document", "ToothNumbers", "varchar(255)", "document", "Note", "text", "document", "Signature", "text", "dunning", "DunMessage", "text", "electid", "PayorID", "varchar(255)", "electid", "CarrierName", "varchar(255)", "electid", "ProviderTypes", "varchar(255)", "electid", "Comments", "text", "emailattach", "DisplayedFileName", "varchar(255)", "emailattach", "ActualFileName", "varchar(255)", "emailmessage", "ToAddress", "text", "emailmessage", "FromAddress", "text", "emailmessage", "Subject", "text", "emailmessage", "BodyText", "text", "emailtemplate", "Subject", "text", "emailtemplate", "BodyText", "text", "employee", "LName", "varchar(255)", "employee", "FName", "varchar(255)", "employee", "MiddleI", "varchar(255)", "employee", "ClockStatus", "varchar(255)", "employer", "EmpName", "varchar(255)", "employer", "Address", "varchar(255)", "employer", "Address2", "varchar(255)", "employer", "City", "varchar(255)", "employer", "State", "varchar(255)", "employer", "Zip", "varchar(255)", "employer", "Phone", "varchar(255)", "etrans", "MessageText", "text", "fee", "ADACode", "varchar(15) character set utf8 collate utf8_bin", "graphicelement", "ToothNum", "varchar(2)", "graphicelement", "Description", "varchar(100)", "graphicelement", "Surface", "varchar(5)", "graphicshape", "ShapeType", "char(1)", "graphicshape", "Description", "varchar(100)", "graphictype", "Description", "varchar(100)", "graphictype", "BrushType", "varchar(100)", "graphictype", "SpecialType", "varchar(100)", "insplan", "GroupName", "varchar(50)", "insplan", "GroupNum", "varchar(20)", "insplan", "PlanNote", "text", "insplan", "PlanType", "char(1)", "insplan", "SubscriberID", "varchar(40)", "insplan", "TrojanID", "varchar(100)", "insplan", "DivisionNo", "varchar(255)", "insplan", "BenefitNotes", "text", "insplan", "SubscNote", "text", "instructor", "LName", "varchar(255)", "instructor", "FName", "varchar(255)", "instructor", "Suffix", "varchar(100)", "journalentry", "Memo", "text", "journalentry", "Splits", "text", "journalentry", "CheckNumber", "varchar(255)", "language", "EnglishComments", "text", "language", "ClassType", "text", "language", "English", "text", "languageforeign", "ClassType", "text", "languageforeign", "English", "text", "languageforeign", "Culture", "varchar(255)", "languageforeign", "Translation", "text", "languageforeign", "Comments", "text", "letter", "Description", "varchar(255)", "letter", "BodyText", "text", "lettermerge", "Description", "varchar(255)", "lettermerge", "TemplateName", "varchar(255)", "lettermerge", "DataFileName", "varchar(255)", "lettermergefield", "FieldName", "varchar(255)", "medication", "MedName", "varchar(255)", "medication", "Notes", "text", "medicationpat", "PatNote", "text", "operatory", "OpName", "varchar(255)", "operatory", "Abbrev", "varchar(255)", "patfield", "FieldName", "varchar(255)", "patfield", "FieldValue", "text", "patfielddef", "FieldName", "varchar(255)", "patient", "LName", "varchar(100)", "patient", "FName", "varchar(100)", "patient", "MiddleI", "varchar(100)", "patient", "Preferred", "varchar(100)", "patient", "SSN", "varchar(100)", "patient", "Address", "varchar(100)", "patient", "Address2", "varchar(100)", "patient", "City", "varchar(100)", "patient", "State", "varchar(100)", "patient", "Zip", "varchar(100)", "patient", "HmPhone", "varchar(30)", "patient", "WkPhone", "varchar(30)", "patient", "WirelessPhone", "varchar(30)", "patient", "CreditType", "char(1)", "patient", "Email", "varchar(100)", "patient", "Salutation", "varchar(100)", "patient", "ImageFolder", "varchar(100)", "patient", "AddrNote", "text", "patient", "FamFinUrgNote", "text", "patient", "MedUrgNote", "varchar(255)", "patient", "ApptModNote", "varchar(255)", "patient", "StudentStatus", "char(1)", "patient", "SchoolName", "varchar(30)", "patient", "ChartNumber", "varchar(20)", "patient", "MedicaidID", "varchar(20)", "patient", "PrimaryTeeth", "varchar(255)", "patient", "EmploymentNote", "varchar(255)", "patient", "County", "varchar(255)", "patient", "GradeSchool", "varchar(255)", "patient", "HasIns", "varchar(255)", "patient", "TrophyFolder", "varchar(255)", "patient", "Ward", "varchar(255)", "patient", "Language", "varchar(100)", "patientnote", "FamFinancial", "text", "patientnote", "ApptPhone", "text", "patientnote", "Medical", "text", "patientnote", "Service", "text", "patientnote", "MedicalComp", "text", "patientnote", "Treatment", "text", "patplan", "PatID", "varchar(100)", "payment", "CheckNum", "varchar(25)", "payment", "BankBranch", "varchar(25)", "payment", "PayNote", "varchar(255)", "payplan", "Note", "text", "payplancharge", "Note", "text", "preference", "PrefName", "varchar(255)", "preference", "ValueString", "text", "printer", "PrinterName", "varchar(255)", "procbutton", "Description", "varchar(255)", "procbutton", "ButtonImage", "text", "procbuttonitem", "ADACode", "varchar(15) character set utf8 collate utf8_bin", "procedurecode", "ADACode", "varchar(15) character set utf8 collate utf8_bin", "procedurecode", "Descript", "varchar(255)", "procedurecode", "AbbrDesc", "varchar(50)", "procedurecode", "ProcTime", "varchar(24)", "procedurecode", "DefaultNote", "text", "procedurecode", "AlternateCode1", "varchar(15)", "procedurecode", "MedicalCode", "varchar(15) character set utf8 collate utf8_bin", "procedurecode", "LaymanTerm", "varchar(255)", "procedurelog", "ADACode", "varchar(15) character set utf8 collate utf8_bin", "procedurelog", "Surf", "varchar(10)", "procedurelog", "ToothNum", "varchar(2)", "procedurelog", "ToothRange", "varchar(100)", "procedurelog", "Prosthesis", "char(1)", "procedurelog", "ClaimNote", "varchar(80)", "procedurelog", "MedicalCode", "varchar(15) character set utf8 collate utf8_bin", "procedurelog", "DiagnosticCode", "varchar(255)", "procnote", "Note", "text", "procnote", "Signature", "text", "proctp", "ToothNumTP", "varchar(255)", "proctp", "Surf", "varchar(255)", "proctp", "ADACode", "varchar(255)", "proctp", "Descript", "varchar(255)", "program", "ProgName", "varchar(100)", "program", "ProgDesc", "varchar(100)", "program", "Path", "varchar(255)", "program", "CommandLine", "varchar(255)", "program", "Note", "text", "programproperty", "PropertyDesc", "varchar(255)", "programproperty", "PropertyValue", "varchar(255)", "provider", "Abbr", "varchar(5)", "provider", "LName", "varchar(100)", "provider", "FName", "varchar(100)", "provider", "MI", "varchar(100)", "provider", "Suffix", "varchar(100)", "provider", "SSN", "varchar(12)", "provider", "StateLicense", "varchar(15)", "provider", "DEANum", "varchar(15)", "provider", "BlueCrossID", "varchar(25)", "provider", "MedicaidID", "varchar(20)", "provider", "NationalProvID", "varchar(255)", "provider", "CanadianOfficeNum", "varchar(100)", "providerident", "PayorID", "varchar(255)", "providerident", "IDNumber", "varchar(255)", "question", "Description", "text", "question", "Answer", "text", "questiondef", "Description", "text", "quickpastecat", "Description", "varchar(255)", "quickpastecat", "DefaultForTypes", "text", "quickpastenote", "Note", "text", "quickpastenote", "Abbreviation", "varchar(255)", "recall", "Note", "text", "referral", "LName", "varchar(100)", "referral", "FName", "varchar(100)", "referral", "MName", "varchar(100)", "referral", "SSN", "varchar(9)", "referral", "ST", "varchar(2)", "referral", "Telephone", "varchar(10)", "referral", "Address", "varchar(100)", "referral", "Address2", "varchar(100)", "referral", "City", "varchar(100)", "referral", "Zip", "varchar(10)", "referral", "Note", "text", "referral", "Phone2", "varchar(30)", "referral", "Title", "varchar(255)", "referral", "EMail", "varchar(255)", "repeatcharge", "ADACode", "varchar(15) character set utf8 collate utf8_bin", "repeatcharge", "Note", "text", "rxdef", "Drug", "varchar(255)", "rxdef", "Sig", "varchar(255)", "rxdef", "Disp", "varchar(255)", "rxdef", "Refills", "varchar(30)", "rxdef", "Notes", "varchar(255)", "rxpat", "Drug", "varchar(255)", "rxpat", "Sig", "varchar(255)", "rxpat", "Disp", "varchar(255)", "rxpat", "Refills", "varchar(30)", "rxpat", "Notes", "varchar(255)", "schedule", "Note", "text", "school", "SchoolName", "varchar(255)", "school", "SchoolCode", "varchar(255)", "schoolclass", "Descript", "varchar(255)", "schoolcourse", "CourseID", "varchar(255)", "schoolcourse", "Descript", "varchar(255)", "screen", "GradeSchool", "varchar(255)", "screen", "County", "varchar(255)", "screen", "ProvName", "varchar(255)", "screengroup", "Description", "varchar(255)", "securitylog", "LogText", "text", "sigbutdef", "ButtonText", "varchar(255)", "sigbutdef", "ComputerName", "varchar(255)", "sigelementdef", "SigText", "varchar(255)", "sigelementdef", "Sound", "text", "signal", "FromUser", "varchar(255)", "signal", "SigText", "text", "signal", "ToUser", "varchar(255)", "task", "Descript", "text", "tasklist", "Descript", "varchar(255)", "terminalactive", "ComputerName", "varchar(255)", "timeadjust", "Note", "text", "toolbutitem", "ButtonText", "varchar(255)", "toothinitial", "ToothNum", "varchar(2)", "treatplan", "Heading", "varchar(255)", "treatplan", "Note", "text", "usergroup", "Description", "varchar(255)", "userod", "UserName", "varchar(255)", "userod", "Password", "varchar(255)", "userquery", "Description", "varchar(255)", "userquery", "FileName", "varchar(255)", "userquery", "QueryText", "text", "zipcode", "ZipCodeDigits", "varchar(20)", "zipcode", "City", "varchar(100)", "zipcode", "State", "varchar(20)" };
    private static void to4_6_9() throws Exception {
        if (FromVersion < new Version("4.6.9.0"))
        {
            String command = "ALTER TABLE commlog CHANGE Mode Mode_ tinyint(3) unsigned NOT NULL default '0'";
            Db.nonQ32(command);
            command = "ALTER TABLE patient ADD PreferContactMethod tinyint unsigned NOT NULL AFTER PreferConfirmMethod";
            Db.nonQ32(command);
            command = "ALTER TABLE patient ADD PreferRecallMethod tinyint unsigned NOT NULL AFTER PreferContactMethod";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.6.9.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_6_11();
    }

    private static void to4_6_11() throws Exception {
        if (FromVersion < new Version("4.6.11.0"))
        {
            String command = "INSERT INTO preference VALUES ('OracleInsertId','')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.6.11.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_6_12();
    }

    /**
    * The following changes are to remove the NOT NULL from string fields for all tables in the database in order to become compatible with Oracle, since in Oracle null is the same as the empty string.
    */
    private static void to4_6_12() throws Exception {
        if (FromVersion < new Version("4.6.12.0"))
        {
            String command = "";
            for (int i = 0;i < removeNotNullFieldCommands.Length;i += 3)
            {
                //table name
                command = "ALTER TABLE " + removeNotNullFieldCommands[i] + " MODIFY " + removeNotNullFieldCommands[i + 1] + " " + removeNotNullFieldCommands[i + 2];
                //column name then type
                if (!StringSupport.equals(removeNotNullFieldCommands[i + 2].ToUpper(), "TEXT"))
                {
                    //For all fields which are not of text type, define default.
                    command += " default ''";
                }
                 
                Db.nonQ32(command);
            }
            //added after r49
            command = "INSERT INTO preference VALUES ('DefaultClaimForm','1')";
            Db.nonQ32(command);
            command = "ALTER TABLE patient ADD AdmitDate date NOT NULL default '0001-01-01'";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.6.12.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_6_13();
    }

    /**
    * Support for Oracle began with this version.
    */
    private static void to4_6_13() throws Exception {
        if (FromVersion < new Version("4.6.13.0"))
        {
            String command = "";
            command = "INSERT INTO preference VALUES ('RegistrationNumberClaim','')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.6.13.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_6_19();
    }

    /**
    * 
    */
    private static void to4_6_19() throws Exception {
        if (FromVersion < new Version("4.6.19.0"))
        {
            //Owandy X-ray Bridge created by SPK 10/06, added 2/22/07-----------------------------------------------------------
            String command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Owandy', " + "'QuickVision from owandy.com', " + "'0', " + "'" + POut.string("\\Juliew\\mj32.exe") + "', " + "' C /ALINK', " + "'" + POut.string("Typical file path with parameters is C:\\Juliew\\mj32.exe C /ALINK.  Use C /LINK for QV version < 3.15. Letter C refers to drive.") + "')";
            int programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.Long(programNum) + "', " + "'" + POut.Long(((Enum)ToolBarsAvail.ChartModule).ordinal()) + "', " + "'Owandy')";
            Db.nonQ32(command);
            //Vipersoft bridge:
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Vipersoft', " + "'Vipersoft aka Clarity', " + "'0', " + "'" + POut.string("C:\\Program Files\\Vipersoft\\Vipersoft.exe") + "', " + "'', " + "'')";
            programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + programNum.ToString() + "', " + "'" + (((Enum)ToolBarsAvail.ChartModule).ordinal()).ToString() + "', " + "'Vipersoft')";
            Db.nonQ32(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE userod ADD ClinicNum mediumint NOT NULL";
                Db.nonQ32(command);
            }
            else
            {
                command = "ALTER TABLE userod ADD ClinicNum int";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '4.6.19.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_6_22();
    }

    /**
    * 
    */
    private static void to4_6_22() throws Exception {
        if (FromVersion < new Version("4.6.22.0"))
        {
            String command = "";
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE sigelementdef CHANGE Sound Sound mediumtext";
                Db.nonQ32(command);
            }
             
            command = "UPDATE preference SET ValueString = '4.6.22.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_7_1();
    }

    /**
    * 
    */
    private static void to4_7_1() throws Exception {
        if (FromVersion < new Version("4.7.1.0"))
        {
            String command = "";
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE document ADD CropX mediumint NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE document ADD CropY mediumint NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE document ADD CropW mediumint NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE document ADD CropH mediumint NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE document ADD WindowingMin mediumint NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE document ADD WindowingMax mediumint NOT NULL";
                Db.nonQ32(command);
            }
            else
            {
                command = "ALTER TABLE document ADD CropX int";
                Db.nonQ32(command);
                command = "ALTER TABLE document ADD CropY int";
                Db.nonQ32(command);
                command = "ALTER TABLE document ADD CropW int";
                Db.nonQ32(command);
                command = "ALTER TABLE document ADD CropH int";
                Db.nonQ32(command);
                command = "ALTER TABLE document ADD WindowingMin int";
                Db.nonQ32(command);
                command = "ALTER TABLE document ADD WindowingMax int";
                Db.nonQ32(command);
            } 
            command = "INSERT INTO preference VALUES ('ImageWindowingMin','64')";
            Db.nonQ32(command);
            command = "INSERT INTO preference VALUES ('ImageWindowingMax','192')";
            Db.nonQ32(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS mountdef";
                Db.nonQ32(command);
                command = "CREATE TABLE mountdef(\r\n" + 
                "\t\t\t\t\t\tMountDefNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255),\r\n" + 
                "\t\t\t\t\t\tItemOrder mediumint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsRadiograph tinyint unsigned NOT NULL,\r\n" + 
                "\t\t\t\t\t\tWidth mediumint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHeight mediumint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (MountDefNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
            }
            else
            {
                command = "CREATE TABLE mountdef(\r\n" + 
                "\t\t\t\t\t\tMountDefNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255),\r\n" + 
                "\t\t\t\t\t\tItemOrder int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsRadiograph int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tWidth int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHeight int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (MountDefNum)\r\n" + 
                "\t\t\t\t\t\t)";
            } 
            Db.nonQ32(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS mountitemdef";
                Db.nonQ32(command);
                command = "CREATE TABLE mountitemdef(\r\n" + 
                "\t\t\t\t\t\tMountItemDefNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tMountDefNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tXpos mediumint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tYpos mediumint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tWidth mediumint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHeight mediumint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (MountItemDefNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
            }
            else
            {
                command = "CREATE TABLE mountitemdef(\r\n" + 
                "\t\t\t\t\t\tMountItemDefNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMountDefNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tXpos int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tYpos int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tWidth int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHeight int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (MountItemDefNum)\r\n" + 
                "\t\t\t\t\t\t)";
            } 
            Db.nonQ32(command);
            command = "INSERT INTO preference VALUES ('XRayExposureLevel','1')";
            Db.nonQ32(command);
            //Dxis Bridge---------------------------------------------------------------------------
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Dxis', " + "'DXIS from dxis.com', " + "'0', " + "'" + POut.string("C:\\Dxis\\Dxis.exe") + "', " + "'', " + "'" + POut.string("\"") + "')";
            int programNum = Db.nonQ32(command,true);
            //we now have a ProgramNum to work with
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.Long(programNum) + "', " + "'" + POut.Long(((Enum)ToolBarsAvail.ChartModule).ordinal()) + "', " + "'DXIS')";
            Db.nonQ32(command);
            //Added after r25:
            command = "INSERT INTO preference VALUES ('ToothChartLowerQuality','0')";
            Db.nonQ32(command);
            //Added after r61
            command = "INSERT INTO preference VALUES ('AtoZfolderNotRequired','0')";
            Db.nonQ32(command);
            //Added after r113
            command = "INSERT INTO preference VALUES('SolidBlockouts','0')";
            Db.nonQ32(command);
            //Added after r129
            command = "ALTER TABLE procedurelog ADD CPTModifier varchar(255)";
            //valid for Oracle, too.
            Db.nonQ32(command);
            command = "ALTER TABLE procedurelog ADD RevenueCode varchar(255)";
            //valid for Oracle, too.
            Db.nonQ32(command);
            //Added after r130
            command = "INSERT INTO preference VALUES ('AgingCalculatedMonthlyInsteadOfDaily','0')";
            Db.nonQ32(command);
            //Added after r141:
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE procedurelog ADD BillingTypeOne smallint NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD BillingTypeTwo smallint NOT NULL";
                Db.nonQ32(command);
            }
            else
            {
                //Oracle
                command = "ALTER TABLE procedurelog ADD BillingTypeOne int NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD BillingTypeTwo int NOT NULL";
                Db.nonQ32(command);
            } 
            //Added after r146:
            //Tesia clearinghouse------------------------------------
            command = "INSERT INTO clearinghouse(Description,ExportPath,IsDefault,Payors,Eformat,ReceiverID,\r\n" + 
            "\t\t\t\t\tSenderID,Password,ResponsePath,CommBridge,ClientProgram,LastBatchNumber,ModemPort) \r\n" + 
            "\t\t\t\t\tVALUES(\'Tesia\',\'C:\\\\Tesia\\\\Exports\\\\\',\'0\',\'\',\'1\',\'Tesia\',\'\',\'\',\r\n" + 
            "\t\t\t\t\t\'\',\'0\',\'\',\'0\',\'0\')";
            //Valid for Oracle too.
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.7.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_7_4();
    }

    /**
    * 
    */
    private static void to4_7_4() throws Exception {
        if (FromVersion < new Version("4.7.4.0"))
        {
            String command = "";
            command = "UPDATE clearinghouse SET ReceiverID='113504607' WHERE ReceiverID='Tesia'";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.7.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_8_1();
    }

    /**
    * 
    */
    private static void to4_8_1() throws Exception {
        if (FromVersion < new Version("4.8.1.0"))
        {
            String command = "";
            int practiceDefaultProv = PrefC.getInt(PrefName.PracticeDefaultProv);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                //Turn all hardcoded clearinghouse fields into dynamic fields------------------------------------------------------
                command = "ALTER TABLE clearinghouse ADD ISA05 varchar(255) AFTER Eformat";
                Db.nonQ32(command);
                command = "UPDATE clearinghouse SET ISA05='30' WHERE ReceiverID='660610220' OR ReceiverID='AOS'";
                Db.nonQ32(command);
                command = "UPDATE clearinghouse SET ISA05='ZZ' WHERE ReceiverID!='660610220' AND ReceiverID!='AOS'";
                Db.nonQ32(command);
                command = "ALTER TABLE clearinghouse ADD SenderTIN varchar(255) AFTER ISA05";
                Db.nonQ32(command);
                command = "SELECT SSN FROM provider WHERE ProvNum=" + POut.Long(practiceDefaultProv);
                String defProvSSN = Db.getTable(command).Rows[0][0].ToString().Replace("-", "");
                command = "UPDATE clearinghouse SET SenderTIN='" + POut.string(defProvSSN) + "' " + "WHERE ReceiverID='660610220' OR ReceiverID='AOS' OR ReceiverID='113504607'";
                //Inmediata,AOS, or Tesia
                Db.nonQ32(command);
                command = "ALTER TABLE clearinghouse ADD ISA07 varchar(255) AFTER SenderTIN";
                Db.nonQ32(command);
                command = "UPDATE clearinghouse SET ISA07='30' WHERE ReceiverID='330989922' OR ReceiverID='660610220' OR ReceiverID='AOS'";
                Db.nonQ32(command);
                command = "UPDATE clearinghouse SET ISA07='ZZ' WHERE ReceiverID!='330989922' AND ReceiverID!='660610220' AND ReceiverID!='AOS'";
                Db.nonQ32(command);
                command = "ALTER TABLE clearinghouse CHANGE ReceiverID ISA08 varchar(255)";
                Db.nonQ32(command);
                command = "ALTER TABLE clearinghouse ADD ISA15 varchar(255) AFTER ISA08";
                Db.nonQ32(command);
                command = "UPDATE clearinghouse SET ISA15='P'";
                Db.nonQ32(command);
                command = "ALTER TABLE clearinghouse DROP SenderID";
                Db.nonQ32(command);
                command = "ALTER TABLE clearinghouse ADD SenderName varchar(255)";
                Db.nonQ32(command);
                command = "ALTER TABLE clearinghouse ADD SenderTelephone varchar(255)";
                Db.nonQ32(command);
                command = "ALTER TABLE clearinghouse ADD GS03 varchar(255)";
                Db.nonQ32(command);
                command = "SELECT Abbr FROM provider WHERE ProvNum=" + POut.Long(practiceDefaultProv);
                String AOSnumber = Db.getTable(command).Rows[0][0].ToString();
                command = "UPDATE clearinghouse SET SenderName='" + POut.string(AOSnumber) + "' WHERE ISA08='AOS'";
                Db.nonQ32(command);
                command = "UPDATE clearinghouse SET SenderName='" + POut.string(PrefC.getString(PrefName.PracticeTitle)) + "' " + "WHERE ISA08='660610220' OR ISA08='113504607'";
                //Inmediata or Tesia
                Db.nonQ32(command);
                command = "UPDATE clearinghouse SET SenderTelephone='" + POut.string(PrefC.getString(PrefName.PracticePhone)) + "' " + "WHERE ISA08='660610220' OR ISA08='113504607' OR ISA08='AOS'";
                //Inmediata or Tesia or AOS
                Db.nonQ32(command);
                command = "UPDATE clearinghouse SET GS03=ISA08";
                Db.nonQ32(command);
            }
            else
            {
                //Oracle
                //Recreate clearinghouse table from scratch. The data in this table is not likely to be important, and
                //can always be added again through the program. Recreating the table is easier than trying to mimic the
                //above dozen or so mysql statements.
                command = "DROP TABLE clearinghouse PURGE";
                Db.nonQ32(command);
                command = "CREATE TABLE clearinghouse(" + "ClearinghouseNum number(8,0) NOT NULL," + "Description varchar(255) default ''," + "ExportPath varchar2(4000)," + "IsDefault number(1,0) default '0' NOT NULL," + "Payors varchar2(4000)," + "Eformat number(3,0) default '0' NOT NULL," + "ISA05 varchar(255) default NULL," + "SenderTIN varchar(255) default NULL," + "ISA07 varchar(255) default NULL," + "ISA08 varchar(255) default NULL," + "ISA15 varchar(255) default NULL," + "Password varchar(255) default ''," + "ResponsePath varchar(255) default ''," + "CommBridge number(3,0) default '0' NOT NULL," + "ClientProgram varchar(255) default ''," + "LastBatchNumber number(5,0) default '0' NOT NULL," + "ModemPort number(3,0) default '0' NOT NULL," + "LoginID varchar(255) default ''," + "SenderName varchar(255) default NULL," + "SenderTelephone varchar(255) default NULL," + "GS03 varchar(255) default NULL" + ",PRIMARY KEY (ClearinghouseNum)" + ");";
                Db.nonQ32(command);
            } 
            //added after r167:
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS laboratory";
                Db.nonQ32(command);
                command = "CREATE TABLE laboratory(\r\n" + 
                "\t\t\t\t\t\tLaboratoryNum mediumint NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255),\r\n" + 
                "\t\t\t\t\t\tPhone varchar(255),\r\n" + 
                "\t\t\t\t\t\tNotes text,\r\n" + 
                "\t\t\t\t\t\tLabSlip mediumtext,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (LaboratoryNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
            }
            else
            {
                //Oracle.
                command = "CREATE TABLE laboratory(\r\n" + 
                "\t\t\t\t\t\tLaboratoryNum number(8,0) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255),\r\n" + 
                "\t\t\t\t\t\tPhone varchar(255),\r\n" + 
                "\t\t\t\t\t\tNotes varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tLabSlip varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY(LaboratoryNum)\r\n" + 
                "\t\t\t\t\t\t)";
            } 
            Db.nonQ32(command);
            //added after r168:
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS labcase";
                Db.nonQ32(command);
                command = "CREATE TABLE labcase(\r\n" + 
                "\t\t\t\t\t\tLabCaseNum mediumint NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tPatNum mediumint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLaboratoryNum mediumint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAptNum mediumint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPlannedAptNum mediumint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeDue datetime NOT NULL default \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tDateTimeCreated datetime NOT NULL default \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tDateTimeSent datetime NOT NULL default \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tDateTimeRecd datetime NOT NULL default \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tDateTimeChecked datetime NOT NULL default \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (LabCaseNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
            }
            else
            {
                //Oracle.
                command = "CREATE TABLE labcase(\r\n" + 
                "\t\t\t\t\t\tLabCaseNum number(8,0) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(8,0) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLaboratoryNum number(8,0) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAptNum number(8,0) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPlannedAptNum number(8,0) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeDue date default \'0001-01-01\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeCreated date default \'0001-01-01\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeSent date default \'0001-01-01\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeRecd date default \'0001-01-01\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeChecked date default \'0001-01-01\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY(LabCaseNum)\r\n" + 
                "\t\t\t\t\t\t)";
            } 
            Db.nonQ32(command);
            //Added after r180
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE document CHANGE WithPat PatNum mediumint(8) unsigned NOT NULL default '0'";
                Db.nonQ32(command);
                command = "ALTER TABLE document ADD MountItemNum int NOT NULL";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS mount";
                Db.nonQ32(command);
                command = "CREATE TABLE mount(\r\n" + 
                "\t\t\t\t\t\tMountNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tPatNum mediumint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDocCategory smallint(5) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateCreated date NOT NULL default \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255) default \'\',\r\n" + 
                "\t\t\t\t\t\tImgType tinyint(3) unsigned NOT NULL default \'0\',\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (MountNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS mountitem";
                Db.nonQ32(command);
                command = "CREATE TABLE mountitem(\r\n" + 
                "\t\t\t\t\t\tMountItemNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tMountNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tXpos mediumint(9) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tYpos mediumint(9) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (MountItemNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
            }
            else
            {
                //Oracle
                command = "ALTER TABLE document RENAME COLUMN WithPat TO PatNum";
                //Oracle fails here.
                Db.nonQ32(command);
                command = "ALTER TABLE document ADD (MountItemNum int NOT NULL)";
                Db.nonQ32(command);
                command = "CREATE TABLE mount(\r\n" + 
                "\t\t\t\t\t\tMountNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(5,0) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDocCategory number(5,0) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateCreated date default \'0001-01-01\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255) default \'\',\r\n" + 
                "\t\t\t\t\t\tImgType number(3,0) default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (MountNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ32(command);
                command = "CREATE TABLE mountitem(\r\n" + 
                "\t\t\t\t\t\tMountItemNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMountNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tXpos number(9,0) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tYpos number(9,0) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (MountItemNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ32(command);
            } 
            //Added after r186
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE procedurecode ADD PreExisting tinyint(1) NOT NULL default '0'";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS proclicense";
                Db.nonQ32(command);
                command = "CREATE TABLE proclicense(\r\n" + 
                "\t\t\t\t\t\tProcLicenseNum mediumint(5) NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tADACode varchar(15) default \'\',\r\n" + 
                "\t\t\t\t\t\tDescript varchar(255) default \'\',\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (ProcLicenseNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ32(command);
            }
            else
            {
                //Oracle
                command = "ALTER TABLE procedurecode ADD (PreExisting number(1,0) default '0' NOT NULL)";
                Db.nonQ32(command);
                command = "CREATE TABLE proclicense(\r\n" + 
                "\t\t\t\t\t\tProcLicenseNum number(5,0) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tADACode varchar(15) default \'\',\r\n" + 
                "\t\t\t\t\t\tDescript varchar(255) default \'\',\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (ProcLicenseNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ32(command);
            } 
            command = "UPDATE procedurecode SET PreExisting =1";
            //to indicate which procedurecodes existed before this version.
            Db.nonQ32(command);
            command = "INSERT INTO preference VALUES ('ADAComplianceDateTime','')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.8.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_8_3();
    }

    /**
    * First version where individual computer preferences were introduced.
    */
    private static void to4_8_3() throws Exception {
        if (FromVersion < new Version("4.8.3.0"))
        {
            //preferences should not be deleted since it causes bugs when upgrading.
            //string command="DELETE FROM preference WHERE PrefName='ToothChartLowerQuality'";
            //Db.NonQ32(command);
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS computerpref";
                Db.nonQ32(command);
                command = "CREATE TABLE computerpref(\r\n" + 
                "\t\t\t\t\t\tComputerPrefNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tComputerName varchar(64) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tGraphicsUseHardware tinyint(1) NOT NULL default \'0\',\r\n" + 
                "\t\t\t\t\t\tGraphicsSimple tinyint(1) NOT NULL default \'0\',\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (ComputerPrefNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
            }
            else
            {
                //Assume Oracle
                command = "CREATE TABLE computerpref(\r\n" + 
                "\t\t\t\t\t\tComputerPrefNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tComputerName varchar(64) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tGraphicsUseHardware number(1,0) default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tGraphicsSimple number(1,0) default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (ComputerPrefNum)\r\n" + 
                "\t\t\t\t\t\t)";
            } 
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '4.8.3.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_8_8();
    }

    /**
    * 
    */
    private static void to4_8_8() throws Exception {
        if (FromVersion < new Version("4.8.8.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE quickpastenote CHANGE QuickPasteCatNum QuickPasteCatNum mediumint NOT NULL";
                Db.nonQ32(command);
            }
            else
            {
                //Oracle
                //Cannot specify 'NOT NULL' when already not null. Additionally, not specifying 'NOT NULL' leaves
                //the column as not null, so the following Oracle statement is equivalent the the above MySQL.
                command = "ALTER TABLE quickpastenote MODIFY (QuickPasteCatNum number(5,0))";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '4.8.8.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_8_9();
    }

    /**
    * This conversion converts all medium ints in the database to simple signed ints, because the medium int size restriction is causing some key duplication in random primary key generations, and because we want the integers in the database to be complatible with c# ints. Also, using the syntax with regular ints works for both MySQL and Oracle, whereas the mediumint keyword is invalid in Oracle.
    */
    private static void to4_8_9() throws Exception {
        if (FromVersion < new Version("4.8.9.0"))
        {
            //The table and column names to change, plus a bool to decide weather to specify the NOT NULL condition and a bool to specify if the column is autoincrement. Table format is in groups (table name, column name, auto increment (a or yes, space for no))
            String[] columns = new String[]{ "account", "AccountNum", "a", "accountingautopay", "AccountingAutoPayNum", "a", "adjustment", "AdjNum", "a", "adjustment", "PatNum", " ", "adjustment", "ProvNum", " ", "adjustment", "ProcNum", " ", "appointment", "AptNum", "a", "appointment", "PatNum", " ", "appointment", "NextAptNum", " ", "appointment", "InstructorNum", " ", "appointment", "SchoolClassNum", " ", "appointment", "SchoolCourseNum", " ", "appointmentrule", "AppointmentRuleNum", "a", "apptviewitem", "ApptViewItemNum", "a", "benefit", "BenefitNum", "a", "benefit", "PlanNum", " ", "benefit", "PatPlanNum", " ", "benefit", "CovCatNum", " ", "canadianclaim", "ClaimNum", " ", "canadianextract", "CanadianExtractNum", "a", "canadianextract", "ClaimNum", " ", "canadiannetwork", "CanadianNetworkNum", "a", "carrier", "CarrierNum", "a", "carrier", "CanadianNetworkNum", " ", "claim", "ClaimNum", "a", "claim", "PatNum", " ", "claim", "PlanNum", " ", "claim", "PlanNum2", " ", "claimform", "ClaimFormNum", "a", "claimformitem", "ClaimFormItemNum", "a", "claimformitem", "ClaimFormNum", " ", "claimpayment", "ClaimPaymentNum", "a", "claimpayment", "DepositNum", " ", "claimproc", "ClaimProcNum", "a", "claimproc", "ProcNum", " ", "claimproc", "ClaimNum", " ", "claimproc", "PatNum", " ", "claimproc", "ClaimPaymentNum", " ", "claimproc", "PlanNum", " ", "clearinghouse", "ClearinghouseNum", "a", "clockevent", "ClockEventNum", "a", "commlog", "CommlogNum", "a", "commlog", "PatNum", " ", "computer", "ComputerNum", "a", "contact", "ContactNum", "a", "covcat", "CovCatNum", "a", "covspan", "CovSpanNum", "a", "covspan", "CovCatNum", " ", "deposit", "DepositNum", "a", "disease", "DiseaseNum", "a", "disease", "PatNum", " ", "disease", "DiseaseDefNum", " ", "diseasedef", "DiseaseDefNum", "a", "document", "DocNum", "a", "document", "PatNum", " ", "document", "CropX", " ", "document", "CropY", " ", "document", "CropW", " ", "document", "CropH", " ", "document", "WindowingMin", " ", "document", "WindowingMax", " ", "electid", "ElectIDNum", "a", "emailattach", "EmailAttachNum", "a", "emailattach", "EmailMessageNum", " ", "emailmessage", "EmailMessageNum", "a", "emailmessage", "PatNum", " ", "emailtemplate", "EmailTemplateNum", "a", "employer", "EmployerNum", "a", "etrans", "EtransNum", "a", "etrans", "ClearinghouseNum", " ", "etrans", "ClaimNum", " ", "etrans", "OfficeSequenceNumber", " ", "etrans", "CarrierTransCounter", " ", "etrans", "CarrierTransCounter2", " ", "etrans", "CarrierNum", " ", "etrans", "CarrierNum2 ", " ", "etrans", "PatNum", " ", "fee", "FeeNum", "a", "formpat", "FormPatNum", "a", "formpat", "PatNum", " ", "graphicpoint", "GPointNum", "a", "grouppermission", "GroupPermNum", "a", "grouppermission", "NewerDays", " ", "grouppermission", "UserGroupNum", " ", "insplan", "PlanNum", "a", "insplan", "Subscriber", " ", "insplan", "EmployerNum", " ", "insplan", "CarrierNum", " ", "instructor", "InstructorNum", "a", "journalentry", "JournalEntryNum", "a", "journalentry", "TransactionNum", " ", "journalentry", "AccountNum", " ", "journalentry", "ReconcileNum", " ", "labcase", "LabCaseNum", "a", "labcase", "PatNum", " ", "labcase", "LaboratoryNum", " ", "labcase", "AptNum", " ", "labcase", "PlannedAptNum", " ", "laboratory", "LaboratoryNum", "a", "letter", "LetterNum", "a", "lettermerge", "LetterMergeNum", "a", "lettermergefield", "FieldNum", "a", "lettermergefield", "LetterMergeNum", " ", "medication", "MedicationNum", "a", "medication", "GenericNum", " ", "medicationpat", "MedicationPatNum", "a", "medicationpat", "PatNum", " ", "medicationpat", "MedicationNum", " ", "mount", "PatNum", " ", "mountdef", "ItemOrder", " ", "mountdef", "Width", " ", "mountdef", "Height", " ", "mountitem", "Xpos", " ", "mountitem", "Ypos", " ", "mountitemdef", "Xpos", " ", "mountitemdef", "Ypos", " ", "mountitemdef", "Width", " ", "mountitemdef", "Height", " ", "patfield", "PatFieldNum", "a", "patfield", "PatNum", " ", "patfielddef", "PatFieldDefNum", "a", "patient", "PatNum", "a", "patient", "Guarantor", " ", "patient", "NextAptNum", " ", "patient", "EmployerNum", " ", "patientnote", "PatNum", " ", "patplan", "PatPlanNum", "a", "patplan", "PatNum", " ", "patplan", "PlanNum", " ", "payment", "PayNum", "a", "payment", "PatNum", " ", "payment", "DepositNum", " ", "payperiod", "PayPeriodNum", "a", "payplan", "PayPlanNum", "a", "payplan", "PatNum", " ", "payplan", "Guarantor", " ", "payplan", "PlanNum", " ", "payplancharge", "PayPlanChargeNum", "a", "payplancharge", "PayPlanNum", " ", "payplancharge", "Guarantor", " ", "payplancharge", "PatNum", " ", "paysplit", "SplitNum", "a", "paysplit", "PatNum", " ", "paysplit", "PayNum", " ", "paysplit", "PayPlanNum", " ", "paysplit", "ProcNum", " ", "perioexam", "PerioExamNum", "a", "perioexam", "PatNum", " ", "periomeasure", "PerioMeasureNum", "a", "periomeasure", "PerioExamNum", " ", "printer", "PrinterNum", "a", "printer", "ComputerNum", " ", "procedurelog", "ProcNum", "a", "procedurelog", "PatNum", " ", "procedurelog", "AptNum", " ", "procedurelog", "PlannedAptNum", " ", "procedurelog", "ProcNumLab", " ", "proclicense", "ProcLicenseNum", "a", "procnote", "ProcNoteNum", "a", "procnote", "PatNum", " ", "procnote", "ProcNum", " ", "procnote", "UserNum", " ", "proctp", "ProcTPNum", "a", "proctp", "TreatPlanNum", " ", "proctp", "PatNum", " ", "proctp", "ProcNumOrig", " ", "program", "ProgramNum", "a", "programproperty", "ProgramPropertyNum", "a", "programproperty", "ProgramNum", " ", "provider", "SchoolClassNum", " ", "providerident", "ProviderIdentNum", "a", "question", "QuestionNum", "a", "question", "PatNum", " ", "question", "FormPatNum", " ", "questiondef", "QuestionDefNum", "a", "quickpastecat", "QuickPasteCatNum", "a", "quickpastenote", "QuickPasteNoteNum", "a", "quickpastenote", "QuickPasteCatNum", " ", "recall", "RecallNum", "a", "recall", "PatNum", " ", "reconcile", "ReconcileNum", "a", "reconcile", "AccountNum", " ", "refattach", "ReferralNum", " ", "refattach", "PatNum", " ", "referral", "ReferralNum", "a", "referral", "PatNum", " ", "repeatcharge", "RepeatChargeNum", "a", "repeatcharge", "PatNum", " ", "rxalert", "RxAlertNum", "a", "rxalert", "RxDefNum", " ", "rxalert", "DiseaseDefNum", " ", "rxpat", "RxNum", "a", "rxpat", "PatNum", " ", "schedule", "ScheduleNum", "a", "schoolclass", "SchoolClassNum", "a", "schoolclass", "GradYear", " ", "schoolcourse", "SchoolCourseNum", "a", "screen", "ScreenNum", "a", "screen", "ScreenGroupNum", " ", "screengroup", "ScreenGroupNum", "a", "securitylog", "SecurityLogNum", "a", "securitylog", "UserNum", " ", "securitylog", "PatNum", " ", "sigelement", "SigElementNum", "a", "sigelement", "SignalNum", " ", "signal", "SignalNum", "a", "task", "TaskNum", "a", "task", "TaskListNum", " ", "task", "KeyNum", " ", "task", "FromNum", " ", "tasklist", "TaskListNum", "a", "tasklist", "Parent", " ", "tasklist", "FromNum", " ", "terminalactive", "TerminalActiveNum", "a", "terminalactive", "PatNum", " ", "timeadjust", "TimeAdjustNum", "a", "timeadjust", "EmployeeNum", " ", "toolbutitem", "ToolButItemNum", "a", "toolbutitem", "ProgramNum", " ", "toothinitial", "ToothInitialNum", "a", "toothinitial", "PatNum", " ", "transaction", "TransactionNum", "a", "transaction", "UserNum", " ", "transaction", "DepositNum", " ", "transaction", "PayNum", " ", "treatplan", "TreatPlanNum", "a", "treatplan", "PatNum", " ", "usergroup", "UserGroupNum", "a", "userod", "UserNum", "a", "userod", "UserGroupNum", " ", "userod", "ClinicNum", " ", "zipcode", "ZipCodeNum", "a" };
            //TABLE NAME											COLUMN NAME															AUTO-INCREMENT
            String command = "";
            for (int i = 0;i < columns.Length;i += 3)
            {
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    //table name
                    command = "ALTER TABLE " + columns[i] + " CHANGE " + columns[i + 1] + " " + columns[i + 1] + " int NOT NULL ";
                    //column name (all columns will be NOT NULL)
                    if (!StringSupport.equals(columns[i + 2], " "))
                    {
                        command += "auto_increment ";
                    }
                     
                }
                else
                {
                    //Oracle.
                    //table name
                    command = "ALTER TABLE " + columns[i] + " MODIFY (" + columns[i + 1] + " int)";
                } 
                //Cannot specify 'NOT NULL' when already not null column. Additionally, not specifying 'NOT NULL' leaves
                //the column as 'NOT NULL' if it was defined that way. If a column allows null, then we should not specify
                //anything here. Finally, since all of the above columns already exist in the database and have
                //sequence/trigger pairs for those which are auto_incement, we do not need to worry about the auto_increment
                //flag here (columns[i+2]).
                Db.nonQ32(command);
            }
            command = "UPDATE preference SET ValueString = '4.8.9.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_9_1();
    }

    /**
    * 
    */
    private static void to4_9_1() throws Exception {
        if (FromVersion < new Version("4.9.1.0"))
        {
            String command = new String();
            DataTable table = new DataTable();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE procedurecode ADD CodeNum int NOT NULL FIRST";
                //this column will be the new primary key
                Db.nonQ32(command);
                command = "ALTER TABLE procedurecode DROP PRIMARY KEY";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurecode ADD PRIMARY KEY (CodeNum), CHANGE CodeNum CodeNum int NOT NULL auto_increment";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurecode CHANGE ADACode ProcCode varchar(15) character set utf8 collate utf8_bin NOT NULL default ''";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurecode ADD INDEX (ProcCode)";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD CodeNum int NOT NULL";
                Db.nonQ32(command);
                //this is written in such a way as to be compatible with Oracle.
                command = "UPDATE procedurelog SET procedurelog.CodeNum= (SELECT procedurecode.CodeNum FROM procedurecode WHERE procedurecode.ProcCode=procedurelog.ADACode)";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog CHANGE ADACode OldCode varchar(15) character set utf8 collate utf8_bin NOT NULL default ''";
                Db.nonQ32(command);
                //added after r215
                command = "UPDATE procedurelog SET OldCode=''";
                Db.nonQ32(command);
                command = "ALTER TABLE fee CHANGE ADACode OldCode varchar(15) character set utf8 collate utf8_bin NOT NULL default ''";
                Db.nonQ32(command);
                command = "ALTER TABLE fee ADD CodeNum int NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE fee SET fee.CodeNum= (SELECT procedurecode.CodeNum FROM procedurecode WHERE procedurecode.ProcCode=fee.OldCode)";
                Db.nonQ32(command);
                command = "UPDATE fee SET OldCode=''";
                Db.nonQ32(command);
                //added after r216
                command = "ALTER TABLE appointmentrule CHANGE ADACodeStart CodeStart varchar(15)";
                Db.nonQ32(command);
                command = "ALTER TABLE appointmentrule CHANGE ADACodeEnd CodeEnd varchar(15)";
                Db.nonQ32(command);
                //added after r217
                command = "ALTER TABLE autocodeitem CHANGE ADACode OldCode varchar(15) character set utf8 collate utf8_bin NOT NULL default ''";
                Db.nonQ32(command);
                command = "ALTER TABLE autocodeitem ADD CodeNum int NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE autocodeitem SET autocodeitem.CodeNum= (SELECT procedurecode.CodeNum FROM procedurecode WHERE procedurecode.ProcCode=autocodeitem.OldCode)";
                Db.nonQ32(command);
                command = "UPDATE autocodeitem SET OldCode=''";
                Db.nonQ32(command);
                //added after r218
                command = "ALTER TABLE benefit CHANGE ADACode OldCode varchar(15) character set utf8 collate utf8_bin NOT NULL default ''";
                Db.nonQ32(command);
                command = "ALTER TABLE benefit ADD CodeNum int NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE benefit SET benefit.CodeNum= (SELECT procedurecode.CodeNum FROM procedurecode WHERE procedurecode.ProcCode=benefit.OldCode)";
                Db.nonQ32(command);
                command = "UPDATE benefit SET OldCode=''";
                Db.nonQ32(command);
                command = "DELETE FROM procedurecode WHERE ProcCode=''";
                Db.nonQ32(command);
                command = "UPDATE benefit SET CodeNum=0 WHERE NOT EXISTS(SELECT * FROM procedurecode WHERE " + "benefit.CodeNum=procedurecode.CodeNum)";
                Db.nonQ32(command);
                command = "DELETE FROM procedurelog WHERE NOT EXISTS(SELECT * FROM procedurecode WHERE " + "procedurelog.CodeNum=procedurecode.CodeNum)";
                Db.nonQ32(command);
                //added after r219
                command = "ALTER TABLE procbuttonitem CHANGE ADACode OldCode varchar(15) character set utf8 collate utf8_bin NOT NULL default ''";
                Db.nonQ32(command);
                command = "ALTER TABLE procbuttonitem ADD CodeNum int NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE procbuttonitem SET procbuttonitem.CodeNum= (SELECT procedurecode.CodeNum FROM procedurecode WHERE procedurecode.ProcCode=procbuttonitem.OldCode)";
                Db.nonQ32(command);
                command = "UPDATE procbuttonitem SET OldCode=''";
                Db.nonQ32(command);
                //added after r220
                command = "ALTER TABLE proclicense CHANGE ADACode ProcCode varchar(15)";
                Db.nonQ32(command);
                command = "ALTER TABLE proctp CHANGE ADACode ProcCode varchar(15)";
                Db.nonQ32(command);
                command = "ALTER TABLE repeatcharge CHANGE ADACode ProcCode varchar(15)";
                Db.nonQ32(command);
                //added after r238
                command = "ALTER TABLE labcase ADD ProvNum int NOT NULL";
                Db.nonQ32(command);
                //added after r240
                command = "ALTER TABLE labcase ADD Instructions text";
                Db.nonQ32(command);
                //added after r243
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor) VALUES(12,7," + "'LabCase',-65536)";
                Db.nonQ32(command);
                //commented this "Appointment" option out after r294 and added it back with other related custom colors after r293
                //command="INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor) VALUES(12,8,"
                //	+"'Appointment',-8388480)";
                //Db.NonQ32(command);
                //Added after r244
                command = "DROP TABLE IF EXISTS labturnaround";
                Db.nonQ32(command);
                command = "CREATE TABLE labturnaround(\r\n" + 
                "\t\t\t\t\tLabTurnaroundNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\tLaboratoryNum int NOT NULL,\r\n" + 
                "\t\t\t\t\tDescription varchar(255),\r\n" + 
                "\t\t\t\t\tDaysPublished smallint NOT NULL,\r\n" + 
                "\t\t\t\t\tDaysActual smallint NOT NULL,\r\n" + 
                "\t\t\t\t\tPRIMARY KEY (LabTurnaroundNum)\r\n" + 
                "\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                //Added after r250
                int laboratoryNum = 0;
                do
                {
                    //Determine the first available primary key number in the database. This is necessary because a sequence/trigger
                    //pair may not yet exist in the database from being run in the database maintenence tool. Also, this table is small,
                    //so incrementing by 1 will not waste much time.
                    laboratoryNum++;
                    command = "SELECT LaboratoryNum FROM laboratory WHERE LaboratoryNum='" + laboratoryNum + "'";
                    table = Db.getTable(command);
                }
                while (table.Rows.Count > 0);
                command = "INSERT INTO laboratory (LaboratoryNum,Description,Phone,Notes,LabSlip) VALUES('" + laboratoryNum + "','Default Lab','','','')";
                Db.nonQ32(command);
                command = "SELECT * FROM appointment WHERE Lab != 0";
                table = Db.getTable(command);
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    command = "INSERT INTO labcase (LabCaseNum,PatNum,LaboratoryNum,AptNum,PlannedAptNum,DateTimeDue,DateTimeCreated," + "DateTimeSent,DateTimeRecd,DateTimeChecked,ProvNum,Instructions) VALUES(" + "'" + (i + 1) + "', " + table.Rows[i]["PatNum"].ToString() + ", " + POut.Long(laboratoryNum) + ", ";
                    if (StringSupport.equals(table.Rows[i]["AptStatus"].ToString(), "6"))
                    {
                        //if planned apt
                        //AptNum
                        command += "0, " + table.Rows[i]["AptNum"].ToString() + ", ";
                    }
                    else
                    {
                        //PlannedAptNum
                        command += table.Rows[i]["AptNum"].ToString() + ", " + "0, ";
                    } 
                    //AptNum
                    //PlannedAptNum
                    //DateTimeDue
                    command += POut.DateT(PIn.DateT(table.Rows[i]["AptNum"].ToString())) + ", " + POut.Date(DateTime.MinValue) + ", ";
                    //DateTimeCreated
                    if (StringSupport.equals(table.Rows[i]["Lab"].ToString(), "1"))
                    {
                        //sent
                        //DateTimeSent
                        //DateTimeRecd
                        command += POut.dateT(new DateTime(2000, 1, 1)) + ", " + POut.Date(DateTime.MinValue) + ", " + POut.Date(DateTime.MinValue) + ", ";
                    }
                    else //DateTimeChecked
                    if (StringSupport.equals(table.Rows[i]["Lab"].ToString(), "2"))
                    {
                        //received
                        //DateTimeSent
                        //DateTimeRecd
                        command += POut.dateT(new DateTime(2000, 1, 1)) + ", " + POut.date(new DateTime(2000, 1, 1)) + ", " + POut.Date(DateTime.MinValue) + ", ";
                    }
                    else //DateTimeChecked
                    if (StringSupport.equals(table.Rows[i]["Lab"].ToString(), "3"))
                    {
                        //checked
                        //DateTimeSent
                        //DateTimeRecd
                        command += POut.dateT(new DateTime(2000, 1, 1)) + ", " + POut.date(new DateTime(2000, 1, 1)) + ", " + POut.date(new DateTime(2000, 1, 1)) + ", ";
                    }
                       
                    //DateTimeChecked
                    command += table.Rows[i]["ProvNum"].ToString() + ", " + "'')";
                    Db.nonQ32(command);
                }
                //Added after r269
                command = "INSERT INTO preference VALUES('PrintSimpleStatements','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('BrokenApptCommLogNotAdjustment','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('ShowNotesInAccount','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('PlannedApptTreatedAsRegularAppt','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('BoldFamilyAccountBalanceView','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('ShowProgressNotesInsteadofCommLog','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('ShowUrgFinNoteInProgressNotes','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('StationaryImage','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('StationaryDocument','0')";
                Db.nonQ32(command);
                //Added after r271
                command = "ALTER TABLE schedule ADD EmployeeNum int NOT NULL";
                Db.nonQ32(command);
                //Added after r278
                command = "ALTER TABLE procedurelog DROP CPTModifier";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog DROP RevenueCode";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD CodeMod1 char(2)";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD CodeMod2 char(2)";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD CodeMod3 char(2)";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD CodeMod4 char(2)";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD RevCode varchar(45)";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD UnitCode char(2)";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD UnitQty char(15)";
                Db.nonQ32(command);
                //added after r283
                command = "INSERT INTO preference VALUES('ScheduleProvUnassigned','1')";
                Db.nonQ32(command);
                //this next one is hard to run manually and can be skipped by developers:
                command = "UPDATE preference Set ValueString= '" + PrefC.getLong(PrefName.PracticeDefaultProv).ToString() + "' WHERE PrefName='ScheduleProvUnassigned'";
                Db.nonQ32(command);
                //added after r292
                command = "INSERT INTO preference VALUES('AccountingLockDate','')";
                Db.nonQ32(command);
                //added after r294
                //this first line replaces the one commented out earlier in v4.9
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(12,8," + "'Appointment Text - Today',-8388480,0)";
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(12,9,'Appointment Background - Today',-886,0)";
                //yellow
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(12,10,'Past Appointment Text',-8388480,0)";
                //purple
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(12,11,'Past Appointment Background','-1',0)";
                //white
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(12,12,'Future Appointment Text',-8388480,0)";
                //purple
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(12,13,'Future Appointment Background','-7278960',0)";
                //green
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(12,14,'Broken/Unschd Appt Text','-8388480',0)";
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(12,15,'Broken/Unschd Appt Background','-1',0)";
                //white
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(12,16,'Planned Appointment Text',-8388480,0)";
                //purple
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(12,17,'Planned Appointment Background',-1,0)";
                Db.nonQ32(command);
                //After r299
                command = "INSERT INTO preference VALUES('FuchsListSelectionColor','')";
                Db.nonQ32(command);
                try
                {
                }
                catch (Exception __dummyCatchVar0)
                {
                }

                //added after r301
                //Load ADA2006 claimform (without background)---------------------------------------------------------------------
                /*
                						int claimFormNum=FormClaimForms.ImportForm("",true,Properties.Resources.ClaimForm2006);
                						if(CultureInfo.CurrentCulture.Name=="en-US") {
                							command="UPDATE preference SET ValueString="+POut.PInt(claimFormNum)+" WHERE PrefName='DefaultClaimForm'";
                							Db.NonQ32(command);
                						}
                						command="UPDATE insplan SET ClaimFormNum="+POut.PInt(claimFormNum)
                							+" WHERE insplan.ClaimFormNum= (SELECT claimform.ClaimFormNum FROM claimform WHERE claimform.UniqueID='OD1')";
                						Db.NonQ32(command);
                						command="UPDATE insplan SET ClaimFormNum="+POut.PInt(claimFormNum)+" WHERE insplan.ClaimFormNum=0";
                						Db.NonQ32(command);*/
                //user will have to do it manually
                //added after r303
                command = "INSERT INTO preference VALUES('RegistrationKey','')";
                Db.nonQ32(command);
                //After r304
                command = "INSERT INTO preference VALUES('DistributorKey','')";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS registrationkey";
                Db.nonQ32(command);
                command = "CREATE TABLE registrationkey(\r\n" + 
                "\t\t\t\t\t\tRegistrationKeyNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tPatNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRegKey varchar(4000),\r\n" + 
                "\t\t\t\t\t\tNote varchar(4000),\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (RegistrationKeyNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                //After r306
                command = "ALTER TABLE preference CHANGE ValueString ValueString text NOT NULL default ''";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                //Here we want to add a new column CodeNum and make it the primary key in the procedurecode table.
                //However, it appears to be difficult to change a table primary key, so here we create a backup of
                //the old procedurecode table and recreate the procedure code table, copying in the old data. Also,
                //we desire the primary key to be the first column, which also appears to be difficult to specify in Oracle.
                command = "ALTER TABLE procedurecode RENAME COLUMN ADACode TO ProcCode";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurecode RENAME TO procedurecodeold";
                Db.nonQ32(command);
                command = "CREATE TABLE procedurecode (\r\n" + 
                "\t\t\t\t\tCodeNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\tProcCode varchar2(15) NOT NULL,\r\n" + 
                "\t\t\t\t\tDescript varchar2(255) default \'\',\r\n" + 
                "\t\t\t\t\tAbbrDesc varchar2(50) default \'\',\r\n" + 
                "\t\t\t\t\tProcTime varchar2(24) default \'\',\r\n" + 
                "\t\t\t\t\tProcCat int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\tTreatArea int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\tRemoveTooth int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\tSetRecall int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\tNoBillIns int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\tIsProsth int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\tDefaultNote varchar2(4000),\r\n" + 
                "\t\t\t\t\tIsHygiene int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\tGTypeNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\tAlternateCode1 varchar2(15) default \'\',\r\n" + 
                "\t\t\t\t\tMedicalCode varchar2(15) default \'\',\r\n" + 
                "\t\t\t\t\tIsTaxed int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\tPaintType int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\tGraphicColor int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\tLaymanTerm varchar2(255) default \'\',\r\n" + 
                "\t\t\t\t\tIsCanadianLab int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\tPreExisting int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\tPRIMARY KEY(CodeNum)\r\n" + 
                "\t\t\t\t\t)";
                Db.nonQ32(command);
                command = "CREATE INDEX ind_procedurecode_ProcCode ON procedurecode (ProcCode)";
                Db.nonQ32(command);
                command = "SELECT * FROM procedurecodeold";
                table = Db.getTable(command);
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //Must specify CodeNum here, because auto-incrementation does not take place until an appropriate trigger
                    //and sequence are created in the database maintenence tool after this database upgrade is completed. Since
                    //the column is new, we can just assign consecutive values to keep things simple.
                    command = "INSERT INTO procedurecode (CodeNum,ProcCode,Descript,AbbrDesc,ProcTime," + "ProcCat,TreatArea,RemoveTooth,SetRecall,NoBillIns,IsProsth,DefaultNote," + "IsHygiene,GTypeNum,AlternateCode1,MedicalCode,IsTaxed,PaintType," + "GraphicColor,LaymanTerm,IsCanadianLab,PreExisting) VALUES (" + "'" + POut.Long(i + 1) + "'," + "'" + POut.String(PIn.String(table.Rows[i]["ProcCode"].ToString())) + "'," + "'" + POut.String(PIn.String(table.Rows[i]["Descript"].ToString())) + "'," + "'" + POut.String(PIn.String(table.Rows[i]["AbbrDesc"].ToString())) + "'," + "'" + POut.String(PIn.String(table.Rows[i]["ProcTime"].ToString())) + "'," + "'" + POut.Long(PIn.Long(table.Rows[i]["ProcCat"].ToString())) + "'," + "'" + POut.Long(PIn.Long(table.Rows[i]["TreatArea"].ToString())) + "'," + "'" + POut.Long(PIn.Long(table.Rows[i]["RemoveTooth"].ToString())) + "'," + "'" + POut.Long(PIn.Long(table.Rows[i]["SetRecall"].ToString())) + "'," + "'" + POut.Long(PIn.Long(table.Rows[i]["NoBillIns"].ToString())) + "'," + "'" + POut.String(PIn.String(table.Rows[i]["IsProsth"].ToString())) + "'," + "'" + POut.Long(PIn.Long(table.Rows[i]["DefaultNote"].ToString())) + "'," + "'" + POut.Long(PIn.Long(table.Rows[i]["IsHygiene"].ToString())) + "'," + "'" + POut.String(PIn.String(table.Rows[i]["GTypeNum"].ToString())) + "'," + "'" + POut.String(PIn.String(table.Rows[i]["AlternateCode1"].ToString())) + "'," + "'" + POut.String(PIn.String(table.Rows[i]["MedicalCode"].ToString())) + "'," + "'" + POut.Long(PIn.Long(table.Rows[i]["IsTaxed"].ToString())) + "'," + "'" + POut.Long(PIn.Long(table.Rows[i]["PaintType"].ToString())) + "'," + "'" + POut.Long(PIn.Long(table.Rows[i]["GraphicColor"].ToString())) + "'," + "'" + POut.String(PIn.String(table.Rows[i]["LaymanTerm"].ToString())) + "'," + "'" + POut.Long(PIn.Long(table.Rows[i]["IsCanadianLab"].ToString())) + "'," + "'" + POut.Long(PIn.Long(table.Rows[i]["PreExisting"].ToString())) + "')";
                    Db.nonQ32(command);
                }
                command = "ALTER TABLE procedurelog ADD CodeNum int default '0' NOT NULL";
                Db.nonQ32(command);
                //this is written in such a way as to be compatible with Oracle.
                command = "UPDATE procedurelog SET procedurelog.CodeNum= (SELECT procedurecode.CodeNum FROM procedurecode WHERE procedurecode.ProcCode=procedurelog.ADACode)";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog RENAME COLUMN ADACode TO OldCode";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog MODIFY (OldCode varchar2(15))";
                Db.nonQ32(command);
                //added after r215
                command = "UPDATE procedurelog SET OldCode=''";
                Db.nonQ32(command);
                command = "ALTER TABLE fee RENAME COLUMN ADACode TO OldCode";
                Db.nonQ32(command);
                command = "ALTER TABLE fee MODIFY (OldCode varchar2(15))";
                Db.nonQ32(command);
                command = "ALTER TABLE fee ADD CodeNum int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE fee SET fee.CodeNum=(SELECT procedurecode.CodeNum FROM procedurecode WHERE procedurecode.ProcCode=fee.OldCode)";
                Db.nonQ32(command);
                command = "UPDATE fee SET OldCode=''";
                Db.nonQ32(command);
                //added after r216
                command = "ALTER TABLE appointmentrule RENAME COLUMN ADACodeStart TO CodeStart";
                Db.nonQ32(command);
                command = "ALTER TABLE appointmentrule MODIFY (CodeStart varchar2(15))";
                Db.nonQ32(command);
                command = "ALTER TABLE appointmentrule RENAME COLUMN ADACodeEnd TO CodeEnd";
                Db.nonQ32(command);
                command = "ALTER TABLE appointmentrule MODIFY (CodeEnd varchar2(15))";
                Db.nonQ32(command);
                //added after r217
                command = "ALTER TABLE autocodeitem RENAME COLUMN ADACode TO OldCode";
                Db.nonQ32(command);
                command = "ALTER TABLE autocodeitem MODIFY (OldCode varchar2(15))";
                Db.nonQ32(command);
                command = "ALTER TABLE autocodeitem ADD CodeNum int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE autocodeitem SET autocodeitem.CodeNum=(SELECT procedurecode.CodeNum FROM procedurecode WHERE procedurecode.ProcCode=autocodeitem.OldCode)";
                Db.nonQ32(command);
                command = "UPDATE autocodeitem SET OldCode=''";
                Db.nonQ32(command);
                //added after r218
                command = "ALTER TABLE benefit RENAME COLUMN ADACode TO OldCode";
                Db.nonQ32(command);
                command = "ALTER TABLE benefit MODIFY (OldCode varchar2(15))";
                Db.nonQ32(command);
                command = "ALTER TABLE benefit ADD CodeNum int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE benefit SET benefit.CodeNum=(SELECT procedurecode.CodeNum FROM procedurecode WHERE procedurecode.ProcCode=benefit.OldCode)";
                Db.nonQ32(command);
                command = "UPDATE benefit SET OldCode=''";
                Db.nonQ32(command);
                command = "DELETE FROM procedurecode WHERE ProcCode=''";
                Db.nonQ32(command);
                command = "UPDATE benefit SET CodeNum=0 WHERE NOT EXISTS(SELECT * FROM procedurecode WHERE " + "benefit.CodeNum=procedurecode.CodeNum)";
                Db.nonQ32(command);
                command = "DELETE FROM procedurelog WHERE NOT EXISTS(SELECT * FROM procedurecode WHERE " + "procedurelog.CodeNum=procedurecode.CodeNum)";
                Db.nonQ32(command);
                //added after r219
                command = "ALTER TABLE procbuttonitem RENAME COLUMN ADACode TO OldCode";
                Db.nonQ32(command);
                command = "ALTER TABLE procbuttonitem MODIFY (OldCode varchar2(15))";
                Db.nonQ32(command);
                command = "DELETE FROM procbuttonitem WHERE EXISTS(SELECT procedurecode.CodeNum FROM procedurecode,procbuttonitem WHERE procedurecode.ProcCode=procbuttonitem.OldCode)";
                Db.nonQ32(command);
                command = "ALTER TABLE procbuttonitem ADD CodeNum int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE procbuttonitem SET procbuttonitem.CodeNum=(SELECT procedurecode.CodeNum FROM procedurecode WHERE procedurecode.ProcCode=procbuttonitem.OldCode)";
                Db.nonQ32(command);
                command = "UPDATE procbuttonitem SET OldCode=''";
                Db.nonQ32(command);
                //added after r220
                command = "ALTER TABLE proclicense RENAME COLUMN ADACode TO ProcCode";
                Db.nonQ32(command);
                command = "ALTER TABLE proclicense MODIFY (ProcCode varchar2(15))";
                Db.nonQ32(command);
                command = "ALTER TABLE proctp RENAME COLUMN ADACOde TO ProcCode";
                Db.nonQ32(command);
                command = "ALTER TABLE proctp MODIFY (ProcCode varchar2(15))";
                Db.nonQ32(command);
                command = "ALTER TABLE repeatcharge RENAME COLUMN ADACode TO ProcCode";
                Db.nonQ32(command);
                command = "ALTER TABLE repeatcharge MODIFY (ProcCode varchar2(15))";
                Db.nonQ32(command);
                //added after r238
                command = "ALTER TABLE labcase ADD ProvNum int default '0' NOT NULL";
                Db.nonQ32(command);
                //added after r240
                command = "ALTER TABLE labcase ADD Instructions varchar2(4000)";
                Db.nonQ32(command);
                //added after r243
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),12,7,'LabCase',-65536,0)";
                Db.nonQ32(command);
                //commented this "Appointment" option out after r294 and added it back with other related custom colors after r293
                //command="INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(12,8,"
                //	+"'Appointment',-8388480,0)";
                //Db.NonQ32(command);
                //Added after r244
                command = "CREATE TABLE labturnaround(\r\n" + 
                "\t\t\t\t\tLabTurnaroundNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\tLaboratoryNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\tDescription varchar2(255),\r\n" + 
                "\t\t\t\t\tDaysPublished int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\tDaysActual int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\tPRIMARY KEY (LabTurnaroundNum)\r\n" + 
                "\t\t\t\t\t)";
                Db.nonQ32(command);
                //Added after r250
                command = "INSERT INTO laboratory (LaboratoryNum,Description,Phone,Notes,LabSlip) " + "VALUES((SELECT CASE WHEN MAX(LaboratoryNum) IS NULL THEN 1 ELSE MAX(LaboratoryNum)+1 END FROM laboratory),'Default Lab','','','')";
                Db.nonQ32(command);
                command = "SELECT * FROM appointment WHERE Lab != 0";
                table = Db.getTable(command);
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    command = "INSERT INTO labcase (LabCaseNum,PatNum,LaboratoryNum,AptNum,PlannedAptNum,DateTimeDue,DateTimeCreated," + "DateTimeSent,DateTimeRecd,DateTimeChecked,ProvNum,Instructions) VALUES(" + "'" + (i + 1) + "', " + table.Rows[i]["PatNum"].ToString() + ", " + "(SELECT MAX(LaboratoryNum) FROM laboratory), ";
                    if (StringSupport.equals(table.Rows[i]["AptStatus"].ToString(), "6"))
                    {
                        //if planned apt
                        //AptNum
                        command += "0, " + table.Rows[i]["AptNum"].ToString() + ", ";
                    }
                    else
                    {
                        //PlannedAptNum
                        command += table.Rows[i]["AptNum"].ToString() + ", " + "0, ";
                    } 
                    //AptNum
                    //PlannedAptNum
                    //DateTimeDue
                    command += POut.DateT(PIn.DateT(table.Rows[i]["AptNum"].ToString())) + ", " + POut.Date(DateTime.MinValue) + ", ";
                    //DateTimeCreated
                    if (StringSupport.equals(table.Rows[i]["Lab"].ToString(), "1"))
                    {
                        //sent
                        //DateTimeSent
                        //DateTimeRecd
                        command += POut.dateT(new DateTime(2000, 1, 1)) + ", " + POut.Date(DateTime.MinValue) + ", " + POut.Date(DateTime.MinValue) + ", ";
                    }
                    else //DateTimeChecked
                    if (StringSupport.equals(table.Rows[i]["Lab"].ToString(), "2"))
                    {
                        //received
                        //DateTimeSent
                        //DateTimeRecd
                        command += POut.dateT(new DateTime(2000, 1, 1)) + ", " + POut.date(new DateTime(2000, 1, 1)) + ", " + POut.Date(DateTime.MinValue) + ", ";
                    }
                    else //DateTimeChecked
                    if (StringSupport.equals(table.Rows[i]["Lab"].ToString(), "3"))
                    {
                        //checked
                        //DateTimeSent
                        //DateTimeRecd
                        command += POut.dateT(new DateTime(2000, 1, 1)) + ", " + POut.date(new DateTime(2000, 1, 1)) + ", " + POut.date(new DateTime(2000, 1, 1)) + ", ";
                    }
                       
                    //DateTimeChecked
                    command += table.Rows[i]["ProvNum"].ToString() + ", " + "'')";
                    Db.nonQ32(command);
                }
                //Added after r269
                command = "INSERT INTO preference VALUES('PrintSimpleStatements','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('BrokenApptCommLogNotAdjustment','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('ShowNotesInAccount','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('PlannedApptTreatedAsRegularAppt','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('BoldFamilyAccountBalanceView','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('ShowProgressNotesInsteadofCommLog','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('ShowUrgFinNoteInProgressNotes','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('StationaryImage','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('StationaryDocument','0')";
                Db.nonQ32(command);
                //Added after r271
                command = "ALTER TABLE schedule ADD EmployeeNum int";
                Db.nonQ32(command);
                //Added after r278
                command = "ALTER TABLE procedurelog DROP COLUMN CPTModifier";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog DROP COLUMN RevenueCode";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD CodeMod1 varchar2(2)";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD CodeMod2 varchar2(2)";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD CodeMod3 varchar2(2)";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD CodeMod4 varchar2(2)";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD RevCode varchar2(45)";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD UnitCode varchar2(2)";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD UnitQty varchar2(15)";
                Db.nonQ32(command);
                //added after r283
                command = "INSERT INTO preference VALUES('ScheduleProvUnassigned','1')";
                Db.nonQ32(command);
                //this next one is hard to run manually and can be skipped by developers:
                command = "UPDATE preference Set ValueString= '" + PrefC.getLong(PrefName.PracticeDefaultProv).ToString() + "' WHERE PrefName='ScheduleProvUnassigned'";
                Db.nonQ32(command);
                //added after r292
                command = "INSERT INTO preference VALUES('AccountingLockDate','')";
                Db.nonQ32(command);
                //added after r294
                //this first line replaces the one commented out earlier in v4.9
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),12,8,'Appointment Text - Today',-8388480,0)";
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),12,9,'Appointment Background - Today',-886,0)";
                //yellow
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),12,10,'Past Appointment Text',-8388480,0)";
                //purple
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),12,11,'Past Appointment Background','-1',0)";
                //white
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),12,12,'Future Appointment Text',-8388480,0)";
                //purple
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),12,13,'Future Appointment Background','-7278960',0)";
                //green
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),12,14,'Broken/Unschd Appt Text','-8388480',0)";
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),12,15,'Broken/Unschd Appt Background','-1',0)";
                //white
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),12,16,'Planned Appointment Text',-8388480,0)";
                //purple
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),12,17,'Planned Appointment Background',-1,0)";
                Db.nonQ32(command);
                //After r299
                command = "INSERT INTO preference VALUES('FuchsListSelectionColor','')";
                Db.nonQ32(command);
                try
                {
                }
                catch (Exception __dummyCatchVar1)
                {
                }

                //added after r301
                //Load ADA2006 claimform (without background)---------------------------------------------------------------------
                /*
                						int claimFormNum=FormClaimForms.ImportForm("",true,Properties.Resources.ClaimForm2006);
                						if(CultureInfo.CurrentCulture.Name=="en-US") {
                							command="UPDATE preference SET ValueString="+POut.PInt(claimFormNum)+" WHERE PrefName='DefaultClaimForm'";
                							Db.NonQ32(command);
                						}
                						command="UPDATE insplan SET ClaimFormNum="+POut.PInt(claimFormNum)
                							+" WHERE insplan.ClaimFormNum= (SELECT claimform.ClaimFormNum FROM claimform WHERE claimform.UniqueID='OD1')";
                						Db.NonQ32(command);
                						command="UPDATE insplan SET ClaimFormNum="+POut.PInt(claimFormNum)+" WHERE insplan.ClaimFormNum=0";
                						Db.NonQ32(command);*/
                //user will have to do it manually
                //added after r303
                command = "INSERT INTO preference VALUES('RegistrationKey','')";
                Db.nonQ32(command);
                //After r304
                command = "INSERT INTO preference VALUES('DistributorKey','')";
                Db.nonQ32(command);
                command = "CREATE TABLE registrationkey(\r\n" + 
                "\t\t\t\t\t\tRegistrationKeyNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRegKey varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tNote varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (RegistrationKeyNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ32(command);
                //After r306
                command = "ALTER TABLE preference MODIFY (ValueString varchar2(4000) default '')";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '4.9.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_9_2();
    }

    /**
    * 
    */
    private static void to4_9_2() throws Exception {
        if (FromVersion < new Version("4.9.2.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE procedurelog DROP INDEX indexADACode";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD INDEX (CodeNum)";
                Db.nonQ32(command);
            }
            else
            {
                //Oracle
                command = "CREATE INDEX ind_procedurelog_CodeNum ON procedurelog (CodeNum)";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '4.9.2.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_9_5();
    }

    /**
    * 
    */
    private static void to4_9_5() throws Exception {
        if (FromVersion < new Version("4.9.5.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                //fix labcase.LaboratoryNum orphaned keys.
                //get target labnum
                command = "SELECT LaboratoryNum FROM laboratory";
                DataTable table = Db.getTable(command);
                String labnum = table.Rows[0][0].ToString();
                //just use the first lab we can find.
                command = "SELECT LaboratoryNum FROM labcase WHERE NOT EXISTS (SELECT * FROM laboratory WHERE laboratory.LaboratoryNum=labcase.LaboratoryNum) GROUP BY LaboratoryNum";
                table = Db.getTable(command);
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    command = "UPDATE labcase SET LaboratoryNum=" + labnum + " WHERE LaboratoryNum=" + table.Rows[i][0].ToString();
                    Db.nonQ32(command);
                }
            }
            else
            {
                //oracle
                //fix labcase.LaboratoryNum orphaned keys.
                command = "UPDATE labcase SET LaboratoryNum=0 WHERE LaboratoryNum NOT IN (SELECT DISTINCT LaboratoryNum FROM laboratory)";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '4.9.5.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_9_7();
    }

    private static void to4_9_7() throws Exception {
        if (FromVersion < new Version("4.9.7.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                //This step was performed in an earlier conversion, but is required here again, for
                //customers who's data has been converted to using a varchar 4000 here. After this command is
                //run, every MySQL user will be using text in the preference value column.
                command = "ALTER TABLE preference CHANGE ValueString ValueString text NOT NULL default ''";
                Db.nonQ32(command);
            }
            else
            {
            } 
            //Already converted to varchar2 4000 for Oracle. No conversion necessary here.
            command = "UPDATE preference SET ValueString = '4.9.7.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to4_9_11();
    }

    private static void to4_9_11() throws Exception {
        if (FromVersion < new Version("4.9.11.0"))
        {
            String command = "";
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DELETE FROM appointment WHERE AptStatus=6 AND NOT EXISTS(SELECT * FROM patient WHERE patient.NextAptNum=appointment.AptNum)";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "DELETE FROM appointment WHERE AptStatus=6 AND NOT EXISTS(SELECT * FROM patient WHERE patient.NextAptNum=appointment.AptNum)";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '4.9.11.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_0_0();
    }

    /**
    * 
    */
    private static void to5_0_0() throws Exception {
        if (FromVersion < new Version("5.0.0.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                //after r318
                command = "DROP TABLE IF EXISTS reqneeded";
                Db.nonQ32(command);
                command = "CREATE TABLE reqneeded(\r\n" + 
                "\t\t\t\t\t\tReqNeededNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tDescript varchar(255),\r\n" + 
                "\t\t\t\t\t\tSchoolCourseNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSchoolClassNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (ReqNeededNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                //after r320
                command = "ALTER TABLE userod ADD ProvNum int NOT NULL";
                Db.nonQ32(command);
                //after r337,r362,r378
                command = "ALTER TABLE mountitem ADD OrdinalPos int NOT NULL default '0'";
                Db.nonQ32(command);
                command = "ALTER TABLE mountitem ADD Width int default '0'";
                Db.nonQ32(command);
                command = "ALTER TABLE mountitem ADD Height int default '0'";
                Db.nonQ32(command);
                command = "ALTER TABLE mount ADD Note text default ''";
                Db.nonQ32(command);
                command = "ALTER TABLE mount ADD Width int default '0'";
                Db.nonQ32(command);
                command = "ALTER TABLE mount ADD Height int default '0'";
                Db.nonQ32(command);
                //After 342:
                command = "UPDATE apptviewitem SET ElementDesc='Procs' WHERE ElementDesc='ProcDescript'";
                Db.nonQ32(command);
                //After 365: These are for new auto recall appointment functions and film/SRP indicators
                command = "INSERT INTO preference VALUES('RecallPatternChild','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('RecallProceduresChild','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('RecallPatternPerio','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('RecallProceduresPerio','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('RecallPerioTriggerProcs','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('RecallFMXPanoProc','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('RecallFMXPanoYrInterval','5')";
                Db.nonQ32(command);
                if (StringSupport.equals(PrefC.getRaw("RecallBW"), ""))
                {
                    command = "INSERT INTO preference VALUES('RecallDisableAutoFilms','1')";
                }
                else
                {
                    command = "INSERT INTO preference VALUES('RecallDisableAutoFilms','0')";
                } 
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('RecallDisablePerioAlt','1')";
                Db.nonQ32(command);
                //After r366
                command = "DROP TABLE IF EXISTS reqstudent";
                Db.nonQ32(command);
                command = "CREATE TABLE reqstudent(\r\n" + 
                "\t\t\t\t\t\tReqStudentNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tReqNeededNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescript varchar(255),\r\n" + 
                "\t\t\t\t\t\tSchoolCourseNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProvNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAptNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tInstructorNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateCompleted date NOT NULL default \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (ReqStudentNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (ReqNeededNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (ProvNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                //after r381
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(12,18,'Patient Note Text',-8388480,0)";
                //purple
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(12,19,'Patient Note Background',-1,0)";
                //white
                Db.nonQ32(command);
                command = "ALTER TABLE claim ADD ClaimForm int NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE claim ADD EFormat int NOT NULL";
                Db.nonQ32(command);
                //after r393
                //command="DROP TABLE proclicense";//js-let's keep this around for a while.
                //Db.NonQ32(command);
                //after 401
                //-8355712 drk gray, -16777056 drkblue, -16777216 black, -1051718 lt yellow
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(17,6," + "'Patient Note Text',-16777216,0)";
                //black
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(17,7," + "'Patient Note Background',-1051718,0)";
                //post-it note yellow
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(17,8," + "'Patient Note - Pt Name',-16777056,0)";
                //drk blue
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(17,9," + "'Completed Pt. Note Text',-16777216,0)";
                //black
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(17,10," + "'Completed Pt. Note Background',-8355712,0)";
                //drk gray
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(12,20,'Completed Pt Note Text',-8388480,0)";
                //purple
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(12,21,'Completed Pt Note Background',-1,0)";
                //white
                Db.nonQ32(command);
                //After r438
                //X-Charge Bridge---------------------------------------------------------------------------
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note\r\n" + 
                "\t\t\t\t\t) VALUES(\r\n" + 
                "\t\t\t\t\t\'Xcharge\',\r\n" + 
                "\t\t\t\t\t\'X-Charge from x-charge.com\',\r\n" + 
                "\t\t\t\t\t\'0\',\'" + POut.string("C:\\Program Files\\X-Charge\\XCharge.exe") + "', " + "'', " + "'" + POut.string("This setup is typically performed by right clicking on the X-Charge icon in the payment window.") + "')";
                int programNum = Db.nonQ32(command,true);
                //we now have a ProgramNum to work with
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'PaymentType', " + "'0')";
                Db.nonQ32(command);
                //After r442
                command = "INSERT INTO preference VALUES('FuchsOptionsOn','0')";
                Db.nonQ32(command);
                //change these from 0 to nothing
                command = "UPDATE preference SET ValueString = '' WHERE PrefName = 'StationaryImage'";
                Db.nonQ32(command);
                command = command = "UPDATE preference SET ValueString = '' WHERE PrefName = 'StationaryDocument'";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('WordProcessorPath','')";
                Db.nonQ32(command);
                //After r457
                command = "ALTER TABLE refattach CHANGE RefAttachNum RefAttachNum int unsigned NOT NULL auto_increment";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                //after r318
                command = "CREATE TABLE reqneeded(\r\n" + 
                "\t\t\t\t\t\tReqNeededNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescript varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSchoolCourseNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSchoolClassNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (ReqNeededNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ32(command);
                //after r320
                command = "ALTER TABLE userod ADD ProvNum int";
                Db.nonQ32(command);
                //after r337,r362,r378
                command = "ALTER TABLE mountitem ADD OrdinalPos int default '0'";
                Db.nonQ32(command);
                command = "ALTER TABLE mountitem ADD Width int default '0'";
                Db.nonQ32(command);
                command = "ALTER TABLE mountitem ADD Height int default '0'";
                Db.nonQ32(command);
                command = "ALTER TABLE mount ADD Note varchar2(4000) default ''";
                Db.nonQ32(command);
                command = "ALTER TABLE mount ADD Width int default '0'";
                Db.nonQ32(command);
                command = "ALTER TABLE mount ADD Height int default '0'";
                Db.nonQ32(command);
                //After 342:
                command = "UPDATE apptviewitem SET ElementDesc='Procs' WHERE ElementDesc='ProcDescript'";
                Db.nonQ32(command);
                //After 365: These are for new auto recall appointment functions and film/SRP indicators
                command = "INSERT INTO preference VALUES('RecallPatternChild','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('RecallProceduresChild','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('RecallPatternPerio','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('RecallProceduresPerio','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('RecallPerioTriggerProcs','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('RecallFMXPanoProc','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('RecallFMXPanoYrInterval','5')";
                Db.nonQ32(command);
                if (StringSupport.equals(PrefC.getRaw("RecallBW"), ""))
                {
                    command = "INSERT INTO preference VALUES('RecallDisableAutoFilms','1')";
                }
                else
                {
                    command = "INSERT INTO preference VALUES('RecallDisableAutoFilms','0')";
                } 
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('RecallDisablePerioAlt','1')";
                Db.nonQ32(command);
                //After r366
                command = "CREATE TABLE reqstudent(\r\n" + 
                "\t\t\t\t\t\tReqStudentNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tReqNeededNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescript varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSchoolCourseNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProvNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAptNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tInstructorNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateCompleted date default TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (ReqStudentNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ32(command);
                command = "CREATE INDEX ind_reqstudent_ReqNeededNum ON reqstudent (ReqNeededNum)";
                Db.nonQ32(command);
                command = "CREATE INDEX ind_reqstudent_ProvNum ON reqstudent (ProvNum)";
                Db.nonQ32(command);
                //after r381
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),12,18,'Patient Note Text',-8388480,0)";
                //purple
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),12,19,'Patient Note Background',-1,0)";
                //white
                Db.nonQ32(command);
                command = "ALTER TABLE claim ADD ClaimForm int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE claim ADD EFormat int default '0' NOT NULL";
                Db.nonQ32(command);
                //after r393
                //command="DROP TABLE proclicense";//js-let's keep this around for a while.
                //Db.NonQ32(command);
                //after 401
                //-8355712 drk gray, -16777056 drkblue, -16777216 black, -1051718 lt yellow
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),17,6,'Patient Note Text',-16777216,0)";
                //black
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),17,7,'Patient Note Background',-1051718,0)";
                //post-it note yellow
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),17,8,'Patient Note - Pt Name',-16777056,0)";
                //drk blue
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),17,9,'Completed Pt. Note Text',-16777216,0)";
                //black
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),17,10,'Completed Pt. Note Background',-8355712,0)";
                //drk gray
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),12,20,'Completed Pt Note Text',-8388480,0)";
                //purple
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),12,21,'Completed Pt Note Background',-1,0)";
                //white
                Db.nonQ32(command);
                //After r438
                //X-Charge Bridge---------------------------------------------------------------------------
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note\r\n" + 
                "\t\t\t\t\t\t) VALUES(\r\n" + 
                "\t\t\t\t\t\t(SELECT MAX(ProgramNum)+1 FROM program),\r\n" + 
                "\t\t\t\t\t\t\'Xcharge\',\r\n" + 
                "\t\t\t\t\t\t\'X-Charge from x-charge.com\',\r\n" + 
                "\t\t\t\t\t\t\'0\'," + "'" + POut.string("C:\\Program Files\\X-Charge\\XCharge.exe") + "', " + "'', " + "'This setup is typically performed by right clicking on the X-Charge icon in the payment window.')";
                Db.nonQ32(command);
                //we now have a ProgramNum to work with
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum)+1 FROM programproperty)," + "(SELECT MAX(ProgramNum) FROM program), " + "'PaymentType', " + "'0')";
                Db.nonQ32(command);
                //After r442
                command = "INSERT INTO preference VALUES('FuchsOptionsOn','0')";
                Db.nonQ32(command);
                //change these from 0 to nothing
                command = "UPDATE preference SET ValueString = '' WHERE PrefName = 'StationaryImage'";
                Db.nonQ32(command);
                command = command = "UPDATE preference SET ValueString = '' WHERE PrefName = 'StationaryDocument'";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('WordProcessorPath','')";
                Db.nonQ32(command);
                //After r457
                command = "ALTER TABLE refattach MODIFY (RefAttachNum int)";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.0.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_0_2();
    }

    /**
    * 
    */
    private static void to5_0_2() throws Exception {
        if (FromVersion < new Version("5.0.2.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DELETE FROM appointment WHERE AptStatus=6 AND NOT EXISTS(SELECT * FROM patient WHERE patient.NextAptNum=appointment.AptNum)";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "DELETE FROM appointment WHERE AptStatus=6 AND NOT EXISTS(SELECT * FROM patient WHERE patient.NextAptNum=appointment.AptNum)";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.0.2.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_0_4();
    }

    /**
    * 
    */
    private static void to5_0_4() throws Exception {
        if (FromVersion < new Version("5.0.4.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE computerpref ADD SensorType varchar(255) default 'D'";
                Db.nonQ32(command);
                command = "ALTER TABLE computerpref ADD SensorBinned varchar(1) default '0'";
                Db.nonQ32(command);
                command = "ALTER TABLE computerpref ADD SensorPort int default '0'";
                Db.nonQ32(command);
                command = "ALTER TABLE computerpref ADD SensorExposure int default '1'";
                Db.nonQ32(command);
            }
            else
            {
                //oracle.
                command = "ALTER TABLE computerpref ADD SensorType varchar2(255)";
                Db.nonQ32(command);
                command = "ALTER TABLE computerpref ADD SensorBinned varchar2(1) default '0'";
                Db.nonQ32(command);
                command = "ALTER TABLE computerpref ADD SensorPort int default '0'";
                Db.nonQ32(command);
                command = "ALTER TABLE computerpref ADD SensorExposure int default '1'";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.0.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_0_5();
    }

    /**
    * Just ensures that the SensorType column in the computerpref table has length of 255 (since older code used a length of 256, which is invalid in MySQL version 4.1).
    */
    private static void to5_0_5() throws Exception {
        if (FromVersion < new Version("5.0.5.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE computerpref CHANGE SensorType SensorType varchar(255) default 'D'";
                Db.nonQ32(command);
            }
            else
            {
                //oracle.
                command = "ALTER TABLE computerpref MODIFY (SensorType varchar2(255) default 'D')";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.0.5.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_0_6();
    }

    private static void to5_0_6() throws Exception {
        if (FromVersion < new Version("5.0.6.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                //Adjust the ada 2006 total fee location to fit be in box #33.
                command = "UPDATE claimformitem SET  YPos='694' WHERE  FieldName='TotalFee' AND ClaimFormNum=(SELECT ClaimFormNum FROM claimform WHERE Description LIKE '%ADA 2006%')";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                //Adjust the ada 2006 total fee location to fit be in box #33.
                command = "UPDATE claimformitem SET  YPos='694' WHERE  FieldName='TotalFee' AND ClaimFormNum=(SELECT ClaimFormNum FROM claimform WHERE Description LIKE '%ADA 2006%')";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.0.6.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_0_7();
    }

    private static void to5_0_7() throws Exception {
        if (FromVersion < new Version("5.0.7.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "UPDATE clearinghouse SET ExportPath = '" + POut.string("C:\\TesiaLink\\OUT\\") + "' WHERE ISA08='113504607'";
                Db.nonQ32(command);
                command = "UPDATE clearinghouse SET ResponsePath = '" + POut.string("C:\\TesiaLink\\IN\\") + "' WHERE ISA08='113504607'";
                Db.nonQ32(command);
                command = "UPDATE clearinghouse SET ClientProgram = '" + POut.string("C:\\Program Files\\TesiaLink\\TesiaLink.exe") + "' WHERE ISA08='113504607'";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "UPDATE clearinghouse SET ExportPath = '" + POut.string("C:\\TesiaLink\\OUT\\") + "' WHERE ISA08='113504607'";
                Db.nonQ32(command);
                command = "UPDATE clearinghouse SET ResponsePath = '" + POut.string("C:\\TesiaLink\\IN\\") + "' WHERE ISA08='113504607'";
                Db.nonQ32(command);
                command = "UPDATE clearinghouse SET ClientProgram = '" + POut.string("C:\\Program Files\\TesiaLink\\TesiaLink.exe") + "' WHERE ISA08='113504607'";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.0.7.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_0_10();
    }

    private static void to5_0_10() throws Exception {
        if (FromVersion < new Version("5.0.10.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "UPDATE preference SET ValueString = '0' WHERE PrefName = 'ShowProgressNotesInsteadofCommLog'";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "UPDATE preference SET ValueString = '0' WHERE PrefName = 'ShowProgressNotesInsteadofCommLog'";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.0.10.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_0_11();
    }

    private static void to5_0_11() throws Exception {
        if (FromVersion < new Version("5.0.11.0"))
        {
            String command = new String();
            //We can't actually run the reset tool here for two reasons:
            //1. We can never use objects in conversions due to differences in object versions.
            //2. We don't know at which version number users will switch from trial version.
            //So the reset tool will always be run on startup.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT preference VALUES('ADAdescriptionsReset','0')";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference VALUES('ADAdescriptionsReset','0')";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.0.11.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_1_1();
    }

    private static void to5_1_1() throws Exception {
        if (FromVersion < new Version("5.1.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS claimvalcodelog";
                Db.nonQ32(command);
                command = "CREATE TABLE claimvalcodelog( \r\n" + 
                "\t\t\t\t\tClaimValCodeLogNum int unsigned NOT NULL auto_increment, \r\n" + 
                "\t\t\t\t\tClaimNum int unsigned NOT NULL, \r\n" + 
                "\t\t\t\t\tClaimField varchar(5) NOT NULL, \r\n" + 
                "\t\t\t\t\tValCode char(2) NOT NULL, \r\n" + 
                "          ValAmount varchar(10) NOT NULL, \r\n" + 
                "\t\t\t\t\tOrdinal int unsigned NOT NULL, \r\n" + 
                "\t\t\t\t\tPRIMARY KEY (ClaimValCodeLogNum) \r\n" + 
                "\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "ALTER TABLE referral ADD NationalProvID varchar(255)";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS claimcondcodelog";
                Db.nonQ32(command);
                command = "CREATE TABLE claimcondcodelog (\r\n" + 
                "\t\t\t\t\tClaimCondCodeLogNum int unsigned NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\tClaimNum int unsigned NOT NULL,\r\n" + 
                "\t\t\t\t\tCode0 varchar(2),\r\n" + 
                "\t\t\t\t\tCode1 varchar(2),\r\n" + 
                "\t\t\t\t\tCode2 varchar(2),\r\n" + 
                "\t\t\t\t\tCode3 varchar(2),\r\n" + 
                "\t\t\t\t\tCode4 varchar(2),\r\n" + 
                "\t\t\t\t\tCode5 varchar(2),\r\n" + 
                "\t\t\t\t\tCode6 varchar(2),\r\n" + 
                "\t\t\t\t\tCode7 varchar(2),\r\n" + 
                "\t\t\t\t\tCode8 varchar(2),\r\n" + 
                "\t\t\t\t\tCode9 varchar(2),\r\n" + 
                "\t\t\t\t\tCode10 varchar(2),\r\n" + 
                "\t\t\t\t\tPRIMARY KEY (ClaimCondCodeLogNum)\r\n" + 
                "\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                //after r566
                command = "INSERT INTO preference VALUES('ApptBubbleDelay','0')";
                Db.nonQ32(command);
                //after r567
                //Change Tesia clearinghouse settings to use internal functions instead of external program for uploading.
                //do this later:
                //command="UPDATE clearinghouse SET ClientProgram = '' WHERE ISA08='113504607'";
                //Db.NonQ32(command);
                //command="UPDATE clearinghouse SET CommBridge = '10' WHERE ISA08='113504607'";
                //Db.NonQ32(command);
                //after r627  No longer use TesiaLink folder.
                //do this later:
                //command="UPDATE clearinghouse SET ExportPath = '"+POut.PString(@"C:\Tesia\OUT\")+"' WHERE ISA08='113504607'";
                //Db.NonQ32(command);
                //command="UPDATE clearinghouse SET ResponsePath = '"+POut.PString(@"C:\Tesia\IN\")+"' WHERE ISA08='113504607'";
                //Db.NonQ32(command);
                //after r630. Altered again after r659
                command = "DROP TABLE IF EXISTS autonote";
                Db.nonQ32(command);
                command = "CREATE TABLE autonote (\r\n" + 
                "\t\t\t\t\tAutoNoteNum int unsigned NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\tAutoNoteName varchar(50),\r\n" + 
                "\t\t\t\t\tControlsToInc text,\r\n" + 
                "\t\t\t\t\tPRIMARY KEY (AutoNoteNum)\r\n" + 
                "\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS autonotecontrol";
                Db.nonQ32(command);
                command = "CREATE TABLE autonotecontrol (\r\n" + 
                "\t\t\t\t\tAutoNoteControlNum int unsigned NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\tDescript varchar(50),\r\n" + 
                "\t\t\t\t\tControlType varchar(50),\r\n" + 
                "\t\t\t\t\tControlLabel varchar(50),\r\n" + 
                "\t\t\t\t\tPrefaceText text,\r\n" + 
                "\t\t\t\t\tMultiLineText text,\r\n" + 
                "\t\t\t\t\tControlOptions text,\r\n" + 
                "\t\t\t\t\tPRIMARY KEY (AutoNoteControlNum)\r\n" + 
                "\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                // After r665
                command = "ALTER TABLE mount MODIFY DocCategory INTEGER NOT NULL";
                Db.nonQ32(command);
                // After r672
                command = "ALTER TABLE document MODIFY DocCategory INTEGER NOT NULL";
                Db.nonQ32(command);
                // After r673
                command = "ALTER TABLE document MODIFY DegreesRotated SMALLINT NOT NULL";
                Db.nonQ32(command);
                //after r678
                command = "ALTER TABLE etrans ADD BatchNumber INT NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE etrans ADD AckCode varchar(255)";
                Db.nonQ32(command);
            }
            else
            {
                try
                {
                    //oracle
                    command = "SELECT COUNT(*) FROM claimvalcodelog";
                    Db.getTable(command);
                    //The table exists at this point.
                    command = "DROP TABLE claimvalcodelog PURGE";
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar2)
                {
                }

                //The table does not exist
                command = "CREATE TABLE claimvalcodelog( \r\n" + 
                "\t\t\t\t\t\tClaimValCodeLogNum int default \'0\' NOT NULL, \r\n" + 
                "\t\t\t\t\t\tClaimNum int default \'0\' NOT NULL, \r\n" + 
                "\t\t\t\t\t\tClaimField varchar2(5) default \'0\' NOT NULL, \r\n" + 
                "\t\t\t\t\t\tValCode varchar2(2) default \'0\' NOT NULL, \r\n" + 
                "\t\t\t\t\t\tValAmount varchar2(10) default \'0\' NOT NULL, \r\n" + 
                "\t\t\t\t\t\tOrdinal int default \'0\' NOT NULL, \r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (ClaimValCodeLogNum) \r\n" + 
                "\t\t\t\t\t)";
                Db.nonQ32(command);
                command = "ALTER TABLE referral ADD NationalProvID varchar2(255)";
                Db.nonQ32(command);
                try
                {
                    command = "SELECT COUNT(*) FROM claimcondcodelog";
                    Db.getTable(command);
                    //The table exists at this point.
                    command = "DROP TABLE claimcondcodelog PURGE";
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar3)
                {
                }

                //The table does not exist.
                command = "CREATE TABLE claimcondcodelog (\r\n" + 
                "\t\t\t\t\t\tClaimCondCodeLogNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tClaimNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCode0 varchar2(2),\r\n" + 
                "\t\t\t\t\t\tCode1 varchar2(2),\r\n" + 
                "\t\t\t\t\t\tCode2 varchar2(2),\r\n" + 
                "\t\t\t\t\t\tCode3 varchar2(2),\r\n" + 
                "\t\t\t\t\t\tCode4 varchar2(2),\r\n" + 
                "\t\t\t\t\t\tCode5 varchar2(2),\r\n" + 
                "\t\t\t\t\t\tCode6 varchar2(2),\r\n" + 
                "\t\t\t\t\t\tCode7 varchar2(2),\r\n" + 
                "\t\t\t\t\t\tCode8 varchar2(2),\r\n" + 
                "\t\t\t\t\t\tCode9 varchar2(2),\r\n" + 
                "\t\t\t\t\t\tCode10 varchar2(2),\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (ClaimCondCodeLogNum)\r\n" + 
                "\t\t\t\t\t)";
                Db.nonQ32(command);
                //after r566
                command = "INSERT INTO preference VALUES('ApptBubbleDelay','0')";
                Db.nonQ32(command);
                try
                {
                    //after r630. Altered again after r659
                    command = "SELECT COUNT(*) FROM autonote";
                    Db.getTable(command);
                    //The table exists at this point
                    command = "DROP TABLE autonote PURGE";
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar4)
                {
                }

                //The table does not exist.
                command = "CREATE TABLE autonote (\r\n" + 
                "\t\t\t\t\t\tAutoNoteNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAutoNoteName varchar2(50),\r\n" + 
                "\t\t\t\t\t\tControlsToInc varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (AutoNoteNum)\r\n" + 
                "\t\t\t\t\t)";
                Db.nonQ32(command);
                try
                {
                    command = "SELECT COUNT(*) FROM autonotecontrol";
                    Db.getTable(command);
                    //The table exists at this point.
                    command = "DROP TABLE autonotecontrol PURGE";
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar5)
                {
                }

                //The table does not exist.
                command = "CREATE TABLE autonotecontrol (\r\n" + 
                "\t\t\t\t\t\tAutoNoteControlNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescript varchar2(50),\r\n" + 
                "\t\t\t\t\t\tControlType varchar2(50),\r\n" + 
                "\t\t\t\t\t\tControlLabel varchar2(50),\r\n" + 
                "\t\t\t\t\t\tPrefaceText varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tMultiLineText varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tControlOptions varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (AutoNoteControlNum)\r\n" + 
                "\t\t\t\t\t)";
                Db.nonQ32(command);
                // After r665
                command = "ALTER TABLE mount MODIFY DocCategory INTEGER";
                //already not null
                Db.nonQ32(command);
                // After r672
                command = "ALTER TABLE document MODIFY DocCategory INTEGER";
                //already not null
                Db.nonQ32(command);
                // After r673
                command = "ALTER TABLE document MODIFY DegreesRotated INT";
                //already not null
                Db.nonQ32(command);
                //after r678
                command = "ALTER TABLE etrans ADD BatchNumber INT default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE etrans ADD AckCode varchar2(255)";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.1.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_1_3();
    }

    private static void to5_1_3() throws Exception {
        if (FromVersion < new Version("5.1.3.0"))
        {
            String command = "";
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE computerpref ADD GraphicsDoubleBuffering varchar(1) default '0'";
                Db.nonQ32(command);
                command = "ALTER TABLE computerpref ADD PreferredPixelFormatNum int default '0'";
                Db.nonQ32(command);
            }
            else
            {
                //oracle.
                command = "ALTER TABLE computerpref ADD GraphicsDoubleBuffering varchar2(1) default '0'";
                Db.nonQ32(command);
                command = "ALTER TABLE computerpref ADD PreferredPixelFormatNum int default '0'";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.1.3.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_1_4();
    }

    private static void to5_1_4() throws Exception {
        if (FromVersion < new Version("5.1.4.0"))
        {
            String command = "";
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE etrans ADD TransSetNum INT NOT NULL";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE etrans ADD TransSetNum INT default '0' NOT NULL";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.1.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_1_5();
    }

    private static void to5_1_5() throws Exception {
        if (FromVersion < new Version("5.1.5.0"))
        {
            String command = "";
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE etrans ADD Note text";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE etrans ADD Note varchar(4000)";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.1.5.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_1_11();
    }

    private static void to5_1_11() throws Exception {
        if (FromVersion < new Version("5.1.11.0"))
        {
            String command = "";
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "UPDATE computerpref SET PreferredPixelFormatNum='0'";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "UPDATE computerpref SET PreferredPixelFormatNum='0'";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.1.11.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_1_12();
    }

    private static void to5_1_12() throws Exception {
        if (FromVersion < new Version("5.1.12.0"))
        {
            String command = "";
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "UPDATE computerpref SET PreferredPixelFormatNum='0'";
                //again
                Db.nonQ32(command);
                command = "UPDATE computerpref SET GraphicsUseHardware='1'";
                Db.nonQ32(command);
                command = "UPDATE computerpref SET GraphicsDoubleBuffering='1'";
                Db.nonQ32(command);
                command = "UPDATE computerpref SET GraphicsSimple='0'";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "UPDATE computerpref SET PreferredPixelFormatNum='0'";
                //again
                Db.nonQ32(command);
                command = "UPDATE computerpref SET GraphicsUseHardware='1'";
                Db.nonQ32(command);
                command = "UPDATE computerpref SET GraphicsDoubleBuffering='1'";
                Db.nonQ32(command);
                command = "UPDATE computerpref SET GraphicsSimple='0'";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.1.12.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_1_18();
    }

    private static void to5_1_18() throws Exception {
        if (FromVersion < new Version("5.1.18.0"))
        {
            String command = "";
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "UPDATE computerpref SET GraphicsDoubleBuffering=0, PreferredPixelFormatNum=0";
                //again
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "UPDATE computerpref SET GraphicsDoubleBuffering=0, PreferredPixelFormatNum=0";
                //again
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.1.18.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_1_19();
    }

    private static void to5_1_19() throws Exception {
        if (FromVersion < new Version("5.1.19.0"))
        {
            String command = "";
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "UPDATE computerpref SET GraphicsDoubleBuffering=0, PreferredPixelFormatNum=0";
                //again (last time, hopefully)
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "UPDATE computerpref SET GraphicsDoubleBuffering=0, PreferredPixelFormatNum=0";
                //again (last time, hopefully)
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.1.19.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_2_0();
    }

    private static void to5_2_0() throws Exception {
        if (FromVersion < new Version("5.2.0.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference VALUES('UseBillingAddressOnClaims','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('PracticeBillingAddress','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('PracticeBillingAddress2','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('PracticeBillingCity','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('PracticeBillingST','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('PracticeBillingZip','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('TrojanExpressCollectPath','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('TrojanExpressCollectPassword','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('TrojanExpressCollectBillingType','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('TrojanExpressCollectPreviousFileNumber','0')";
                Db.nonQ32(command);
                command = "ALTER TABLE userod ADD IsHidden BOOL NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE patientnote ADD CCNumber VARCHAR(255)";
                Db.nonQ32(command);
                command = "ALTER TABLE patientnote ADD CCExpiration date NOT NULL default '0001-01-01'";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('StoreCCnumbers','0')";
                Db.nonQ32(command);
                command = "ALTER TABLE payplancharge ADD ProvNum int NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE payplancharge SET ProvNum=(SELECT PriProv FROM patient WHERE patient.PatNum=payplancharge.PatNum)";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('AppointmentBubblesDisabled','0')";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference VALUES('UseBillingAddressOnClaims','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('PracticeBillingAddress','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('PracticeBillingAddress2','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('PracticeBillingCity','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('PracticeBillingST','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('PracticeBillingZip','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('TrojanExpressCollectPath','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('TrojanExpressCollectPassword','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('TrojanExpressCollectBillingType','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('TrojanExpressCollectPreviousFileNumber','0')";
                Db.nonQ32(command);
                command = "ALTER TABLE userod ADD IsHidden varchar(2) default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE patientnote ADD CCNumber VARCHAR2(255)";
                Db.nonQ32(command);
                command = "ALTER TABLE patientnote ADD CCExpiration date default TO_DATE('0001-01-01','YYYY-MM-DD') NOT NULL";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('StoreCCnumbers','0')";
                Db.nonQ32(command);
                command = "ALTER TABLE payplancharge ADD ProvNum int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE payplancharge SET ProvNum=(SELECT PriProv FROM patient WHERE patient.PatNum=payplancharge.PatNum)";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('AppointmentBubblesDisabled','0')";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.2.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_3_0();
    }

    private static void to5_3_0() throws Exception {
        if (FromVersion < new Version("5.3.0.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE procedurecode ADD BaseUnits int NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE insplan ADD ShowBaseUnits TINYINT(1) NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE proctp ADD Discount double NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE claimproc CHANGE AllowedAmt AllowedOverride double NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE refattach ADD RefToStatus TINYINT unsigned NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE refattach ADD Note text";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurecode ADD SubstitutionCode VARCHAR(25)";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS proccodenote";
                Db.nonQ32(command);
                command = "CREATE TABLE proccodenote (\r\n" + 
                "\t\t\t\t\t\tProcCodeNoteNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tCodeNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProvNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote text,\r\n" + 
                "\t\t\t\t\t\tProcTime varchar(255),\t\t\t\t\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (ProcCodeNoteNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "ALTER TABLE insplan ADD DedBeforePerc TINYINT(1) NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD BaseUnits int NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog MODIFY UnitQty int NOT NULL";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('DeductibleBeforePercentAsDefault','0')";
                Db.nonQ32(command);
                command = "ALTER TABLE benefit ADD CoverageLevel int NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurecode ADD SubstOnlyIf int NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD StartTime int NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD StopTime int NOT NULL";
                Db.nonQ32(command);
                command = "SELECT COUNT(*) FROM procedurecode WHERE ProcCode='D2391'";
                if (StringSupport.equals(Db.getCount(command), "1"))
                {
                    command = "UPDATE procedurecode SET SubstitutionCode='D2140',SubstOnlyIf=1 WHERE ProcCode='D2391'";
                    //1 surf
                    Db.nonQ32(command);
                }
                 
                command = "SELECT COUNT(*) FROM procedurecode WHERE ProcCode='D2392'";
                if (StringSupport.equals(Db.getCount(command), "1"))
                {
                    command = "UPDATE procedurecode SET SubstitutionCode='D2150',SubstOnlyIf=1 WHERE ProcCode='D2392'";
                    //2 surf
                    Db.nonQ32(command);
                }
                 
                command = "SELECT COUNT(*) FROM procedurecode WHERE ProcCode='D2393'";
                if (StringSupport.equals(Db.getCount(command), "1"))
                {
                    command = "UPDATE procedurecode SET SubstitutionCode='D2160',SubstOnlyIf=1 WHERE ProcCode='D2393'";
                    //3 surf
                    Db.nonQ32(command);
                }
                 
                command = "SELECT COUNT(*) FROM procedurecode WHERE ProcCode='D2394'";
                if (StringSupport.equals(Db.getCount(command), "1"))
                {
                    command = "UPDATE procedurecode SET SubstitutionCode='D2161',SubstOnlyIf=1 WHERE ProcCode='D2394'";
                    //4+ surf
                    Db.nonQ32(command);
                }
                 
                command = "INSERT INTO preference VALUES('TaskListAlwaysShowsAtBottom','0')";
                Db.nonQ32(command);
                command = "ALTER TABLE commlog ADD IsStatementSent tinyint(1) NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE commlog SET IsStatementSent=1 WHERE CommType=1";
                Db.nonQ32(command);
                command = "ALTER TABLE commlog CHANGE CommType CommType int NOT NULL";
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemValue) VALUES(27,0,'ApptRelated','APPT')";
                int defNum = Db.nonQ32(command,true);
                command = "UPDATE commlog SET CommType=" + POut.Long(defNum) + " WHERE CommType=2";
                Db.nonQ32(command);
                //-----------------
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemValue) VALUES(27,1,'Insurance','')";
                defNum = Db.nonQ32(command,true);
                command = "UPDATE commlog SET CommType=" + POut.Long(defNum) + " WHERE CommType=3";
                Db.nonQ32(command);
                //-----------------
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemValue) VALUES(27,2,'Financial','FIN')";
                defNum = Db.nonQ32(command,true);
                command = "UPDATE commlog SET CommType=" + POut.Long(defNum) + " WHERE CommType=4";
                Db.nonQ32(command);
                //-----------------
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemValue) VALUES(27,3,'Recall','RECALL')";
                defNum = Db.nonQ32(command,true);
                command = "UPDATE commlog SET CommType=" + POut.Long(defNum) + " WHERE CommType=5";
                Db.nonQ32(command);
                //-----------------
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemValue) VALUES(27,4,'Misc','MISC')";
                defNum = Db.nonQ32(command,true);
                command = "UPDATE commlog SET CommType=" + POut.Long(defNum) + " WHERE CommType=6";
                Db.nonQ32(command);
                command = "UPDATE commlog SET CommType=0 WHERE CommType=1";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS displayfield";
                Db.nonQ32(command);
                command = "CREATE TABLE displayfield (\r\n" + 
                "\t\t\t\t\t\tDisplayFieldNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tInternalName varchar(255),\r\n" + 
                "\t\t\t\t\t\tItemOrder int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255),\r\n" + 
                "\t\t\t\t\t\tColumnWidth int NOT NULL,\t\t\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (DisplayFieldNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE procedurecode ADD BaseUnits int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE insplan ADD ShowBaseUnits INT default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE proctp ADD Discount BINARY_DOUBLE default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE claimproc MODIFY (AllowedAmt BINARY_DOUBLE default '0')";
                //already not null
                Db.nonQ32(command);
                command = "ALTER TABLE claimproc RENAME COLUMN AllowedAmt TO AllowedOverride";
                Db.nonQ32(command);
                command = "ALTER TABLE refattach ADD RefToStatus INT default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE refattach ADD Note varchar2(4000)";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurecode ADD SubstitutionCode VARCHAR2(25)";
                Db.nonQ32(command);
                try
                {
                    command = "SELECT COUNT(*) FROM proccodenote";
                    Db.getTable(command);
                    //The table exists at this point.
                    command = "DROP TABLE proccodenote PURGE";
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar6)
                {
                }

                //Table doesn't exist
                command = "CREATE TABLE proccodenote (\r\n" + 
                "\t\t\t\t\t\t\tProcCodeNoteNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tCodeNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tProvNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tNote varchar(4000),\r\n" + 
                "\t\t\t\t\t\t\tProcTime varchar(255),\t\t\t\t\r\n" + 
                "\t\t\t\t\t\t\tPRIMARY KEY (ProcCodeNoteNum)\r\n" + 
                "\t\t\t\t\t)";
                Db.nonQ32(command);
                command = "ALTER TABLE insplan ADD DedBeforePerc INT default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD BaseUnits int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog MODIFY UnitQty int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('DeductibleBeforePercentAsDefault','0')";
                Db.nonQ32(command);
                command = "ALTER TABLE benefit ADD CoverageLevel int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurecode ADD SubstOnlyIf int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD StartTime int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD StopTime int default '0' NOT NULL";
                Db.nonQ32(command);
                //Not necessary to first check if this code exists. This command will always work, even if the code isn't there.
                command = "UPDATE procedurecode SET SubstitutionCode='D2140',SubstOnlyIf=1 WHERE ProcCode='D2391'";
                //1 surf
                Db.nonQ32(command);
                //Not necessary to first check if this code exists. This command will always work, even if the code isn't there.
                command = "UPDATE procedurecode SET SubstitutionCode='D2150',SubstOnlyIf=1 WHERE ProcCode='D2392'";
                //2 surf
                Db.nonQ32(command);
                //Not necessary to first check if this code exists. This command will always work, even if the code isn't there.
                command = "UPDATE procedurecode SET SubstitutionCode='D2160',SubstOnlyIf=1 WHERE ProcCode='D2393'";
                //3 surf
                Db.nonQ32(command);
                //Not necessary to first check if this code exists. This command will always work, even if the code isn't there.
                command = "UPDATE procedurecode SET SubstitutionCode='D2161',SubstOnlyIf=1 WHERE ProcCode='D2394'";
                //4+ surf
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('TaskListAlwaysShowsAtBottom','0')";
                Db.nonQ32(command);
                command = "ALTER TABLE commlog ADD IsStatementSent int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE commlog SET IsStatementSent=1 WHERE CommType=1";
                Db.nonQ32(command);
                command = "ALTER TABLE commlog MODIFY(CommType int default '0')";
                //already not null
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemValue) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),27,0,'ApptRelated','APPT')";
                Db.nonQ32(command);
                command = "UPDATE commlog SET CommType=(SELECT MAX(DefNum) FROM definition) WHERE CommType=2";
                Db.nonQ32(command);
                //-----------------
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemValue) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),27,1,'Insurance','')";
                Db.nonQ32(command);
                command = "UPDATE commlog SET CommType=(SELECT MAX(DefNum) FROM definition) WHERE CommType=3";
                Db.nonQ32(command);
                //-----------------
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemValue) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),27,2,'Financial','FIN')";
                Db.nonQ32(command);
                command = "UPDATE commlog SET CommType=(SELECT MAX(DefNum) FROM definition) WHERE CommType=4";
                Db.nonQ32(command);
                //-----------------
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemValue) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),27,3,'Recall','RECALL')";
                Db.nonQ32(command);
                command = "UPDATE commlog SET CommType=(SELECT MAX(DefNum) FROM definition) WHERE CommType=5";
                Db.nonQ32(command);
                //-----------------
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemValue) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),27,4,'Misc','MISC')";
                Db.nonQ32(command);
                command = "UPDATE commlog SET CommType=(SELECT MAX(DefNum) FROM definition) WHERE CommType=6";
                Db.nonQ32(command);
                command = "UPDATE commlog SET CommType=0 WHERE CommType=1";
                Db.nonQ32(command);
                try
                {
                    command = "SELECT COUNT(*) FROM displayfield";
                    Db.getTable(command);
                    //Table exists at this point.
                    command = "DROP TABLE displayfield PURGE";
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar7)
                {
                }

                //Table doesn't exist.
                command = "CREATE TABLE displayfield (\r\n" + 
                "\t\t\t\t\t\t\tDisplayFieldNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tInternalName varchar2(255),\r\n" + 
                "\t\t\t\t\t\t\tItemOrder int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tDescription varchar2(255),\r\n" + 
                "\t\t\t\t\t\t\tColumnWidth int default \'0\' NOT NULL,\t\t\r\n" + 
                "\t\t\t\t\t\t\tPRIMARY KEY (DisplayFieldNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.3.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_3_1();
    }

    private static void to5_3_1() throws Exception {
        if (FromVersion < new Version("5.3.1.0"))
        {
            String command = new String();
            command = "UPDATE preference SET ValueString = '5.3.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_3_9();
    }

    private static void to5_3_9() throws Exception {
        if (FromVersion < new Version("5.3.9.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "SELECT AptNum FROM appointment WHERE Pattern=\'\'";
                DataTable table = Db.getTable(command);
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //detach all procedures
                    command = "UPDATE procedurelog SET AptNum=0 WHERE AptNum=" + table.Rows[i][0].ToString();
                    Db.nonQ32(command);
                    command = "UPDATE procedurelog SET PlannedAptNum=0 WHERE PlannedAptNum=" + table.Rows[i][0].ToString();
                    Db.nonQ32(command);
                    command = "DELETE FROM appointment WHERE AptNum=" + table.Rows[i][0].ToString();
                    Db.nonQ32(command);
                }
            }
            else
            {
                //oracle
                command = "UPDATE procedurelog SET AptNum=0 WHERE AptNum IN (SELECT AptNum FROM appointment WHERE Pattern='')";
                Db.nonQ32(command);
                command = "UPDATE procedurelog SET PlannedAptNum=0 WHERE PlannedAptNum IN " + "(SELECT PlannedAptNum FROM appointment WHERE Pattern='')";
                Db.nonQ32(command);
                command = "DELETE FROM appointment WHERE Pattern=''";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.3.9.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_3_11();
    }

    private static void to5_3_11() throws Exception {
        if (FromVersion < new Version("5.3.11.0"))
        {
            String command = "";
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE appointment ADD INDEX indexProvNum (ProvNum)";
                try
                {
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar8)
                {
                }

                command = "ALTER TABLE appointment ADD INDEX indexProvHyg (ProvHyg)";
                try
                {
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar9)
                {
                }

                command = "ALTER TABLE labcase ADD INDEX indexAptNum (AptNum)";
                try
                {
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar10)
                {
                }

                command = "ALTER TABLE appointment ADD INDEX indexAptDateTime (AptDateTime)";
                try
                {
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar11)
                {
                }
            
            }
            else
            {
                //oracle
                command = "CREATE INDEX APPOINTMENT_PROVNUM ON appointment (ProvNum)";
                try
                {
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar12)
                {
                }

                command = "CREATE INDEX APPOINTMENT_PROVHYG ON appointment (ProvHyg)";
                try
                {
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar13)
                {
                }

                command = "CREATE INDEX LABCASE_APTNUM ON labcase (AptNum)";
                try
                {
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar14)
                {
                }

                command = "CREATE INDEX APPOINTMENT_APTDATETIME ON appointment (AptDateTime)";
                try
                {
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar15)
                {
                }
            
            } 
            command = "UPDATE preference SET ValueString = '5.3.11.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_4_0();
    }

    private static void to5_4_0() throws Exception {
        if (FromVersion < new Version("5.4.0.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS files";
                Db.nonQ32(command);
                command = "CREATE TABLE files\r\n" + 
                "\t\t\t\t\t\t(\r\n" + 
                "\t\t\t\t\t\t\tDocNum    int        NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tData      longblob   NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tThumbnail longblob   NULL,\r\n" + 
                "\t\t\t\t\t\t\tPRIMARY KEY(DocNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('ImageStore', 'OpenDental.Imaging.FileStore')";
                Db.nonQ32(command);
                //PT Dental Bridge---------------------------------------------------------------------------
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'PT', " + "'PT Dental from gopaperlessnow.com', " + "'0', " + "'', " + "'', " + "'" + POut.string("No path is needed.  It is hard coded.") + "')";
                int programNum = Db.nonQ32(command,true);
                //we now have a ProgramNum to work with
                command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.Long(programNum) + "', " + "'" + POut.Long(((Enum)ToolBarsAvail.FamilyModule).ordinal()) + "', " + "'PT Dental')";
                Db.nonQ32(command);
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'PTupdate', " + "'PT Dental update (2nd button)', " + "'0', " + "'', " + "'', " + "'" + POut.string("This is the second part of the PT Dental bridge.  It allows the \'update\' button to be customized separately.") + "')";
                programNum = Db.nonQ32(command,true);
                command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.Long(programNum) + "', " + "'" + POut.Long(((Enum)ToolBarsAvail.FamilyModule).ordinal()) + "', " + "'PT Update')";
                Db.nonQ32(command);
                command = "ALTER TABLE patient ADD Title VARCHAR(15)";
                Db.nonQ32(command);
                command = "DELETE FROM reqstudent WHERE DateCompleted < '1900-01-01' AND AptNum=0";
                Db.nonQ32(command);
                command = "ALTER TABLE provider CHANGE Abbr Abbr VARCHAR(255)";
                Db.nonQ32(command);
                command = "ALTER TABLE commlog ADD UserNum INT NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE computerpref ADD AtoZpath VARCHAR(255)";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('BrokenAppointmentAdjustmentType','0')";
                Db.nonQ32(command);
                command = "ALTER TABLE patient MODIFY PriProv INTEGER NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE patient MODIFY SecProv INTEGER NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE patient MODIFY FeeSched INTEGER NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE patient MODIFY BillingType INTEGER NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE patient MODIFY ClinicNum INTEGER NOT NULL";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS popup";
                Db.nonQ32(command);
                command = "CREATE TABLE popup(\r\n" + 
                "\t\t\t\t\t\tPopupNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tPatNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription text,\r\n" + 
                "\t\t\t\t\t\tIsDisabled tinyint(1) NOT NULL,\t\t\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (PopupNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "ALTER TABLE registrationkey ADD DateStarted DATE NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE registrationkey ADD DateDisabled DATE NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE registrationkey ADD DateEnded DATE NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE registrationkey ADD IsForeign BOOL NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE registrationkey SET DateStarted=NOW()";
                Db.nonQ32(command);
                command = "UPDATE registrationkey SET DateEnded='0001-01-01'";
                Db.nonQ32(command);
                command = "UPDATE registrationkey SET DateDisabled='0001-01-01'";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('UpdateWindowShowsClassicView','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('BillingExcludeInsPending','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('UpdateServerAddress','')";
                Db.nonQ32(command);
                command = "UPDATE preference SET PrefName='UpdateCode' WHERE PrefName='RegistrationNumber'";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD DateTP DATE NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE procedurelog SET DateTP=ProcDate";
                Db.nonQ32(command);
            }
            else
            {
                try
                {
                    //oracle
                    command = "SELECT COUNT(*) FROM files";
                    Db.getTable(command);
                    //Table exists at this point.
                    command = "DROP TABLE files PURGE";
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar16)
                {
                }

                //The table does not exist.
                command = "CREATE TABLE files(\r\n" + 
                "\t\t\t\t\t\t\tDocNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tData blob NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tThumbnail blob NULL,\r\n" + 
                "\t\t\t\t\t\t\tPRIMARY KEY(DocNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('ImageStore', 'OpenDental.Imaging.FileStore')";
                Db.nonQ32(command);
                //PT Dental Bridge---------------------------------------------------------------------------
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "(SELECT MAX(ProgramNum)+1 FROM program)," + "'PT', " + "'PT Dental from gopaperlessnow.com', " + "'0', " + "'', " + "'', " + "'No path is needed.  It is hard coded.')";
                Db.nonQ32(command);
                command = "INSERT INTO toolbutitem (ToolButItemNum,ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "(SELECT MAX(ToolButItemNum)+1 FROM toolbutitem)," + "(SELECT MAX(ProgramNum) FROM program), " + "'" + POut.Long(((Enum)ToolBarsAvail.FamilyModule).ordinal()) + "', " + "'PT Dental')";
                Db.nonQ32(command);
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "(SELECT MAX(ProgramNum)+1 FROM program)," + "'PTupdate', " + "'PT Dental update (2nd button)', " + "'0', " + "'', " + "'', " + "'This is the second part of the PT Dental bridge.  It allows the ''update'' button to be customized separately.')";
                Db.nonQ32(command);
                command = "INSERT INTO toolbutitem (ToolButItemNum,ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "(SELECT MAX(ToolButItemNum)+1 FROM toolbutitem)," + "(SELECT MAX(ProgramNum) FROM program), " + "'" + POut.Long(((Enum)ToolBarsAvail.FamilyModule).ordinal()) + "', " + "'PT Update')";
                Db.nonQ32(command);
                command = "ALTER TABLE patient ADD Title VARCHAR2(15)";
                Db.nonQ32(command);
                command = "DELETE FROM reqstudent WHERE DateCompleted < '1900-01-01' AND AptNum=0";
                Db.nonQ32(command);
                command = "ALTER TABLE provider MODIFY Abbr VARCHAR2(255)";
                Db.nonQ32(command);
                command = "ALTER TABLE commlog ADD UserNum INT default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE computerpref ADD AtoZpath VARCHAR2(255)";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('BrokenAppointmentAdjustmentType','0')";
                Db.nonQ32(command);
                command = "ALTER TABLE patient MODIFY PriProv INTEGER default '0'";
                //already not null
                Db.nonQ32(command);
                command = "ALTER TABLE patient MODIFY SecProv INTEGER default '0'";
                //already not null
                Db.nonQ32(command);
                command = "ALTER TABLE patient MODIFY FeeSched INTEGER default '0'";
                //already not null
                Db.nonQ32(command);
                command = "ALTER TABLE patient MODIFY BillingType INTEGER default '0'";
                //already not null
                Db.nonQ32(command);
                command = "ALTER TABLE patient MODIFY ClinicNum INTEGER default '0'";
                //already not null
                Db.nonQ32(command);
                try
                {
                    command = "SELECT COUNT(*) FROM popup";
                    Db.getTable(command);
                    //Table exists at this point.
                    command = "DROP TABLE popup PURGE";
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar17)
                {
                }

                //The table does not exist.
                command = "CREATE TABLE popup(\r\n" + 
                "\t\t\t\t\t\tPopupNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tIsDisabled int default \'0\' NOT NULL,\t\t\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (PopupNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ32(command);
                command = "ALTER TABLE registrationkey ADD DateStarted DATE default TO_DATE('0001-01-01','YYYY-MM-DD') NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE registrationkey ADD DateDisabled DATE default TO_DATE('0001-01-01','YYYY-MM-DD') NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE registrationkey ADD DateEnded DATE default TO_DATE('0001-01-01','YYYY-MM-DD') NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE registrationkey ADD IsForeign varchar2(1) default '0' NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE registrationkey SET DateStarted=(SELECT CURRENT_DATE FROM dual)";
                Db.nonQ32(command);
                command = "UPDATE registrationkey SET DateEnded=TO_DATE('0001-01-01','YYYY-MM-DD')";
                Db.nonQ32(command);
                command = "UPDATE registrationkey SET DateDisabled=TO_DATE('0001-01-01','YYYY-MM-DD')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('UpdateWindowShowsClassicView','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('BillingExcludeInsPending','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('UpdateServerAddress','')";
                Db.nonQ32(command);
                command = "UPDATE preference SET PrefName='UpdateCode' WHERE PrefName='RegistrationNumber'";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD DateTP DATE default TO_DATE('0001-01-01','YYYY-MM-DD') NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE procedurelog SET DateTP=ProcDate";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.4.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_4_1();
    }

    private static void to5_4_1() throws Exception {
        if (FromVersion < new Version("5.4.1.0"))
        {
            String command = new String();
            command = "UPDATE preference SET ValueString = '5.4.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_4_7();
    }

    private static void to5_4_7() throws Exception {
        if (FromVersion < new Version("5.4.7.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference VALUES('RegistrationKeyIsDisabled','0')";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference VALUES('RegistrationKeyIsDisabled','0')";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.4.7.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_4_14();
    }

    private static void to5_4_14() throws Exception {
        if (FromVersion < new Version("5.4.14.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "UPDATE task SET ObjectType=2 WHERE ObjectType=1 AND task.KeyNum!=0\r\n" + 
                "\t\t\t\t\t\tAND NOT EXISTS(SELECT * FROM patient WHERE PatNum=KeyNum)";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "UPDATE task SET ObjectType=2 WHERE ObjectType=1 AND task.KeyNum!=0\r\n" + 
                "\t\t\t\t\t\tAND NOT EXISTS(SELECT * FROM patient WHERE PatNum=KeyNum)";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.4.14.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_5_1();
    }

    private static void to5_5_1() throws Exception {
        if (FromVersion < new Version("5.5.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS claimattach";
                Db.nonQ32(command);
                command = "CREATE TABLE claimattach (\r\n" + 
                "\t\t\t\t\t\tClaimAttachNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tClaimNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDisplayedFileName varchar(255),\r\n" + 
                "\t\t\t\t\t\tActualFileName varchar(255),\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (ClaimAttachNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                //after r1050
                command = "ALTER TABLE treatplan ADD Signature text";
                Db.nonQ32(command);
                command = "ALTER TABLE treatplan ADD SigIsTopaz tinyint(1) not null";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('TreatPlanPriorityForDeclined','0')";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS supplyneeded";
                Db.nonQ32(command);
                command = "CREATE TABLE supplyneeded (\r\n" + 
                "\t\t\t\t\t\tSupplyNeededNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tDescription text,\r\n" + 
                "\t\t\t\t\t\tDateAdded DATE NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (SupplyNeededNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS supplier";
                Db.nonQ32(command);
                command = "CREATE TABLE supplier (\r\n" + 
                "\t\t\t\t\t\tSupplierNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tName varchar(255),\r\n" + 
                "\t\t\t\t\t\tPhone varchar(255),\r\n" + 
                "\t\t\t\t\t\tCustomerId varchar(255),\r\n" + 
                "\t\t\t\t\t\tWebsite text,\r\n" + 
                "\t\t\t\t\t\tUserName varchar(255),\r\n" + 
                "\t\t\t\t\t\tPassword varchar(255),\r\n" + 
                "\t\t\t\t\t\tNote text,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (SupplierNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS supply";
                Db.nonQ32(command);
                command = "CREATE TABLE supply (\r\n" + 
                "\t\t\t\t\t\tSupplyNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tSupplierNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCatalogNumber varchar(255),\r\n" + 
                "\t\t\t\t\t\tDescript varchar(255),\r\n" + 
                "\t\t\t\t\t\tCategory int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tItemOrder int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLevelDesired float NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsHidden tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPrice double NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (SupplyNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (SupplierNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                //the above definition has changed repeatedly.  You might need to drop the table and do it again:
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS supplyorder";
                Db.nonQ32(command);
                command = "CREATE TABLE supplyorder (\r\n" + 
                "\t\t\t\t\t\tSupplyOrderNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tSupplierNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDatePlaced date NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote text,\r\n" + 
                "\t\t\t\t\t\tAmountTotal double NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (SupplyOrderNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (SupplierNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS supplyorderitem";
                Db.nonQ32(command);
                command = "CREATE TABLE supplyorderitem (\r\n" + 
                "\t\t\t\t\t\tSupplyOrderItemNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tSupplyOrderNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSupplyNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tQty int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPrice double NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (SupplyOrderItemNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (SupplyOrderNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (SupplyNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                //supplyorder was altered later.
                command = "DROP TABLE IF EXISTS tasksubscription";
                Db.nonQ32(command);
                command = "CREATE TABLE tasksubscription (\r\n" + 
                "\t\t\t\t\t\tTaskSubscriptionNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tUserNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTaskListNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (TaskSubscriptionNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (UserNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('TasksCheckOnStartup','0')";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS taskancestor";
                Db.nonQ32(command);
                command = "CREATE TABLE taskancestor (\r\n" + 
                "\t\t\t\t\t\tTaskAncestorNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tTaskNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTaskListNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (TaskAncestorNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (TaskNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (TaskListNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('TaskAncestorsAllSetInVersion55','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('ApptExclamationShowForUnsentIns','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('ProviderIncomeTransferShows','0')";
                Db.nonQ32(command);
            }
            else
            {
                try
                {
                    //oracle
                    command = "SELECT COUNT(*) FROM claimattach";
                    Db.getTable(command);
                    //Table exists at this point.
                    command = "DROP TABLE claimattach PURGE";
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar18)
                {
                }

                //The table does not exist.
                command = "CREATE TABLE claimattach (\r\n" + 
                "\t\t\t\t\t\tClaimAttachNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tClaimNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDisplayedFileName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tActualFileName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (ClaimAttachNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ32(command);
                //after r1050
                command = "ALTER TABLE treatplan ADD Signature varchar(4000)";
                Db.nonQ32(command);
                command = "ALTER TABLE treatplan ADD SigIsTopaz int default '0' not null";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('TreatPlanPriorityForDeclined','0')";
                Db.nonQ32(command);
                try
                {
                    command = "SELECT COUNT(*) FROM supplyneeded";
                    Db.getTable(command);
                    //The table exists at this point.
                    command = "DROP TABLE supplyneeded PURGE";
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar19)
                {
                }

                //The table does not exist
                command = "CREATE TABLE supplyneeded (\r\n" + 
                "\t\t\t\t\t\tSupplyNeededNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tDateAdded DATE default TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (SupplyNeededNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ32(command);
                try
                {
                    command = "SELECT COUNT(*) FROM supplier";
                    Db.getTable(command);
                    //The table exists at this point.
                    command = "DROP TABLE supplier PURGE";
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar20)
                {
                }

                //The table does not exist.
                command = "CREATE TABLE supplier (\r\n" + 
                "\t\t\t\t\t\tSupplierNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPhone varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCustomerId varchar2(255),\r\n" + 
                "\t\t\t\t\t\tWebsite varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tUserName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPassword varchar2(255),\r\n" + 
                "\t\t\t\t\t\tNote varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (SupplierNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ32(command);
                try
                {
                    command = "SELECT COUNT(*) FROM supply";
                    Db.getTable(command);
                    //The table exists at this point.
                    command = "DROP TABLE supply PURGE";
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar21)
                {
                }

                //The table does not exist.
                command = "CREATE TABLE supply (\r\n" + 
                "\t\t\t\t\t\tSupplyNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSupplierNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCatalogNumber varchar2(255),\r\n" + 
                "\t\t\t\t\t\tDescript varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCategory int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tItemOrder int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLevelDesired BINARY_FLOAT default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsHidden int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPrice BINARY_DOUBLE default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (SupplyNum)\r\n" + 
                "\t\t\t\t\t\t)";
                //the above definition has changed repeatedly.  You might need to drop the table and do it again:
                Db.nonQ32(command);
                command = "CREATE INDEX SUPPLY_SUPPLIERNUM ON supply (SupplierNum)";
                Db.nonQ32(command);
                try
                {
                    command = "SELECT COUNT(*) FROM supplyorder";
                    Db.getTable(command);
                    //The table exists at this point.
                    command = "DROP TABLE supplyorder PURGE";
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar22)
                {
                }

                //The table does not exist.
                command = "CREATE TABLE supplyorder (\r\n" + 
                "\t\t\t\t\t\tSupplyOrderNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSupplierNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDatePlaced date default TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tAmountTotal BINARY_DOUBLE default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (SupplyOrderNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ32(command);
                command = "CREATE INDEX SUPPLYORDER_SUPPLIERNUM ON supplyorder (SupplierNum)";
                Db.nonQ32(command);
                try
                {
                    command = "SELECT COUNT(*) FROM supplyorderitem";
                    Db.getTable(command);
                    //The table exists at this point.
                    command = "DROP TABLE supplyorderitem PURGE";
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar23)
                {
                }

                //The table does not exist.
                command = "CREATE TABLE supplyorderitem (\r\n" + 
                "\t\t\t\t\t\tSupplyOrderItemNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSupplyOrderNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSupplyNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tQty int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPrice BINARY_DOUBLE NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (SupplyOrderItemNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ32(command);
                command = "CREATE INDEX SUPPLYORDERITEM_SUPPLYORDERNUM ON supplyorderitem (SupplyOrderNum)";
                Db.nonQ32(command);
                command = "CREATE INDEX SUPPLYORDERITEM_SUPPLYNUM ON supplyorderitem (SupplyNum)";
                Db.nonQ32(command);
                try
                {
                    //supplyorder was altered later.
                    command = "SELECT COUNT(*) FROM tasksubscription";
                    Db.getTable(command);
                    //The table exists at this point.
                    command = "DROP TABLE tasksubscription PURGE";
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar24)
                {
                }

                //The table does not exist.
                command = "CREATE TABLE tasksubscription (\r\n" + 
                "\t\t\t\t\t\tTaskSubscriptionNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUserNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTaskListNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (TaskSubscriptionNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ32(command);
                command = "CREATE INDEX TASKSUBSCRIPTION_USERNUM ON tasksubscription (UserNum)";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('TasksCheckOnStartup','0')";
                Db.nonQ32(command);
                try
                {
                    command = "SELECT COUNT(*) FROM taskancestor";
                    Db.getTable(command);
                    //The table exists at this point.
                    command = "DROP TABLE taskancestor PURGE";
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar25)
                {
                }

                //The table does not exist.
                command = "CREATE TABLE taskancestor (\r\n" + 
                "\t\t\t\t\t\tTaskAncestorNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTaskNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTaskListNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (TaskAncestorNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ32(command);
                command = "CREATE INDEX TASKANCESTOR_TASKNUM ON taskancestor (TaskNum)";
                Db.nonQ32(command);
                command = "CREATE INDEX TASKANCESTOR_TASKLISTNUM ON taskancestor (TaskListNum)";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('TaskAncestorsAllSetInVersion55','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('ApptExclamationShowForUnsentIns','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference VALUES('ProviderIncomeTransferShows','0')";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.5.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_6_1();
    }

    private static void to5_6_1() throws Exception {
        if (FromVersion < new Version("5.6.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE computerpref ADD TaskKeepListHidden tinyint(1) NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE computerpref ADD TaskDock int NOT NULL default '0'";
                Db.nonQ32(command);
                command = "ALTER TABLE computerpref ADD TaskX int NOT NULL default '900'";
                Db.nonQ32(command);
                command = "ALTER TABLE computerpref ADD TaskY int NOT NULL default '625'";
                Db.nonQ32(command);
                //added after r1182
                command = "UPDATE preference SET ValueString = 'http://70.90.133.65:1942/WebServiceCustomerUpdates/Service1.asmx' WHERE PrefName = 'UpdateServerAddress'";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('ClaimAttachExportPath','C:\\\\TempImages\\\\')";
                Db.nonQ32(command);
                //added after r1239
                command = "DROP TABLE IF EXISTS statement";
                Db.nonQ32(command);
                command = "CREATE TABLE statement (\r\n" + 
                "\t\t\t\t\t\t\tStatementNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\t\tPatNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tDateSent date NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tDateRangeFrom date NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tDateRangeTo date NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tNote text,\r\n" + 
                "\t\t\t\t\t\t\tNoteBold text,\r\n" + 
                "\t\t\t\t\t\t\tMode_ tinyint unsigned NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tHidePayment tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tSinglePatient tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tIntermingled tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tIsSent tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tDocNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tPRIMARY KEY (StatementNum),\r\n" + 
                "\t\t\t\t\t\t\tINDEX (PatNum),\r\n" + 
                "\t\t\t\t\t\t\tINDEX (DocNum)\r\n" + 
                "\t\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS docattach";
                Db.nonQ32(command);
                command = "SELECT MAX(ItemOrder) FROM definition WHERE Category=18";
                int defnum = PIn.int(Db.getCount(command));
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemValue,ItemColor,IsHidden) " + "VALUES(18," + POut.Long(defnum + 1) + ",'Statements','S',0,0)";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('AutoResetTPEntryStatus','1')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('ShowAccountFamilyCommEntries','1')";
                Db.nonQ32(command);
                //convert all existing statement commlog entries to statement objects
                command = "SELECT * FROM commlog WHERE IsStatementSent= 1";
                DataTable table = Db.getTable(command);
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    command = "INSERT INTO statement (PatNum,DateSent,DateRangeFrom,DateRangeTo,Note,NoteBold,Mode_," + "IsSent) VALUES (" + table.Rows[i]["PatNum"].ToString() + "," + POut.Date(PIn.Date(table.Rows[i]["CommDateTime"].ToString())) + "," + POut.date(new DateTime(1, 1, 1)) + "," + POut.date(new DateTime(2200, 1, 1)) + "," + "'" + POut.String(PIn.String(table.Rows[i]["Note"].ToString())) + "'," + "'',";
                    if (StringSupport.equals(table.Rows[i]["Mode_"].ToString(), "4"))
                    {
                        //InPerson
                        command += "1,";
                    }
                    else if (StringSupport.equals(table.Rows[i]["Mode_"].ToString(), "1"))
                    {
                        //Email
                        command += "2,";
                    }
                    else
                    {
                        //mail
                        command += "0,";
                    }  
                    command += "1)";
                    Db.nonQ32(command);
                }
                command = "DELETE FROM commlog WHERE IsStatementSent=1";
                Db.nonQ32(command);
                command = "ALTER TABLE dunning ADD MessageBold text";
                Db.nonQ32(command);
                command = "UPDATE dunning SET MessageBold=''";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('BillingDefaultsLastDays','45')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('BillingDefaultsIntermingle','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('BillingDefaultsNote','')";
                Db.nonQ32(command);
                command = "ALTER TABLE insplan ADD CodeSubstNone tinyint(1) NOT NULL";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('BackupExcludeImageFolder','0')";
                Db.nonQ32(command);
                command = "ALTER TABLE task ADD UserNum int NOT NULL";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('InsDefaultPPOpercent','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('TimecardUsersDontEditOwnCard','0')";
                Db.nonQ32(command);
                command = "ALTER TABLE task ADD DateTimeFinished datetime NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE task SET DateTimeFinished =" + POut.Date(DateTime.MinValue);
                //equiv to:UPDATE task SET DateTimeFinished ='0001-01-01'
                Db.nonQ32(command);
                command = "ALTER TABLE signal ADD TaskNum int NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE signal ADD INDEX indexAckTime (AckTime)";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('EmailUseSSL','0')";
                Db.nonQ32(command);
                command = "DELETE FROM preference WHERE PrefName='PrintSimpleStatements'";
                Db.nonQ32(command);
                command = "DELETE FROM preference WHERE PrefName='BoldFamilyAccountBalanceView'";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('PayPlansBillInAdvanceDays','10')";
                Db.nonQ32(command);
                command = "ALTER TABLE patient ADD PayPlanDue double NOT NULL";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE computerpref ADD TaskKeepListHidden int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE computerpref ADD TaskDock int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE computerpref ADD TaskX int default '900' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE computerpref ADD TaskY int default '625' NOT NULL";
                Db.nonQ32(command);
                //added after r1182
                command = "UPDATE preference SET ValueString = 'http://70.90.133.65:1942/WebServiceCustomerUpdates/Service1.asmx' WHERE PrefName = 'UpdateServerAddress'";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('ClaimAttachExportPath','C:\\\\TempImages\\\\')";
                Db.nonQ32(command);
                try
                {
                    //added after r1239
                    command = "SELECT COUNT(*) FROM statement";
                    Db.getTable(command);
                    //The table exists at this point.
                    command = "DROP TABLE statement PURGE";
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar26)
                {
                }

                //The table does not exist.
                command = "CREATE TABLE statement (\r\n" + 
                "\t\t\t\t\t\t\tStatementNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tPatNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tDateSent date default TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tDateRangeFrom date default TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tDateRangeTo date default TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tNote varchar2(4000),\r\n" + 
                "\t\t\t\t\t\t\tNoteBold varchar2(4000),\r\n" + 
                "\t\t\t\t\t\t\tMode_ int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tHidePayment int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tSinglePatient int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tIntermingled int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tIsSent int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tDocNum int default \'0\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\tPRIMARY KEY (StatementNum)\r\n" + 
                "\t\t\t\t\t\t\t)";
                Db.nonQ32(command);
                command = "CREATE INDEX STATEMENT_PATNUM ON statement (PatNum)";
                Db.nonQ32(command);
                command = "CREATE INDEX STATEMENT_DOCNUM ON statement (DocNum)";
                Db.nonQ32(command);
                try
                {
                    command = "SELECT COUNT(*) FROM docattach";
                    Db.getTable(command);
                    //The table exists at this point.
                    command = "DROP TABLE docattach PURGE";
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar27)
                {
                }

                //The table does not exist.
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemValue,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),18," + "(SELECT MAX(ItemOrder)+1 FROM definition WHERE Category=18),'Statements','S',0,0)";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('AutoResetTPEntryStatus','1')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('ShowAccountFamilyCommEntries','1')";
                Db.nonQ32(command);
                //convert all existing statement commlog entries to statement objects
                command = "INSERT INTO statement (PatNum,DateSent,DateRangeFrom,DateRangeTo,Note,NoteBold,Mode_,IsSent) " + "SELECT PatNum,CommDateTime,TO_DATE('0001-01-01','YYYY-MM-DD'),TO_DATE('2200-01-01','YYYY-MM-DD'),Note,''," + "CASE Mode_ WHEN 4 THEN 1 WHEN 1 THEN 2 ELSE 0 END,1 " + "FROM commlog " + "WHERE IsStatementSent=1";
                Db.nonQ32(command);
                command = "DELETE FROM commlog WHERE IsStatementSent=1";
                Db.nonQ32(command);
                command = "ALTER TABLE dunning ADD MessageBold varchar2(4000)";
                Db.nonQ32(command);
                command = "UPDATE dunning SET MessageBold=''";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('BillingDefaultsLastDays','45')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('BillingDefaultsIntermingle','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('BillingDefaultsNote','')";
                Db.nonQ32(command);
                command = "ALTER TABLE insplan ADD CodeSubstNone int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('BackupExcludeImageFolder','0')";
                Db.nonQ32(command);
                command = "ALTER TABLE task ADD UserNum int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('InsDefaultPPOpercent','0')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('TimecardUsersDontEditOwnCard','0')";
                Db.nonQ32(command);
                command = "ALTER TABLE task ADD DateTimeFinished timestamp\r\n" + 
                "\t\t\t\t\t\tdefault TO_TIMESTAMP(\'0001-01-01 00:00:00\',\'YYYY-MM-DD HH24:MI:SS\')  NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE task SET DateTimeFinished=TO_DATE('0001-01-01','YYYY-MM-DD')";
                Db.nonQ32(command);
                command = "ALTER TABLE signal ADD TaskNum int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "CREATE INDEX SIGNAL_ACKTIME ON signal (AckTime)";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('EmailUseSSL','0')";
                Db.nonQ32(command);
                command = "DELETE FROM preference WHERE PrefName='PrintSimpleStatements'";
                Db.nonQ32(command);
                command = "DELETE FROM preference WHERE PrefName='BoldFamilyAccountBalanceView'";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('PayPlansBillInAdvanceDays','10')";
                Db.nonQ32(command);
                command = "ALTER TABLE patient ADD PayPlanDue BINARY_DOUBLE default '0' NOT NULL";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.6.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_6_18();
    }

    private static void to5_6_18() throws Exception {
        if (FromVersion < new Version("5.6.18.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(0,7,'Insurance Payment',-16744448,0)";
                //Green
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(0,8,'Received Ins Claim',-5220352,0)";
            }
            else
            {
                //drkOrange
                //oracle
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) \r\n" + 
                "\t\t\t\t\t\tVALUES((SELECT MAX(DefNum)+1 FROM definition),0,7,\'Insurance Payment\',-16744448,0)";
                //Green
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) \r\n" + 
                "\t\t\t\t\t\tVALUES((SELECT MAX(DefNum)+1 FROM definition),0,8,\'Received Ins Claim\',-5220352,0)";
            } 
            //drkOrange
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '5.6.18.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_6_22();
    }

    private static void to5_6_22() throws Exception {
        if (FromVersion < new Version("5.6.22.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE paysplit ADD INDEX (ProcNum)";
                try
                {
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar28)
                {
                }

                command = "ALTER TABLE paysplit ADD INDEX (PayNum)";
                try
                {
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar29)
                {
                }
            
            }
            else
            {
                //oracle
                command = "CREATE INDEX PAYSPLIT_PROCNUM ON paysplit (ProcNum)";
                Db.nonQ32(command);
                command = "CREATE INDEX PAYSPLIT_PAYNUM ON paysplit (PayNum)";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.6.22.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_6_28();
    }

    private static void to5_6_28() throws Exception {
        if (FromVersion < new Version("5.6.28.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                //Digora Bridge---------------------------------------------------------------------------
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Digora', " + "'Digora from www.soredex.com', " + "'0', " + "'', " + "'', " + "'" + POut.string("No path is needed.") + "')";
                int programNum = Db.nonQ32(command,true);
                //we now have a ProgramNum to work with
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ32(command);
                command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.Long(programNum) + "', " + "'" + POut.Long(((Enum)ToolBarsAvail.ChartModule).ordinal()) + "', " + "'Digora')";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                //Digora Bridge---------------------------------------------------------------------------
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "(SELECT MAX(ProgramNum)+1 FROM program)," + "'Digora', " + "'Digora from www.soredex.com', " + "'0', " + "'', " + "'', " + "'No path is needed.')";
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum)+1 FROM programproperty)," + "(SELECT MAX(ProgramNum) FROM program)," + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ32(command);
                command = "INSERT INTO toolbutitem (ToolButItemNum,ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "(SELECT MAX(ToolButItemNum)+1 FROM toolbutitem)," + "(SELECT MAX(ProgramNum) FROM program), " + "'" + POut.Long(((Enum)ToolBarsAvail.ChartModule).ordinal()) + "', " + "'Digora')";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.6.28.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_6_31();
    }

    private static void to5_6_31() throws Exception {
        if (FromVersion < new Version("5.6.31.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('ClaimFormTreatDentSaysSigOnFile','0')";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('ClaimFormTreatDentSaysSigOnFile','0')";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.6.31.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_7_1();
    }

    private static void to5_7_1() throws Exception {
        if (FromVersion < new Version("5.7.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('StatementSummaryShowInsInfo','1')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('IntermingleFamilyDefault','0')";
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemColor,IsHidden) VALUES(0,9,'Received Pre-Auth',-8388480,0)";
                //Purple
                Db.nonQ32(command);
                command = "ALTER TABLE commlog ADD INDEX (PatNum)";
                try
                {
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar30)
                {
                }

                command = "ALTER TABLE claim ADD AttachedImages int NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE claim ADD AttachedModels int NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE claim ADD AttachedFlags varchar(255)";
                Db.nonQ32(command);
                command = "ALTER TABLE claim ADD AttachmentID varchar(255)";
                Db.nonQ32(command);
                //new claim form fields for attachments---------------------------------
                command = "SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD8'";
                DataTable table = Db.getTable(command);
                if (table.Rows.Count > 0)
                {
                    String claimFormNum = table.Rows[0][0].ToString();
                    command = "INSERT INTO claimformitem (ClaimFormNum,ImageFileName,FieldName,FormatString" + ",XPos,YPos,Width,Height) VALUES(" + claimFormNum + ",'','AttachedImagesNum','',746,779,27,14)";
                    Db.nonQ32(command);
                    command = "INSERT INTO claimformitem (ClaimFormNum,ImageFileName,FieldName,FormatString" + ",XPos,YPos,Width,Height) VALUES(" + claimFormNum + ",'','AttachedModelsNum','',796,779,27,14)";
                    Db.nonQ32(command);
                }
                 
                //Appt time override----------------------------------------------------
                //This query uses nested CONCATs for compatibility with Oracle database:
                //Also, an assumption is made that the user is on 10min increments.  This is a somewhat safe assumption, since 15 minute offices will not track their time as closely.  The inconvenience will be minor in any case.
                command = "UPDATE appointment SET Note=CONCAT('AddTime: ',CONCAT(AddTime,CONCAT('0',CONCAT(' ',Note)))) WHERE AddTime !=0";
                Db.nonQ32(command);
                command = "UPDATE appointment SET AddTime=0";
                Db.nonQ32(command);
                command = "ALTER TABLE appointment CHANGE AddTime TimeLocked tinyint(1) NOT NULL";
                //bool
                Db.nonQ32(command);
                command = "UPDATE procedurelog SET UnitQty=1 WHERE UnitQty=0";
                Db.nonQ32(command);
                command = "DELETE FROM signal";
                Db.nonQ32(command);
                //currently, the max length will end up being about 100, but that wouldn't leave much room for expansion with only 256.
                command = "ALTER TABLE signal CHANGE ITypes ITypes text";
                Db.nonQ32(command);
                command = "ALTER TABLE userod ADD TaskListInBox int NOT NULL";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('StatementSummaryShowInsInfo','1')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('IntermingleFamilyDefault','0')";
                Db.nonQ32(command);
                command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemColor,IsHidden) " + "VALUES((SELECT MAX(DefNum)+1 FROM definition),0,9,'Received Pre-Auth',-8388480,0)";
                //Purple
                Db.nonQ32(command);
                command = "CREATE INDEX COMMLOG_PATNUM ON commlog (PatNum)";
                Db.nonQ32(command);
                command = "ALTER TABLE claim ADD AttachedImages int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE claim ADD AttachedModels int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE claim ADD AttachedFlags varchar2(255)";
                Db.nonQ32(command);
                command = "ALTER TABLE claim ADD AttachmentID varchar2(255)";
                Db.nonQ32(command);
                //new claim form fields for attachments---------------------------------
                command = "SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD8'";
                DataTable table = Db.getTable(command);
                if (table.Rows.Count > 0)
                {
                    String claimFormNum = table.Rows[0][0].ToString();
                    command = "INSERT INTO claimformitem (ClaimFormNum,ImageFileName,FieldName,FormatString" + ",XPos,YPos,Width,Height) VALUES(" + claimFormNum + ",'','AttachedImagesNum','',746,779,27,14)";
                    Db.nonQ32(command);
                    command = "INSERT INTO claimformitem (ClaimFormNum,ImageFileName,FieldName,FormatString" + ",XPos,YPos,Width,Height) VALUES(" + claimFormNum + ",'','AttachedModelsNum','',796,779,27,14)";
                    Db.nonQ32(command);
                }
                 
                //Appt time override----------------------------------------------------
                //Also, an assumption is made that the user is on 10min increments.  This is a somewhat safe assumption, since 15 minute offices will not track their time as closely.  The inconvenience will be minor in any case.
                command = "UPDATE appointment SET Note=CONCAT('AddTime: ',CONCAT(AddTime,CONCAT('0',CONCAT(' ',Note)))) WHERE AddTime !=0";
                Db.nonQ32(command);
                command = "UPDATE appointment SET AddTime=0";
                Db.nonQ32(command);
                command = "ALTER TABLE appointment RENAME COLUMN AddTime TO TimeLocked";
                Db.nonQ32(command);
                command = "ALTER TABLE appointment MODIFY (TimeLocked int default '0')";
                //already not null
                Db.nonQ32(command);
                command = "UPDATE procedurelog SET UnitQty=1 WHERE UnitQty=0";
                Db.nonQ32(command);
                command = "DELETE FROM signal";
                Db.nonQ32(command);
                //currently, the max length will end up being about 100, but that wouldn't leave much room for expansion with only 256.
                command = "ALTER TABLE signal MODIFY (ITypes varchar2(4000))";
                Db.nonQ32(command);
                command = "ALTER TABLE userod ADD TaskListInBox int default '0' NOT NULL";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.7.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_7_3();
    }

    private static void to5_7_3() throws Exception {
        if (FromVersion < new Version("5.7.3.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('DockPhonePanelShow','0')";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('DockPhonePanelShow','0')";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.7.3.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_7_4();
    }

    private static void to5_7_4() throws Exception {
        if (FromVersion < new Version("5.7.4.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('ClaimFormTreatDentSaysSigOnFile','0')";
                try
                {
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar31)
                {
                }

                //might already exist
                command = "ALTER TABLE employee ADD PhoneExt int NOT NULL";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference (PrefName,ValueString) VALUES ('ClaimFormTreatDentSaysSigOnFile','0')";
                try
                {
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar32)
                {
                }

                //might already exist
                command = "ALTER TABLE employee ADD PhoneExt int default '0' NOT NULL";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.7.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_7_15();
    }

    private static void to5_7_15() throws Exception {
        if (FromVersion < new Version("5.7.15.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE procedurelog ADD INDEX (PlannedAptNum)";
                try
                {
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar33)
                {
                }
            
            }
            else
            {
                //oracle
                command = "CREATE INDEX PROCEDURELOG_PLANNEDAPTNUM ON procedurelog (PlannedAptNum)";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.7.15.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_8_1();
    }

    private static void to5_8_1() throws Exception {
        if (FromVersion < new Version("5.8.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS site";
                Db.nonQ32(command);
                command = "CREATE TABLE site (\r\n" + 
                "\t\t\t\t\t\tSiteNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255),\r\n" + 
                "\t\t\t\t\t\tNote text,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (SiteNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "INSERT INTO site (Description,Note) SELECT SchoolName,SchoolCode FROM school";
                Db.nonQ32(command);
                command = "INSERT INTO site (Description,Note) SELECT distinct GradeSchool,'' FROM patient WHERE GradeSchool !='' AND NOT EXISTS(SELECT * FROM site WHERE site.Description=patient.GradeSchool)";
                Db.nonQ32(command);
                command = "ALTER TABLE patient ADD SiteNum int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE patient SET patient.SiteNum= (SELECT site.SiteNum FROM site WHERE site.Description=patient.GradeSchool)";
                Db.nonQ32(command);
                command = "ALTER TABLE patient DROP COLUMN GradeSchool";
                Db.nonQ32(command);
                command = "ALTER TABLE patient DROP COLUMN PrimaryTeeth";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurelog ADD SiteNum int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE preference ADD Comments text default ''";
                Db.nonQ32(command);
                command = "UPDATE preference SET Comments=''";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('TitleBarShowSite','0','Shows the site.Description of the patient.Site in the main title bar.')";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS pharmacy";
                Db.nonQ32(command);
                command = "CREATE TABLE pharmacy (\r\n" + 
                "\t\t\t\t\t\tPharmacyNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tPharmID varchar(255),\r\n" + 
                "\t\t\t\t\t\tStoreName varchar(255),\r\n" + 
                "\t\t\t\t\t\tPhone varchar(255),\r\n" + 
                "\t\t\t\t\t\tFax varchar(255),\r\n" + 
                "\t\t\t\t\t\tAddress varchar(255),\r\n" + 
                "\t\t\t\t\t\tAddress2 varchar(255),\r\n" + 
                "\t\t\t\t\t\tCity varchar(255),\r\n" + 
                "\t\t\t\t\t\tState varchar(255),\r\n" + 
                "\t\t\t\t\t\tZip varchar(255),\r\n" + 
                "\t\t\t\t\t\tNote text,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (PharmacyNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "ALTER TABLE rxpat ADD PharmacyNum int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE clinic ADD InsBillingProv int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "SELECT ValueString FROM preference WHERE PrefName= 'InsBillingProv'";
                DataTable table = Db.getTable(command);
                int practiceBillingProv = PIn.Int(table.Rows[0][0].ToString());
                command = "UPDATE clinic SET InsBillingProv='" + practiceBillingProv.ToString() + "'";
                Db.nonQ32(command);
                command = "ALTER TABLE displayfield ADD Category int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS sheet";
                Db.nonQ32(command);
                command = "CREATE TABLE sheet (\r\n" + 
                "\t\t\t\t\t\tSheetNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tSheetType int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeSheet datetime default \'0001-01-01\' NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFontSize float NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFontName varchar(255),\r\n" + 
                "\t\t\t\t\t\tWidth int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHeight int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsLandscape tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tInternalNote text,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (SheetNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (PatNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS sheetfield";
                Db.nonQ32(command);
                command = "CREATE TABLE sheetfield (\r\n" + 
                "\t\t\t\t\t\tSheetFieldNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tSheetNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFieldType int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFieldName varchar(255),\r\n" + 
                "\t\t\t\t\t\tFieldValue text,\r\n" + 
                "\t\t\t\t\t\tFontSize float NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFontName varchar(255),\r\n" + 
                "\t\t\t\t\t\tFontIsBold tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tXPos int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tYPos int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tWidth int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHeight int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tGrowthBehavior int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (SheetFieldNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (SheetNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS sheetdef";
                Db.nonQ32(command);
                command = "CREATE TABLE sheetdef (\r\n" + 
                "\t\t\t\t\t\tSheetDefNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255),\r\n" + 
                "\t\t\t\t\t\tSheetType int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFontSize float NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFontName varchar(255),\r\n" + 
                "\t\t\t\t\t\tWidth int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHeight int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsLandscape tinyint NOT NULL,\t\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (SheetDefNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS sheetfielddef";
                Db.nonQ32(command);
                command = "CREATE TABLE sheetfielddef (\r\n" + 
                "\t\t\t\t\t\tSheetFieldDefNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tSheetDefNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFieldType int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFieldName varchar(255),\r\n" + 
                "\t\t\t\t\t\tFieldValue varchar(255),\r\n" + 
                "\t\t\t\t\t\tFontSize float NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFontName varchar(255),\r\n" + 
                "\t\t\t\t\t\tFontIsBold tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tXPos int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tYPos int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tWidth int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHeight int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tGrowthBehavior int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (SheetFieldDefNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (SheetDefNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "ALTER TABLE referral ADD Slip int default '0' NOT NULL";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('LabelPatientDefaultSheetDefNum','0','0 indicates default.  Otherwise, foreign key to SheetDefNum.')";
                Db.nonQ32(command);
            }
            else
            {
            } 
            //oracle
            command = "UPDATE preference SET ValueString = '5.8.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_8_2();
    }

    private static void to5_8_2() throws Exception {
        if (FromVersion < new Version("5.8.2.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE fee ADD INDEX (CodeNum)";
                try
                {
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar34)
                {
                }

                command = "UPDATE claim SET AttachedFlags='Mail' WHERE AttachedFlags IS NULL";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "CREATE INDEX FEE_CODENUM ON fee (CodeNum)";
                Db.nonQ32(command);
                command = "UPDATE claim SET AttachedFlags='Mail' WHERE AttachedFlags IS NULL";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '5.8.2.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to5_9_1();
    }

    private static void to5_9_1() throws Exception {
        if (FromVersion < new Version("5.9.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DELETE FROM preference WHERE PrefName='RxOrientVert'";
                Db.nonQ32(command);
                command = "DELETE FROM preference WHERE PrefName='RxAdjustRight'";
                Db.nonQ32(command);
                command = "DELETE FROM preference WHERE PrefName='RxAdjustDown'";
                Db.nonQ32(command);
                command = "DELETE FROM preference WHERE PrefName='RxGeneric'";
                Db.nonQ32(command);
                command = "ALTER TABLE rxdef ADD IsControlled tinyint NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE rxpat ADD IsControlled tinyint NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE rxdef SET IsControlled = 1";
                Db.nonQ32(command);
                //UAppoint Bridge---------------------------------------------------------------------------
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'UAppoint', " + "'UAppoint from www.uappoint.com', " + "'0', " + "'" + POut.string("https://s0.uappoint.com/Sync") + "', " + "'', " + "'')";
                int programNum = Db.nonQ32(command,true);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.Long(programNum) + "', " + "'Username', " + "'')";
                Db.nonQ32(command);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.Long(programNum) + "', " + "'Password', " + "'')";
                Db.nonQ32(command);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.Long(programNum) + "', " + "'WorkstationName', " + "'')";
                Db.nonQ32(command);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.Long(programNum) + "', " + "'IntervalSeconds', " + "'15')";
                Db.nonQ32(command);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.Long(programNum) + "', " + "'DateTimeLastUploaded', " + "'')";
                Db.nonQ32(command);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.Long(programNum) + "', " + "'SynchStatus', " + "'')";
                Db.nonQ32(command);
                command = "ALTER TABLE patient ADD DateTStamp TimeStamp";
                Db.nonQ32(command);
                command = "UPDATE patient SET DateTStamp=NOW()";
                Db.nonQ32(command);
                command = "ALTER TABLE provider ADD DateTStamp TimeStamp";
                Db.nonQ32(command);
                command = "UPDATE provider SET DateTStamp=NOW()";
                Db.nonQ32(command);
                command = "ALTER TABLE appointment ADD DateTStamp TimeStamp";
                Db.nonQ32(command);
                command = "UPDATE appointment SET DateTStamp=NOW()";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS deletedobject";
                Db.nonQ32(command);
                command = "CREATE TABLE deletedobject (\r\n" + 
                "\t\t\t\t\t\tDeletedObjectNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tObjectNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObjectType int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTStamp TimeStamp,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (DeletedObjectNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "ALTER TABLE schedule ADD DateTStamp TimeStamp";
                Db.nonQ32(command);
                command = "UPDATE schedule SET DateTStamp=NOW()";
                Db.nonQ32(command);
                command = "ALTER TABLE operatory ADD DateTStamp TimeStamp";
                Db.nonQ32(command);
                command = "UPDATE operatory SET DateTStamp=NOW()";
                Db.nonQ32(command);
                command = "ALTER TABLE recall ADD DateTStamp TimeStamp";
                Db.nonQ32(command);
                command = "UPDATE recall SET DateTStamp=NOW()";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurecode ADD DateTStamp TimeStamp";
                Db.nonQ32(command);
                command = "UPDATE procedurecode SET DateTStamp=NOW()";
                Db.nonQ32(command);
                command = "ALTER TABLE insplan ADD IsHidden tinyint NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE carrier ADD IsHidden tinyint NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE insplan ADD INDEX (CarrierNum)";
                try
                {
                    Db.nonQ32(command);
                }
                catch (Exception __dummyCatchVar35)
                {
                }

                try
                {
                }
                catch (Exception __dummyCatchVar36)
                {
                }

                //this functionality is also duplicated in SheetUtil.GetImagePath, but we try very hard not to use external routines during conversions.
                /*
                						if(!PrefC.UsingAtoZfolder) {
                							throw new ApplicationException("Must be using AtoZ folders.");
                						}
                						string imagePath=ODFileUtils.CombinePaths(FormPath.GetPreferredImagePath(),"SheetImages");
                						if(!Directory.Exists(imagePath)) {
                							Directory.CreateDirectory(imagePath);
                						}
                						Properties.Resources.Med_History.Save(ODFileUtils.CombinePaths(imagePath,"Med History.gif"));
                						Properties.Resources.Patient_Info.Save(ODFileUtils.CombinePaths(imagePath,"Patient Info.gif"));*/
                command = "DELETE FROM preference WHERE PrefName='ShowNotesInAccount'";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('AllowSettingProcsComplete','0','')";
                Db.nonQ32(command);
            }
            else
            {
            } 
            //oracle
            command = "UPDATE preference SET ValueString = '5.9.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_0_1();
    }

    private static void to6_0_1() throws Exception {
        if (FromVersion < new Version("6.0.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallEmailSubject','Continuing Care Reminder','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallStatusMailed','0','FK to definition.DefNum')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallStatusEmailed','0','FK to definition.DefNum')";
                Db.nonQ32(command);
                command = "ALTER TABLE toothinitial ADD DrawingSegment text";
                Db.nonQ32(command);
                command = "ALTER TABLE toothinitial ADD ColorDraw int NOT NULL";
                Db.nonQ32(command);
                //Dolphin bridge------------------------------------------------------------------------------------
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Dolphin', " + "'Dolphin from dolphinimaging.com', " + "'0', " + "'" + POut.string("C:\\Dolphin\\") + "', " + "'', " + "'The path is to a folder rather than to a specific file.  Filename property refers to the input filename used to transer data.')";
                int programNum = Db.nonQ32(command,true);
                //we now have a ProgramNum to work with
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ32(command);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Filename', " + "'" + POut.string("C:\\Dolphin\\Import\\Import.txt") + "')";
                Db.nonQ32(command);
                command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.Long(programNum) + "', " + "'" + POut.Long(((Enum)ToolBarsAvail.ChartModule).ordinal()) + "', " + "'Dolphin')";
                Db.nonQ32(command);
                command = "ALTER TABLE appointment ADD DateTimeArrived DateTime NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE appointment SET DateTimeArrived = '0001-01-01'";
                Db.nonQ32(command);
                command = "ALTER TABLE appointment ADD DateTimeSeated DateTime NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE appointment SET DateTimeSeated = '0001-01-01'";
                Db.nonQ32(command);
                command = "ALTER TABLE appointment ADD DateTimeDismissed DateTime NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE appointment SET DateTimeDismissed = '0001-01-01'";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('AppointmentTimeArrivedTrigger','0','FK to definition.DefNum, Category ApptConfirmed.  0 indicates no trigger.')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('AppointmentTimeSeatedTrigger','0','FK to definition.DefNum, Category ApptConfirmed.  0 indicates no trigger.')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('AppointmentTimeDismissedTrigger','0','FK to definition.DefNum, Category ApptConfirmed.  0 indicates no trigger.')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('ApptModuleRefreshesEveryMinute','1','Keeps the waiting room indicator times current.')";
                Db.nonQ32(command);
                //RECALL---------------------------------------------------------------------------------------
                command = "ALTER TABLE recall ADD RecallTypeNum int NOT NULL";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS recalltype";
                Db.nonQ32(command);
                command = "CREATE TABLE recalltype (\r\n" + 
                "\t\t\t\t\t\tRecallTypeNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255),\r\n" + 
                "\t\t\t\t\t\tDefaultInterval int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTimePattern varchar(255),\r\n" + 
                "\t\t\t\t\t\tProcedures varchar(255),\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (RecallTypeNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS recalltrigger";
                Db.nonQ32(command);
                command = "CREATE TABLE recalltrigger (\r\n" + 
                "\t\t\t\t\t\tRecallTriggerNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tRecallTypeNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (RecallTriggerNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (CodeNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (RecallTypeNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                //Basic recall-----------------------------------------------------------------------------
                command = "SELECT ValueString FROM preference WHERE PrefName='RecallPattern'";
                String timepattern = Db.getCount(command);
                command = "SELECT ValueString FROM preference WHERE PrefName='RecallProcedures'";
                String procs = Db.getCount(command);
                //six months
                //always / and X, so no need to parameterize
                command = "INSERT INTO recalltype(RecallTypeNum,Description,DefaultInterval,TimePattern,Procedures) " + "VALUES(1,'Prophy'," + "393216," + "'" + timepattern + "'," + "'" + POut.string(procs) + "')";
                Db.nonQ32(command);
                command = "SELECT CodeNum FROM procedurecode WHERE SetRecall=1";
                DataTable table = Db.getTable(command);
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    command = "INSERT INTO recalltrigger(RecallTypeNum,CodeNum) VALUES(1," + table.Rows[i][0].ToString() + ")";
                    Db.nonQ32(command);
                }
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallTypeSpecialProphy','1','FK to recalltype.RecallTypeNum.')";
                Db.nonQ32(command);
                //Child recall-----------------------------------------------------------------------------
                command = "SELECT ValueString FROM preference WHERE PrefName='RecallPatternChild'";
                timepattern = Db.getCount(command);
                command = "SELECT ValueString FROM preference WHERE PrefName='RecallProceduresChild'";
                procs = Db.getCount(command);
                //always / and X, so no need to parameterize
                command = "INSERT INTO recalltype(RecallTypeNum,Description,DefaultInterval,TimePattern,Procedures) " + "VALUES(2,'Child Prophy'," + "0," + "'" + timepattern + "'," + "'" + POut.string(procs) + "')";
                Db.nonQ32(command);
                //no triggers
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallTypeSpecialChildProphy','2','FK to recalltype.RecallTypeNum.')";
                Db.nonQ32(command);
                //Perio recall-----------------------------------------------------------------------------
                command = "SELECT ValueString FROM preference WHERE PrefName='RecallPatternPerio'";
                timepattern = Db.getCount(command);
                command = "SELECT ValueString FROM preference WHERE PrefName='RecallProceduresPerio'";
                procs = Db.getCount(command);
                //4 months.
                //always / and X, so no need to parameterize
                command = "INSERT INTO recalltype(RecallTypeNum,Description,DefaultInterval,TimePattern,Procedures) " + "VALUES(3,'Perio'," + "262144," + "'" + timepattern + "'," + "'" + POut.string(procs) + "')";
                Db.nonQ32(command);
                command = "SELECT ValueString FROM preference WHERE PrefName='RecallPerioTriggerProcs'";
                String triggerStr = Db.getCount(command);
                List<String> perioCodeNums = new List<String>();
                String codeNum = new String();
                if (!StringSupport.equals(triggerStr, ""))
                {
                    String[] triggerArray = triggerStr.Split(',');
                    for (int i = 0;i < triggerArray.Length;i++)
                    {
                        command = "SELECT CodeNum FROM procedurecode WHERE ProcCode='" + POut.String(triggerArray[i]) + "'";
                        table = Db.getTable(command);
                        if (table.Rows.Count == 0)
                        {
                            continue;
                        }
                         
                        codeNum = table.Rows[0][0].ToString();
                        perioCodeNums.Add(codeNum);
                        command = "INSERT INTO recalltrigger(RecallTypeNum,CodeNum) VALUES(3," + codeNum + ")";
                        Db.nonQ32(command);
                    }
                }
                 
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallTypeSpecialPerio','3','FK to recalltype.RecallTypeNum.')";
                Db.nonQ32(command);
                if (StringSupport.equals(CultureInfo.CurrentCulture.Name, "en-US"))
                {
                    //4BWX-----------------------------------------------------------------------------
                    timepattern = "";
                    procs = "D0274";
                    //one year.
                    command = "INSERT INTO recalltype(RecallTypeNum,Description,DefaultInterval,TimePattern,Procedures) " + "VALUES(4,'4BW'," + "16777216," + "'" + timepattern + "'," + "'" + POut.string(procs) + "')";
                    Db.nonQ32(command);
                    command = "SELECT CodeNum FROM procedurecode WHERE ProcCode='D0274'";
                    table = Db.getTable(command);
                    if (table.Rows.Count > 0)
                    {
                        codeNum = table.Rows[0][0].ToString();
                        command = "INSERT INTO recalltrigger(RecallTypeNum,CodeNum) VALUES(4," + codeNum + ")";
                        Db.nonQ32(command);
                    }
                     
                    //Pano-----------------------------------------------------------------------------
                    timepattern = "";
                    procs = "D0330";
                    //5 years.
                    command = "INSERT INTO recalltype(RecallTypeNum,Description,DefaultInterval,TimePattern,Procedures) " + "VALUES(5,'Pano'," + "83886080," + "'" + timepattern + "'," + "'" + POut.string(procs) + "')";
                    Db.nonQ32(command);
                    command = "SELECT CodeNum FROM procedurecode WHERE ProcCode='D0330'";
                    table = Db.getTable(command);
                    if (table.Rows.Count > 0)
                    {
                        codeNum = table.Rows[0][0].ToString();
                        command = "INSERT INTO recalltrigger(RecallTypeNum,CodeNum) VALUES(5," + codeNum + ")";
                        Db.nonQ32(command);
                    }
                     
                }
                 
                //Set existing recall objects to new types--------------------------------------------------
                command = "UPDATE recall SET RecallTypeNum=1 WHERE RecallTypeNum=0";
                Db.nonQ32(command);
                for (int i = 0;i < perioCodeNums.Count;i++)
                {
                    command = "UPDATE recall SET RecallTypeNum=3 WHERE EXISTS(" + "SELECT * FROM procedurelog WHERE procedurelog.PatNum=recall.PatNum " + "AND procedurelog.CodeNum=" + perioCodeNums[i] + " " + "AND procedurelog.ProcStatus=2)";
                    //complete
                    Db.nonQ32(command);
                }
                //an automatic synch would violate the rule of not calling external methods.
                //Recalls.SynchAllPatients();
                CodeBase.MsgBoxCopyPaste msgbox = new CodeBase.MsgBoxCopyPaste("When this conversion is done, you will also need to resynchronize all patient recalls from inside the Setup | Recall Types window.");
                msgbox.TopMost = true;
                msgbox.ShowDialog();
                //Get rid of unused prefs-----------------------------------------------------------------
                command = "DELETE FROM preference WHERE PrefName='RecallPattern'";
                Db.nonQ32(command);
                command = "DELETE FROM preference WHERE PrefName='RecallProcedures'";
                Db.nonQ32(command);
                command = "DELETE FROM preference WHERE PrefName='RecallPatternChild'";
                Db.nonQ32(command);
                command = "DELETE FROM preference WHERE PrefName='RecallProceduresChild'";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurecode DROP SetRecall";
                Db.nonQ32(command);
                command = "ALTER TABLE procedurecode DROP RemoveTooth";
                Db.nonQ32(command);
                command = "DELETE FROM preference WHERE PrefName='RecallBW'";
                Db.nonQ32(command);
                command = "DELETE FROM preference WHERE PrefName='RecallFMXPanoProc'";
                Db.nonQ32(command);
                command = "DELETE FROM preference WHERE PrefName='RecallDisableAutoFilms'";
                Db.nonQ32(command);
                command = "DELETE FROM preference WHERE PrefName='RecallFMXPanoYrInterval'";
                Db.nonQ32(command);
                command = "DELETE FROM preference WHERE PrefName='RecallDisablePerioAlt'";
                Db.nonQ32(command);
                command = "DELETE FROM preference WHERE PrefName='RecallPatternPerio'";
                Db.nonQ32(command);
                command = "DELETE FROM preference WHERE PrefName='RecallProceduresPerio'";
                Db.nonQ32(command);
                command = "DELETE FROM preference WHERE PrefName='RecallPerioTriggerProcs'";
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemValue,ItemColor,IsHidden) VALUES (21,8,'Family Module Referral','',-2823993,0)";
                Db.nonQ32(command);
                command = "ALTER TABLE payplan ADD CompletedAmt double NOT NULL";
                Db.nonQ32(command);
                command = "UPDATE payplan SET CompletedAmt=(SELECT SUM(Principal) FROM payplancharge WHERE payplan.PayPlanNum=payplancharge.PayPlanNum)";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('ChartQuickAddHideAmalgam','0','')";
                Db.nonQ32(command);
            }
            else
            {
            } 
            //oracle
            command = "UPDATE preference SET ValueString = '6.0.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_0_2();
    }

    private static void to6_0_2() throws Exception {
        if (FromVersion < new Version("6.0.2.0"))
        {
            String command = new String();
            command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallTypesShowingInList','1,3','Comma-delimited list. FK to recalltype.RecallTypeNum.')";
            //1=prophy,3=perio
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '6.0.2.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_1_1();
    }

    private static void to6_1_1() throws Exception {
        if (FromVersion < new Version("6.1.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS plannedappt";
                Db.nonQ32(command);
                command = "CREATE TABLE plannedappt (\r\n" + 
                "\t\t\t\t\t\tPlannedApptNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tPatNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAptNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tItemOrder int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (PlannedApptNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (PatNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (AptNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "SELECT PatNum,NextAptNum FROM patient WHERE NextAptNum != 0";
                DataTable table = Db.getTable(command);
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    command = "INSERT INTO plannedappt (PatNum,AptNum,ItemOrder) VALUES(" + table.Rows[i]["PatNum"].ToString() + "," + table.Rows[i]["NextAptNum"].ToString() + ",0)";
                    Db.nonQ32(command);
                }
                command = "ALTER TABLE patient DROP NextAptNum";
                Db.nonQ32(command);
                //Billing charges------------------------------------------------------------------------------------------
                command = "INSERT INTO preference (PrefName, ValueString,Comments) VALUES ('BillingChargeOrFinanceIsDefault', 'Finance','Value is a string, either Billing or Finance.')";
                Db.nonQ32(command);
                command = "SELECT Max(ItemOrder) FROM definition WHERE Category=1";
                table = Db.getTable(command);
                int billingchargeItemOrder = PIn.Int(table.Rows[0][0].ToString()) + 1;
                //category=AdjTypes
                command = "INSERT INTO definition (category,itemorder,itemname,itemvalue) VALUES(" + "1, " + "'" + POut.Long(billingchargeItemOrder) + "', " + "'Billing Charge', " + "'+')";
                //itemOrder
                //itemname
                //itemValue
                int numAdj = Db.nonQ32(command,true);
                command = "INSERT INTO preference (PrefName, ValueString,Comments) VALUES ('BillingChargeAdjustmentType', " + "'" + POut.Long(numAdj) + "','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName, ValueString,Comments) VALUES ('BillingChargeLastRun', '0001-01-01','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName, ValueString,Comments) VALUES ('BillingChargeAmount', '2','')";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS scheduleop";
                Db.nonQ32(command);
                command = "CREATE TABLE scheduleop (\r\n" + 
                "\t\t\t\t\t\tScheduleOpNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tScheduleNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOperatoryNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (ScheduleOpNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (ScheduleNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (OperatoryNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                //conversion to new operatory paradigm for blockouts-------------------------------------------------------------------
                //get all visible ops
                command = "SELECT OperatoryNum FROM operatory WHERE IsHidden=0";
                table = Db.getTable(command);
                List<int> visibleOps = new List<int>();
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    visibleOps.Add(PIn.Int(table.Rows[i]["OperatoryNum"].ToString()));
                }
                //convert blockouts with op=0
                command = "SELECT ScheduleNum FROM schedule WHERE SchedType=2 " + "AND Op=0";
                //blockout
                //indicates all ops
                table = Db.getTable(command);
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    for (int o = 0;o < visibleOps.Count;o++)
                    {
                        //for each schedule, we need to insert a separate scheduleop for each visible op
                        command = "INSERT INTO scheduleop(ScheduleNum,OperatoryNum) VALUES(" + table.Rows[i]["ScheduleNum"].ToString() + "," + POut.Long(visibleOps[o]) + ")";
                        Db.nonQ32(command);
                    }
                }
                //convert blockouts with op>0
                command = "SELECT ScheduleNum,Op FROM schedule WHERE SchedType=2 " + "AND Op>0";
                //blockout
                //indicates one assigned op
                table = Db.getTable(command);
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    command = "INSERT INTO scheduleop(ScheduleNum,OperatoryNum) VALUES(" + table.Rows[i]["ScheduleNum"].ToString() + "," + table.Rows[i]["Op"].ToString() + ")";
                    Db.nonQ32(command);
                }
                command = "ALTER TABLE schedule DROP Op";
                Db.nonQ32(command);
                //Fee schedule name conversion-------------------------------------------------------------------------------
                command = "DROP TABLE IF EXISTS feesched";
                Db.nonQ32(command);
                command = "CREATE TABLE feesched (\r\n" + 
                "\t\t\t\t\t\tFeeSchedNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255),\r\n" + 
                "\t\t\t\t\t\tFeeSchedType int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tItemOrder int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsHidden tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (FeeSchedNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "SELECT DefNum,ItemName,ItemValue,ItemOrder,IsHidden FROM definition WHERE Category=7";
                //fee schedule names
                table = Db.getTable(command);
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    command = "INSERT INTO feesched(FeeSchedNum,Description,FeeSchedType,ItemOrder,IsHidden) VALUES(" + table.Rows[i]["DefNum"].ToString() + "," + "'" + POut.String(table.Rows[i]["ItemName"].ToString()) + "',";
                    if (StringSupport.equals(table.Rows[i]["ItemValue"].ToString(), "A"))
                    {
                        command += POut.Long(((Enum)FeeScheduleType.Allowed).ordinal()) + ",";
                    }
                    else if (StringSupport.equals(table.Rows[i]["ItemValue"].ToString(), "C"))
                    {
                        command += POut.Long(((Enum)FeeScheduleType.CoPay).ordinal()) + ",";
                    }
                    else
                    {
                        command += POut.Long(((Enum)FeeScheduleType.Normal).ordinal()) + ",";
                    }  
                    //although this will be reset in the UI
                    command += table.Rows[i]["ItemOrder"].ToString() + "," + table.Rows[i]["IsHidden"].ToString() + ")";
                    Db.nonQ32(command);
                }
                command = "DELETE FROM definition WHERE Category=7";
                Db.nonQ32(command);
                //end of fee schedule
                command = "INSERT INTO preference (PrefName, ValueString,Comments) VALUES ('AllowedFeeSchedsAutomate','0','0 or 1')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName, ValueString,Comments) VALUES ('BackupReminderLastDateRun','0001-01-01','')";
                Db.nonQ32(command);
                //Anesthesia Module Conversions-----------------------------------------------------
                //field to toggle Anesthesia Module on or off. Turned 'off' by default
                command = "INSERT INTO preference (PrefName, ValueString,Comments) VALUES ('EnableAnesthMod', '0','0 or 1, Toggles Anesthesia Module Off and On. Disabled (0) by default')";
                Db.nonQ32(command);
                //individual unique records of delivered anesthetics
                command = "DROP TABLE IF EXISTS anestheticrecord";
                Db.nonQ32(command);
                command = "CREATE TABLE anestheticrecord (\r\n" + 
                "\t\t\t\t\t\tAnestheticRecordNum int(11) NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tPatNum int(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAnestheticDate datetime NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProvNum smallint(5) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (AnestheticRecordNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (PatNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (ProvNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                //data recorded for an individual anesthetic on a given date and time
                command = "DROP TABLE IF EXISTS anestheticdata";
                Db.nonQ32(command);
                command = "CREATE TABLE anestheticdata (\r\n" + 
                "\t\t\t\t\t\tAnestheticDataNum int(11) NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tAnestheticRecordNum int(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAnesthOpen char(32),\r\n" + 
                "\t\t\t\t\t\tAnesthClose char(32),\r\n" + 
                "\t\t\t\t\t\tSurgOpen char(32),\r\n" + 
                "\t\t\t\t\t\tSurgClose char(32),\r\n" + 
                "\t\t\t\t\t\tAnesthetist char(32) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSurgeon char(32) NOT NULL,\t\t\t\t\t\t\r\n" + 
                "\t\t\t\t\t\tAsst char(32) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCirculator char(32) NOT NULL,\t\t\t\t\t\t\r\n" + 
                "\t\t\t\t\t\tVSMName char(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tVSMSerNum char(20) NOT NULL,\t\t\t\t\t\r\n" + 
                "\t\t\t\t\t\tASA char(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tASA_EModifier char(1) NOT NULL,\t\t\t\t\t\r\n" + 
                "\t\t\t\t\t\tInhO2 tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tInhN2O tinyint(1) NOT NULL,\t\t\t\t\t\t\r\n" + 
                "\t\t\t\t\t\tO2LMin smallint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tN2OLMin smallint(1) NOT NULL,\t\t\t\t\t\t\r\n" + 
                "\t\t\t\t\t\tRteNasCan tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRteNasHood tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRteETT tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedRouteIVCath tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedRouteIVButtFly tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedRouteIM tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedRoutePO tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedRouteNasal tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedRouteRectal tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIVSite char(16) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIVGauge smallint(2) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIVSideR smallint(2) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIVSideL smallint(2) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIVAtt smallint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIVF char(8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIVFVol int(5) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMonBP tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMonSpO2 tinyint(1)NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMonEtCO2 tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMonTemp tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMonPrecordial tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMonEKG tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNotes text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatWgt smallint(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tWgtUnitsLbs tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tWgtUnitsKgs tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatHgt char(10) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEscortName char(32) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEscortCellNum char(13) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEscortRel char(16) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNPOTime char(5) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSigIsTopaz tinyint(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSignature text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (AnestheticDataNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (AnestheticRecordNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                //a list of anesthetic medications to be delivered to a patient
                command = "DROP TABLE IF EXISTS anesthmedsgiven";
                Db.nonQ32(command);
                command = "CREATE TABLE anesthmedsgiven(\r\n" + 
                "\t\t\t\t\t\tAnestheticMedNum int(3) NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tAnestheticRecordNum int(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAnesthMed char (20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tQtyGiven int(4) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tQtyWasted int(4) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDoseTimeStamp datetime NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (AnestheticMedNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (AnestheticMedNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                //a list of DEA scheduled anesthetic medications taken into inventory from a Supplier. Qtys are always in milliLiters so inventory count works properly.
                command = "DROP TABLE IF EXISTS anesthmedsintake";
                Db.nonQ32(command);
                command = "CREATE TABLE anesthmedsintake(\r\n" + 
                "\t\t\t\t\t\tAnestheticMedNum int(3) NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tIntakeDate datetime NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAnestheticMed char (20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDEASchedule char(2)NOT NULL,\r\n" + 
                "\t\t\t\t\t\tQty int(6) NOT NULL, \r\n" + 
                "\t\t\t\t\t\tSupplierIDNum char(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tInvoiceNum char(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (AnestheticMedNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                //fields required to create inventory of anesthetic medications
                command = "DROP TABLE IF EXISTS anesthmedsinventory";
                Db.nonQ32(command);
                command = "CREATE TABLE anesthmedsinventory (\r\n" + 
                "\t\t\t\t\t\tAnestheticMedNum int(3) NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tAnestheticMed char(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAnesthHowSupplied char(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tQtyOnHand int(5) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (AnestheticMedNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                //fields required to adjust inventory of anesthetic medications
                command = "DROP TABLE IF EXISTS anesthmedsinventoryadj";
                Db.nonQ32(command);
                command = "CREATE TABLE anesthmedsinventoryadj (\r\n" + 
                "\t\t\t\t\t\tAnestheticMedNum int(3) NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tAdjPos int(4) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAdjNeg int(4)NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProvider char(4) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNotes text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTimeStamp datetime NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (AnestheticMedNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (AnestheticMedNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                //a list of suppliers of anesthetic medications
                command = "DROP TABLE IF EXISTS anesthmedsuppliers";
                Db.nonQ32(command);
                command = "CREATE TABLE anesthmedsuppliers (\r\n" + 
                "\t\t\t\t\t\tSupplierIDNum int(3) NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tSupplierName char(32) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAddr1 char(32)NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAddr2 char(32) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCity char(32) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tState char(10) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCountry char(32) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPhone char(12) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFax char(12) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPhoneExt int(5) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tContact char(32) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNotes text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (SupplierIDNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                //keeps the post-anesthesia score and discharge data
                command = "DROP TABLE IF EXISTS anesthscore";
                Db.nonQ32(command);
                command = "CREATE TABLE anesthscore (\r\n" + 
                "\t\t\t\t\t\tAnestheticRecordNum int(7) NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tQActivity smallint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tQResp smallint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tQCirc smallint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tQConc smallint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tQColor smallint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAnesthScore smallint(2) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDischAmb tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDischWheelChr tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDischAmbulance tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDischCondStable tinyint(1) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (AnestheticRecordNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (AnestheticRecordNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                //keeps data auto-imported from networkable vital sign monitors
                command = "DROP TABLE IF EXISTS anesthvsdata";
                Db.nonQ32(command);
                command = "CREATE TABLE anesthvsdata (\r\n" + 
                "\t\t\t\t\t\tAnestheticRecordNum int(7) NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tVSMName char(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tVSMSerNum char(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tBPSys int(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tBPDias int(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tBPMAP int(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHR int(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpO2 int(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEtCo2 int(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTemp int(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (AnestheticRecordNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
            }
            else
            {
            } 
            //oracle
            command = "UPDATE preference SET ValueString = '6.1.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_1_8();
    }

    private static void to6_1_8() throws Exception {
        if (FromVersion < new Version("6.1.8.0"))
        {
            String command = "UPDATE userod SET IsHidden=0 WHERE IsHidden=1 " + "AND EXISTS(SELECT * FROM grouppermission " + "WHERE PermType='" + POut.Long(((Enum)OpenDentBusiness.Permissions.SecurityAdmin).ordinal()) + "' " + "AND grouppermission.UserGroupNum=userod.UserGroupNum)";
            //24
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '6.1.8.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_2_1();
    }

    private static void to6_2_1() throws Exception {
        if (FromVersion < new Version("6.2.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS anesthmedsintake";
                Db.nonQ32(command);
                command = "CREATE TABLE anesthmedsintake(\r\n" + 
                "\t\t\t\t\t\tAnestheticMedNum int(3) NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tIntakeDate datetime NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAnestheticMed char (20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDEASchedule char(2),\r\n" + 
                "\t\t\t\t\t\tQty int(6) NOT NULL, \r\n" + 
                "\t\t\t\t\t\tSupplierIDNum char(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tInvoiceNum char(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (AnestheticMedNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS anesthmedsinventoryadj";
                Db.nonQ32(command);
                command = "CREATE TABLE anesthmedsinventoryadj (\r\n" + 
                "\t\t\t\t\t\tAdjustNum int(11) NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tAnestheticMedNum int(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tQtyAdj double,\r\n" + 
                "\t\t\t\t\t\tUserNum int(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNotes varchar(255),\r\n" + 
                "\t\t\t\t\t\tTimeStamp datetime NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (AdjustNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (AnestheticMedNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS anestheticdata";
                Db.nonQ32(command);
                command = "CREATE TABLE anestheticdata (\r\n" + 
                "\t\t\t\t\t\tAnestheticDataNum int(11) NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tAnestheticRecordNum int(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAnesthOpen char(32),\r\n" + 
                "\t\t\t\t\t\tAnesthClose char(32),\r\n" + 
                "\t\t\t\t\t\tSurgOpen char(32),\r\n" + 
                "\t\t\t\t\t\tSurgClose char(32),\r\n" + 
                "\t\t\t\t\t\tAnesthetist char(32),\r\n" + 
                "\t\t\t\t\t\tSurgeon char(32),\t\t\t\t\t\t\r\n" + 
                "\t\t\t\t\t\tAsst char(32),\r\n" + 
                "\t\t\t\t\t\tCirculator char(32),\t\t\t\t\t\t\r\n" + 
                "\t\t\t\t\t\tVSMName char(20),\r\n" + 
                "\t\t\t\t\t\tVSMSerNum char(20),\t\t\t\t\t\r\n" + 
                "\t\t\t\t\t\tASA char(3),\r\n" + 
                "\t\t\t\t\t\tASA_EModifier char(1),\t\t\t\t\t\t\t\t\t\t\r\n" + 
                "\t\t\t\t\t\tO2LMin smallint(1),\r\n" + 
                "\t\t\t\t\t\tN2OLMin smallint(1),\t\t\t\t\t\t\r\n" + 
                "\t\t\t\t\t\tRteNasCan tinyint(1),\r\n" + 
                "\t\t\t\t\t\tRteNasHood tinyint(1),\r\n" + 
                "\t\t\t\t\t\tRteETT tinyint(1),\r\n" + 
                "\t\t\t\t\t\tMedRouteIVCath tinyint(1),\r\n" + 
                "\t\t\t\t\t\tMedRouteIVButtFly tinyint(1),\r\n" + 
                "\t\t\t\t\t\tMedRouteIM tinyint(1),\r\n" + 
                "\t\t\t\t\t\tMedRoutePO tinyint(1),\r\n" + 
                "\t\t\t\t\t\tMedRouteNasal tinyint(1),\r\n" + 
                "\t\t\t\t\t\tMedRouteRectal tinyint(1),\r\n" + 
                "\t\t\t\t\t\tIVSite char(20),\r\n" + 
                "\t\t\t\t\t\tIVGauge smallint(2),\r\n" + 
                "\t\t\t\t\t\tIVSideR smallint(2),\r\n" + 
                "\t\t\t\t\t\tIVSideL smallint(2),\r\n" + 
                "\t\t\t\t\t\tIVAtt smallint(1),\r\n" + 
                "\t\t\t\t\t\tIVF char(20),\r\n" + 
                "\t\t\t\t\t\tIVFVol float(5),\r\n" + 
                "\t\t\t\t\t\tMonBP tinyint(1),\r\n" + 
                "\t\t\t\t\t\tMonSpO2 tinyint(1),\r\n" + 
                "\t\t\t\t\t\tMonEtCO2 tinyint(1),\r\n" + 
                "\t\t\t\t\t\tMonTemp tinyint(1),\r\n" + 
                "\t\t\t\t\t\tMonPrecordial tinyint(1),\r\n" + 
                "\t\t\t\t\t\tMonEKG tinyint(1),\r\n" + 
                "\t\t\t\t\t\tNotes text,\r\n" + 
                "\t\t\t\t\t\tPatWgt smallint(3),\r\n" + 
                "\t\t\t\t\t\tWgtUnitsLbs tinyint(1),\r\n" + 
                "\t\t\t\t\t\tWgtUnitsKgs tinyint(1),\r\n" + 
                "\t\t\t\t\t\tPatHgt smallint(3),\r\n" + 
                "\t\t\t\t\t\tEscortName char(32),\r\n" + 
                "\t\t\t\t\t\tEscortCellNum char(13),\r\n" + 
                "\t\t\t\t\t\tEscortRel char(16),\r\n" + 
                "\t\t\t\t\t\tNPOTime char(5),\r\n" + 
                "\t\t\t\t\t\tHgtUnitsIn tinyint (1),\r\n" + 
                "\t\t\t\t\t\tHgtUnitsCm tinyint (1),\r\n" + 
                "\t\t\t\t\t\tSignature text,\r\n" + 
                "\t\t\t\t\t\tSigIsTopaz tinyint unsigned default \'0\',\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (AnestheticDataNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (AnestheticRecordNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS anesthmedsuppliers";
                Db.nonQ32(command);
                command = "CREATE TABLE anesthmedsuppliers (\r\n" + 
                "\t\t\t\t\t\tSupplierIDNum int(3) NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tSupplierName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPhone char(13),\r\n" + 
                "\t\t\t\t\t\tPhoneExt char(6),\r\n" + 
                "\t\t\t\t\t\tFax char(13),\r\n" + 
                "\t\t\t\t\t\tAddr1 varchar(48),\r\n" + 
                "\t\t\t\t\t\tAddr2 char(32),\r\n" + 
                "\t\t\t\t\t\tCity varchar(48),\r\n" + 
                "\t\t\t\t\t\tState char(20),\r\n" + 
                "\t\t\t\t\t\tZip char(10),\r\n" + 
                "\t\t\t\t\t\tContact char(32),\r\n" + 
                "\t\t\t\t\t\tWebSite varchar(48),\r\n" + 
                "\t\t\t\t\t\tNotes text,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (SupplierIDNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                String[] commands = new String[]{ "ALTER table userod ADD AnesthProvType int(2) default '3' NOT NULL", "ALTER table anesthmedsinventory CHANGE AnestheticMedNum AnestheticMedNum int NOT NULL auto_increment", "ALTER table anesthmedsinventory CHANGE AnestheticMed AnesthMedName char(30)", "ALTER table anesthmedsinventory CHANGE QtyOnHand QtyOnHand double default '0'", "ALTER table anesthmedsinventory ADD DEASchedule char(3)", "ALTER table anesthmedsintake DROP DEASchedule", "ALTER table anesthmedsintake CHANGE AnestheticMed AnesthMedName char(32)", "ALTER table anesthmedsgiven CHANGE QtyGiven QtyGiven double", "ALTER table anesthmedsgiven CHANGE QtyWasted QtyWasted double", "ALTER table anesthmedsgiven CHANGE AnesthMed AnesthMedName char(32)", "ALTER table anesthmedsgiven CHANGE DoseTimeStamp DoseTimeStamp char(32)", "ALTER table anesthmedsgiven ADD QtyOnHandOld double" };
                Db.NonQ32(commands);
                command = "DROP TABLE IF EXISTS anesthscore";
                Db.nonQ32(command);
                command = "CREATE TABLE anesthscore (\r\n" + 
                "\t\t\t\t\t\tAnesthScoreNum int(11) NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tAnestheticRecordNum int(11),\r\n" + 
                "\t\t\t\t\t\tQActivity smallint(1),\r\n" + 
                "\t\t\t\t\t\tQResp smallint(1),\r\n" + 
                "\t\t\t\t\t\tQCirc smallint(1),\r\n" + 
                "\t\t\t\t\t\tQConc smallint(1),\r\n" + 
                "\t\t\t\t\t\tQColor smallint(1),\r\n" + 
                "\t\t\t\t\t\tAnesthesiaScore smallint(2),\r\n" + 
                "\t\t\t\t\t\tDischAmb tinyint(1),\r\n" + 
                "\t\t\t\t\t\tDischWheelChr tinyint(1),\r\n" + 
                "\t\t\t\t\t\tDischAmbulance tinyint(1),\r\n" + 
                "\t\t\t\t\t\tDischCondStable tinyint(1),\r\n" + 
                "\t\t\t\t\t\tDischCondUnStable tinyint(1),\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (AnesthScoreNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (AnestheticRecordNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                //keeps data auto-imported from networkable vital sign monitors
                command = "DROP TABLE IF EXISTS anesthvsdata";
                Db.nonQ32(command);
                command = "CREATE TABLE anesthvsdata (\r\n" + 
                "\t\t\t\t\t\tAnesthVSDataNum int(11) NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tAnestheticRecordNum int(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum int(11),\r\n" + 
                "\t\t\t\t\t\tVSMName char(20),\r\n" + 
                "\t\t\t\t\t\tVSMSerNum char(32),\r\n" + 
                "\t\t\t\t\t\tBPSys smallint(3),\r\n" + 
                "\t\t\t\t\t\tBPDias smallint(3),\r\n" + 
                "\t\t\t\t\t\tBPMAP smallint(3),\r\n" + 
                "\t\t\t\t\t\tHR smallint(3),\r\n" + 
                "\t\t\t\t\t\tSpO2 smallint(3),\r\n" + 
                "\t\t\t\t\t\tEtCo2 smallint(3),\r\n" + 
                "\t\t\t\t\t\tTemp smallint(3),\r\n" + 
                "\t\t\t\t\t\tVSTimeStamp char(32),\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (AnesthVSDataNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
                command = "ALTER TABLE schedule ADD INDEX (EmployeeNum)";
                Db.nonQ32(command);
                command = "ALTER TABLE schedule ADD INDEX (ProvNum)";
                Db.nonQ32(command);
                command = "ALTER TABLE schedule ADD INDEX (SchedDate)";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName, ValueString,Comments) VALUES ('SecurityLockDate','0001-01-01','If present, global lock on procedures, payments, insurance payments, and adjustments.  Prevents editing old entries and backdating entries.')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName, ValueString,Comments) VALUES ('SecurityLockIncludesAdmin','0','0 or 1.  If 1, administrators are also locked out by date.')";
                Db.nonQ32(command);
                command = "ALTER TABLE patient ADD ResponsParty int NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE patient ADD INDEX (ResponsParty)";
                Db.nonQ32(command);
                command = "ALTER TABLE treatplan ADD ResponsParty int NOT NULL";
                Db.nonQ32(command);
            }
            else
            {
            } 
            //oracle
            command = "UPDATE preference SET ValueString = '6.2.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_2_2();
    }

    private static void to6_2_2() throws Exception {
        if (FromVersion < new Version("6.2.2.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS phonenumber";
                Db.nonQ32(command);
                command = "CREATE TABLE phonenumber (\r\n" + 
                "\t\t\t\t\t\tPhoneNumberNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tPatNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPhoneNumberVal varchar(255),\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (PhoneNumberNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (PatNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (PhoneNumberVal)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
            }
            else
            {
            } 
            command = "UPDATE preference SET ValueString = '6.2.2.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_2_9();
    }

    private static void to6_2_9() throws Exception {
        if (FromVersion < new Version("6.2.9.0"))
        {
            String command = "ALTER TABLE fee CHANGE FeeSched FeeSched int NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '6.2.9.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_3_1();
    }

    private static void to6_3_1() throws Exception {
        if (FromVersion < new Version("6.3.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference (PrefName, ValueString,Comments) VALUES ('MobileSyncPath','','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName, ValueString,Comments) VALUES ('MobileSyncLastFileNumber','0','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName, ValueString,Comments) VALUES ('MobileSyncDateTimeLastRun','0001-01-01','')";
                Db.nonQ32(command);
                //I had originally deleted these.  But decided instead to just comment them as obsolete because I think it caused a bug in our upgrade.
                command = "UPDATE preference SET Comments = 'Obsolete' WHERE PrefName = 'LettersIncludeReturnAddress'";
                Db.nonQ32(command);
                command = "UPDATE preference SET Comments = 'Obsolete' WHERE PrefName ='StationaryImage'";
                Db.nonQ32(command);
                command = "UPDATE preference SET Comments = 'Obsolete' WHERE PrefName ='StationaryDocument'";
                Db.nonQ32(command);
            }
            else
            {
            } 
            //oracle
            command = "UPDATE preference SET ValueString = '6.3.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_3_3();
    }

    private static void to6_3_3() throws Exception {
        if (FromVersion < new Version("6.3.3.0"))
        {
            String command = "INSERT INTO preference (PrefName, ValueString,Comments) VALUES ('CoPay_FeeSchedule_BlankLikeZero','1','1 to treat blank entries like zero copay.  0 to make patient responsible on blank entries.')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '6.3.3.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_3_4();
    }

    private static void to6_3_4() throws Exception {
        if (FromVersion < new Version("6.3.4.0"))
        {
            String command = "ALTER TABLE sheetfielddef CHANGE FieldValue FieldValue text NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '6.3.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_4_1();
    }

    private static void to6_4_1() throws Exception {
        if (FromVersion < new Version("6.4.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "UPDATE preference SET Comments = '-1 indicates min for all dates' WHERE PrefName = 'RecallDaysPast'";
                Db.nonQ32(command);
                command = "UPDATE preference SET Comments = '-1 indicates max for all dates' WHERE PrefName = 'RecallDaysFuture'";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName, ValueString,Comments) VALUES ('RecallShowIfDaysFirstReminder','-1','-1 indicates do not show')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName, ValueString,Comments) VALUES ('RecallShowIfDaysSecondReminder','-1','-1 indicates do not show')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallEmailMessage','You are due for your regular dental check-up on ?DueDate  Please call our office today to schedule an appointment.','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallEmailFamMsg','You are due for your regular dental check-up.  [FamilyList]  Please call our office today to schedule an appointment.','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallEmailSubject2','','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallEmailMessage2','','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallPostcardMessage2','','')";
                Db.nonQ32(command);
                String prefVal = new String();
                DataTable table = new DataTable();
                command = "SELECT ValueString FROM preference WHERE PrefName='RecallPostcardMessage'";
                table = Db.getTable(command);
                prefVal = table.Rows[0][0].ToString().Replace("?DueDate", "[DueDate]");
                command = "UPDATE preference SET ValueString='" + POut.string(prefVal) + "' WHERE PrefName='RecallPostcardMessage'";
                Db.nonQ32(command);
                command = "SELECT ValueString FROM preference WHERE PrefName='RecallPostcardFamMsg'";
                table = Db.getTable(command);
                prefVal = table.Rows[0][0].ToString().Replace("?FamilyList", "[FamilyList]");
                command = "UPDATE preference SET ValueString='" + POut.string(prefVal) + "' WHERE PrefName='RecallPostcardFamMsg'";
                Db.nonQ32(command);
                command = "SELECT ValueString FROM preference WHERE PrefName='ConfirmPostcardMessage'";
                table = Db.getTable(command);
                prefVal = table.Rows[0][0].ToString().Replace("?date", "[date]");
                prefVal = prefVal.Replace("?time", "[time]");
                command = "UPDATE preference SET ValueString='" + POut.string(prefVal) + "' WHERE PrefName='ConfirmPostcardMessage'";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallEmailSubject3','','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallEmailMessage3','','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallPostcardMessage3','','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallEmailFamMsg2','','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallEmailFamMsg3','','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallPostcardFamMsg2','','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallPostcardFamMsg3','','')";
                Db.nonQ32(command);
                command = "ALTER TABLE autonote CHANGE ControlsToInc MainText text";
                Db.nonQ32(command);
                command = "UPDATE autonote SET MainText = ''";
                Db.nonQ32(command);
                command = "UPDATE autonotecontrol SET ControlType='Text' WHERE ControlType='MultiLineTextBox'";
                Db.nonQ32(command);
                command = "UPDATE autonotecontrol SET ControlType='OneResponse' WHERE ControlType='ComboBox'";
                Db.nonQ32(command);
                command = "UPDATE autonotecontrol SET ControlType='Text' WHERE ControlType='TextBox'";
                Db.nonQ32(command);
                command = "UPDATE autonotecontrol SET ControlOptions=MultiLineText WHERE MultiLineText != ''";
                Db.nonQ32(command);
                command = "ALTER TABLE autonotecontrol DROP PrefaceText";
                Db.nonQ32(command);
                command = "ALTER TABLE autonotecontrol DROP MultiLineText";
                Db.nonQ32(command);
            }
            else
            {
            } 
            //oracle
            command = "UPDATE preference SET ValueString = '6.4.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_4_4();
    }

    private static void to6_4_4() throws Exception {
        if (FromVersion < new Version("6.4.4.0"))
        {
            String command = new String();
            //Convert comma-delimited autonote controls to carriage-return delimited.
            command = "SELECT AutoNoteControlNum,ControlOptions FROM autonotecontrol";
            DataTable table = Db.getTable(command);
            String newVal = new String();
            for (int i = 0;i < table.Rows.Count;i++)
            {
                newVal = table.Rows[i]["ControlOptions"].ToString();
                newVal = newVal.TrimEnd(',');
                newVal = newVal.Replace(",", "\r\n");
                command = "UPDATE autonotecontrol SET ControlOptions='" + POut.string(newVal) + "' WHERE AutoNoteControlNum=" + table.Rows[i]["AutoNoteControlNum"].ToString();
                Db.nonQ32(command);
            }
            command = "UPDATE preference SET ValueString = '6.4.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_5_1();
    }

    private static void to6_5_1() throws Exception {
        if (FromVersion < new Version("6.5.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('ShowFeatureMedicalInsurance','0','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('BillingUseElectronic','0','Set to 1 to used e-billing.')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('BillingElectVendorId','','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('BillingElectVendorPMSCode','','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('BillingElectCreditCardChoices','V,MC','Choices of V,MC,D,A comma delimited.')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('BillingElectClientAcctNumber','','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('BillingElectUserName','','')";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('BillingElectPassword','','')";
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemValue,ItemColor,IsHidden) VALUES(12,22,'Status Condition','',-8978432,0)";
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemValue,ItemColor,IsHidden) VALUES(22,16,'Condition','',-5169880,0)";
                Db.nonQ32(command);
                command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemValue,ItemColor,IsHidden) VALUES(22,17,'Condition (light)','',-1678747,0)";
                Db.nonQ32(command);
                command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('BillingIgnoreInPerson','0','Set to 1 to ignore walkout statements.')";
                Db.nonQ32(command);
                //eClinicalWorks Bridge---------------------------------------------------------------------------
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'eClinicalWorks', " + "'eClinicalWorks from www.eclinicalworks.com', " + "'0', " + "'', " + "'', " + "'')";
                int programNum = Db.nonQ32(command,true);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.Long(programNum) + "', " + "'HL7FolderIn', " + "'')";
                Db.nonQ32(command);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.Long(programNum) + "', " + "'HL7FolderOut', " + "'')";
                Db.nonQ32(command);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.Long(programNum) + "', " + "'DefaultUserGroup', " + "'')";
                Db.nonQ32(command);
                command = "ALTER TABLE anesthmedsgiven ADD AnesthMedNum int NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE provider ADD AnesthProvType int NOT NULL";
                Db.nonQ32(command);
                command = "DROP TABLE IF EXISTS hl7msg";
                Db.nonQ32(command);
                command = "CREATE TABLE hl7msg (\r\n" + 
                "\t\t\t\t\t\tHL7MsgNum int NOT NULL auto_increment,\r\n" + 
                "\t\t\t\t\t\tHL7Status int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMsgText text,\r\n" + 
                "\t\t\t\t\t\tAptNum int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPRIMARY KEY (HL7MsgNum),\r\n" + 
                "\t\t\t\t\t\tINDEX (AptNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ32(command);
            }
            else
            {
            } 
            //oracle
            command = "UPDATE preference SET ValueString = '6.5.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_6_1();
    }

    private static void to6_6_1() throws Exception {
        if (FromVersion < new Version("6.6.1.0"))
        {
            String command = new String();
            DataTable table = new DataTable();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                //Change defaults for XDR bridge-------------------------------------------------------------------
                command = "SELECT Enabled,ProgramNum FROM program WHERE ProgName='XDR'";
                table = Db.getTable(command);
                int programNum = new int();
                if (table.Rows.Count > 0 && StringSupport.equals(table.Rows[0]["Enabled"].ToString(), "0"))
                {
                    //if XDR not enabled
                    //change the defaults
                    programNum = PIn.Int(table.Rows[0]["ProgramNum"].ToString());
                    command = "UPDATE program SET Path='" + POut.string("C:\\XDRClient\\Bin\\XDR.exe") + "' WHERE ProgramNum=" + POut.Long(programNum);
                    Db.nonQ32(command);
                    command = "UPDATE programproperty SET PropertyValue='" + POut.string("C:\\XDRClient\\Bin\\infofile.txt") + "' " + "WHERE ProgramNum=" + POut.Long(programNum) + " " + "AND PropertyDesc='InfoFile path'";
                    Db.nonQ32(command);
                    //The toolbar at the top that is common to all modules.
                    command = "UPDATE toolbutitem SET ToolBar=7 " + "WHERE ProgramNum=" + POut.Long(programNum);
                    Db.nonQ32(command);
                }
                 
                //iCat Bridge---------------------------------------------------------------------------
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'iCat', " + "'iCat from www.imagingsciences.com', " + "'0', " + "'" + POut.string("C:\\Program Files\\ISIP\\iCATVision\\Vision.exe") + "', " + "'', " + "'')";
                programNum = Db.nonQ32(command,true);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ32(command);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Acquisition computer name', " + "'')";
                Db.nonQ32(command);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'XML output file path', " + "'" + POut.string("C:\\iCat\\Out\\pm.xml") + "')";
                Db.nonQ32(command);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Return folder path', " + "'" + POut.string("C:\\iCat\\Return") + "')";
                Db.nonQ32(command);
                command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.Long(programNum) + "', " + "'" + POut.Long(((Enum)ToolBarsAvail.ChartModule).ordinal()) + "', " + "'iCat')";
                Db.nonQ32(command);
                //end of iCat Bridge
                String[] commands = new String[]{ "ALTER TABLE anesthvsdata ADD MessageID varchar(50)", "ALTER TABLE anesthvsdata ADD HL7Message longtext" };
                Db.NonQ32(commands);
                command = "ALTER TABLE computer DROP PrinterName";
                Db.nonQ32(command);
                command = "ALTER TABLE computer ADD LastHeartBeat datetime NOT NULL default '0001-01-01'";
                Db.nonQ32(command);
                command = "ALTER TABLE registrationkey ADD UsesServerVersion tinyint NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE registrationkey ADD IsFreeVersion tinyint NOT NULL";
                Db.nonQ32(command);
                command = "ALTER TABLE registrationkey ADD IsOnlyForTesting tinyint NOT NULL";
                Db.nonQ32(command);
            }
            else
            {
            } 
            //oracle
            command = "UPDATE preference SET ValueString = '6.6.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_6_2();
    }

    private static void to6_6_2() throws Exception {
        if (FromVersion < new Version("6.6.2.0"))
        {
            String command = new String();
            command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('WebServiceServerName','','Blank if not using web service.')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '6.6.2.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_6_3();
    }

    private static void to6_6_3() throws Exception {
        if (FromVersion < new Version("6.6.3.0"))
        {
            String command = new String();
            command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('UpdateInProgressOnComputerName','','Will be blank if update is complete.  If in the middle of an update, the named workstation is the only one allowed to startup OD.')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '6.6.3.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_6_8();
    }

    private static void to6_6_8() throws Exception {
        if (FromVersion < new Version("6.6.8.0"))
        {
            String command = new String();
            command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('UpdateMultipleDatabases','','Comma delimited')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '6.6.8.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_6_16();
    }

    private static void to6_6_16() throws Exception {
        if (FromVersion < new Version("6.6.16.0"))
        {
            String command = new String();
            command = "SELECT ProgramNum FROM program WHERE ProgName='MediaDent'";
            int programNum = PIn.int(Db.getScalar(command));
            command = "DELETE FROM programproperty WHERE ProgramNum=" + POut.Long(programNum) + " AND PropertyDesc='Image Folder'";
            Db.nonQ32(command);
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.Long(programNum) + "', " + "'" + POut.string("Text file path") + "', " + "'" + POut.string("C:\\MediadentInfo.txt") + "')";
            Db.nonQ32(command);
            command = "UPDATE program SET Note='Text file path needs to be the same on all computers.' WHERE ProgramNum=" + POut.Long(programNum);
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '6.6.16.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_6_19();
    }

    private static void to6_6_19() throws Exception {
        if (FromVersion < new Version("6.6.19.0"))
        {
            String command = new String();
            command = "UPDATE employee SET LName='O' WHERE LName='' AND FName=''";
            Db.nonQ32(command);
            command = "UPDATE schedule SET SchedType=1 WHERE ProvNum != 0 AND SchedType != 1";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '6.6.19.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_7_1();
    }

    private static void to6_7_1() throws Exception {
        if (FromVersion < new Version("6.7.1.0"))
        {
            String command = new String();
            command = "ALTER TABLE document ADD DateTStamp TimeStamp";
            Db.nonQ32(command);
            command = "UPDATE document SET DateTStamp=NOW()";
            Db.nonQ32(command);
            command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('StatementShowNotes','0','Payments and adjustments.')";
            Db.nonQ32(command);
            command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('StatementShowProcBreakdown','0','')";
            Db.nonQ32(command);
            command = "ALTER TABLE etrans ADD EtransMessageTextNum INT NOT NULL";
            Db.nonQ32(command);
            command = "DROP TABLE IF EXISTS etransmessagetext";
            Db.nonQ32(command);
            command = "CREATE TABLE etransmessagetext (\r\n" + 
            "\t\t\t\t\tEtransMessageTextNum int NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tMessageText text NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (EtransMessageTextNum),\r\n" + 
            "\t\t\t\t\tINDEX(MessageText(255))\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ32(command);
            command = "ALTER TABLE etrans ADD INDEX(MessageText(255))";
            Db.nonQ32(command);
            command = "INSERT INTO etransmessagetext (MessageText) " + "SELECT DISTINCT MessageText FROM etrans " + "WHERE etrans.MessageText != ''";
            Db.nonQ32(command);
            command = "UPDATE etrans,etransmessagetext " + "SET etrans.EtransMessageTextNum=etransmessagetext.EtransMessageTextNum " + "WHERE etrans.MessageText=etransmessagetext.MessageText";
            Db.nonQ32(command);
            command = "ALTER TABLE etrans DROP MessageText";
            Db.nonQ32(command);
            command = "ALTER TABLE etransmessagetext DROP INDEX MessageText";
            Db.nonQ32(command);
            command = "ALTER TABLE etrans ADD AckEtransNum INT NOT NULL";
            Db.nonQ32(command);
            //Fill the AckEtransNum values for existing claims.
            command = "DROP TABLE IF EXISTS etack;\r\n" + 
            "CREATE TABLE etack (                                             \r\n" + 
            "EtransNum int(11) NOT NULL auto_increment,                      \r\n" + 
            "DateTimeTrans datetime NOT NULL,  \r\n" + 
            "ClearinghouseNum int(11) NOT NULL,                                                               \r\n" + 
            "BatchNumber int(11) NOT NULL,                                                                  \r\n" + 
            "PRIMARY KEY  (`EtransNum`)                               \r\n" + 
            ")  \r\n" + 
            "SELECT * FROM etrans\r\n" + 
            "WHERE Etype=21;\r\n" + 
            "UPDATE etrans etorig, etack\r\n" + 
            "SET etorig.AckEtransNum=etack.EtransNum \r\n" + 
            "WHERE etorig.EtransNum != etack.EtransNum\r\n" + 
            "AND etorig.BatchNumber=etack.BatchNumber\r\n" + 
            "AND etorig.ClearinghouseNum=etack.ClearinghouseNum\r\n" + 
            "AND etorig.DateTimeTrans > DATE_SUB(etack.DateTimeTrans,INTERVAL 14 DAY)\r\n" + 
            "AND etorig.DateTimeTrans < DATE_ADD(etack.DateTimeTrans,INTERVAL 1 DAY);\r\n" + 
            "DROP TABLE IF EXISTS etAck";
            Db.nonQ32(command);
            command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('UpdateWebProxyAddress','','')";
            Db.nonQ32(command);
            command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('UpdateWebProxyUserName','','')";
            Db.nonQ32(command);
            command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('UpdateWebProxyPassword','','')";
            Db.nonQ32(command);
            command = "ALTER TABLE etrans ADD PlanNum INT NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE etrans ADD INDEX (PlanNum)";
            Db.nonQ32(command);
            //Added new enum value of 0=None to CoverageLevel.
            command = "UPDATE benefit SET CoverageLevel=CoverageLevel+1 WHERE BenefitType=2 OR BenefitType=5";
            //Deductible, Limitations
            Db.nonQ32(command);
            command = "ALTER TABLE benefit CHANGE Percent Percent tinyint NOT NULL";
            //So that we can store -1.
            Db.nonQ32(command);
            command = "UPDATE benefit SET Percent=-1 WHERE BenefitType != 1";
            //set Percent empty where not CoInsurance
            Db.nonQ32(command);
            command = "ALTER TABLE benefit DROP OldCode";
            Db.nonQ32(command);
            //set MonetaryAmt empty when ActiveCoverage,CoInsurance,Exclusion
            command = "UPDATE benefit SET MonetaryAmt=-1 WHERE BenefitType=0 OR BenefitType=1 OR BenefitType=4";
            Db.nonQ32(command);
            //set MonetaryAmt empty when Limitation and a quantity is entered
            command = "UPDATE benefit SET MonetaryAmt=-1 WHERE BenefitType=5 AND Quantity != 0";
            Db.nonQ32(command);
            if (StringSupport.equals(CultureInfo.CurrentCulture.Name, "en-US"))
            {
                command = "UPDATE covcat SET CovOrder=CovOrder+1 WHERE CovOrder > 1";
                Db.nonQ32(command);
                command = "INSERT INTO covcat (Description,DefaultPercent,CovOrder,IsHidden,EbenefitCat) VALUES('X-Ray',100,2,0,13)";
                int covCatNum = Db.nonQ32(command,true);
                command = "INSERT INTO covspan (CovCatNum,FromCode,ToCode) VALUES(" + POut.Long(covCatNum) + ",'D0200','D0399')";
                Db.nonQ32(command);
                command = "SELECT MAX(CovOrder) FROM covcat";
                int covOrder = PIn.int(Db.getScalar(command));
                command = "INSERT INTO covcat (Description,DefaultPercent,CovOrder,IsHidden,EbenefitCat) VALUES('Adjunctive',-1," + POut.Long(covOrder + 1) + ",0,14)";
                //adjunctive
                covCatNum = Db.nonQ32(command,true);
                command = "INSERT INTO covspan (CovCatNum,FromCode,ToCode) VALUES(" + POut.Long(covCatNum) + ",'D9000','D9999')";
                Db.nonQ32(command);
                command = "SELECT CovCatNum FROM covcat WHERE EbenefitCat=1";
                //general
                covCatNum = Db.nonQ32(command,true);
                command = "DELETE FROM covspan WHERE CovCatNum=" + POut.Long(covCatNum);
                Db.nonQ32(command);
                command = "INSERT INTO covspan (CovCatNum,FromCode,ToCode) VALUES(" + POut.Long(covCatNum) + ",'D0000','D7999')";
                Db.nonQ32(command);
                command = "INSERT INTO covspan (CovCatNum,FromCode,ToCode) VALUES(" + POut.Long(covCatNum) + ",'D9000','D9999')";
                Db.nonQ32(command);
            }
             
            command = "ALTER TABLE claimproc ADD DedEst double NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claimproc ADD DedEstOverride double NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claimproc ADD InsEstTotal double NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claimproc ADD InsEstTotalOverride double NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE claimproc SET DedApplied=-1 WHERE ClaimNum=0";
            //if not attached to a claim, clear this value
            Db.nonQ32(command);
            command = "UPDATE claimproc SET DedEstOverride=-1";
            Db.nonQ32(command);
            command = "UPDATE claimproc SET InsEstTotal=BaseEst";
            Db.nonQ32(command);
            command = "UPDATE claimproc SET InsEstTotalOverride=OverrideInsEst";
            Db.nonQ32(command);
            command = "ALTER TABLE claimproc DROP OverrideInsEst";
            Db.nonQ32(command);
            command = "ALTER TABLE claimproc DROP DedBeforePerc";
            Db.nonQ32(command);
            command = "ALTER TABLE claimproc DROP OverAnnualMax";
            Db.nonQ32(command);
            command = "ALTER TABLE claimproc ADD PaidOtherInsOverride double NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE claimproc SET PaidOtherInsOverride=PaidOtherIns";
            Db.nonQ32(command);
            command = "ALTER TABLE claimproc ADD EstimateNote varchar(255) NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE insplan ADD MonthRenew tinyint NOT NULL";
            Db.nonQ32(command);
            command = "SELECT insplan.PlanNum,MONTH(DateEffective) " + "FROM insplan,benefit " + "WHERE insplan.PlanNum=benefit.PlanNum " + "AND benefit.TimePeriod=1 " + "GROUP BY insplan.PlanNum";
            //service year
            DataTable table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "UPDATE insplan SET MonthRenew=" + table.Rows[i][1].ToString() + " WHERE PlanNum=" + table.Rows[i][0].ToString();
                Db.nonQ32(command);
            }
            command = "ALTER TABLE appointment ADD InsPlan1 INT NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment ADD INDEX (InsPlan1)";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment ADD InsPlan2 INT NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment ADD INDEX (InsPlan2)";
            Db.nonQ32(command);
            command = "DROP TABLE IF EXISTS insfilingcode";
            Db.nonQ32(command);
            command = "CREATE TABLE insfilingcode (\r\n" + 
            "\t\t\t\t\tInsFilingCodeNum INT AUTO_INCREMENT,\r\n" + 
            "\t\t\t\t\tDescript VARCHAR(255),\r\n" + 
            "\t\t\t\t\tEclaimCode VARCHAR(100),\r\n" + 
            "\t\t\t\t\tItemOrder INT,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY(InsFilingCodeNum),\r\n" + 
            "\t\t\t\t\tINDEX(ItemOrder)\r\n" + 
            "\t\t\t\t\t)";
            Db.nonQ32(command);
            command = "DROP TABLE IF EXISTS insfilingcodesubtype";
            Db.nonQ32(command);
            command = "CREATE TABLE insfilingcodesubtype (\r\n" + 
            "\t\t\t\t\tInsFilingCodeSubtypeNum INT AUTO_INCREMENT,\r\n" + 
            "\t\t\t\t\tInsFilingCodeNum INT,\r\n" + 
            "\t\t\t\t\tDescript VARCHAR(255),\r\n" + 
            "\t\t\t\t\tINDEX(InsFilingCodeNum),\r\n" + 
            "\t\t\t\t\tPRIMARY KEY(InsFilingCodeSubtypeNum)\r\n" + 
            "\t\t\t\t\t)";
            Db.nonQ32(command);
            command = "ALTER TABLE insplan ADD FilingCodeSubtype INT NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE insplan ADD INDEX (FilingCodeSubtype)";
            Db.nonQ32(command);
            //eCW bridge enhancements
            command = "SELECT ProgramNum FROM program WHERE ProgName='eClinicalWorks'";
            int programNum = PIn.int(Db.getScalar(command));
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.Long(programNum) + "', " + "'ShowImagesModule', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.Long(programNum) + "', " + "'IsStandalone', " + "'0')";
            //starts out as false
            Db.nonQ32(command);
            command = "UPDATE insplan SET FilingCode = FilingCode+1";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(1,'Commercial_Insurance','CI',0)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(2,'SelfPay','09',1)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(3,'OtherNonFed','11',2)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(4,'PPO','12',3)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(5,'POS','13',4)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(6,'EPO','14',5)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(7,'Indemnity','15',6)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(8,'HMO_MedicareRisk','16',7)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(9,'DMO','17',8)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(10,'BCBS','BL',9)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(11,'Champus','CH',10)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(12,'Disability','DS',11)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(13,'FEP','FI',12)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(14,'HMO','HM',13)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(15,'LiabilityMedical','LM',14)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(16,'MedicarePartB','MB',15)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(17,'Medicaid','MC',16)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(18,'ManagedCare_NonHMO','MH',17)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(19,'OtherFederalProgram','OF',18)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(20,'SelfAdministered','SA',19)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(21,'Veterans','VA',20)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(22,'WorkersComp','WC',21)";
            Db.nonQ32(command);
            command = "INSERT INTO insfilingcode VALUES(23,'MutuallyDefined','ZZ',22)";
            Db.nonQ32(command);
            //Fixes bug here instead of db maint
            //Duplicated in version 6.6
            command = "UPDATE employee SET LName='O' WHERE LName='' AND FName=''";
            Db.nonQ32(command);
            command = "UPDATE schedule SET SchedType=1 WHERE ProvNum != 0 AND SchedType != 1";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '6.7.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_7_3();
    }

    private static void to6_7_3() throws Exception {
        if (FromVersion < new Version("6.7.3.0"))
        {
            String command = "UPDATE claimform,claimformitem SET claimformitem.FieldName=\'IsGroupHealthPlan\'\r\n" + 
            "\t\t\t\t\tWHERE claimformitem.FieldName=\'IsStandardClaim\' AND claimform.ClaimFormNum=claimformitem.ClaimFormNum\r\n" + 
            "\t\t\t\t\tAND claimform.UniqueID=\'OD9\'";
            //1500
            Db.nonQ32(command);
            command = "UPDATE claimform,claimformitem SET claimformitem.XPos=\'97\'\r\n" + 
            "\t\t\t\t\tWHERE claimformitem.XPos=\'30\' AND claimform.ClaimFormNum=claimformitem.ClaimFormNum\r\n" + 
            "\t\t\t\t\tAND claimform.UniqueID=\'OD9\'";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '6.7.3.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_7_4();
    }

    private static void to6_7_4() throws Exception {
        if (FromVersion < new Version("6.7.4.0"))
        {
            String command = "DELETE FROM medicationpat WHERE EXISTS(SELECT * FROM patient WHERE medicationpat.PatNum=patient.PatNum AND patient.PatStatus=4)";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '6.7.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_7_5();
    }

    private static void to6_7_5() throws Exception {
        if (FromVersion < new Version("6.7.5.0"))
        {
            String command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('ClaimsValidateACN','0','If set to 1, then any claim with a groupName containing ADDP will require an ACN number in the claim remarks.')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '6.7.5.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_7_12();
    }

    private static void to6_7_12() throws Exception {
        if (FromVersion < new Version("6.7.12.0"))
        {
            String command = new String();
            //Camsight Bridge---------------------------------------------------------------------------
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Camsight', " + "'Camsight from www.camsight.com', " + "'0', " + "'" + POut.string("C:\\cdm\\cdm\\cdmx\\cdmx.exe") + "', " + "'', " + "'')";
            int programNum = Db.nonQ32(command,true);
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.Long(programNum) + "', " + "'" + POut.Long(((Enum)ToolBarsAvail.ChartModule).ordinal()) + "', " + "'Camsight')";
            Db.nonQ32(command);
            //CliniView Bridge---------------------------------------------------------------------------
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'CliniView', " + "'CliniView', " + "'0', " + "'" + POut.string("C:\\Program Files\\CliniView\\CliniView.exe") + "', " + "'', " + "'')";
            programNum = Db.nonQ32(command,true);
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.Long(programNum) + "', " + "'" + POut.Long(((Enum)ToolBarsAvail.ChartModule).ordinal()) + "', " + "'CliniView')";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '6.7.12.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_7_15();
    }

    private static void to6_7_15() throws Exception {
        //duplicated in 6.6.26
        if (FromVersion < new Version("6.7.15.0"))
        {
            String command = new String();
            command = "ALTER TABLE insplan CHANGE FeeSched FeeSched int NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE insplan CHANGE CopayFeeSched CopayFeeSched int NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE insplan CHANGE AllowedFeeSched AllowedFeeSched int NOT NULL";
            Db.nonQ32(command);
            command = "UPDATE preference SET ValueString = '6.7.15.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_7_22();
    }

    private static void to6_7_22() throws Exception {
        if (FromVersion < new Version("6.7.22.0"))
        {
            String command = new String();
            command = "UPDATE preference SET ValueString ='http://opendentalsoft.com:1942/WebServiceCustomerUpdates/Service1.asmx' WHERE PrefName='UpdateServerAddress' AND ValueString LIKE '%70.90.133.65%'";
            Db.nonQ(command);
            try
            {
                command = "ALTER TABLE document ADD INDEX (PatNum)";
                Db.nonQ(command);
                command = "ALTER TABLE procedurelog ADD INDEX (BillingTypeOne)";
                Db.nonQ(command);
                command = "ALTER TABLE procedurelog ADD INDEX (BillingTypeTwo)";
                Db.nonQ(command);
                command = "ALTER TABLE securitylog ADD INDEX (PatNum)";
                Db.nonQ(command);
                command = "ALTER TABLE toothinitial ADD INDEX (PatNum)";
                Db.nonQ(command);
                command = "ALTER TABLE patplan ADD INDEX (PlanNum)";
                Db.nonQ(command);
            }
            catch (Exception __dummyCatchVar0)
            {
            }

            //in case any of the indices arlready exists.
            command = "UPDATE preference SET ValueString = '6.7.22.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to6_8_1();
    }

    //To6_7_25()//duplicated further down
    private static void to6_8_1() throws Exception {
        if (FromVersion < new Version("6.8.1.0"))
        {
            String command = new String();
            //add TreatPlanEdit,ReportProdInc,TimecardDeleteEntry permissions to all groups------------------------------------------------------
            command = "SELECT UserGroupNum FROM usergroup";
            DataTable table = Db.getTable(command);
            int groupNum = new int();
            for (int i = 0;i < table.Rows.Count;i++)
            {
                groupNum = PIn.Int(table.Rows[i][0].ToString());
                command = "INSERT INTO grouppermission (NewerDate,UserGroupNum,PermType) " + "VALUES('0001-01-01'," + POut.Long(groupNum) + "," + POut.Long(((Enum)OpenDentBusiness.Permissions.TreatPlanEdit).ordinal()) + ")";
                Db.nonQ32(command);
                command = "INSERT INTO grouppermission (NewerDate,UserGroupNum,PermType) " + "VALUES('0001-01-01'," + POut.Long(groupNum) + "," + POut.Long(((Enum)OpenDentBusiness.Permissions.ReportProdInc).ordinal()) + ")";
                Db.nonQ32(command);
                command = "INSERT INTO grouppermission (NewerDate,UserGroupNum,PermType) " + "VALUES('0001-01-01'," + POut.Long(groupNum) + "," + POut.Long(((Enum)OpenDentBusiness.Permissions.TimecardDeleteEntry).ordinal()) + ")";
                Db.nonQ32(command);
            }
            command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('BillingExcludeIfUnsentProcs','0','')";
            Db.nonQ32(command);
            command = "SELECT MAX(DefNum) FROM definition";
            int defNum = PIn.int(Db.getScalar(command)) + 1;
            command = "SELECT MAX(ItemOrder) FROM definition WHERE Category=18";
            int order = PIn.int(Db.getScalar(command)) + 1;
            command = "INSERT INTO definition (DefNum,Category,ItemOrder,ItemName,ItemValue,ItemColor,IsHidden) VALUES(" + POut.Long(defNum) + ",18," + POut.Long(order) + ",'Tooth Charts','T',0,0)";
            Db.nonQ32(command);
            command = "ALTER TABLE apptview ADD OnlyScheduledProvs tinyint unsigned NOT NULL";
            Db.nonQ32(command);
            //Get rid of some old columns
            command = "ALTER TABLE appointment DROP Lab";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment DROP InstructorNum";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment DROP SchoolClassNum";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment DROP SchoolCourseNum";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment DROP GradePoint";
            Db.nonQ32(command);
            command = "DROP TABLE IF EXISTS graphicassembly";
            Db.nonQ32(command);
            command = "DROP TABLE IF EXISTS graphicelement";
            Db.nonQ32(command);
            command = "DROP TABLE IF EXISTS graphicpoint";
            Db.nonQ32(command);
            command = "DROP TABLE IF EXISTS graphicshape";
            Db.nonQ32(command);
            command = "DROP TABLE IF EXISTS graphictype";
            Db.nonQ32(command);
            command = "DROP TABLE IF EXISTS proclicense";
            Db.nonQ32(command);
            command = "DROP TABLE IF EXISTS scheddefault";
            Db.nonQ32(command);
            //Change all primary and foreign keys to 64 bit---------------------------------------------------------------
            command = "ALTER TABLE account CHANGE AccountNum AccountNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE accountingautopay CHANGE AccountingAutoPayNum AccountingAutoPayNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE accountingautopay CHANGE PayType PayType bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE adjustment CHANGE AdjNum AdjNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE adjustment CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE adjustment CHANGE AdjType AdjType bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE adjustment CHANGE ProvNum ProvNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE adjustment CHANGE ProcNum ProcNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment CHANGE AptNum AptNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment CHANGE Confirmed Confirmed bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment CHANGE Op Op bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment CHANGE ProvNum ProvNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment CHANGE ProvHyg ProvHyg bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment CHANGE NextAptNum NextAptNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment CHANGE UnschedStatus UnschedStatus bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment CHANGE Assistant Assistant bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment CHANGE ClinicNum ClinicNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment CHANGE InsPlan1 InsPlan1 bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE appointment CHANGE InsPlan2 InsPlan2 bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE appointmentrule CHANGE AppointmentRuleNum AppointmentRuleNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE apptview CHANGE ApptViewNum ApptViewNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE apptviewitem CHANGE ApptViewItemNum ApptViewItemNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE apptviewitem CHANGE ApptViewNum ApptViewNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE apptviewitem CHANGE OpNum OpNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE apptviewitem CHANGE ProvNum ProvNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE autocode CHANGE AutoCodeNum AutoCodeNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE autocodecond CHANGE AutoCodeCondNum AutoCodeCondNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE autocodecond CHANGE AutoCodeItemNum AutoCodeItemNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE autocodeitem CHANGE AutoCodeItemNum AutoCodeItemNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE autocodeitem CHANGE AutoCodeNum AutoCodeNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE autocodeitem CHANGE CodeNum CodeNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE autonote CHANGE AutoNoteNum AutoNoteNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE autonotecontrol CHANGE AutoNoteControlNum AutoNoteControlNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE benefit CHANGE BenefitNum BenefitNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE benefit CHANGE PlanNum PlanNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE benefit CHANGE PatPlanNum PatPlanNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE benefit CHANGE CovCatNum CovCatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE benefit CHANGE CodeNum CodeNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE canadianclaim CHANGE ClaimNum ClaimNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE canadianextract CHANGE CanadianExtractNum CanadianExtractNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE canadianextract CHANGE ClaimNum ClaimNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE canadiannetwork CHANGE CanadianNetworkNum CanadianNetworkNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE carrier CHANGE CarrierNum CarrierNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE carrier CHANGE CanadianNetworkNum CanadianNetworkNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claim CHANGE ClaimNum ClaimNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE claim CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claim CHANGE PlanNum PlanNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claim CHANGE ProvTreat ProvTreat bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claim CHANGE ProvBill ProvBill bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claim CHANGE ReferringProv ReferringProv bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claim CHANGE PlanNum2 PlanNum2 bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claim CHANGE ClinicNum ClinicNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claim CHANGE ClaimForm ClaimForm bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claimattach CHANGE ClaimAttachNum ClaimAttachNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE claimattach CHANGE ClaimNum ClaimNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claimcondcodelog CHANGE ClaimCondCodeLogNum ClaimCondCodeLogNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE claimcondcodelog CHANGE ClaimNum ClaimNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claimform CHANGE ClaimFormNum ClaimFormNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE claimformitem CHANGE ClaimFormItemNum ClaimFormItemNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE claimformitem CHANGE ClaimFormNum ClaimFormNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claimpayment CHANGE ClaimPaymentNum ClaimPaymentNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE claimpayment CHANGE ClinicNum ClinicNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claimpayment CHANGE DepositNum DepositNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claimproc CHANGE ClaimProcNum ClaimProcNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE claimproc CHANGE ProcNum ProcNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claimproc CHANGE ClaimNum ClaimNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claimproc CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claimproc CHANGE ProvNum ProvNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claimproc CHANGE ClaimPaymentNum ClaimPaymentNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claimproc CHANGE PlanNum PlanNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE claimvalcodelog CHANGE ClaimValCodeLogNum ClaimValCodeLogNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE claimvalcodelog CHANGE ClaimNum ClaimNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE clearinghouse CHANGE ClearinghouseNum ClearinghouseNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE clinic CHANGE ClinicNum ClinicNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE clinic CHANGE InsBillingProv InsBillingProv bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE clockevent CHANGE ClockEventNum ClockEventNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE clockevent CHANGE EmployeeNum EmployeeNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE commlog CHANGE CommlogNum CommlogNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE commlog CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE commlog CHANGE CommType CommType bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE commlog CHANGE UserNum UserNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE computer CHANGE ComputerNum ComputerNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE computerpref CHANGE ComputerPrefNum ComputerPrefNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE contact CHANGE ContactNum ContactNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE contact CHANGE Category Category bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE covcat CHANGE CovCatNum CovCatNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE covspan CHANGE CovSpanNum CovSpanNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE covspan CHANGE CovCatNum CovCatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE definition CHANGE DefNum DefNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE deletedobject CHANGE DeletedObjectNum DeletedObjectNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE deletedobject CHANGE ObjectNum ObjectNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE deposit CHANGE DepositNum DepositNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE disease CHANGE DiseaseNum DiseaseNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE disease CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE disease CHANGE DiseaseDefNum DiseaseDefNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE diseasedef CHANGE DiseaseDefNum DiseaseDefNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE displayfield CHANGE DisplayFieldNum DisplayFieldNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE document CHANGE DocNum DocNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE document CHANGE DocCategory DocCategory bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE document CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE document CHANGE MountItemNum MountItemNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE dunning CHANGE DunningNum DunningNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE dunning CHANGE BillingType BillingType bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE electid CHANGE ElectIDNum ElectIDNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE emailattach CHANGE EmailAttachNum EmailAttachNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE emailattach CHANGE EmailMessageNum EmailMessageNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE emailmessage CHANGE EmailMessageNum EmailMessageNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE emailmessage CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE emailtemplate CHANGE EmailTemplateNum EmailTemplateNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE employee CHANGE EmployeeNum EmployeeNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE employer CHANGE EmployerNum EmployerNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE etrans CHANGE EtransNum EtransNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE etrans CHANGE ClearingHouseNum ClearingHouseNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE etrans CHANGE ClaimNum ClaimNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE etrans CHANGE CarrierNum CarrierNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE etrans CHANGE CarrierNum2 CarrierNum2 bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE etrans CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE etrans CHANGE EtransMessageTextNum EtransMessageTextNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE etrans CHANGE AckEtransNum AckEtransNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE etrans CHANGE PlanNum PlanNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE etransmessagetext CHANGE EtransMessageTextNum EtransMessageTextNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE fee CHANGE FeeNum FeeNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE fee CHANGE FeeSched FeeSched bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE fee CHANGE CodeNum CodeNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE feesched CHANGE FeeSchedNum FeeSchedNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE files CHANGE DocNum DocNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE formpat CHANGE FormPatNum FormPatNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE formpat CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE grouppermission CHANGE GroupPermNum GroupPermNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE grouppermission CHANGE UserGroupNum UserGroupNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE hl7msg CHANGE HL7MsgNum HL7MsgNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE hl7msg CHANGE AptNum AptNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE insfilingcode CHANGE InsFilingCodeNum InsFilingCodeNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE insfilingcodesubtype CHANGE InsFilingCodeSubTypeNum InsFilingCodeSubTypeNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE insfilingcodesubtype CHANGE InsFilingCodeNum InsFilingCodeNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE insplan CHANGE PlanNum PlanNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE insplan CHANGE Subscriber Subscriber bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE insplan CHANGE FeeSched FeeSched bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE insplan CHANGE ClaimFormNum ClaimFormNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE insplan CHANGE CopayFeeSched CopayFeeSched bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE insplan CHANGE EmployerNum EmployerNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE insplan CHANGE CarrierNum CarrierNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE insplan CHANGE AllowedFeeSched AllowedFeeSched bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE insplan CHANGE FilingCode FilingCode bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE insplan CHANGE FilingCodeSubtype FilingCodeSubtype bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE journalentry CHANGE JournalEntryNum JournalEntryNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE journalentry CHANGE TransactionNum TransactionNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE journalentry CHANGE AccountNum AccountNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE journalentry CHANGE ReconcileNum ReconcileNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE labcase CHANGE LabCaseNum LabCaseNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE labcase CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE labcase CHANGE LaboratoryNum LaboratoryNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE labcase CHANGE AptNum AptNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE labcase CHANGE PlannedAptNum PlannedAptNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE labcase CHANGE ProvNum ProvNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE laboratory CHANGE LaboratoryNum LaboratoryNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE labturnaround CHANGE LabTurnaroundNum LabTurnaroundNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE labturnaround CHANGE LaboratoryNum LaboratoryNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE letter CHANGE LetterNum LetterNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE lettermerge CHANGE LetterMergeNum LetterMergeNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE lettermerge CHANGE Category Category bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE lettermergefield CHANGE FieldNum FieldNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE lettermergefield CHANGE LetterMergeNum LetterMergeNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE medication CHANGE MedicationNum MedicationNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE medication CHANGE GenericNum GenericNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE medicationpat CHANGE MedicationPatNum MedicationPatNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE medicationpat CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE medicationpat CHANGE MedicationNum MedicationNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE mount CHANGE MountNum MountNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE mount CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE mount CHANGE DocCategory DocCategory bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE mountdef CHANGE MountDefNum MountDefNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE mountitem CHANGE MountItemNum MountItemNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE mountitem CHANGE MountNum MountNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE mountitemdef CHANGE MountItemDefNum MountItemDefNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE mountitemdef CHANGE MountDefNum MountDefNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE operatory CHANGE OperatoryNum OperatoryNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE operatory CHANGE ProvDentist ProvDentist bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE operatory CHANGE ProvHygienist ProvHygienist bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE operatory CHANGE ClinicNum ClinicNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE patfield CHANGE PatFieldNum PatFieldNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE patfield CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE patfielddef CHANGE PatFieldDefNum PatFieldDefNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE patient CHANGE PatNum PatNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE patient CHANGE Guarantor Guarantor bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE patient CHANGE PriProv PriProv bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE patient CHANGE SecProv SecProv bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE patient CHANGE FeeSched FeeSched bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE patient CHANGE BillingType BillingType bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE patient CHANGE EmployerNum EmployerNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE patient CHANGE ClinicNum ClinicNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE patient CHANGE SiteNum SiteNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE patient CHANGE ResponsParty ResponsParty bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE patientnote CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE patplan CHANGE PatPlanNum PatPlanNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE patplan CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE patplan CHANGE PlanNum PlanNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE payment CHANGE PayNum PayNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE payment CHANGE PayType PayType bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE payment CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE payment CHANGE ClinicNum ClinicNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE payment CHANGE DepositNum DepositNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE payperiod CHANGE PayPeriodNum PayPeriodNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE payplan CHANGE PayPlanNum PayPlanNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE payplan CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE payplan CHANGE Guarantor Guarantor bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE payplan CHANGE PlanNum PlanNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE payplancharge CHANGE PayPlanChargeNum PayPlanChargeNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE payplancharge CHANGE PayPlanNum PayPlanNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE payplancharge CHANGE Guarantor Guarantor bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE payplancharge CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE payplancharge CHANGE ProvNum ProvNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE paysplit CHANGE SplitNum SplitNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE paysplit CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE paysplit CHANGE PayNum PayNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE paysplit CHANGE ProvNum ProvNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE paysplit CHANGE PayPlanNum PayPlanNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE paysplit CHANGE ProcNum ProcNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE perioexam CHANGE PerioExamNum PerioExamNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE perioexam CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE perioexam CHANGE ProvNum ProvNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE periomeasure CHANGE PerioMeasureNum PerioMeasureNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE periomeasure CHANGE PerioExamNum PerioExamNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE pharmacy CHANGE PharmacyNum PharmacyNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE phonenumber CHANGE PhoneNumberNum PhoneNumberNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE phonenumber CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE plannedappt CHANGE PlannedApptNum PlannedApptNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE plannedappt CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE plannedappt CHANGE AptNum AptNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE popup CHANGE PopupNum PopupNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE popup CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE printer CHANGE PrinterNum PrinterNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE printer CHANGE ComputerNum ComputerNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procbutton CHANGE ProcButtonNum ProcButtonNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE procbutton CHANGE Category Category bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procbuttonitem CHANGE ProcButtonItemNum ProcButtonItemNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE procbuttonitem CHANGE ProcButtonNum ProcButtonNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procbuttonitem CHANGE AutoCodeNum AutoCodeNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procbuttonitem CHANGE CodeNum CodeNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE proccodenote CHANGE ProcCodeNoteNum ProcCodeNoteNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE proccodenote CHANGE CodeNum CodeNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE proccodenote CHANGE ProvNum ProvNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurecode CHANGE CodeNum CodeNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurecode CHANGE ProcCat ProcCat bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurelog CHANGE ProcNum ProcNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurelog CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurelog CHANGE AptNum AptNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurelog CHANGE Priority Priority bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurelog CHANGE ProvNum ProvNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurelog CHANGE Dx Dx bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurelog CHANGE PlannedAptNum PlannedAptNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurelog CHANGE ClinicNum ClinicNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurelog CHANGE ProcNumLab ProcNumLab bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurelog CHANGE BillingTypeOne BillingTypeOne bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurelog CHANGE BillingTypeTwo BillingTypeTwo bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurelog CHANGE CodeNum CodeNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurelog CHANGE SiteNum SiteNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procnote CHANGE ProcNoteNum ProcNoteNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE procnote CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procnote CHANGE ProcNum ProcNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE procnote CHANGE UserNum UserNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE proctp CHANGE ProcTPNum ProcTPNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE proctp CHANGE TreatPlanNum TreatPlanNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE proctp CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE proctp CHANGE ProcNumOrig ProcNumOrig bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE proctp CHANGE Priority Priority bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE program CHANGE ProgramNum ProgramNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE programproperty CHANGE ProgramPropertyNum ProgramPropertyNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE programproperty CHANGE ProgramNum ProgramNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE provider CHANGE ProvNum ProvNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE provider CHANGE FeeSched FeeSched bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE provider CHANGE SchoolClassNum SchoolClassNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE provider CHANGE AnesthProvType AnesthProvType bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE providerident CHANGE ProviderIdentNum ProviderIdentNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE providerident CHANGE ProvNum ProvNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE question CHANGE QuestionNum QuestionNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE question CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE question CHANGE FormPatNum FormPatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE questiondef CHANGE QuestionDefNum QuestionDefNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE quickpastecat CHANGE QuickPasteCatNum QuickPasteCatNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE quickpastenote CHANGE QuickPasteNoteNum QuickPasteNoteNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE quickpastenote CHANGE QuickPasteCatNum QuickPasteCatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE recall CHANGE RecallNum RecallNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE recall CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE recall CHANGE RecallStatus RecallStatus bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE recall CHANGE RecallTypeNum RecallTypeNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE recalltrigger CHANGE RecallTriggerNum RecallTriggerNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE recalltrigger CHANGE RecallTypeNum RecallTypeNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE recalltrigger CHANGE CodeNum CodeNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE recalltype CHANGE RecallTypeNum RecallTypeNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE reconcile CHANGE ReconcileNum ReconcileNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE reconcile CHANGE AccountNum AccountNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE refattach CHANGE RefAttachNum RefAttachNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE refattach CHANGE ReferralNum ReferralNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE refattach CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE referral CHANGE ReferralNum ReferralNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE referral CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE referral CHANGE Slip Slip bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE registrationkey CHANGE RegistrationKeyNum RegistrationKeyNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE registrationkey CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE repeatcharge CHANGE RepeatChargeNum RepeatChargeNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE repeatcharge CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE reqneeded CHANGE ReqNeededNum ReqNeededNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE reqneeded CHANGE SchoolCourseNum SchoolCourseNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE reqneeded CHANGE SchoolClassNum SchoolClassNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE reqstudent CHANGE ReqStudentNum ReqStudentNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE reqstudent CHANGE ReqNeededNum ReqNeededNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE reqstudent CHANGE SchoolCourseNum SchoolCourseNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE reqstudent CHANGE ProvNum ProvNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE reqstudent CHANGE AptNum AptNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE reqstudent CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE reqstudent CHANGE InstructorNum InstructorNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE rxalert CHANGE RxAlertNum RxAlertNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE rxalert CHANGE RxDefNum RxDefNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE rxalert CHANGE DiseaseDefNum DiseaseDefNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE rxdef CHANGE RxDefNum RxDefNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE rxpat CHANGE RxNum RxNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE rxpat CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE rxpat CHANGE ProvNum ProvNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE rxpat CHANGE PharmacyNum PharmacyNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE schedule CHANGE ScheduleNum ScheduleNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE schedule CHANGE ProvNum ProvNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE schedule CHANGE BlockoutType BlockoutType bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE schedule CHANGE EmployeeNum EmployeeNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE scheduleop CHANGE ScheduleOpNum ScheduleOpNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE scheduleop CHANGE ScheduleNum ScheduleNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE scheduleop CHANGE OperatoryNum OperatoryNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE schoolclass CHANGE SchoolClassNum SchoolClassNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE schoolcourse CHANGE SchoolCourseNum SchoolCourseNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE screen CHANGE ScreenNum ScreenNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE screen CHANGE ProvNum ProvNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE screen CHANGE ScreenGroupNum ScreenGroupNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE screengroup CHANGE ScreenGroupNum ScreenGroupNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE securitylog CHANGE SecurityLogNum SecurityLogNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE securitylog CHANGE UserNum UserNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE securitylog CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE sheet CHANGE SheetNum SheetNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE sheet CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE sheetdef CHANGE SheetDefNum SheetDefNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE sheetfield CHANGE SheetFieldNum SheetFieldNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE sheetfield CHANGE SheetNum SheetNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE sheetfielddef CHANGE SheetFieldDefNum SheetFieldDefNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE sheetfielddef CHANGE SheetDefNum SheetDefNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE sigbutdef CHANGE SigButDefNum SigButDefNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE sigbutdefelement CHANGE ElementNum ElementNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE sigbutdefelement CHANGE SigButDefNum SigButDefNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE sigbutdefelement CHANGE SigElementDefNum SigElementDefNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE sigelement CHANGE SigElementNum SigElementNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE sigelement CHANGE SigElementDefNum SigElementDefNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE sigelement CHANGE SignalNum SignalNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE sigelementdef CHANGE SigElementDefNum SigElementDefNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE `signal` CHANGE SignalNum SignalNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE `signal` CHANGE TaskNum TaskNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE site CHANGE SiteNum SiteNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE statement CHANGE StatementNum StatementNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE statement CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE statement CHANGE DocNum DocNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE supplier CHANGE SupplierNum SupplierNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE supply CHANGE SupplyNum SupplyNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE supply CHANGE SupplierNum SupplierNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE supply CHANGE Category Category bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE supplyneeded CHANGE SupplyNeededNum SupplyNeededNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE supplyorder CHANGE SupplyOrderNum SupplyOrderNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE supplyorder CHANGE SupplierNum SupplierNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE supplyorderitem CHANGE SupplyOrderItemNum SupplyOrderItemNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE supplyorderitem CHANGE SupplyOrderNum SupplyOrderNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE supplyorderitem CHANGE SupplyNum SupplyNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE task CHANGE TaskNum TaskNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE task CHANGE TaskListNum TaskListNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE task CHANGE KeyNum KeyNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE task CHANGE FromNum FromNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE task CHANGE UserNum UserNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE taskancestor CHANGE TaskAncestorNum TaskAncestorNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE taskancestor CHANGE TaskNum TaskNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE taskancestor CHANGE TaskListNum TaskListNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE tasklist CHANGE TaskListNum TaskListNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE tasklist CHANGE Parent Parent bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE tasklist CHANGE FromNum FromNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE tasksubscription CHANGE TaskSubscriptionNum TaskSubscriptionNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE tasksubscription CHANGE UserNum UserNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE tasksubscription CHANGE TaskListNum TaskListNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE terminalactive CHANGE TerminalActiveNum TerminalActiveNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE terminalactive CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE timeadjust CHANGE TimeAdjustNum TimeAdjustNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE timeadjust CHANGE EmployeeNum EmployeeNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE toolbutitem CHANGE ToolButItemNum ToolButItemNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE toolbutitem CHANGE ProgramNum ProgramNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE toothinitial CHANGE ToothInitialNum ToothInitialNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE toothinitial CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE transaction CHANGE TransactionNum TransactionNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE transaction CHANGE UserNum UserNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE transaction CHANGE DepositNum DepositNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE transaction CHANGE PayNum PayNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE treatplan CHANGE TreatPlanNum TreatPlanNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE treatplan CHANGE PatNum PatNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE treatplan CHANGE ResponsParty ResponsParty bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE usergroup CHANGE UserGroupNum UserGroupNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE userod CHANGE UserNum UserNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE userod CHANGE UserGroupNum UserGroupNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE userod CHANGE EmployeeNum EmployeeNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE userod CHANGE ClinicNum ClinicNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE userod CHANGE ProvNum ProvNum bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE userod CHANGE TaskListInBox TaskListInBox bigint NOT NULL";
            Db.nonQ32(command);
            command = "ALTER TABLE userquery CHANGE QueryNum QueryNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "ALTER TABLE zipcode CHANGE ZipCodeNum ZipCodeNum bigint NOT NULL auto_increment";
            Db.nonQ32(command);
            command = "DROP TABLE IF EXISTS replicationserver";
            Db.nonQ32(command);
            command = "CREATE TABLE replicationserver (\r\n" + 
            "\t\t\t\t\tReplicationServerNum bigint NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tDescript TEXT NOT NULL,\r\n" + 
            "\t\t\t\t\tServerId INT unsigned NOT NULL,\r\n" + 
            "\t\t\t\t\tRangeStart BIGINT NOT NULL,\r\n" + 
            "\t\t\t\t\tRangeEnd BIGINT NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY(ReplicationServerNum)\r\n" + 
            "\t\t\t\t\t)";
            Db.nonQ32(command);
            command = "ALTER TABLE claimproc ADD WriteOffEst double NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE claimproc ADD WriteOffEstOverride double NOT NULL";
            Db.nonQ(command);
            command = "UPDATE claimproc SET WriteOffEst = -1";
            Db.nonQ(command);
            command = "UPDATE claimproc SET WriteOffEstOverride = -1";
            Db.nonQ(command);
            command = "ALTER TABLE paysplit ADD UnearnedType bigint NOT NULL";
            Db.nonQ(command);
            command = "INSERT INTO preference (PrefName,ValueString,Comments) VALUES ('RecallMaxNumberReminders','-1','')";
            Db.nonQ(command);
            command = "ALTER TABLE recall ADD DisableUntilBalance double NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE recall ADD DisableUntilDate date NOT NULL default '0001-01-01'";
            Db.nonQ(command);
            command = "ALTER TABLE program ADD PluginDllName varchar(255) NOT NULL";
            Db.nonQ(command);
            command = "DELETE FROM preference WHERE PrefName = 'DeductibleBeforePercentAsDefault'";
            Db.nonQ(command);
            //We will not delete this pref just in case it's needed later.  It's not used anywhere right now.
            //command = "DELETE FROM preference WHERE PrefName='EnableAnesthMod'";
            //We will not delete this pref just in case it's needed later.  It's not used anywhere right now.
            //command="DELETE FROM preference WHERE PrefName='ImageStore'";//this option is no longer supported.
            //Db.NonQ(command);
            command = "SELECT MAX(ItemOrder) FROM definition WHERE Category=2";
            int itemOrder = PIn.int(Db.getScalar(command)) + 1;
            //eg 7+1
            //this should end up with an acceptable autoincrement even if using random primary keys.
            command = "INSERT INTO definition (Category,ItemOrder,ItemName,ItemValue) VALUES (2," + POut.int(itemOrder) + ",'E-mailed','E-mailed')";
            Db.nonQ(command);
            command = "SELECT DefNum FROM definition WHERE Category=2 AND ItemOrder=" + POut.int(itemOrder);
            String defNumStr = Db.getScalar(command);
            command = "INSERT INTO preference (PrefName,ValueString) VALUES ('ConfirmStatusEmailed','" + defNumStr + "')";
            Db.nonQ(command);
            command = "INSERT INTO preference (PrefName,ValueString) VALUES ('ConfirmEmailSubject','Appointment Confirmation')";
            Db.nonQ(command);
            command = "INSERT INTO preference (PrefName,ValueString) VALUES ('ConfirmEmailMessage','[NameF], We would like to confirm your appointment on [date] at [time]')";
            Db.nonQ(command);
            command = "ALTER TABLE replicationserver ADD AtoZpath varchar(255) NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE replicationserver ADD UpdateBlocked tinyint NOT NULL";
            Db.nonQ(command);
            try
            {
                command = "ALTER TABLE task ADD INDEX (KeyNum)";
                Db.nonQ(command);
            }
            catch (Exception __dummyCatchVar1)
            {
            }

            command = "UPDATE preference SET ValueString = '6.8.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to6_8_7();
    }

    private static void to6_8_7() throws Exception {
        //duplicated in 6.7
        if (FromVersion < new Version("6.8.7.0"))
        {
            String command = new String();
            try
            {
                command = "ALTER TABLE claimpayment ADD INDEX (DepositNum)";
                Db.nonQ(command);
                command = "ALTER TABLE payment ADD INDEX (DepositNum)";
                Db.nonQ(command);
            }
            catch (Exception __dummyCatchVar2)
            {
            }

            //in case any of the indices already exists.
            command = "UPDATE preference SET ValueString = '6.8.7.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to6_8_11();
    }

    private static void to6_8_11() throws Exception {
        //duplicated in 6.6 and 6.7
        if (FromVersion < new Version("6.8.11.0"))
        {
            String command = new String();
            //Mediadent version 4 and 5---------------------------------------
            command = "SELECT COUNT(*) FROM programproperty WHERE PropertyDesc='MediaDent Version 4 or 5'";
            if (StringSupport.equals(Db.getScalar(command), "0"))
            {
                command = "SELECT ProgramNum FROM program WHERE ProgName='MediaDent'";
                long programNum = PIn.long(Db.getScalar(command));
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'" + POut.string("MediaDent Version 4 or 5") + "', " + "'5')";
                Db.nonQ(command);
                //add back the image folder
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'" + POut.string("Image Folder") + "', " + "'" + POut.string("C:\\Mediadent\\patients\\") + "')";
                Db.nonQ(command);
            }
             
            command = "UPDATE preference SET ValueString = '6.8.11.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to6_8_12();
    }

    private static void to6_8_12() throws Exception {
        if (FromVersion < new Version("6.8.12.0"))
        {
            String command = new String();
            //Ewoo_EZDent bridge-------------------------------------------------------------------------
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'EwooEZDent', " + "'EwooEZDent from www.ewoousa.com', " + "'0', " + "'" + POut.string("C:\\EasyDent4\\Edp4\\EasyDent4.exe") + "', " + "'', " + "'')";
            long programNum = Db.nonQ(command,true);
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.long(programNum) + "', " + "'" + POut.Long(((Enum)ToolBarsAvail.ChartModule).ordinal()) + "', " + "'EZDent')";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '6.8.12.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to6_8_24();
    }

    private static void to6_8_24() throws Exception {
        if (FromVersion < new Version("6.8.24.0"))
        {
            String command = new String();
            command = "SELECT CodeNum FROM procedurecode WHERE ProcCode='D1204'";
            String codeNum1204 = Db.getScalar(command);
            command = "SELECT CodeNum FROM procedurecode WHERE ProcCode='D1203'";
            String codeNum1203 = Db.getScalar(command);
            if (!StringSupport.equals(codeNum1203, "") && !StringSupport.equals(codeNum1204, ""))
            {
                command = "UPDATE benefit SET CodeNum=" + codeNum1203 + " WHERE CodeNum=" + codeNum1204;
                Db.nonQ(command);
            }
             
            command = "UPDATE preference SET ValueString = '6.8.24.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to6_9_1();
    }

    private static void to6_9_1() throws Exception {
        if (FromVersion < new Version("6.9.1.0"))
        {
            String command = new String();
            //Mountainside Bridge---------------------------------------------------------------------------
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Mountainside', " + "'Mountainside from www.mountainsidesoftware.com', " + "'0', " + "'', " + "'', " + "'')";
            Db.nonQ(command);
            //Move the HL7 folders from eCW to the pref table
            command = "SELECT PropertyValue FROM programproperty WHERE PropertyDesc='HL7FolderOut'";
            String folder = Db.getScalar(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('HL7FolderOut','" + POut.string(folder) + "')";
            Db.nonQ(command);
            command = "DELETE FROM programproperty WHERE PropertyDesc='HL7FolderOut'";
            Db.nonQ(command);
            command = "SELECT PropertyValue FROM programproperty WHERE PropertyDesc='HL7FolderIn'";
            folder = Db.getScalar(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('HL7FolderIn','" + POut.string(folder) + "')";
            Db.nonQ(command);
            command = "DELETE FROM programproperty WHERE PropertyDesc='HL7FolderIn'";
            Db.nonQ(command);
            //Clinic enhancements----------------------------------------------------------------------------------------
            command = "ALTER TABLE paysplit ADD ClinicNum bigint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE paysplit ADD INDEX (ClinicNum)";
            Db.nonQ(command);
            command = "Update payment,paysplit SET paysplit.ClinicNum = payment.ClinicNum WHERE paysplit.PayNum = payment.PayNum";
            Db.nonQ(command);
            command = "ALTER TABLE claimproc ADD ClinicNum bigint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE claimproc ADD INDEX (ClinicNum)";
            Db.nonQ(command);
            command = "Update procedurelog,claimproc SET claimproc.ClinicNum = procedurelog.ClinicNum WHERE claimproc.ProcNum = procedurelog.ProcNum";
            Db.nonQ(command);
            //then, for claimprocs that are total payments and not attached to any proc:
            command = "Update claim,claimproc SET claimproc.ClinicNum = claim.ClinicNum WHERE claimproc.ClaimNum = claim.ClaimNum AND claimproc.ProcNum=0";
            Db.nonQ(command);
            command = "ALTER TABLE adjustment ADD ClinicNum bigint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE adjustment ADD INDEX (ClinicNum)";
            Db.nonQ(command);
            command = "ALTER TABLE payplancharge ADD ClinicNum bigint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE payplancharge ADD INDEX (ClinicNum)";
            Db.nonQ(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('PerioColorCAL','-16777011')";
            Db.nonQ(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('PerioColorFurcations','-16777216')";
            Db.nonQ(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('PerioColorFurcationsRed','-7667712')";
            Db.nonQ(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('PerioColorGM','-8388480')";
            Db.nonQ(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('PerioColorMGJ','-29696')";
            Db.nonQ(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('PerioColorProbing','-16744448')";
            Db.nonQ(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('PerioColorProbingRed','-65536')";
            Db.nonQ(command);
            command = "ALTER TABLE registrationkey ADD VotesAllotted int NOT NULL";
            Db.nonQ(command);
            command = "UPDATE registrationkey SET VotesAllotted =100";
            Db.nonQ(command);
            command = "ALTER TABLE apptview ADD OnlySchedBeforeTime time NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE apptview ADD OnlySchedAfterTime time NOT NULL";
            Db.nonQ(command);
            command = "DROP TABLE IF EXISTS automation";
            Db.nonQ(command);
            command = "CREATE TABLE automation (\r\n" + 
            "\t\t\t\t\tAutomationNum bigint NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tDescription text NOT NULL,\r\n" + 
            "\t\t\t\t\tAutotrigger tinyint NOT NULL,\r\n" + 
            "\t\t\t\t\tProcCodes text NOT NULL,\r\n" + 
            "\t\t\t\t\tAutoAction tinyint NOT NULL,\r\n" + 
            "\t\t\t\t\tSheetNum bigint NOT NULL,\r\n" + 
            "\t\t\t\t\tCommType bigint NOT NULL,\r\n" + 
            "\t\t\t\t\tMessageContent text NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY(AutomationNum)\r\n" + 
            "\t\t\t\t\t)";
            Db.nonQ(command);
            command = "ALTER TABLE sheet ADD Description varchar(255) NOT NULL";
            Db.nonQ(command);
            for (int i = 0;i < Enum.GetNames(SheetTypeEnum.class).Length;i++)
            {
                //for each sheettype, set descriptions for all sheets of that type.
                command = "UPDATE sheet SET Description= '" + POut.String(Enum.GetNames(SheetTypeEnum.class)[i]) + "' " + "WHERE SheetType=" + POut.int(i);
                Db.nonQ(command);
            }
            command = "UPDATE preference SET ValueString = '6.9.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to6_9_4();
    }

    private static void to6_9_4() throws Exception {
        if (FromVersion < new Version("6.9.4.0"))
        {
            String command = new String();
            command = "ALTER TABLE automation CHANGE SheetNum SheetDefNum bigint NOT NULL";
            Db.nonQ(command);
            //Trophy
            command = "SELECT ProgramNum FROM program WHERE ProgName='TrophyEnhanced'";
            long programNum = PIn.long(Db.getScalar(command));
            if (programNum > 0)
            {
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Enter 1 to enable Numbered Mode', " + "'0')";
                Db.nonQ(command);
            }
             
            command = "UPDATE preference SET ValueString = '6.9.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to6_9_10();
    }

    private static void to6_9_10() throws Exception {
        if (FromVersion < new Version("6.9.10.0"))
        {
            String command = new String();
            command = "ALTER TABLE computerpref ADD COLUMN DirectXFormat VARCHAR(255) DEFAULT ''";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '6.9.10.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_0_1();
    }

    private static void to7_0_1() throws Exception {
        if (FromVersion < new Version("7.0.1.0"))
        {
            String command = new String();
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('InsDefaultShowUCRonClaims','0')";
            Db.nonQ(command);
            command = "DROP TABLE IF EXISTS equipment";
            Db.nonQ(command);
            command = "CREATE TABLE equipment (\r\n" + 
            "\t\t\t\t\tEquipmentNum bigint NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tDescription text NOT NULL,\r\n" + 
            "\t\t\t\t\tSerialNumber varchar(255),\r\n" + 
            "\t\t\t\t\tModelYear varchar(2),\r\n" + 
            "\t\t\t\t\tDatePurchased date NOT NULL default \'0001-01-01\',\r\n" + 
            "\t\t\t\t\tDateSold date NOT NULL default \'0001-01-01\',\r\n" + 
            "\t\t\t\t\tPurchaseCost double NOT NULL,\r\n" + 
            "\t\t\t\t\tMarketValue double NOT NULL,\r\n" + 
            "\t\t\t\t\tLocation text NOT NULL,\r\n" + 
            "\t\t\t\t\tDateEntry date NOT NULL default \'0001-01-01\',\r\n" + 
            "\t\t\t\t\tPRIMARY KEY(EquipmentNum)\r\n" + 
            "\t\t\t\t\t)";
            Db.nonQ(command);
            command = "ALTER TABLE sheet ADD ShowInTerminal tinyint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE sheetfielddef ADD RadioButtonValue varchar(255) NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE sheetfield ADD RadioButtonValue varchar(255) NOT NULL";
            Db.nonQ(command);
            //add a bunch of indexes to the benefit table to make it faster when there are many similar plans
            command = "ALTER TABLE benefit ADD INDEX(CovCatNum)";
            Db.nonQ(command);
            command = "ALTER TABLE benefit ADD INDEX(BenefitType)";
            Db.nonQ(command);
            command = "ALTER TABLE benefit ADD INDEX(Percent)";
            Db.nonQ(command);
            command = "ALTER TABLE benefit ADD INDEX(MonetaryAmt)";
            Db.nonQ(command);
            command = "ALTER TABLE benefit ADD INDEX(TimePeriod)";
            Db.nonQ(command);
            command = "ALTER TABLE benefit ADD INDEX(QuantityQualifier)";
            Db.nonQ(command);
            command = "ALTER TABLE benefit ADD INDEX(Quantity)";
            Db.nonQ(command);
            command = "ALTER TABLE benefit ADD INDEX(CodeNum)";
            Db.nonQ(command);
            command = "ALTER TABLE benefit ADD INDEX(CoverageLevel)";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.0.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ32(command);
        }
         
        to7_1_1();
    }

    private static void to7_1_1() throws Exception {
        if (FromVersion < new Version("7.1.1.0"))
        {
            String command = new String();
            try
            {
                command = "ALTER TABLE refattach ADD INDEX (PatNum)";
                Db.nonQ(command);
            }
            catch (Exception __dummyCatchVar3)
            {
            }

            command = "INSERT INTO preference(PrefName,ValueString) VALUES('UpdateShowMsiButtons','0')";
            Db.nonQ(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('ReportsPPOwriteoffDefaultToProcDate','0')";
            Db.nonQ(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('ReportsShowPatNum','0')";
            Db.nonQ(command);
            command = "ALTER TABLE userod ADD DefaultHidePopups tinyint NOT NULL";
            Db.nonQ(command);
            command = "DROP TABLE IF EXISTS taskunread";
            Db.nonQ(command);
            command = "CREATE TABLE taskunread (\r\n" + 
            "\t\t\t\t\tTaskUnreadNum bigint NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tTaskNum bigint NOT NULL,\r\n" + 
            "\t\t\t\t\tUserNum bigint NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (TaskUnreadNum),\r\n" + 
            "\t\t\t\t\tINDEX(TaskNum),\r\n" + 
            "\t\t\t\t\tINDEX(UserNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ(command);
            //MercuryDE clearinghouse.
            command = "INSERT INTO clearinghouse(Description,ExportPath,IsDefault,Payors,Eformat,\r\n" + 
            "Password,ResponsePath,CommBridge,ClientProgram,ISA05,ISA07,\r\n" + 
            "ISA08,\r\n" + 
            "ISA15,\r\n" + 
            "GS03) \r\n" + 
            "VALUES(\'MercuryDE\',\'" + POut.string("C:\\MercuryDE\\Temp\\") + "\',\'0\',\'\',\'1\',\'\',\'\',\'11\',\'\',\'ZZ\',\'ZZ\',\r\n" + 
            "\'204203105\',\r\n" + 
            "\'P\',\r\n" + 
            "\'204203105\')";
            Db.nonQ(command);
            command = "ALTER TABLE clockevent CHANGE TimeEntered TimeEntered1 datetime NOT NULL default '0001-01-01 00:00:00'";
            Db.nonQ(command);
            command = "ALTER TABLE clockevent CHANGE TimeDisplayed TimeDisplayed1 datetime NOT NULL default '0001-01-01 00:00:00'";
            Db.nonQ(command);
            command = "ALTER TABLE clockevent ADD TimeEntered2 datetime NOT NULL default '0001-01-01 00:00:00'";
            Db.nonQ(command);
            command = "ALTER TABLE clockevent ADD TimeDisplayed2 datetime NOT NULL default '0001-01-01 00:00:00'";
            Db.nonQ(command);
            command = "SELECT * FROM clockevent WHERE ClockStatus != 2 ORDER BY EmployeeNum,TimeDisplayed1";
            DataTable table = Db.getTable(command);
            DateTime timeEntered2 = new DateTime();
            DateTime timeDisplayed2 = new DateTime();
            String note = new String();
            int clockStatus = new int();
            for (int i = 0;i < table.Rows.Count;i++)
            {
                if (StringSupport.equals(table.Rows[i]["ClockIn"].ToString(), "0"))
                {
                    continue;
                }
                 
                //false
                //only stop on clock-in rows, not clock-out.
                if (i == table.Rows.Count - 1)
                {
                    break;
                }
                 
                //if this is the last row
                //because we always need the next clock-out to actually do anything.
                if (StringSupport.equals(table.Rows[i + 1]["ClockIn"].ToString(), "1"))
                {
                    continue;
                }
                 
                //true
                //if the next row is also a clock-in, then we have two clock-ins in a row.  Can't do anything.
                if (table.Rows[i]["EmployeeNum"].ToString() != table.Rows[i + 1]["EmployeeNum"].ToString())
                {
                    continue;
                }
                 
                //employeeNums don't match
                timeEntered2 = PIn.DateT(table.Rows[i + 1]["TimeEntered1"].ToString());
                //The time of the second row
                timeDisplayed2 = PIn.DateT(table.Rows[i + 1]["TimeDisplayed1"].ToString());
                clockStatus = PIn.Int(table.Rows[i + 1]["ClockStatus"].ToString());
                note = PIn.String(table.Rows[i + 1]["Note"].ToString());
                command = "UPDATE clockevent SET " + "TimeEntered2 = " + POut.dateT(timeEntered2) + ", " + "TimeDisplayed2 = " + POut.dateT(timeDisplayed2) + ", " + "ClockStatus = " + POut.int(clockStatus) + ", " + "Note = CONCAT(Note,'" + POut.string(note) + "') " + "WHERE ClockEventNum = " + table.Rows[i]["ClockEventNum"].ToString();
                Db.nonQ(command);
                command = "DELETE FROM clockevent WHERE ClockEventNum = " + table.Rows[i + 1]["ClockEventNum"].ToString();
                Db.nonQ(command);
            }
            //now, breaks, which are out/in instead of in/out.
            command = "SELECT * FROM clockevent WHERE ClockStatus = 2 ORDER BY EmployeeNum,TimeDisplayed1";
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                if (StringSupport.equals(table.Rows[i]["ClockIn"].ToString(), "1"))
                {
                    continue;
                }
                 
                //true
                //only stop on clock-out rows, not clock-in.
                if (i == table.Rows.Count - 1)
                {
                    break;
                }
                 
                //if this is the last row
                //because we always need the next clock-in to actually do anything.
                if (StringSupport.equals(table.Rows[i + 1]["ClockIn"].ToString(), "0"))
                {
                    continue;
                }
                 
                //false
                //if the next row is also a clock-out, then we have two clock-outs in a row.  Can't do anything.
                if (table.Rows[i]["EmployeeNum"].ToString() != table.Rows[i + 1]["EmployeeNum"].ToString())
                {
                    continue;
                }
                 
                //employeeNums don't match
                timeEntered2 = PIn.DateT(table.Rows[i + 1]["TimeEntered1"].ToString());
                //The time of the second row
                timeDisplayed2 = PIn.DateT(table.Rows[i + 1]["TimeDisplayed1"].ToString());
                //clockStatus=PIn.Int(table.Rows[i+1]["ClockStatus"].ToString());
                note = PIn.String(table.Rows[i + 1]["Note"].ToString());
                //+"ClockStatus = "+POut.Int(clockStatus)+", "
                command = "UPDATE clockevent SET " + "TimeEntered2 = " + POut.dateT(timeEntered2) + ", " + "TimeDisplayed2 = " + POut.dateT(timeDisplayed2) + ", " + "Note = CONCAT(Note,'" + POut.string(note) + "') " + "WHERE ClockEventNum = " + table.Rows[i]["ClockEventNum"].ToString();
                Db.nonQ(command);
                command = "DELETE FROM clockevent WHERE ClockEventNum = " + table.Rows[i + 1]["ClockEventNum"].ToString();
                Db.nonQ(command);
            }
            command = "ALTER TABLE clockevent DROP ClockIn";
            Db.nonQ(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('PasswordsMustBeStrong','0')";
            Db.nonQ(command);
            command = "ALTER TABLE userod ADD PasswordIsStrong tinyint NOT NULL";
            Db.nonQ(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('SecurityLockDays','0')";
            Db.nonQ(command);
            command = "ALTER TABLE laboratory DROP LabSlip";
            Db.nonQ(command);
            command = "ALTER TABLE laboratory ADD Slip bigint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE laboratory ADD Address varchar(255) NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE laboratory ADD City varchar(255) NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE laboratory ADD State varchar(255) NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE laboratory ADD Zip varchar(255) NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE laboratory ADD Email varchar(255) NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE laboratory ADD WirelessPhone varchar(255) NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE procedurelog ADD HideGraphics tinyint NOT NULL";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.1.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_1_2();
    }

    private static void to7_1_2() throws Exception {
        if (FromVersion < new Version("7.1.2.0"))
        {
            String command = new String();
            command = "ALTER TABLE provider ADD TaxonomyCodeOverride varchar(255) NOT NULL";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.1.2.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_1_16();
    }

    private static void to7_1_16() throws Exception {
        if (FromVersion < new Version("7.1.16.0"))
        {
            String command = new String();
            command = "ALTER TABLE etransmessagetext CHANGE MessageText MessageText mediumtext NOT NULL";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.1.16.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_1_18();
    }

    private static void to7_1_18() throws Exception {
        if (FromVersion < new Version("7.1.18.0"))
        {
            String command = new String();
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('ToothChartMoveMenuToRight','0')";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.1.18.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_1_24();
    }

    private static void to7_1_24() throws Exception {
        if (FromVersion < new Version("7.1.24.0"))
        {
            String command = new String();
            command = "UPDATE patient SET Guarantor=PatNum WHERE Guarantor=0;";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.1.24.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_2_1();
    }

    private static void to7_2_1() throws Exception {
        if (FromVersion < new Version("7.2.1.0"))
        {
            String command = new String();
            //this column was a varchar holding currency amounts.
            command = "ALTER TABLE claimvalcodelog CHANGE ValAmount ValAmount double not null";
            Db.nonQ(command);
            command = "ALTER TABLE carrier ADD CanadianEncryptionMethod tinyint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE carrier ADD CanadianTransactionPrefix varchar(255) NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE carrier ADD CanadianSupportedTypes int NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE canadianclaim DROP EligibilityCode";
            Db.nonQ(command);
            command = "ALTER TABLE canadianclaim DROP SchoolName";
            Db.nonQ(command);
            command = "ALTER TABLE patient ADD CanadianEligibilityCode tinyint NOT NULL";
            Db.nonQ(command);
            command = "DROP TABLE canadianextract";
            Db.nonQ(command);
            command = "DROP TABLE canadianclaim";
            Db.nonQ(command);
            command = "ALTER TABLE claim ADD CanadianMaterialsForwarded varchar(10) NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE claim ADD CanadianReferralProviderNum varchar(20) NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE claim ADD CanadianReferralReason tinyint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE claim ADD CanadianIsInitialLower varchar(5) NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE claim ADD CanadianDateInitialLower date NOT NULL default '0001-01-01'";
            Db.nonQ(command);
            command = "ALTER TABLE claim ADD CanadianMandProsthMaterial tinyint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE claim ADD CanadianIsInitialUpper varchar(5) NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE claim ADD CanadianDateInitialUpper date NOT NULL default '0001-01-01'";
            Db.nonQ(command);
            command = "ALTER TABLE claim ADD CanadianMaxProsthMaterial tinyint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE carrier DROP IsPMP";
            Db.nonQ(command);
            command = "ALTER TABLE insplan ADD CanadianPlanFlag varchar(5) NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE procedurelog ADD CanadianTypeCodes varchar(20) NOT NULL";
            Db.nonQ(command);
            command = "UPDATE clearinghouse SET ResponsePath='" + POut.string("C:\\MercuryDE\\Reports\\") + "' WHERE ResponsePath='' AND Description='MercuryDE' LIMIT 1";
            Db.nonQ(command);
            command = "DROP TABLE IF EXISTS guardian";
            Db.nonQ(command);
            command = "CREATE TABLE guardian (\r\n" + 
            "\t\t\t\t\tGuardianNum bigint NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tPatNumChild bigint NOT NULL,\r\n" + 
            "\t\t\t\t\tPatNumGuardian bigint NOT NULL,\r\n" + 
            "\t\t\t\t\tRelationship tinyint NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (GuardianNum),\r\n" + 
            "\t\t\t\t\tINDEX(PatNumChild),\r\n" + 
            "\t\t\t\t\tINDEX(PatNumGuardian)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ(command);
            command = "ALTER TABLE apptviewitem ADD ElementAlignment tinyint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE apptview ADD StackBehavUR tinyint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE apptview ADD StackBehavLR tinyint NOT NULL";
            Db.nonQ(command);
            command = "DROP TABLE IF EXISTS apptfield";
            Db.nonQ(command);
            command = "CREATE TABLE apptfield (\r\n" + 
            "\t\t\t\t\tApptFieldNum bigint NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tAptNum bigint NOT NULL,\r\n" + 
            "\t\t\t\t\tFieldName varchar(255) NOT NULL,\r\n" + 
            "\t\t\t\t\tFieldValue text NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (ApptFieldNum),\r\n" + 
            "\t\t\t\t\tINDEX(AptNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ(command);
            command = "DROP TABLE IF EXISTS apptfielddef";
            Db.nonQ(command);
            command = "CREATE TABLE apptfielddef (\r\n" + 
            "\t\t\t\t\tApptFieldDefNum bigint NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tFieldName varchar(255) NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (ApptFieldDefNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ(command);
            try
            {
                command = "ALTER TABLE patfield ADD INDEX (PatNum)";
                Db.nonQ(command);
            }
            catch (Exception __dummyCatchVar4)
            {
            }

            //in case the index already exists.
            command = "ALTER TABLE labcase ADD LabFee double NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE insplan CHANGE PlanNote PlanNote text NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE insplan CHANGE BenefitNotes BenefitNotes text NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE insplan CHANGE SubscNote SubscNote text NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE apptviewitem ADD ApptFieldDefNum bigint NOT NULL";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.2.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_2_3();
    }

    private static void to7_2_3() throws Exception {
        if (FromVersion < new Version("7.2.3.0"))
        {
            String command = new String();
            command = "ALTER TABLE apptviewitem ADD PatFieldDefNum bigint NOT NULL";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.2.3.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_2_4();
    }

    private static void to7_2_4() throws Exception {
        if (FromVersion < new Version("7.2.4.0"))
        {
            String command = new String();
            command = "UPDATE apptview SET StackBehavUR=1";
            //all horiz
            Db.nonQ(command);
            command = "SELECT ApptViewNum FROM apptview";
            //all of them.
            DataTable table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                command = "SELECT COUNT(*) FROM apptviewitem WHERE ApptViewNum=" + table.Rows[i]["ApptViewNum"].ToString() + " AND ElementDesc='AssistantAbbr'";
                if (StringSupport.equals(Db.getCount(command), "0"))
                {
                    command = "INSERT INTO apptviewitem (ApptViewNum,ElementDesc,ElementOrder,ElementColor,ElementAlignment) VALUES(" + table.Rows[i]["ApptViewNum"].ToString() + "," + "'AssistantAbbr'," + "0," + "-16777216," + "2)";
                    //black
                    //LR
                    Db.nonQ(command);
                }
                 
                command = "SELECT COUNT(*) FROM apptviewitem WHERE ApptViewNum=" + table.Rows[i]["ApptViewNum"].ToString() + " AND ElementDesc='ConfirmedColor'";
                if (StringSupport.equals(Db.getCount(command), "0"))
                {
                    command = "INSERT INTO apptviewitem (ApptViewNum,ElementDesc,ElementOrder,ElementColor,ElementAlignment) VALUES(" + table.Rows[i]["ApptViewNum"].ToString() + "," + "'ConfirmedColor'," + "0," + "-16777216," + "1)";
                    //UR
                    Db.nonQ(command);
                }
                 
                command = "SELECT COUNT(*) FROM apptviewitem WHERE ApptViewNum=" + table.Rows[i]["ApptViewNum"].ToString() + " AND ElementDesc='HasIns[I]'";
                if (StringSupport.equals(Db.getCount(command), "0"))
                {
                    command = "INSERT INTO apptviewitem (ApptViewNum,ElementDesc,ElementOrder,ElementColor,ElementAlignment) VALUES(" + table.Rows[i]["ApptViewNum"].ToString() + "," + "'HasIns[I]'," + "1," + "-16777216," + "1)";
                    //UR
                    Db.nonQ(command);
                }
                 
                command = "SELECT COUNT(*) FROM apptviewitem WHERE ApptViewNum=" + table.Rows[i]["ApptViewNum"].ToString() + " AND ElementDesc='InsToSend[!]'";
                if (StringSupport.equals(Db.getCount(command), "0"))
                {
                    command = "INSERT INTO apptviewitem (ApptViewNum,ElementDesc,ElementOrder,ElementColor,ElementAlignment) VALUES(" + table.Rows[i]["ApptViewNum"].ToString() + "," + "'InsToSend[!]'," + "2," + "-65536," + "1)";
                    //red
                    //UR
                    Db.nonQ(command);
                }
                 
            }
            command = "UPDATE preference SET ValueString = '7.2.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_2_7();
    }

    private static void to7_2_7() throws Exception {
        if (FromVersion < new Version("7.2.7.0"))
        {
            String command = new String();
            command = "UPDATE apptviewitem SET ElementColor=-1 WHERE ElementDesc='" + POut.string("MedOrPremed[+]") + "'";
            //white
            Db.nonQ(command);
            command = "UPDATE apptviewitem SET ElementColor=-1 WHERE ElementDesc='" + POut.string("HasIns[I]") + "'";
            Db.nonQ(command);
            command = "UPDATE apptviewitem SET ElementColor=-1 WHERE ElementDesc='" + POut.string("InsToSend[!]") + "'";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.2.7.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_2_12();
    }

    private static void to7_2_12() throws Exception {
        if (FromVersion < new Version("7.2.12.0"))
        {
            String command = new String();
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('RecallUseEmailIfHasEmailAddress','0')";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.2.12.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_2_31();
    }

    private static void to7_2_31() throws Exception {
        if (FromVersion < new Version("7.2.31.0"))
        {
            String command = new String();
            //add Sopro bridge:
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Sopro', " + "'Sopro by Acteon www.acteongroup.com', " + "'0', " + "'" + POut.string("C:\\Program Files\\Sopro Imaging\\SOPRO Imaging.exe") + "', " + "'', " + "'')";
            Db.nonQ(command);
            command = "SELECT ProgramNum FROM program WHERE ProgName='Sopro' LIMIT 1";
            long programNum = PIn.long(Db.getScalar(command));
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'Sopro')";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.2.31.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_2_36();
    }

    private static void to7_2_36() throws Exception {
        if (FromVersion < new Version("7.2.36.0"))
        {
            String command = new String();
            command = "ALTER TABLE hl7msg CHANGE MsgText MsgText MEDIUMTEXT";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.2.36.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_2_38();
    }

    private static void to7_2_38() throws Exception {
        if (FromVersion < new Version("7.2.38.0"))
        {
            String command = new String();
            //add Progeny bridge:
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Progeny', " + "'Progeny from www.progenydental.com', " + "'0', " + "'" + POut.string("C:\\Program Files\\Progeny\\Progeny Imaging\\PIBridge.exe") + "', " + "'', " + "'')";
            Db.nonQ(command);
            command = "SELECT ProgramNum FROM program WHERE ProgName='Progeny' LIMIT 1";
            long programNum = PIn.long(Db.getScalar(command));
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ32(command);
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'Progeny')";
            Db.nonQ32(command);
            //ProcDate, split off time component-----------------------------------------------------------------------
            command = "ALTER TABLE procedurelog ADD ProcTime time NOT NULL";
            Db.nonQ(command);
            command = "UPDATE procedurelog SET ProcTime = time(ProcDate)";
            Db.nonQ(command);
            command = "ALTER TABLE procedurelog CHANGE ProcDate ProcDate date NOT NULL default '0001-01-01'";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.2.38.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_3_1();
    }

    private static void to7_3_1() throws Exception {
        if (FromVersion < new Version("7.3.1.0"))
        {
            String command = new String();
            command = "ALTER TABLE patient CHANGE SchoolName SchoolName varchar(255) NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE sheet ADD IsWebForm tinyint NOT NULL";
            Db.nonQ(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('WebHostSynchServerURL','https://opendentalsoft.com/WebHostSynch/WebHostSynch.asmx')";
            Db.nonQ(command);
            command = "ALTER TABLE appointment ADD DateTimeAskedToArrive datetime NOT NULL default '0001-01-01 00:00:00'";
            Db.nonQ(command);
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'OrthoPlex', " + "'OrthoPlex from Dentsply GAC', " + "'0', " + "'" + POut.string("C:\\\\Program Files\\\\GAC\\\\OrthoPlex v3.20\\\\OrthoPlex.exe") + "', " + "'-E [PatNum]', " + "'')";
            Db.nonQ(command);
            command = "SELECT ProgramNum FROM program WHERE ProgName='OrthoPlex' LIMIT 1";
            long programNum = PIn.long(Db.getScalar(command));
            command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.long(programNum) + "', " + "'" + POut.int(((Enum)ToolBarsAvail.ChartModule).ordinal()) + "', " + "'OrthoPlex')";
            Db.nonQ(command);
            command = "ALTER TABLE patient ADD AskToArriveEarly int NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE appointment ADD ProcsColored text NOT NULL";
            Db.nonQ(command);
            command = "DROP TABLE IF EXISTS procapptcolor";
            Db.nonQ(command);
            command = "CREATE TABLE procapptcolor (\r\n" + 
            "\t\t\t\t\tProcApptColorNum bigint NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tCodeRange varchar(255) NOT NULL,\r\n" + 
            "\t\t\t\t\tColorText int NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (ProcApptColorNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ(command);
            command = "ALTER TABLE procapptcolor ADD ShowPreviousDate tinyint NOT NULL";
            Db.nonQ(command);
            command = "DROP TABLE IF EXISTS chartview";
            Db.nonQ(command);
            command = "CREATE TABLE chartview (\r\n" + 
            "\t\t\t\t\tChartViewNum bigint NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tDescription varchar(255) NOT NULL,\r\n" + 
            "\t\t\t\t\tItemOrder int NOT NULL,\r\n" + 
            "\t\t\t\t\tProcStatuses tinyint NOT NULL,\r\n" + 
            "\t\t\t\t\tObjectTypes smallint NOT NULL,\r\n" + 
            "\t\t\t\t\tShowProcNotes tinyint NOT NULL,\r\n" + 
            "\t\t\t\t\tIsAudit tinyint NOT NULL,\r\n" + 
            "\t\t\t\t\tSelectedTeethOnly tinyint NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (ChartViewNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ(command);
            command = "ALTER TABLE sheetfield ADD RadioButtonGroup varchar(255) NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE sheetfield ADD IsRequired tinyint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE sheetfielddef ADD RadioButtonGroup varchar(255) NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE sheetfielddef ADD IsRequired tinyint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE displayfield ADD ChartViewNum bigint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE displayfield ADD INDEX (ChartViewNum)";
            Db.nonQ(command);
            command = "DELETE FROM displayfield WHERE Category = 0";
            Db.nonQ(command);
            command = "DROP TABLE IF EXISTS procgroupitem";
            Db.nonQ(command);
            command = "CREATE TABLE procgroupitem (\r\n" + 
            "\t\t\t\t\tProcGroupItemNum bigint NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tProcNum bigint NOT NULL,\r\n" + 
            "\t\t\t\t\tGroupNum bigint NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (ProcGroupItemNum),\r\n" + 
            "\t\t\t\t\tINDEX(ProcNum),\r\n" + 
            "\t\t\t\t\tINDEX(GroupNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ(command);
            command = "SELECT DefNum FROM definition WHERE Category=11 ORDER BY ItemOrder DESC LIMIT 1";
            long procCat = PIn.long(Db.getScalar(command));
            command = "INSERT INTO procedurecode (ProcCode,Descript,AbbrDesc,ProcTime,ProcCat,\r\n" + 
            "\t\t\t\t\tDefaultNote) VALUES(\'~GRP~\',\'Group Note\',\'GrpNote\',\'" + POut.string("/X/") + "'," + POut.long(procCat) + ",'')";
            Db.nonQ(command);
            //add Orion bridge:
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Orion', " + "'Orion', " + "'0', " + "'', " + "'', " + "'')";
            Db.nonQ(command);
            //add PayConnect bridge:
            command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'PayConnect', " + "'PayConnect from www.dentalxchange.com', " + "'0', " + "'', " + "'', " + "'No program path or arguments. Usernames and passwords are supplied by dentalxchange.')";
            Db.nonQ(command);
            command = "SELECT ProgramNum FROM program WHERE ProgName='PayConnect' LIMIT 1";
            programNum = PIn.long(Db.getScalar(command));
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Username', " + "'')";
            Db.nonQ(command);
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Password', " + "'')";
            Db.nonQ(command);
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'PaymentType', " + "'0')";
            Db.nonQ(command);
            //Delete NewPatientForm bridge
            command = "SELECT ProgramNum From program WHERE ProgName='NewPatientForm.com'";
            programNum = PIn.long(Db.getScalar(command));
            if (programNum > 0)
            {
                command = "DELETE FROM program WHERE ProgramNum=" + POut.long(programNum);
                Db.nonQ(command);
                command = "DELETE FROM toolbutitem WHERE ProgramNum=" + POut.long(programNum);
                Db.nonQ(command);
            }
             
            command = "DROP TABLE IF EXISTS orionproc";
            Db.nonQ(command);
            command = "CREATE TABLE orionproc (\r\n" + 
            "\t\t\t\t\tOrionProcNum bigint NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tProcNum bigint NOT NULL,\r\n" + 
            "\t\t\t\t\tDPC tinyint NOT NULL,\r\n" + 
            "\t\t\t\t\tDateScheduleBy date NOT NULL default \'0001-01-01\', \r\n" + 
            "\t\t\t\t\tDateStopClock date NOT NULL default \'0001-01-01\',  \r\n" + 
            "\t\t\t\t\tStatus2 int NOT NULL,\r\n" + 
            "\t\t\t\t\tIsOnCall tinyint NOT NULL,\r\n" + 
            "\t\t\t\t\tIsEffectiveComm tinyint NOT NULL,\r\n" + 
            "\t\t\t\t\tIsRepair tinyint NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (OrionProcNum),\r\n" + 
            "\t\t\t\t\tINDEX(ProcNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ(command);
            command = "ALTER TABLE commlog ADD Signature text NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE commlog ADD SigIsTopaz tinyint NOT NULL";
            Db.nonQ(command);
            //Everyone starts with sheet edit initially.
            command = "INSERT INTO grouppermission (NewerDays,UserGroupNum,PermType) " + "SELECT 0,UserGroupNum," + POut.int(((Enum)OpenDentBusiness.Permissions.SheetEdit).ordinal()) + " " + "FROM usergroup";
            Db.nonQ(command);
            command = "ALTER TABLE procedurelog ADD ProcTimeEnd time NOT NULL";
            Db.nonQ(command);
            //Everyone starts with commlog edit initially.
            command = "INSERT INTO grouppermission (NewerDays,UserGroupNum,PermType) " + "SELECT 0,UserGroupNum," + POut.int(((Enum)OpenDentBusiness.Permissions.CommlogEdit).ordinal()) + " " + "FROM usergroup";
            Db.nonQ(command);
            command = "ALTER TABLE patfielddef ADD FieldType tinyint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE patfielddef ADD PickList text NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE commlog ADD DateTStamp timestamp";
            Db.nonQ(command);
            command = "UPDATE commlog SET DateTStamp=NOW()";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurelog ADD DateTStamp timestamp";
            Db.nonQ(command);
            command = "UPDATE procedurelog SET DateTStamp=NOW()";
            Db.nonQ32(command);
            command = "ALTER TABLE procedurecode ADD IsMultiVisit tinyint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE chartview ADD OrionStatusFlags int NOT NULL";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.3.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_4_1();
    }

    private static void to7_4_1() throws Exception {
        if (FromVersion < new Version("7.4.1.0"))
        {
            String command = new String();
            command = "SELECT TimeAdjustNum,RegHours,OTimeHours FROM timeadjust";
            DataTable table = Db.getTable(command);
            command = "UPDATE timeadjust SET RegHours=0, OTimeHours=0";
            Db.nonQ(command);
            command = "ALTER TABLE timeadjust CHANGE RegHours RegHours time NOT NULL default '00:00:00'";
            Db.nonQ(command);
            command = "ALTER TABLE timeadjust CHANGE OTimeHours OTimeHours time NOT NULL default '00:00:00'";
            Db.nonQ(command);
            long timeAdjustNum = new long();
            double regDouble = new double();
            double oTimeDouble = new double();
            TimeSpan regSpan = new TimeSpan();
            TimeSpan oTimeSpan = new TimeSpan();
            for (int i = 0;i < table.Rows.Count;i++)
            {
                timeAdjustNum = PIn.Long(table.Rows[i]["TimeAdjustNum"].ToString());
                regDouble = PIn.Double(table.Rows[i]["RegHours"].ToString());
                oTimeDouble = PIn.Double(table.Rows[i]["OTimeHours"].ToString());
                regSpan = TimeSpan.FromHours(regDouble);
                oTimeSpan = TimeSpan.FromHours(oTimeDouble);
                command = "UPDATE timeadjust " + "SET RegHours='" + POut.tSpan(regSpan) + "', " + "OTimeHours='" + POut.tSpan(oTimeSpan) + "' " + "WHERE TimeAdjustNum=" + POut.long(timeAdjustNum);
                Db.nonQ(command);
            }
            command = "ALTER TABLE clockevent ADD OTimeHours time NOT NULL";
            Db.nonQ(command);
            command = "UPDATE clockevent SET OTimeHours ='-01:00:00'";
            //default to -1 to indicate no override.
            Db.nonQ(command);
            command = "ALTER TABLE clockevent ADD OTimeAuto time NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE clockevent ADD Adjust time NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE clockevent ADD AdjustAuto time NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE clockevent ADD AdjustIsOverridden tinyint NOT NULL";
            Db.nonQ(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('TimeCardsUseDecimalInsteadOfColon','0')";
            Db.nonQ(command);
            command = "DROP TABLE IF EXISTS timecardrule";
            Db.nonQ(command);
            command = "CREATE TABLE timecardrule (\r\n" + 
            "\t\t\t\t\tTimeCardRuleNum bigint NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tEmployeeNum bigint NOT NULL,\r\n" + 
            "\t\t\t\t\tOverHoursPerDay time NOT NULL,\r\n" + 
            "\t\t\t\t\tAfterTimeOfDay time NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (TimeCardRuleNum),\r\n" + 
            "\t\t\t\t\tINDEX(EmployeeNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('SecurityLogOffWithWindows','0')";
            Db.nonQ(command);
            command = "DROP TABLE IF EXISTS automationcondition";
            Db.nonQ(command);
            command = "CREATE TABLE automationcondition (\r\n" + 
            "\t\t\t\t\tAutomationConditionNum bigint NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tAutomationNum bigint NOT NULL,\r\n" + 
            "\t\t\t\t\tCompareField tinyint NOT NULL,\r\n" + 
            "\t\t\t\t\tComparison tinyint NOT NULL,\r\n" + 
            "\t\t\t\t\tCompareString varchar(255) NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (AutomationConditionNum),\r\n" + 
            "\t\t\t\t\tINDEX(AutomationNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('TimeCardsMakesAdjustmentsForOverBreaks','0')";
            Db.nonQ(command);
            command = "ALTER TABLE timeadjust ADD IsAuto tinyint NOT NULL";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.4.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_4_7();
    }

    private static void to7_4_7() throws Exception {
        if (FromVersion < new Version("7.4.7.0"))
        {
            String command = new String();
            try
            {
                List<long> aptNums = new List<long>();
                Appointment[] aptList = Appointments.GetForPeriod(DateTime.Now.Date, DateTime.MaxValue.AddDays(-10));
                for (int i = 0;i < aptList.Length;i++)
                {
                    aptNums.Add(aptList[i].AptNum);
                }
                List<Procedure> procsMultApts = Procedures.GetProcsMultApts(aptNums);
                for (int i = 0;i < aptList.Length;i++)
                {
                    Appointment newApt = aptList[i].Clone();
                    newApt.ProcDescript = "";
                    Procedure[] procsForOne = Procedures.GetProcsOneApt(aptList[i].AptNum, procsMultApts);
                    String procDescript = "";
                    for (int j = 0;j < procsForOne.Length;j++)
                    {
                        ProcedureCode procCode = ProcedureCodes.GetProcCodeFromDb(procsForOne[j].CodeNum);
                        if (j > 0)
                        {
                            procDescript += ", ";
                        }
                         
                        OpenDentBusiness.TreatmentArea.APPLY __dummyScrutVar0 = procCode.TreatArea.ToString();
                        if (__dummyScrutVar0.equals("Surf"))
                        {
                            //TreatmentArea.Surf:
                            procDescript += "#" + Tooth.GetToothLabel(procsForOne[j].ToothNum) + "-" + procsForOne[j].Surf + "-";
                        }
                        else //""#12-MOD-"
                        if (__dummyScrutVar0.equals("Tooth"))
                        {
                            //TreatmentArea.Tooth:
                            procDescript += "#" + Tooth.GetToothLabel(procsForOne[j].ToothNum) + "-";
                        }
                        else //"#12-"
                        if (__dummyScrutVar0.equals("Quad"))
                        {
                            //TreatmentArea.Quad:
                            procDescript += procsForOne[j].Surf + "-";
                        }
                        else //"UL-"
                        if (__dummyScrutVar0.equals("Sextant"))
                        {
                            //TreatmentArea.Sextant:
                            procDescript += "S" + procsForOne[j].Surf + "-";
                        }
                        else //"S2-"
                        if (__dummyScrutVar0.equals("Arch"))
                        {
                            //TreatmentArea.Arch:
                            procDescript += procsForOne[j].Surf + "-";
                        }
                        else //"U-"
                        if (__dummyScrutVar0.equals("ToothRange"))
                        {
                        }
                        else
                        {
                        }      
                        //TreatmentArea.ToothRange:
                        //area 3 or 0 (mouth)
                        procDescript += procCode.AbbrDesc;
                    }
                    newApt.ProcDescript = procDescript;
                    Appointments.Update(newApt, aptList[i]);
                }
            }
            catch (Exception __dummyCatchVar5)
            {
            }

            //do nothing.  Should not have used objects.  They are causing failures as the objects change in future versions.
            command = "UPDATE preference SET ValueString = '7.4.7.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_5_1();
    }

    /**
    * Does nothing if this pref is already present
    */
    public static void set_7_5_17_AutoMerge(YN InsPlanConverstion_7_5_17_AutoMergeYN) throws Exception {
        String command = "SELECT COUNT(*) FROM preference WHERE PrefName='InsPlanConverstion_7_5_17_AutoMergeYN'";
        if (StringSupport.equals(Db.getCount(command), "0"))
        {
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('InsPlanConverstion_7_5_17_AutoMergeYN','" + POut.int(((Enum)InsPlanConverstion_7_5_17_AutoMergeYN).ordinal()) + "')";
            Db.nonQ(command);
        }
        else
        {
            command = "UPDATE preference SET ValueString ='" + POut.int(((Enum)InsPlanConverstion_7_5_17_AutoMergeYN).ordinal()) + "' WHERE PrefName = 'InsPlanConverstion_7_5_17_AutoMergeYN'";
            Db.nonQ(command);
        } 
    }

    private static void to7_5_1() throws Exception {
        if (FromVersion < new Version("7.5.1.0"))
        {
            String command = new String();
            command = "DROP TABLE IF EXISTS inssub";
            Db.nonQ(command);
            command = "CREATE TABLE inssub (\r\n" + 
            "\t\t\t\t\tInsSubNum bigint NOT NULL auto_increment,\r\n" + 
            "\t\t\t\t\tPlanNum bigint NOT NULL,\r\n" + 
            "\t\t\t\t\tSubscriber bigint NOT NULL,\r\n" + 
            "\t\t\t\t\tDateEffective date NOT NULL default \'0001-01-01\',\r\n" + 
            "\t\t\t\t\tDateTerm date NOT NULL default \'0001-01-01\',\r\n" + 
            "\t\t\t\t\tReleaseInfo tinyint NOT NULL,\r\n" + 
            "\t\t\t\t\tAssignBen tinyint NOT NULL,\r\n" + 
            "\t\t\t\t\tSubscriberID varchar(255) NOT NULL,\r\n" + 
            "\t\t\t\t\tBenefitNotes text NOT NULL,\r\n" + 
            "\t\t\t\t\tSubscNote text NOT NULL,\r\n" + 
            "\t\t\t\t\tOldPlanNum bigint NOT NULL,\r\n" + 
            "\t\t\t\t\tPRIMARY KEY (InsSubNum),\r\n" + 
            "\t\t\t\t\tINDEX(PlanNum), \r\n" + 
            "\t\t\t\t\tINDEX(Subscriber),\r\n" + 
            "\t\t\t\t\tINDEX(OldPlanNum)\r\n" + 
            "\t\t\t\t\t) DEFAULT CHARSET=utf8";
            Db.nonQ(command);
            command = "UPDATE insplan SET TrojanID='' WHERE TrojanID IS NULL";
            //In a previous version of this script, NULL TrojanIDs caused some insplan values to not carry forward.
            Db.nonQ(command);
            command = "UPDATE insplan SET GroupNum='' WHERE GroupNum IS NULL";
            Db.nonQ(command);
            command = "UPDATE insplan SET GroupName='' WHERE GroupName IS NULL";
            Db.nonQ(command);
            //Master plan for fixing references to plannums throughout the program--------------------------------------
            //But many of these only apply to plansShared.
            //appointment.InsPlan1/2 -- UPDATE InsPlan1/2
            //benefit.PlanNum -- DELETE unused
            //claim.PlanNum/PlanNum2 -- UPDATE PlanNum/2, add claim.InsSubNum/2
            //claimproc.PlanNum -- UPDATE PlanNum, add claimproc.InsSubNum
            //etrans.PlanNum -- UPDATE PlanNum, add etrans.InsSubNum
            //patplan.PlanNum -- UPDATE PlanNum, add patplan.InsSubNum
            //payplan.PlanNum -- UPDATE PlanNum, add payplan.InsSubNum
            command = "ALTER TABLE claim ADD InsSubNum bigint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE claim ADD INDEX (InsSubNum)";
            Db.nonQ(command);
            command = "ALTER TABLE claim ADD InsSubNum2 bigint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE claim ADD INDEX (InsSubNum2)";
            Db.nonQ(command);
            command = "ALTER TABLE claimproc ADD InsSubNum bigint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE claimproc ADD INDEX (InsSubNum)";
            Db.nonQ(command);
            command = "ALTER TABLE etrans ADD InsSubNum bigint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE etrans ADD INDEX (InsSubNum)";
            Db.nonQ(command);
            command = "ALTER TABLE patplan ADD InsSubNum bigint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE patplan ADD INDEX (InsSubNum)";
            Db.nonQ(command);
            command = "ALTER TABLE payplan ADD InsSubNum bigint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE payplan ADD INDEX (InsSubNum)";
            Db.nonQ(command);
            command = "SELECT ValueString FROM preference WHERE PrefName = 'InsPlanConverstion_7_5_17_AutoMergeYN'";
            //This line was added in 7.5.17.
            boolean autoMerge = (StringSupport.equals(Db.getScalar(command), "1"));
            //Yes
            if (autoMerge)
            {
                //This option was added in 7.5.17.
                //Create a temporary table that will hold a copy of all the original plans.
                command = "DROP TABLE IF EXISTS tempinsplan";
                Db.nonQ(command);
                command = "CREATE TABLE tempinsplan SELECT * FROM insplan";
                Db.nonQ(command);
                command = "ALTER TABLE tempinsplan ADD NewPlanNum bigint NOT NULL";
                //This new column is the only thing different about this table.
                Db.nonQ(command);
                command = "ALTER TABLE tempinsplan ADD INDEX (NewPlanNum)";
                Db.nonQ(command);
                command = "ALTER TABLE tempinsplan ADD INDEX (PlanNum)";
                Db.nonQ(command);
                command = "ALTER TABLE tempinsplan ADD INDEX (Subscriber)";
                Db.nonQ(command);
                command = "ALTER TABLE tempinsplan ADD INDEX (CarrierNum)";
                Db.nonQ(command);
                //Create a temporary table that will hold a copy of all the unique plans
                command = "DROP TABLE IF EXISTS tempunique";
                Db.nonQ(command);
                command = "CREATE TABLE tempunique SELECT * FROM insplan GROUP BY EmployerNum,GroupName,GroupNum,DivisionNo,CarrierNum,IsMedical,TrojanID,FeeSched";
                Db.nonQ(command);
                command = "ALTER TABLE tempunique ADD INDEX (PlanNum)";
                Db.nonQ(command);
                command = "ALTER TABLE tempunique ADD INDEX (Subscriber)";
                Db.nonQ(command);
                command = "ALTER TABLE tempunique ADD INDEX (CarrierNum)";
                Db.nonQ(command);
                command = "UPDATE tempinsplan,tempunique SET tempinsplan.NewPlanNum=tempunique.PlanNum " + "WHERE tempinsplan.EmployerNum=tempunique.EmployerNum " + "AND tempinsplan.GroupName=tempunique.GroupName " + "AND tempinsplan.GroupNum=tempunique.GroupNum " + "AND tempinsplan.DivisionNo=tempunique.DivisionNo " + "AND tempinsplan.CarrierNum=tempunique.CarrierNum " + "AND tempinsplan.IsMedical=tempunique.IsMedical " + "AND tempinsplan.TrojanID=tempunique.TrojanID " + "AND tempinsplan.FeeSched=tempunique.FeeSched";
                Db.nonQ(command);
                //Now, create a series of inssub rows, one for each of the original plans.
                //But instead of referencing the original planNum, reference the NewPlanNum
                command = "INSERT INTO inssub (PlanNum,Subscriber,DateEffective,DateTerm,ReleaseInfo,AssignBen,SubscriberID,BenefitNotes,SubscNote,OldPlanNum) " + "SELECT NewPlanNum,Subscriber,DateEffective,DateTerm,ReleaseInfo,AssignBen,SubscriberID,BenefitNotes,SubscNote,PlanNum " + "FROM tempinsplan";
                Db.nonQ(command);
                command = "DROP TABLE IF EXISTS tempinsplan";
                //to emphasize that we will not be using it again.
                Db.nonQ(command);
                //fix references to plannums throughout the program---------------------------------------------------
                //appointment.InsPlan1/2 -- UPDATE InsPlan1/2
                command = "ALTER TABLE appointment ADD OldInsPlan1 bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE appointment ADD INDEX (OldInsPlan1)";
                Db.nonQ(command);
                command = "UPDATE appointment SET OldInsPlan1 = InsPlan1";
                Db.nonQ(command);
                command = "ALTER TABLE appointment ADD OldInsPlan2 bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE appointment ADD INDEX (OldInsPlan2)";
                Db.nonQ(command);
                command = "UPDATE appointment SET OldInsPlan2 = InsPlan2";
                Db.nonQ(command);
                command = "UPDATE appointment SET InsPlan1=(SELECT PlanNum FROM inssub WHERE inssub.OldPlanNum=appointment.OldInsPlan1) WHERE InsPlan1 != 0";
                Db.nonQ(command);
                command = "UPDATE appointment SET InsPlan2=(SELECT PlanNum FROM inssub WHERE inssub.OldPlanNum=appointment.OldInsPlan2) WHERE InsPlan2 != 0";
                Db.nonQ(command);
                //benefit.PlanNum -- DELETE unused
                command = "DELETE FROM benefit WHERE PlanNum > 0 AND NOT EXISTS(SELECT * FROM tempunique WHERE tempunique.PlanNum=benefit.PlanNum)";
                Db.nonQ(command);
                //claim.PlanNum/PlanNum2 -- UPDATE PlanNum/2
                command = "ALTER TABLE claim ADD OldPlanNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE claim ADD INDEX (OldPlanNum)";
                Db.nonQ(command);
                command = "UPDATE claim SET OldPlanNum = PlanNum";
                Db.nonQ(command);
                command = "ALTER TABLE claim ADD OldPlanNum2 bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE claim ADD INDEX (OldPlanNum2)";
                Db.nonQ(command);
                command = "UPDATE claim SET OldPlanNum2 = PlanNum2";
                Db.nonQ(command);
                command = "UPDATE claim SET PlanNum=(SELECT PlanNum FROM inssub WHERE inssub.OldPlanNum=claim.OldPlanNum) WHERE PlanNum != 0";
                Db.nonQ(command);
                command = "UPDATE claim SET PlanNum2=(SELECT PlanNum FROM inssub WHERE inssub.OldPlanNum=claim.OldPlanNum2) WHERE PlanNum2 != 0";
                Db.nonQ(command);
                //claimproc.PlanNum -- UPDATE PlanNum
                command = "ALTER TABLE claimproc ADD OldPlanNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE claimproc ADD INDEX (OldPlanNum)";
                Db.nonQ(command);
                command = "UPDATE claimproc SET OldPlanNum = PlanNum";
                Db.nonQ(command);
                command = "UPDATE claimproc SET PlanNum=(SELECT PlanNum FROM inssub WHERE inssub.OldPlanNum=claimproc.OldPlanNum) WHERE PlanNum != 0";
                Db.nonQ(command);
                //etrans.PlanNum -- UPDATE PlanNum
                command = "ALTER TABLE etrans ADD OldPlanNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE etrans ADD INDEX (OldPlanNum)";
                Db.nonQ(command);
                command = "UPDATE etrans SET OldPlanNum = PlanNum";
                Db.nonQ(command);
                command = "UPDATE etrans SET PlanNum=(SELECT PlanNum FROM inssub WHERE inssub.OldPlanNum=etrans.OldPlanNum) WHERE PlanNum != 0";
                Db.nonQ(command);
                //patplan.PlanNum -- UPDATE PlanNum
                command = "ALTER TABLE patplan ADD OldPlanNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE patplan ADD INDEX (OldPlanNum)";
                Db.nonQ(command);
                command = "UPDATE patplan SET OldPlanNum = PlanNum";
                Db.nonQ(command);
                command = "UPDATE patplan SET PlanNum=(SELECT PlanNum FROM inssub WHERE inssub.OldPlanNum=patplan.OldPlanNum) WHERE PlanNum != 0";
                Db.nonQ(command);
                //payplan.PlanNum -- UPDATE PlanNum
                command = "ALTER TABLE payplan ADD OldPlanNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE payplan ADD INDEX (OldPlanNum)";
                Db.nonQ(command);
                command = "UPDATE payplan SET OldPlanNum = PlanNum";
                Db.nonQ(command);
                command = "UPDATE payplan SET PlanNum=(SELECT PlanNum FROM inssub WHERE inssub.OldPlanNum=payplan.OldPlanNum) WHERE PlanNum != 0";
                Db.nonQ(command);
                //Now, drop all the unused plans-------------------------------------------------------------------------------------------
                command = "DELETE FROM insplan WHERE NOT EXISTS(SELECT * FROM tempunique WHERE tempunique.PlanNum=insplan.PlanNum)";
                Db.nonQ(command);
                //Set all the InsSubNums.--------------------------------------------------------------------------------------------------
                //claim.PlanNum/PlanNum2 -- claim.InsSubNum/2
                command = "UPDATE claim SET InsSubNum = (SELECT InsSubNum FROM inssub WHERE inssub.OldPlanNum=claim.OldPlanNum) WHERE PlanNum > 0";
                Db.nonQ(command);
                command = "UPDATE claim SET InsSubNum2 = (SELECT InsSubNum FROM inssub WHERE inssub.OldPlanNum=claim.OldPlanNum2) WHERE PlanNum2 > 0";
                Db.nonQ(command);
                //claimproc.PlanNum -- claimproc.InsSubNum
                command = "UPDATE claimproc SET InsSubNum = (SELECT InsSubNum FROM inssub WHERE inssub.OldPlanNum=claimproc.OldPlanNum) WHERE PlanNum > 0";
                Db.nonQ(command);
                //etrans.PlanNum -- etrans.InsSubNum
                command = "UPDATE etrans SET InsSubNum = (SELECT InsSubNum FROM inssub WHERE inssub.OldPlanNum=etrans.OldPlanNum) WHERE PlanNum > 0";
                Db.nonQ(command);
                //patplan.PlanNum -- patplan.InsSubNum
                command = "UPDATE patplan SET InsSubNum = (SELECT InsSubNum FROM inssub WHERE inssub.OldPlanNum=patplan.OldPlanNum) WHERE PlanNum > 0";
                Db.nonQ(command);
                //payplan.PlanNum -- payplan.InsSubNum
                command = "UPDATE payplan SET InsSubNum = (SELECT InsSubNum FROM inssub WHERE inssub.OldPlanNum=payplan.OldPlanNum) WHERE PlanNum > 0";
                Db.nonQ(command);
                //Drop temp columns and tables-------------------------------------------------------------------------------------------------
                command = "ALTER TABLE inssub DROP OldPlanNum";
                Db.nonQ(command);
                command = "ALTER TABLE appointment DROP OldInsPlan1";
                Db.nonQ(command);
                command = "ALTER TABLE appointment DROP OldInsPlan2";
                Db.nonQ(command);
                command = "ALTER TABLE claim DROP OldPlanNum";
                Db.nonQ(command);
                command = "ALTER TABLE claim DROP OldPlanNum2";
                Db.nonQ(command);
                command = "ALTER TABLE claimproc DROP OldPlanNum";
                Db.nonQ(command);
                command = "ALTER TABLE etrans DROP OldPlanNum";
                Db.nonQ(command);
                command = "ALTER TABLE patplan DROP OldPlanNum";
                Db.nonQ(command);
                command = "ALTER TABLE payplan DROP OldPlanNum";
                Db.nonQ(command);
                command = "DROP TABLE IF EXISTS tempunique";
                Db.nonQ(command);
            }
            else
            {
                //This option was added in 7.5.17. No combining of plans will happen
                command = "INSERT INTO inssub (PlanNum,Subscriber,DateEffective,DateTerm,ReleaseInfo,AssignBen,SubscriberID,BenefitNotes,SubscNote,OldPlanNum) " + "SELECT PlanNum,Subscriber,DateEffective,DateTerm,ReleaseInfo,AssignBen,SubscriberID,BenefitNotes,SubscNote,PlanNum " + "FROM insplan";
                Db.nonQ(command);
                //Set all InsSubNums----------------------------------------------------------------------------------------------------
                //claim.PlanNum/PlanNum2 -- claim.InsSubNum/2
                command = "UPDATE claim SET InsSubNum = (SELECT InsSubNum FROM inssub WHERE inssub.PlanNum=claim.PlanNum) WHERE PlanNum > 0";
                Db.nonQ(command);
                command = "UPDATE claim SET InsSubNum2 = (SELECT InsSubNum FROM inssub WHERE inssub.PlanNum=claim.PlanNum2) WHERE PlanNum2 > 0";
                Db.nonQ(command);
                //claimproc.PlanNum -- claimproc.InsSubNum
                command = "UPDATE claimproc SET InsSubNum = (SELECT InsSubNum FROM inssub WHERE inssub.PlanNum=claimproc.PlanNum) WHERE PlanNum > 0";
                Db.nonQ(command);
                //etrans.PlanNum -- etrans.InsSubNum
                command = "UPDATE etrans SET InsSubNum = (SELECT InsSubNum FROM inssub WHERE inssub.PlanNum=etrans.PlanNum) WHERE PlanNum > 0";
                Db.nonQ(command);
                //patplan.PlanNum -- patplan.InsSubNum
                command = "UPDATE patplan SET InsSubNum = (SELECT InsSubNum FROM inssub WHERE inssub.PlanNum=patplan.PlanNum) WHERE PlanNum > 0";
                Db.nonQ(command);
                //payplan.PlanNum -- payplan.InsSubNum
                command = "UPDATE payplan SET InsSubNum = (SELECT InsSubNum FROM inssub WHERE inssub.PlanNum=payplan.PlanNum) WHERE PlanNum > 0";
                Db.nonQ(command);
            } 
            //Final changes to tables-----------------------------------------------------------------------------------------------------
            command = "ALTER TABLE insplan DROP Subscriber";
            Db.nonQ(command);
            command = "ALTER TABLE insplan DROP DateEffective";
            Db.nonQ(command);
            command = "ALTER TABLE insplan DROP DateTerm";
            Db.nonQ(command);
            command = "ALTER TABLE insplan DROP ReleaseInfo";
            Db.nonQ(command);
            command = "ALTER TABLE insplan DROP AssignBen";
            Db.nonQ(command);
            command = "ALTER TABLE insplan DROP SubscriberID";
            Db.nonQ(command);
            command = "ALTER TABLE insplan DROP BenefitNotes";
            Db.nonQ(command);
            command = "ALTER TABLE insplan DROP SubscNote";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.5.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_5_4();
    }

    private static void to7_5_4() throws Exception {
        if (FromVersion < new Version("7.5.4.0"))
        {
            String command = new String();
            command = "DELETE FROM toolbutitem WHERE ProgramNum=(SELECT p.ProgramNum FROM program p WHERE p.ProgName='PayConnect' LIMIT 1)";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.5.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_5_7();
    }

    private static void to7_5_7() throws Exception {
        if (FromVersion < new Version("7.5.7.0"))
        {
            String command = new String();
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('SubscriberAllowChangeAlways','0')";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.5.7.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_5_12();
    }

    private static void to7_5_12() throws Exception {
        if (FromVersion < new Version("7.5.12.0"))
        {
            String command = new String();
            command = "ALTER TABLE inssub CHANGE BenefitNotes BenefitNotes text NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE inssub CHANGE SubscNote SubscNote text NOT NULL";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.5.12.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_5_16();
    }

    private static void to7_5_16() throws Exception {
        if (FromVersion < new Version("7.5.16.0"))
        {
            String command = new String();
            command = "ALTER TABLE orionproc ADD DPCpost tinyint NOT NULL";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.5.16.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_6_1();
    }

    private static void to7_6_1() throws Exception {
        if (FromVersion < new Version("7.6.1.0"))
        {
            String command = new String();
            command = "UPDATE program SET ProgDesc='PayConnect from www.dentalxchange.com' WHERE ProgName='PayConnect' LIMIT 1";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = 'https://opendentalsoft.com/WebHostSynch/Sheets.asmx' WHERE PrefName = 'WebHostSynchServerURL'";
            Db.nonQ(command);
            command = "ALTER TABLE operatory ADD SetProspective tinyint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE computerpref CHANGE SensorBinned SensorBinned tinyint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE computerpref CHANGE GraphicsDoubleBuffering GraphicsDoubleBuffering tinyint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE computerpref ADD RecentApptView tinyint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE covcat CHANGE DefaultPercent DefaultPercent smallint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE periomeasure CHANGE IntTooth IntTooth smallint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE periomeasure CHANGE ToothValue ToothValue smallint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE periomeasure CHANGE MBvalue MBvalue smallint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE periomeasure CHANGE Bvalue Bvalue smallint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE periomeasure CHANGE DBvalue DBvalue smallint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE periomeasure CHANGE MLvalue MLvalue smallint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE periomeasure CHANGE Lvalue Lvalue smallint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE periomeasure CHANGE DLvalue DLvalue smallint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE sigbutdef CHANGE ButtonIndex ButtonIndex smallint NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE preference DROP PRIMARY KEY";
            Db.nonQ(command);
            command = "ALTER TABLE preference ADD COLUMN PrefNum bigint NOT NULL auto_increment FIRST, ADD PRIMARY KEY (PrefNum)";
            Db.nonQ(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('MobileSyncIntervalMinutes','0')";
            Db.nonQ(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('MobileSyncServerURL','https://opendentalsoft.com/WebHostSynch/Mobile.asmx')";
            Db.nonQ(command);
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('MobileExcludeApptsBeforeDate','2009-12-20')";
            Db.nonQ(command);
            command = "DELETE FROM preference WHERE PrefName = 'MobileSyncLastFileNumber'";
            Db.nonQ(command);
            command = "DELETE FROM preference WHERE PrefName = 'MobileSyncPath'";
            Db.nonQ(command);
            command = "ALTER TABLE county DROP PRIMARY KEY";
            Db.nonQ(command);
            command = "ALTER TABLE county ADD COLUMN CountyNum bigint NOT NULL auto_increment FIRST, ADD PRIMARY KEY (CountyNum)";
            Db.nonQ(command);
            command = "ALTER TABLE language DROP PRIMARY KEY";
            try
            {
                Db.nonQ(command);
            }
            catch (Exception __dummyCatchVar6)
            {
            }

            //because I don't think there is any primary key for that table.
            command = "ALTER TABLE language ADD COLUMN LanguageNum bigint NOT NULL auto_increment FIRST, ADD PRIMARY KEY (LanguageNum)";
            Db.nonQ(command);
            command = "ALTER TABLE languageforeign DROP PRIMARY KEY";
            try
            {
                Db.nonQ(command);
            }
            catch (Exception __dummyCatchVar7)
            {
            }

            command = "ALTER TABLE languageforeign ADD COLUMN LanguageForeignNum bigint NOT NULL auto_increment FIRST, ADD PRIMARY KEY (LanguageForeignNum)";
            Db.nonQ(command);
            command = "ALTER TABLE school DROP PRIMARY KEY";
            Db.nonQ(command);
            command = "ALTER TABLE school ADD COLUMN SchoolNum bigint NOT NULL auto_increment FIRST, ADD PRIMARY KEY (SchoolNum)";
            Db.nonQ(command);
            //DbSchema.AddColumn("SchoolNum",OdDbType.Long);
            command = "ALTER TABLE payment ADD Receipt text NOT NULL";
            Db.nonQ(command);
            command = "ALTER TABLE sigelementdef CHANGE ItemOrder ItemOrder smallint NOT NULL";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.6.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_6_2();
    }

    private static void to7_6_2() throws Exception {
        if (FromVersion < new Version("7.6.2.0"))
        {
            String command = new String();
            command = "ALTER TABLE preference DROP COLUMN PrefNum";
            Db.nonQ(command);
            command = "ALTER TABLE preference ADD COLUMN PrefNum bigint NOT NULL auto_increment AFTER ValueString, ADD PRIMARY KEY (PrefNum)";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.6.2.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_6_4();
    }

    private static void to7_6_4() throws Exception {
        if (FromVersion < new Version("7.6.4.0"))
        {
            String command = new String();
            command = "INSERT INTO preference(PrefName,ValueString) VALUES('ReportPandIschedProdSubtractsWO','0')";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.6.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_6_10();
    }

    private static void to7_6_10() throws Exception {
        if (FromVersion < new Version("7.6.10.0"))
        {
            String command = new String();
            command = "SELECT ProgramNum FROM program WHERE ProgName='Xcharge'";
            long programNum = PIn.long(Db.getScalar(command));
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Username', " + "'')";
            Db.nonQ(command);
            command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Password', " + "'')";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.6.10.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_7_1();
    }

    private static void to7_7_1() throws Exception {
        if (FromVersion < new Version("7.7.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE document ADD RawBase64 mediumtext NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE document ADD RawBase64 clob";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE document ADD Thumbnail text NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE document ADD Thumbnail clob";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE rxpat ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE rxpat SET DateTStamp = NOW()";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE rxpat ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE rxpat SET DateTStamp = SYSDATE";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('MobileSyncWorkstationName','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'MobileSyncWorkstationName','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS tasknote";
                Db.nonQ(command);
                command = "CREATE TABLE tasknote (\r\n" + 
                "\t\t\t\t\t\tTaskNoteNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tTaskNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUserNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeNote datetime NOT NULL DEFAULT \'0001-01-01 00:00:00\',\r\n" + 
                "\t\t\t\t\t\tNote Text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(TaskNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(UserNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE tasknote'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE tasknote (\r\n" + 
                "\t\t\t\t\t\tTaskNoteNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTaskNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUserNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeNote date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT tasknote_TaskNoteNum PRIMARY KEY (TaskNoteNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX tasknote_TaskNum ON tasknote (TaskNum)";
                Db.nonQ(command);
                command = "CREATE INDEX tasknote_UserNum ON tasknote (UserNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('TasksNewTrackedByUser','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'TasksNewTrackedByUser','0')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('ImagesModuleTreeIsCollapsed','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ImagesModuleTreeIsCollapsed','0')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('TasksShowOpenTickets','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'TasksShowOpenTickets','0')";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '7.7.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_8_1();
    }

    private static void to7_8_1() throws Exception {
        if (FromVersion < new Version("7.8.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS creditcard";
                Db.nonQ(command);
                command = "CREATE TABLE creditcard (\r\n" + 
                "\t\t\t\t\t\tCreditCardNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAddress varchar(255),\r\n" + 
                "\t\t\t\t\t\tZip varchar(255),\r\n" + 
                "\t\t\t\t\t\tXChargeToken varchar(255),\r\n" + 
                "\t\t\t\t\t\tCCNumberMasked varchar(255),\r\n" + 
                "\t\t\t\t\t\tCCExpiration date NOT NULL DEFAULT \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tItemOrder int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE creditcard'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE creditcard (\r\n" + 
                "\t\t\t\t\t\tCreditCardNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAddress varchar2(255),\r\n" + 
                "\t\t\t\t\t\tZip varchar2(255),\r\n" + 
                "\t\t\t\t\t\tXChargeToken varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCCNumberMasked varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCCExpiration date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tItemOrder number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT creditcard_CreditCardNum PRIMARY KEY (CreditCardNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX creditcard_PatNum ON creditcard (PatNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO creditcard (PatNum,CCExpiration,CCNumberMasked,ItemOrder) SELECT PatNum,CCExpiration,CCNumber,0 FROM patientnote WHERE CCNumber!=''";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO creditcard (CreditCardNum,PatNum,CCExpiration,CCNumberMasked,ItemOrder) SELECT PatNum,PatNum,CCExpiration,CCNumber,0 FROM patientnote WHERE LENGTH(ccnumber)>0";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE patientnote DROP COLUMN CCNumber";
                Db.nonQ(command);
                command = "ALTER TABLE patientnote DROP COLUMN CCExpiration";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE patientnote DROP (CCNumber, CCExpiration)";
                Db.nonQ(command);
            } 
            //Add PerioEdit permission to all groups------------------------------------------------------
            command = "SELECT UserGroupNum FROM usergroup";
            DataTable table = Db.getTable(command);
            long groupNum = new long();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    groupNum = PIn.Long(table.Rows[i][0].ToString());
                    command = "INSERT INTO grouppermission (NewerDays,UserGroupNum,PermType) " + "VALUES(0," + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.PerioEdit).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            }
            else
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //oracle
                    groupNum = PIn.Long(table.Rows[i][0].ToString());
                    command = "INSERT INTO grouppermission (GroupPermNum,NewerDays,UserGroupNum,PermType) " + "VALUES((SELECT MAX(GroupPermNum)+1 FROM grouppermission),0," + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.PerioEdit).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            } 
            //add Cerec bridge:
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                //NOTE: this chunk of code was realeased with MySQL version only, and then revised to use mySQL or Oracle. The mySQL code was unchanged.
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Cerec', " + "'Cerec from Sirona', " + "'0', " + "'" + POut.string("C:\\Program Files\\Cerec\\Cerec system\\CerPI.exe") + "', " + "'', " + "\'Cerec v2.6 default install directory is C:\\Program Files\\Cerec\\System\\CerPI.exe \r\n" + 
                "\t\t\t\t\t\t\\r\\nCerec v2.8 default install directory is C:\\Program Files\\Cerec\\Cerec system\\CerPI.exe\')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ32(command);
                command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'Cerec')";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "(SELECT MAX(ProgramNum)+1 FROM program)," + "'Cerec', " + "'Cerec from Sirona', " + "'0', " + "'" + POut.string("C:\\Program Files\\Cerec\\Cerec system\\CerPI.exe") + "', " + "'', " + "\'Cerec v2.6 default install directory is C:\\Program Files\\Cerec\\System\\CerPI.exe \r\n" + 
                "\t\t\t\t\t\t\\r\\nCerec v2.8 default install directory is C:\\Program Files\\Cerec\\Cerec system\\CerPI.exe\')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum)+1 FROM programproperty)," + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ32(command);
                command = "INSERT INTO toolbutitem (ToolButItemNum,ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "(SELECT MAX(ToolButItemNum)+1 FROM toolbutitem)," + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'Cerec')";
                Db.nonQ32(command);
            } 
            //End of Cerec Bridge code. This chunk of code works with MySQL, and is unlikely to cause Oracle bugs.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS school";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE school'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE chartview ADD DatesShowing float NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE chartview ADD DatesShowing number(38,8)";
                Db.nonQ(command);
                command = "UPDATE chartview SET DatesShowing = 0 WHERE DatesShowing IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE chartview MODIFY DatesShowing NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE procedurelog ADD Prognosis bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE procedurelog ADD INDEX (Prognosis)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE procedurelog ADD Prognosis number(20)";
                Db.nonQ(command);
                command = "UPDATE procedurelog SET Prognosis = 0 WHERE Prognosis IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE procedurelog MODIFY Prognosis NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX procedurelog_Prognosis ON procedurelog (Prognosis)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE proctp ADD Prognosis varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE proctp ADD Prognosis varchar2(255)";
                Db.nonQ(command);
            } 
            //Add ProcEditShowFee permission to all groups------------------------------------------------------
            command = "SELECT UserGroupNum FROM usergroup";
            table = Db.getTable(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    groupNum = PIn.Long(table.Rows[i][0].ToString());
                    command = "INSERT INTO grouppermission (UserGroupNum,PermType) " + "VALUES(" + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.ProcEditShowFee).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            }
            else
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //oracle
                    groupNum = PIn.Long(table.Rows[i][0].ToString());
                    command = "INSERT INTO grouppermission (GroupPermNum,NewerDays,UserGroupNum,PermType) " + "VALUES((SELECT MAX(GroupPermNum)+1 FROM grouppermission),0," + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.ProcEditShowFee).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            } 
            command = "UPDATE preference SET ValueString = '7.8.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_8_3();
    }

    private static void to7_8_3() throws Exception {
        if (FromVersion < new Version("7.8.3.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('MobileUserName','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'MobileUserName','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE proctp ADD Dx varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE proctp ADD Dx varchar2(255)";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '7.8.3.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_8_4();
    }

    private static void to7_8_4() throws Exception {
        if (FromVersion < new Version("7.8.4.0"))
        {
            String command = new String();
            //add Patterson Imaging bridge:
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Patterson', " + "'Patterson Imaging from Patterson Dental Supply Inc.', " + "'0', " + "'" + POut.string("C:\\Program Files\\PDI\\Shared files\\Imaging.exe") + "'," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'System path to Patterson Imaging ini', " + "'" + POut.string("C:\\Program Files\\PDI\\Shared files\\Imaging.ini") + "')";
                Db.nonQ32(command);
                command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'PattersonImg')";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "(SELECT MAX(ProgramNum)+1 FROM program)," + "'Patterson', " + "'Patterson Imaging from Patterson Dental Supply Inc.', " + "'0', " + "'" + POut.string("C:\\Program Files\\PDI\\Shared files\\Imaging.exe") + "'," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum)+1 FROM programproperty)," + "'" + POut.long(programNum) + "', " + "'System path to Patterson Imaging ini', " + "'" + POut.string("C:\\Program Files\\PDI\\Shared files\\Imaging.ini") + "')";
                Db.nonQ32(command);
                command = "INSERT INTO toolbutitem (ToolButItemNum,ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "(SELECT MAX(ToolButItemNum)+1 FROM toolbutitem)," + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'PattersonImg')";
                Db.nonQ32(command);
            } 
            //end Patterson Imaging bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE chartview MODIFY DatesShowing TINYINT NOT NULL";
                Db.nonQ(command);
            }
            else
            {
            } 
            //oracle
            //Does not need to be changed for oracle.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('MySqlVersion','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'MySqlVersion','')";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '7.8.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_8_5();
    }

    private static void to7_8_5() throws Exception {
        if (FromVersion < new Version("7.8.5.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                //signal is a reserved word in mySQL 5.5
                command = "DROP TABLE IF EXISTS signalod";
                Db.nonQ(command);
                command = "RENAME TABLE `signal` TO signalod";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE signalod'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "ALTER TABLE signal RENAME TO signalod";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '7.8.5.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_9_1();
    }

    private static void to7_9_1() throws Exception {
        if (FromVersion < new Version("7.9.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD CanadaTransRefNum varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD CanadaTransRefNum varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD CanadaEstTreatStartDate date NOT NULL DEFAULT '0001-01-01'";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD CanadaEstTreatStartDate date";
                Db.nonQ(command);
                command = "UPDATE claim SET CanadaEstTreatStartDate = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE CanadaEstTreatStartDate IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE claim MODIFY CanadaEstTreatStartDate NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD CanadaInitialPayment double NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD CanadaInitialPayment number(38,8)";
                Db.nonQ(command);
                command = "UPDATE claim SET CanadaInitialPayment = 0 WHERE CanadaInitialPayment IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE claim MODIFY CanadaInitialPayment NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD CanadaPaymentMode tinyint unsigned NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD CanadaPaymentMode number(3)";
                Db.nonQ(command);
                command = "UPDATE claim SET CanadaPaymentMode = 0 WHERE CanadaPaymentMode IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE claim MODIFY CanadaPaymentMode NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD CanadaTreatDuration tinyint unsigned NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD CanadaTreatDuration number(3)";
                Db.nonQ(command);
                command = "UPDATE claim SET CanadaTreatDuration = 0 WHERE CanadaTreatDuration IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE claim MODIFY CanadaTreatDuration NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD CanadaNumAnticipatedPayments tinyint unsigned NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD CanadaNumAnticipatedPayments number(3)";
                Db.nonQ(command);
                command = "UPDATE claim SET CanadaNumAnticipatedPayments = 0 WHERE CanadaNumAnticipatedPayments IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE claim MODIFY CanadaNumAnticipatedPayments NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD CanadaAnticipatedPayAmount double NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD CanadaAnticipatedPayAmount number(38,8)";
                Db.nonQ(command);
                command = "UPDATE claim SET CanadaAnticipatedPayAmount = 0 WHERE CanadaAnticipatedPayAmount IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE claim MODIFY CanadaAnticipatedPayAmount NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE creditcard ADD ChargeAmt double NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE creditcard ADD ChargeAmt number(38,8)";
                Db.nonQ(command);
                command = "UPDATE creditcard SET ChargeAmt = 0 WHERE ChargeAmt IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE creditcard MODIFY ChargeAmt NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE creditcard ADD DateStart date NOT NULL DEFAULT '0001-01-01'";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE creditcard ADD DateStart date";
                Db.nonQ(command);
                command = "UPDATE creditcard SET DateStart = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE DateStart IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE creditcard MODIFY DateStart NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE creditcard ADD DateStop date NOT NULL DEFAULT '0001-01-01'";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE creditcard ADD DateStop date";
                Db.nonQ(command);
                command = "UPDATE creditcard SET DateStop = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE DateStop IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE creditcard MODIFY DateStop NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE creditcard ADD Note varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE creditcard ADD Note varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS vitalsign";
                Db.nonQ(command);
                command = "CREATE TABLE vitalsign (\r\n" + 
                "\t\t\t\t\t\tVitalsignNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHeight float NOT NULL,\r\n" + 
                "\t\t\t\t\t\tWeight float NOT NULL,\r\n" + 
                "\t\t\t\t\t\tBpSystolic smallint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tBpDiastolic smallint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTaken date NOT NULL DEFAULT \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE vitalsign'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE vitalsign (\r\n" + 
                "\t\t\t\t\t\tVitalsignNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHeight number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tWeight number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tBpSystolic number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tBpDiastolic number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTaken date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT vitalsign_VitalsignNum PRIMARY KEY (VitalsignNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX vitalsign_PatNum ON vitalsign (PatNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE patient ADD OnlinePassword varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE patient ADD OnlinePassword varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE medicationpat ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE medicationpat SET DateTStamp = NOW()";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE medicationpat ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE medicationpat SET DateTStamp = SYSTIMESTAMP";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE medicationpat ADD IsDiscontinued tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE medicationpat ADD IsDiscontinued number(3)";
                Db.nonQ(command);
                command = "UPDATE medicationpat SET IsDiscontinued = 0 WHERE IsDiscontinued IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE medicationpat MODIFY IsDiscontinued NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE disease ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE disease SET DateTStamp = NOW()";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE disease ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE disease SET DateTStamp = SYSTIMESTAMP";
                Db.nonQ(command);
            } 
            //columns for rxalert----------------------------------------------------------------------------
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE rxalert ADD AllergyDefNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE rxalert ADD INDEX (AllergyDefNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE rxalert ADD AllergyDefNum number(20)";
                Db.nonQ(command);
                command = "UPDATE rxalert SET AllergyDefNum = 0 WHERE AllergyDefNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE rxalert MODIFY AllergyDefNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX rxalert_AllergyDefNum ON rxalert (AllergyDefNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE rxalert ADD MedicationNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE rxalert ADD INDEX (MedicationNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE rxalert ADD MedicationNum number(20)";
                Db.nonQ(command);
                command = "UPDATE rxalert SET MedicationNum = 0 WHERE MedicationNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE rxalert MODIFY MedicationNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX rxalert_MedicationNum ON rxalert (MedicationNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE rxalert ADD NotificationMsg varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE rxalert ADD NotificationMsg varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE rxpat ADD IsElectQueue tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE rxpat ADD IsElectQueue number(3)";
                Db.nonQ(command);
                command = "UPDATE rxpat SET IsElectQueue = 0 WHERE IsElectQueue IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE rxpat MODIFY IsElectQueue NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('RxSendNewToQueue','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) " + "VALUES((SELECT MAX(PrefNum)+1 FROM preference),'RxSendNewToQueue','0')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE patient ADD SmokeStatus tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE patient ADD SmokeStatus number(3)";
                Db.nonQ(command);
                command = "UPDATE patient SET SmokeStatus = 0 WHERE SmokeStatus IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE patient MODIFY SmokeStatus NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE canadiannetwork ADD CanadianTransactionPrefix varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE canadiannetwork ADD CanadianTransactionPrefix varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS icd9";
                Db.nonQ(command);
                command = "CREATE TABLE icd9 (\r\n" + 
                "\t\t\t\t\t\tICD9Num bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tICD9Code varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255) NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE icd9'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE icd9 (\r\n" + 
                "\t\t\t\t\t\tICD9Num number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tICD9Code varchar2(255),\r\n" + 
                "\t\t\t\t\t\tDescription varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT icd9_ICD9Num PRIMARY KEY (ICD9Num)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            //Removed for 13.3 release, will be using code system importer tool instead.
            //try {
            //	using(StringReader reader=new StringReader(Properties.Resources.icd9)) {
            //		//loop:
            //		command=reader.ReadLine();
            //		while(command!=null) {
            //			Db.NonQ(command);
            //			command=reader.ReadLine();
            //		}
            //	}
            //}
            //catch(Exception) { }//do nothing
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS medicalorder";
                Db.nonQ(command);
                command = "CREATE TABLE medicalorder (\r\n" + 
                "\t\t\t\t\t\tMedicalOrderNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tMedOrderType tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeOrder datetime NOT NULL DEFAULT \'0001-01-01 00:00:00\',\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE medicalorder'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE medicalorder (\r\n" + 
                "\t\t\t\t\t\tMedicalOrderNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedOrderType number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeOrder date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT medicalorder_MedicalOrderNum PRIMARY KEY (MedicalOrderNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX medicalorder_PatNum ON medicalorder (PatNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS allergy";
                Db.nonQ(command);
                command = "CREATE TABLE allergy (\r\n" + 
                "\t\t\t\t\t\tAllergyNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tAllergyDefNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tReaction varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tStatusIsActive tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTStamp timestamp,\r\n" + 
                "\t\t\t\t\t\tINDEX(AllergyDefNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE allergy'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE allergy (\r\n" + 
                "\t\t\t\t\t\tAllergyNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAllergyDefNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tReaction varchar2(255),\r\n" + 
                "\t\t\t\t\t\tStatusIsActive number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTStamp timestamp,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT allergy_AllergyNum PRIMARY KEY (AllergyNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX allergy_AllergyDefNum ON allergy (AllergyDefNum)";
                Db.nonQ(command);
                command = "CREATE INDEX allergy_PatNum ON allergy (PatNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS allergydef";
                Db.nonQ(command);
                command = "CREATE TABLE allergydef (\r\n" + 
                "\t\t\t\t\t\tAllergyDefNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsHidden tinyint NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE allergydef'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE allergydef (\r\n" + 
                "\t\t\t\t\t\tAllergyDefNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar2(255),\r\n" + 
                "\t\t\t\t\t\tIsHidden number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT allergydef_AllergyDefNum PRIMARY KEY (AllergyDefNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE disease ADD ICD9Num bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE disease ADD INDEX (ICD9Num)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE disease ADD ICD9Num number(20)";
                Db.nonQ(command);
                command = "UPDATE disease SET ICD9Num = 0 WHERE ICD9Num IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE disease MODIFY ICD9Num NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX disease_ICD9Num ON disease (ICD9Num)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE disease ADD ProbStatus tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE disease ADD ProbStatus number(3)";
                Db.nonQ(command);
                command = "UPDATE disease SET ProbStatus = 0 WHERE ProbStatus IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE disease MODIFY ProbStatus NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrmeasure";
                Db.nonQ(command);
                command = "CREATE TABLE ehrmeasure (\r\n" + 
                "\t\t\t\t\t\tEhrMeasureNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tMeasureType tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNumerator smallint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDenominator smallint NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrmeasure'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrmeasure (\r\n" + 
                "\t\t\t\t\t\tEhrMeasureNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMeasureType number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNumerator number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDenominator number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrmeasure_EhrMeasureNum PRIMARY KEY (EhrMeasureNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            //Add EHR Measures to DB
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(0,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(1,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(2,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(3,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(4,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(5,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(6,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(7,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(8,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(9,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(10,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(11,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(12,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(13,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(14,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(15,-1,-1)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES(1,0,-1,-1)";
                //No rows in table and Oracle returns null so set the first one.
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),1,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),2,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),3,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),4,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),5,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),6,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),7,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),8,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),9,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),10,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),11,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),12,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),13,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),14,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),15,-1,-1)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE allergydef ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE allergydef SET DateTStamp = NOW()";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE allergydef ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE allergydef SET DateTStamp = SYSTIMESTAMP";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE diseasedef ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE diseasedef SET DateTStamp = NOW()";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE diseasedef ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE diseasedef SET DateTStamp = SYSTIMESTAMP";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE icd9 ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE icd9 SET DateTStamp = NOW()";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE icd9 ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE icd9 SET DateTStamp = SYSTIMESTAMP";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE medication ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE medication SET DateTStamp = NOW()";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE medication ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE medication SET DateTStamp = SYSTIMESTAMP";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS formulary";
                Db.nonQ(command);
                command = "CREATE TABLE formulary (\r\n" + 
                "\t\t\t\t\t\tFormularyNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255) NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE formulary'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE formulary (\r\n" + 
                "\t\t\t\t\t\tFormularyNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT formulary_FormularyNum PRIMARY KEY (FormularyNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS formularymed";
                Db.nonQ(command);
                command = "CREATE TABLE formularymed (\r\n" + 
                "\t\t\t\t\t\tFormularyMedNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tFormularyNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicationNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(FormularyNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(MedicationNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE formularymed'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE formularymed (\r\n" + 
                "\t\t\t\t\t\tFormularyMedNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFormularyNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicationNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT formularymed_FormularyMedNum PRIMARY KEY (FormularyMedNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX formularymed_FormularyNum ON formularymed (FormularyNum)";
                Db.nonQ(command);
                command = "CREATE INDEX formularymed_MedicationNum ON formularymed (MedicationNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                try
                {
                    command = "ALTER TABLE inssub DROP OldPlanNum";
                    Db.nonQ(command);
                }
                catch (Exception __dummyCatchVar8)
                {
                }
            
            }
             
            //Some might not have this already so do nothing.
            //No need to test if column exists for Oracle because column was created in
            //7.5 which is before Oracle support started so it will never exist.
            //Migrating the diseases to allergies and corresponding Rx alerts.
            command = "SELECT * FROM diseasedef WHERE LOWER(DiseaseName) LIKE '%allerg%'";
            DataTable tableDiseaseDef = Db.getTable(command);
            for (int i = 0;i < tableDiseaseDef.Rows.Count;i++)
            {
                command = "INSERT INTO allergydef (AllergyDefNum,Description,IsHidden) VALUES(" + POut.Long(PIn.Long(tableDiseaseDef.Rows[i]["DiseaseDefNum"].ToString())) + ",'" + POut.String(PIn.String(tableDiseaseDef.Rows[i]["DiseaseName"].ToString())) + "'," + POut.Int(PIn.Int(tableDiseaseDef.Rows[i]["IsHidden"].ToString())) + ")";
                Db.nonQ(command);
                command = "SELECT * FROM disease WHERE DiseaseDefNum=" + POut.Long(PIn.Long(tableDiseaseDef.Rows[i]["DiseaseDefNum"].ToString()));
                DataTable disease = Db.getTable(command);
                for (int j = 0;j < disease.Rows.Count;j++)
                {
                    command = "INSERT INTO allergy (AllergyNum,PatNum,AllergyDefNum,Reaction,StatusIsActive) VALUES (" + POut.Long(PIn.Long(disease.Rows[j]["DiseaseNum"].ToString())) + "," + POut.Long(PIn.Long(disease.Rows[j]["PatNum"].ToString())) + "," + POut.Long(PIn.Long(disease.Rows[j]["DiseaseDefNum"].ToString())) + ",'" + POut.String(PIn.String(disease.Rows[j]["PatNote"].ToString())) + "',1)";
                    Db.nonQ(command);
                    command = "DELETE FROM disease WHERE DiseaseNum=" + POut.Long(PIn.Long(disease.Rows[j]["DiseaseNum"].ToString()));
                    Db.nonQ(command);
                }
                command = "UPDATE rxalert SET AllergyDefNum=" + POut.Long(PIn.Long(tableDiseaseDef.Rows[i]["DiseaseDefNum"].ToString())) + ", DiseaseDefNum=0 WHERE DiseaseDefNum=" + POut.Long(PIn.Long(tableDiseaseDef.Rows[i]["DiseaseDefNum"].ToString()));
                Db.nonQ(command);
                command = "DELETE FROM diseasedef WHERE DiseaseDefNum=" + POut.Long(PIn.Long(tableDiseaseDef.Rows[i]["DiseaseDefNum"].ToString()));
                Db.nonQ(command);
            }
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
            {
                //Set time stamps to NOW().
                command = "UPDATE allergy SET DateTStamp=SYSTIMESTAMP";
                Db.nonQ(command);
                command = "UPDATE allergydef SET DateTStamp=SYSTIMESTAMP";
                Db.nonQ(command);
            }
             
            //Canadian claim carrier default values.
            command = "UPDATE carrier SET CanadianEncryptionMethod=1 WHERE IsCDA=1 AND CanadianEncryptionMethod=0";
            Db.nonQ(command);
            command = "UPDATE carrier SET CanadianSupportedTypes=262143 WHERE IsCDA=1 AND CanadianSupportedTypes=0";
            //All transaction types are allowed for each carrier by default.
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS drugmanufacturer";
                Db.nonQ(command);
                command = "CREATE TABLE drugmanufacturer (\r\n" + 
                "\t\t\t\t\t\tDrugManufacturerNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tManufacturerName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tManufacturerCode varchar(20) NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE drugmanufacturer'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE drugmanufacturer (\r\n" + 
                "\t\t\t\t\t\tDrugManufacturerNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tManufacturerName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tManufacturerCode varchar2(20),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT drugmanufacturer_DrugManNum PRIMARY KEY (DrugManufacturerNum) \r\n" + 
                "\t\t\t\t\t\t)";
                //Changed drugmanufacturer_DrugManufacturerNum to DrugManNum: Max identifier for Oracle is 30 characters.
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS drugunit";
                Db.nonQ(command);
                command = "CREATE TABLE drugunit (\r\n" + 
                "\t\t\t\t\t\tDrugUnitNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tUnitIdentifier varchar(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitText varchar(255) NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE drugunit'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE drugunit (\r\n" + 
                "\t\t\t\t\t\tDrugUnitNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitIdentifier varchar2(20),\r\n" + 
                "\t\t\t\t\t\tUnitText varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT drugunit_DrugUnitNum PRIMARY KEY (DrugUnitNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS vaccinedef";
                Db.nonQ(command);
                command = "CREATE TABLE vaccinedef (\r\n" + 
                "\t\t\t\t\t\tVaccineDefNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tCVXCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tVaccineName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDrugManufacturerNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(DrugManufacturerNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE vaccinedef'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE vaccinedef (\r\n" + 
                "\t\t\t\t\t\tVaccineDefNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCVXCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tVaccineName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tDrugManufacturerNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT vaccinedef_VaccineDefNum PRIMARY KEY (VaccineDefNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX vaccinedef_DrugManufacturerNum ON vaccinedef (DrugManufacturerNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS vaccinepat";
                Db.nonQ(command);
                command = "CREATE TABLE vaccinepat (\r\n" + 
                "\t\t\t\t\t\tVaccinePatNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tVaccineDefNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeStart date NOT NULL DEFAULT \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tDateTimeEnd date NOT NULL DEFAULT \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tAdministeredAmt float NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDrugUnitNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLotNumber varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(VaccineDefNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(DrugUnitNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE vaccinepat'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE vaccinepat (\r\n" + 
                "\t\t\t\t\t\tVaccinePatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tVaccineDefNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeStart date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeEnd date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAdministeredAmt number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDrugUnitNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLotNumber varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT vaccinepat_VaccinePatNum PRIMARY KEY (VaccinePatNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX vaccinepat_VaccineDefNum ON vaccinepat (VaccineDefNum)";
                Db.nonQ(command);
                command = "CREATE INDEX vaccinepat_DrugUnitNum ON vaccinepat (DrugUnitNum)";
                Db.nonQ(command);
            } 
            //eCW bridge enhancements
            command = "SELECT ProgramNum FROM program WHERE ProgName='eClinicalWorks'";
            int programNum = PIn.int(Db.getScalar(command));
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.Long(programNum) + "', " + "'FeeSchedulesSetManually', " + "'0')";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES((SELECT MAX(ProgramPropertyNum)+1 FROM programproperty)," + "'" + POut.Long(programNum) + "', " + "'FeeSchedulesSetManually', " + "'0')";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '7.9.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_9_2();
    }

    private static void to7_9_2() throws Exception {
        if (FromVersion < new Version("7.9.2.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('MobileSynchNewTables79Done','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'MobileSynchNewTables79Done','0')";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '7.9.2.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_9_8();
    }

    /**
    * Oracle compatible: 5/24/2011
    */
    private static void to7_9_8() throws Exception {
        if (FromVersion < new Version("7.9.8.0"))
        {
            String command = new String();
            command = "UPDATE clearinghouse SET ExportPath=\'C:\\\\Program Files\\\\Renaissance\\\\dotr\\\\upload\\\\\' WHERE Description=\'Renaissance\'";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.9.8.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to7_9_10();
    }

    /**
    * Oracle compatible: 7/7/2011
    */
    private static void to7_9_10() throws Exception {
        if (FromVersion < new Version("7.9.10.0"))
        {
            String command = new String();
            command = "UPDATE payment SET DateEntry=PayDate WHERE DateEntry < " + POut.date(new DateTime(1880, 1, 1));
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '7.9.10.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to11_0_1();
    }

    /**
    * Oracle compatible: 7/8/2011
    */
    private static void to11_0_1() throws Exception {
        if (FromVersion < new Version("11.0.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS labpanel";
                Db.nonQ(command);
                command = "CREATE TABLE labpanel (\r\n" + 
                "\t\t\t\t\t\tLabPanelNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRawMessage text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLabNameAddress varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTStamp timestamp,\r\n" + 
                "\t\t\t\t\t\tSpecimenCondition varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenSource varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tServiceId varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tServiceName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE labpanel'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE labpanel (\r\n" + 
                "\t\t\t\t\t\tLabPanelNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRawMessage clob,\r\n" + 
                "\t\t\t\t\t\tLabNameAddress varchar2(255),\r\n" + 
                "\t\t\t\t\t\tDateTStamp timestamp,\r\n" + 
                "\t\t\t\t\t\tSpecimenCondition varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenSource varchar2(255),\r\n" + 
                "\t\t\t\t\t\tServiceId varchar2(255),\r\n" + 
                "\t\t\t\t\t\tServiceName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT labpanel_LabPanelNum PRIMARY KEY (LabPanelNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX labpanel_PatNum ON labpanel (PatNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS labresult";
                Db.nonQ(command);
                command = "CREATE TABLE labresult (\r\n" + 
                "\t\t\t\t\t\tLabResultNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tLabPanelNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeTest datetime NOT NULL DEFAULT \'0001-01-01 00:00:00\',\r\n" + 
                "\t\t\t\t\t\tTestName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTStamp timestamp,\r\n" + 
                "\t\t\t\t\t\tTestID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObsValue varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObsUnits varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObsRange varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(LabPanelNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE labresult'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE labresult (\r\n" + 
                "\t\t\t\t\t\tLabResultNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLabPanelNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeTest date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTestName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tDateTStamp timestamp,\r\n" + 
                "\t\t\t\t\t\tTestID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObsValue varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObsUnits varchar2(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObsRange varchar2(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT labresult_LabResultNum PRIMARY KEY (LabResultNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX labresult_LabPanelNum ON labresult (LabPanelNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vaccinepat ADD PatNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vaccinepat ADD INDEX (PatNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vaccinepat ADD PatNum number(20)";
                Db.nonQ(command);
                command = "UPDATE vaccinepat SET PatNum = 0 WHERE PatNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vaccinepat MODIFY PatNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX vaccinepat_PatNum ON vaccinepat (PatNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,Comments) VALUES('EHREmailToAddress','Hidden pref: Email for sending EHR email.')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,Comments) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'EHREmailToAddress','Hidden pref: Email for sending EHR email.')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE medicalorder ADD Description varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE medicalorder ADD Description varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vaccinepat MODIFY DateTimeStart DATETIME";
                Db.nonQ(command);
                command = "ALTER TABLE vaccinepat MODIFY DateTimeEnd DATETIME";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vaccinepat MODIFY (DateTimeStart DATE);";
                Db.nonQ(command);
                command = "ALTER TABLE vaccinepat MODIFY (DateTimeEnd DATE);";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE securitylog ADD CompName varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE securitylog ADD CompName varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference (PrefName, ValueString,Comments) VALUES ('EhrEmergencyNow','0','Boolean. 0 means false. 1 grants emergency access to the family module.')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference (PrefNum,PrefName, ValueString,Comments) VALUES ((SELECT MAX(PrefNum)+1 FROM preference),'EhrEmergencyNow','0','Boolean. 0 means false. 1 grants emergency access to the family module.')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString,Comments) VALUES('SecurityLogOffAfterMinutes','0','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference (PrefNum,PrefName, ValueString,Comments) VALUES ((SELECT MAX(PrefNum)+1 FROM preference),'SecurityLogOffAfterMinutes','0','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE patient ADD PreferContactConfidential tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE patient ADD PreferContactConfidential number(3)";
                Db.nonQ(command);
                command = "UPDATE patient SET PreferContactConfidential = 0 WHERE PreferContactConfidential IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE patient MODIFY PreferContactConfidential NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS reminderrule";
                Db.nonQ(command);
                command = "CREATE TABLE reminderrule (\r\n" + 
                "\t\t\t\t\t\tReminderRuleNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tReminderCriterion tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCriterionFK bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCriterionValue varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMessage varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(CriterionFK)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE reminderrule'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE reminderrule (\r\n" + 
                "\t\t\t\t\t\tReminderRuleNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tReminderCriterion number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCriterionFK number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCriterionValue varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMessage varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT reminderrule_ReminderRuleNum PRIMARY KEY (ReminderRuleNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX reminderrule_CriterionFK ON reminderrule (CriterionFK)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE patplan DROP PlanNum";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE patplan DROP COLUMN PlanNum";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString,Comments) VALUES('EHREmailFromAddress','','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString,Comments) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'EHREmailFromAddress','','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString,Comments) VALUES('EHREmailPOPserver','','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString,Comments) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'EHREmailPOPserver','','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString,Comments) VALUES('EHREmailPort','','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString,Comments) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'EHREmailPort','','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString,Comments) VALUES('EHREmailPassword','','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString,Comments) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'EHREmailPassword','','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString,Comments) VALUES('ProblemsIndicateNone','','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString,Comments) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ProblemsIndicateNone','','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString,Comments) VALUES('MedicationsIndicateNone','','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString,Comments) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'MedicationsIndicateNone','','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS eduresource";
                Db.nonQ(command);
                command = "CREATE TABLE eduresource (\r\n" + 
                "\t\t\t\t\t\tEduResourceNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tIcd9Num bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDiseaseDefNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicationNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLabResultID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLabResultName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLabResultCompare varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tResourceUrl varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(Icd9Num),\r\n" + 
                "\t\t\t\t\t\tINDEX(DiseaseDefNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(MedicationNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(LabResultID)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE eduresource'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE eduresource (\r\n" + 
                "\t\t\t\t\t\tEduResourceNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIcd9Num number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDiseaseDefNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicationNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLabResultID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tLabResultName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tLabResultCompare varchar2(255),\r\n" + 
                "\t\t\t\t\t\tResourceUrl varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT eduresource_EduResourceNum PRIMARY KEY (EduResourceNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX eduresource_Icd9Num ON eduresource (Icd9Num)";
                Db.nonQ(command);
                command = "CREATE INDEX eduresource_DiseaseDefNum ON eduresource (DiseaseDefNum)";
                Db.nonQ(command);
                command = "CREATE INDEX eduresource_MedicationNum ON eduresource (MedicationNum)";
                Db.nonQ(command);
                command = "CREATE INDEX eduresource_LabResultID ON eduresource (LabResultID)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE medicalorder ADD IsDiscontinued tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE medicalorder ADD IsDiscontinued number(3)";
                Db.nonQ(command);
                command = "UPDATE medicalorder SET IsDiscontinued = 0 WHERE IsDiscontinued IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE medicalorder MODIFY IsDiscontinued NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('StoreCCtokens','1')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'StoreCCtokens','1')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                //Create a temporary table to hold all of the canadian network information that we know of.
                command = "DROP TABLE IF EXISTS `tempcanadiannetwork`";
                Db.nonQ(command);
                command = "CREATE TABLE `tempcanadiannetwork` (" + "`CanadianNetworkNum` bigint(20) NOT NULL auto_increment," + "`Abbrev` varchar(20) default ''," + "`Descript` varchar(255) default ''," + "`CanadianTransactionPrefix` varchar(255) default ''," + "PRIMARY KEY  (`CanadianNetworkNum`)" + ") ENGINE=MyISAM DEFAULT CHARSET=utf8";
                Db.nonQ(command);
                command = "INSERT INTO `tempcanadiannetwork`(`CanadianNetworkNum`,`Abbrev`,`Descript`,`CanadianTransactionPrefix`) VALUES (7,'TELUS B','TELUS Group B','HD*         ')";
                Db.nonQ(command);
                command = "INSERT INTO `tempcanadiannetwork`(`CanadianNetworkNum`,`Abbrev`,`Descript`,`CanadianTransactionPrefix`) VALUES (8,'CSI','Continovation Services Inc.','CSI         ')";
                Db.nonQ(command);
                command = "INSERT INTO `tempcanadiannetwork`(`CanadianNetworkNum`,`Abbrev`,`Descript`,`CanadianTransactionPrefix`) VALUES (9,'CDCS','CDCS','CDCS        ')";
                Db.nonQ(command);
                command = "INSERT INTO `tempcanadiannetwork`(`CanadianNetworkNum`,`Abbrev`,`Descript`,`CanadianTransactionPrefix`) VALUES (10,'TELUS A','TELUS Group A','1111111119  ')";
                Db.nonQ(command);
                command = "INSERT INTO `tempcanadiannetwork`(`CanadianNetworkNum`,`Abbrev`,`Descript`,`CanadianTransactionPrefix`) VALUES (11,'MBC','Manitoba Blue Cross','MBC         ')";
                Db.nonQ(command);
                command = "INSERT INTO `tempcanadiannetwork`(`CanadianNetworkNum`,`Abbrev`,`Descript`,`CanadianTransactionPrefix`) VALUES (12,'PBC','Pacific Blue Cross','PBC         ')";
                Db.nonQ(command);
                command = "INSERT INTO `tempcanadiannetwork`(`CanadianNetworkNum`,`Abbrev`,`Descript`,`CanadianTransactionPrefix`) VALUES (13,'ABC','Alberta Blue Cross','ABC         ')";
                Db.nonQ(command);
                //Create a column to associate already created canadian networks to our temporary canadian network table.
                command = "ALTER TABLE tempcanadiannetwork ADD COLUMN CanadianNetworkNumExisting bigint default 0";
                Db.nonQ(command);
                command = "UPDATE tempcanadiannetwork t,canadiannetwork n SET t.CanadianNetworkNumExisting=n.CanadianNetworkNum WHERE TRIM(LOWER(t.Abbrev))=TRIM(LOWER(n.Abbrev))";
                Db.nonQ(command);
                //Create a column to associate our temporary canadian networks to their new primary key in the canadian network table.
                command = "ALTER TABLE tempcanadiannetwork ADD COLUMN CanadianNetworkNumNew bigint default 0";
                Db.nonQ(command);
                command = "UPDATE tempcanadiannetwork t " + "SET t.CanadianNetworkNumNew=CASE " + "WHEN t.CanadianNetworkNumExisting<>0 THEN t.CanadianNetworkNumExisting " + "ELSE t.CanadianNetworkNum+(SELECT MAX(n.CanadianNetworkNum) FROM canadiannetwork n) END";
                Db.nonQ(command);
                //Update the live canadiannetwork table and set the CanadianTransactionPrefix to known values for networks that were already in the database.
                command = "UPDATE canadiannetwork n,tempcanadiannetwork t SET n.CanadianTransactionPrefix=t.CanadianTransactionPrefix WHERE n.CanadianNetworkNum=t.CanadianNetworkNumExisting";
                Db.nonQ(command);
                //Add any missing canadian networks from the temporary canadian network table for those networks that are not already present.
                command = "INSERT INTO canadiannetwork (CanadianNetworkNum,Abbrev,Descript,CanadianTransactionPrefix) " + "SELECT CanadianNetworkNumNew,Abbrev,Descript,CanadianTransactionPrefix " + "FROM tempcanadiannetwork " + "WHERE CanadianNetworkNumExisting=0";
                Db.nonQ(command);
                //Remove the CanadianTransactionPrefix column from the carrier table, since it will now be part of the canadiannetwork table.
                command = "ALTER TABLE carrier DROP COLUMN CanadianTransactionPrefix";
                Db.nonQ(command);
                //Create a temporary carrier table to hold all of the most recent canadian carrier information that we know about.
                command = "DROP TABLE IF EXISTS `tempcarriercanada`";
                Db.nonQ(command);
                command = "CREATE TABLE `tempcarriercanada` (" + "`CarrierNum` bigint(20) NOT NULL auto_increment," + "`CarrierName` varchar(255) default ''," + "`Address` varchar(255) default ''," + "`Address2` varchar(255) default ''," + "`City` varchar(255) default ''," + "`State` varchar(255) default ''," + "`Zip` varchar(255) default ''," + "`Phone` varchar(255) default ''," + "`ElectID` varchar(255) default ''," + "`NoSendElect` tinyint(1) unsigned NOT NULL default '0'," + "`IsCDA` tinyint(3) unsigned NOT NULL," + "`CDAnetVersion` varchar(100) default ''," + "`CanadianNetworkNum` bigint(20) NOT NULL," + "`IsHidden` tinyint(4) NOT NULL," + "`CanadianEncryptionMethod` tinyint(4) NOT NULL," + "`CanadianSupportedTypes` int(11) NOT NULL," + "PRIMARY KEY  (`CarrierNum`)" + ") ENGINE=MyISAM DEFAULT CHARSET=utf8";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (1,'Accerta','P.O. Box 310','Station \\'P\\'','Toronto','ON','M5S 2S8','1-800-505-7430','311140',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (2,'ADSC - AB Social Services QuikCard','200 Quikcard Centre','17010 103 Avenue','Edmonton','AB','T5S 1K7','1-800-232-1997','000105',0,1,'04',8,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (3,'AGA Financial Group - Groupe Cloutier','525 René-Lévesque Blvd E 6th Floor','P.O. Box 17100','Quebec','QC','G1K 9E2','1 800 461-0770','610226',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (4,'Association des policières et policiers (APPQ)','1981, Léonard-De Vinci','','Ste-Julie','QC','J3E 1Y9','(450) 922-5414','628112',0,1,'02',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (5,'Assumption Life','P. O. Box 160','','Moncton','NB','E1C 8L1','1-800-455-7337','610191',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (6,'Autoben','212 King Street West','Suite 203','Toronto','ON','M5H 1K5','1.866.647.1147','628151',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (7,'Benecaid Health Benefit Solutions (ESI)','185 The West Mall','Suite 1700','Toronto','ON','M9C 5L5','1.877.797.7448','610708',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (8,'Benefits Trust (The)','3800 Steeles Ave. West','Suite #102W','Vaughan','ON','L4L 4G9','1-800-487-2993','610146',0,1,'02',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (9,'Beneplan','150 Ferrand Drive','Suite 500','Toronto','ON','M3C 3E5','1-800-387-1670','400008',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (10,'Capitale','525 René-Lévesque Blvd E 6th Floor','P.O. Box 17100','Quebec','QC','G1K 9E2','1 800 461-0770','600502',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (12,'Claimsecure','1 City Centre Drive','Suite 620','Mississauga','ON','L5B 1M2','1-888-479-7587','610099',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (11,'CDCS','P.O. Box 156 Stn. \"B\"','','Sudbury','ON','P3E 4N5','(705) 675-2222','610129',0,1,'04',9,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (13,'Commision de la construction du Quebec (CCQ)','3530, rue Jean-Talon Ouest','','Montréal','QC','H3R 2G3','1 888 842-8282','000036',0,1,'02',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (14,'Co-operators (The)','Service Quality Department','130 Macdonell Street','Guelph','ON','N1H 6P8','1-800-265-2662','606258',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (15,'Coughlin & Associates','466 Tremblay Road','','Ottawa','ON','K1G 3R1','1-888-613-1234','610105',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (16,'Cowan Wright Beauchamps','705 Fountain Street North','PO Box 1510','Cambridge','ON','N1R 5T2','1-866-912-6926','610153',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (17,'Desjardins Financial Security','200 des Commandeurs','','Lévis','QC','G6V 6R2','1-866-838-7553','000051',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (18,'Empire Life Insurance Company (The)','259 King Street East','','Kingston','ON','K7L 3A8','1 800 561-1268','000033',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (19,'Equitable Life','One Westmount Road North','P.O. Box 1603, Stn Waterloo','Waterloo','ON','N2J 4C7','1-800-265-4556 x601','000029',0,1,'02',10,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (20,'Esorse Corporation','234 Eglinton Avenue East','Suite 502','Toronto','ON','M4P 1K5','(416)-483-3265','610650',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (21,'FAS Administrators','9707 - 110 Street','9th Floor','Edmonton','AB','T5K 3T4','1-800-770-2998','610614',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (22,'Great West Life Assurance Company (The)','100 Osborne Street North','','Winnipeg','MB','R3C 3A5','204-946-1190','000011',0,1,'02',10,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (23,'Green Shield Canada','8677 Anchor Drive','P.O Box 1606','Windsor','ON','N9A 6W1','1-800-265-5615','000102',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (24,'Group Medical Services (GMS - ESI)','2055 Albert Street','PO Box 1949','Regina','SK','S4P 0E3','1.800.667.3699','610217',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (25,'Group Medical Services (GMS - ESI - Saskatchewan)','2055 Albert Street','PO Box 1949','Regina','SK','S4P 0E3','1.800.667.3699','610218',0,1,'04',8,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (26,'groupSource','1550 - 5th Street SW','Suite 400','Calgary','AB','T2R 1K3','1-800-661-6195','605064',0,1,'04',8,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (27,'Industrial Alliance','1080 Grande Allée West','PO Box 1907, Station Terminus','Quebec City','QC','G1K 7M3','1-800-463-6236','000060',0,1,'02',10,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (28,'Industrial Alliance Pacific Insurance and Financial','2165 Broadway West','P.O. Box 5900','Vancouver','BC','V6B 5H6','(604) 734-1667','000024',0,1,'02',10,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (29,'Internationale Compagnie D\\'assurance vie','142 Heriot','P.O. Box 696','Drummondville','QC','J2B 6W9','1 888 864-6684','610643',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (30,'Johnson Inc.','','','','','','1-877-221-2127','627265',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (31,'Johnston Group','','','','','','800-990-4476','627223',0,1,'02',10,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (32,'Lee-Power & Associates Inc.','616 Cooper St.','','Ottawa','ON','K1R 5J2','(613) 236-9007','627585',0,1,'02',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (33,'Manion Wilkins','500 - 21 Four Seasons Place','','Etobicoke','ON','M9B 0A5','1-800-263-5621','610158',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (34,'Manitoba Blue Cross','P.O. Box 1046','','Winnipeg','MB','R3C 2X7','1-800-873-2583','000094',0,1,'04',11,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (35,'Manufacturers Life Insurance Company (The)','500 King Street. N.','P.O. Box 1669','Waterloo','ON','N2J 4Z6','1-888-626-8543','000034',0,1,'02',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (36,'Manulife Financial','500 King Street. N.','P.O. Box 1669','Waterloo','ON','N2J 4Z6','1-888-626-8543','610059',0,1,'02',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (37,'Maritime Life Assurance Company','500 King Street. N.','P.O. Box 1669','Waterloo','ON','N2J 4Z6','1-888-626-8543','311113',0,1,'02',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (38,'Maritime Life Assurance Company','500 King Street. N.','P.O. Box 1669','Waterloo','ON','N2J 4Z6','1-888-626-8543','610070',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (39,'McAteer Group of Companies','45 McIntosh Drive','','Markham','ON','L3R 8C7','(800) 263-3564','000112',0,1,'04',8,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (40,'MDM','MD Management Limited','1870, Alta Vista Drive','Ottawa','ON','K1G 6R7','1 800 267-4022','601052',0,1,'02',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (41,'Medavie Blue Cross','644 Main Street','PO Box 220','Moncton','NB','E1C 8L3','1-800-667-4511','610047',0,1,'02',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (42,'NexGenRX','145 The West Mall','P.O. Box 110 U','Toronto','ON','M8Z 5M4','1-866-424-0257','610634',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (43,'NIHB','Health Canada','Address Locator 0900C2','Ottawa','ON','K1A 0K9','1-866-225-0709','610124',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (44,'Nova Scotia Community Services','10 Webster Street','Suite 202','Kentville','NS','B4N 1H7','(902) 679-6715','000109',0,1,'04',8,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (45,'Nova Scotia Medical Services Insurance','1741 Brunswick Street, Suite 110A','PO Box 1535','Halifax','NS','B3J 2Y3','1-877-292-9597','000108',0,1,'04',8,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (46,'Nunatsiavut Government Department of Health','25 Ikajuktauvik Road','P.O. Box 70','Nain','NL','A0P 1L0','(709) 922-2942','610172',0,1,'04',8,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (47,'Pacific Blue Cross','Pacific Blue Cross/ BC Life','PO Box 7000','Vancouver','BC','V6B 4E1','604 419-2300','000064',0,1,'04',12,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (48,'Quikcard','200 Quikcard Centre','17010 103 Avenue','Edmonton','AB','T5S 1K7','(780) 426-7526','000103',0,1,'04',8,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (49,'RWAM Insurance','49 Industrial Drive','','Elmira','ON','N3B 3B1','(519) 669-1632','610616',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (50,'Saskatchewan Blue Cross','516 2nd Avenue N','PO Box 4030','Saskatoon','SK','S7K 3T2','306.244.1192','000096',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (51,'SES Benefits','2800 Skymark Avenue','Suite 307','Mississauga','ON','L4W 5A6','1-888-939-8885','610196',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (52,'SSQ SOCIÉTÉ d\\'assurance-vie inc.','2525 Laurier Boulevard','P.O. Box 10500, Stn Sainte-Foy','Quebec City','QC','G1V 4H6','1-888-900-3457','000079',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (53,'Standard Life Assurance Company (The)','639 - 5th Avenue South West','Suite 1500','Calgary','AB','T2P 0M9','403-296-9477','000020',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (54,'Sun Life of Canada','','','','','','1-877-786-5433','000016',0,1,'02',10,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (55,'Survivance','1555 Girouard Street West','P.O. Box 10,000','Saint-Hyacinthe','QC','J2S 7C8','450 773-6051','000080',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (56,'Syndicat des fonctionnaires municipaux MTL','429, rue de La Gauchetière Est','','Montréal','QC','H2L 2M7','514 842-9463','610677',0,1,'04',7,0,1,262143)";
                Db.nonQ(command);
                command = "INSERT INTO `tempcarriercanada`(`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`,`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) VALUES (57,'Wawanesa','900-191 Broadway','','Winnipeg','MB','R3C 3P1','(204) 985-3923','311109',0,1,'02',7,0,1,262143)";
                Db.nonQ(command);
                //Update the CanadianNetworkNum values in the temporary carrier table because the networks in the live canadiannetwork table are different.
                command = "UPDATE tempcarriercanada tc,tempcanadiannetwork tn SET tc.CanadianNetworkNum=tn.CanadianNetworkNumNew WHERE tc.CanadianNetworkNum=tn.CanadianNetworkNum";
                Db.nonQ(command);
                //Clear all CanadianNetworkNum foreign keys from the carrier table so that for those carriers which we cannot match to a network, the users will be notified that no network is associated with the carrier.
                command = "UPDATE carrier c SET c.CanadianNetworkNum=0";
                Db.nonQ(command);
                //Create a column in the temporary carrier table to link up the existing carriers by electronic ID.
                command = "ALTER TABLE tempcarriercanada ADD COLUMN CarrierNumExisting bigint default 0";
                Db.nonQ(command);
                command = "UPDATE tempcarriercanada t,carrier c SET t.CarrierNumExisting=c.CarrierNum WHERE c.IsCDA=1 AND t.ElectID=c.ElectID";
                Db.nonQ(command);
                //For those carriers that were already in the live data before this conversion that match a known carrier, update their CanadianNetworkNum to match the temporary canadian network data.
                command = "UPDATE carrier c,tempcarriercanada tc SET c.CanadianNetworkNum=tc.CanadianNetworkNum WHERE c.CarrierNum=tc.CarrierNumExisting";
                Db.nonQ(command);
                //Create a column to figure out what the new carriernums will need to be for the new carriers that we are going to add to the carrier table.
                command = "ALTER TABLE tempcarriercanada ADD COLUMN CarrierNumNew bigint default 0";
                Db.nonQ(command);
                command = "UPDATE tempcarriercanada t SET t.CarrierNumNew=CASE WHEN t.CarrierNumExisting<>0 THEN t.CarrierNumExisting ELSE t.CarrierNum+(SELECT MAX(c.CarrierNum) FROM carrier c) END";
                Db.nonQ(command);
                //Add carriers from the temporary carrier table which do not already exist in the live carrier table.
                //We only want to insert these carriers if in Canada because they are of no use elsewhere.
                if (CultureInfo.CurrentCulture.Name.EndsWith("CA"))
                {
                    //Canadian. en-CA or fr-CA
                    command = "INSERT INTO carrier (`CarrierNum`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`," + "`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes`) " + "SELECT `CarrierNumNew`,`CarrierName`,`Address`,`Address2`,`City`,`State`,`Zip`,`Phone`,`ElectID`,`NoSendElect`,`IsCDA`," + "`CDAnetVersion`,`CanadianNetworkNum`,`IsHidden`,`CanadianEncryptionMethod`,`CanadianSupportedTypes` " + "FROM tempcarriercanada " + "WHERE CarrierNumExisting=0";
                    Db.nonQ(command);
                }
                 
                command = "DROP TABLE IF EXISTS `tempcanadiannetwork`";
                Db.nonQ(command);
                command = "DROP TABLE IF EXISTS `tempcarriercanada`";
                Db.nonQ(command);
            }
            else
            {
            } 
            //oracle
            //At this point, there should not be anyone in Canada using Oracle, so these statements have been skipped because they would be a bit of work to create.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString,Comments) VALUES('AllergiesIndicateNone','','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString,Comments) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'AllergiesIndicateNone','','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE provider ADD IsCDAnet tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE provider ADD IsCDAnet number(3)";
                Db.nonQ(command);
                command = "UPDATE provider SET IsCDAnet = 0 WHERE IsCDAnet IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE provider MODIFY IsCDAnet NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrmeasureevent";
                Db.nonQ(command);
                command = "CREATE TABLE ehrmeasureevent (\r\n" + 
                "\t\t\t\t\t\tEhrMeasureEventNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tDateTEvent datetime NOT NULL DEFAULT \'0001-01-01 00:00:00\',\r\n" + 
                "\t\t\t\t\t\tEventType tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMoreInfo varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrmeasureevent'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrmeasureevent (\r\n" + 
                "\t\t\t\t\t\tEhrMeasureEventNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTEvent date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEventType number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMoreInfo varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrmeasureevent_EhrMeasureNum PRIMARY KEY (EhrMeasureEventNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrmeasureevent_PatNum ON ehrmeasureevent (PatNum)";
                Db.nonQ(command);
            } 
            //EvaSoft link-----------------------------------------------------------------------
            //This insert statement is compatible with both MySQL and Oracle.
            command = "SELECT MAX(ProgramNum)+1 FROM program";
            long programNum = PIn.long(Db.getScalar(command));
            command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'" + POut.long(programNum) + "'," + "'EvaSoft', " + "'EvaSoft from www.imageworkscorporation.com', " + "'0', " + "'', " + "'', " + "'" + POut.string("No command line or path is needed.") + "')";
            Db.nonQ(command);
            //This insert statement is compatible with both MySQL and Oracle.
            command = "SELECT MAX(ProgramPropertyNum)+1 FROM programproperty";
            long programPropertyNum = PIn.long(Db.getScalar(command));
            command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programPropertyNum) + "'," + "'" + programNum.ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
            Db.nonQ(command);
            //This insert statement is compatible with both MySQL and Oracle.
            command = "SELECT MAX(ToolButItemNum)+1 FROM toolbutitem";
            long toolButItemNum = PIn.long(Db.getScalar(command));
            command = "INSERT INTO toolbutitem (ToolButItemNum,ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.long(toolButItemNum) + "'," + "'" + programNum.ToString() + "', " + "'" + POut.int(((Enum)ToolBarsAvail.ChartModule).ordinal()) + "', " + "'EvaSoft')";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE refattach ADD IsTransitionOfCare tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE refattach ADD IsTransitionOfCare number(3)";
                Db.nonQ(command);
                command = "UPDATE refattach SET IsTransitionOfCare = 0 WHERE IsTransitionOfCare IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE refattach MODIFY IsTransitionOfCare NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE referral ADD IsDoctor tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE referral ADD IsDoctor number(3)";
                Db.nonQ(command);
                command = "UPDATE referral SET IsDoctor = 0 WHERE IsDoctor IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE referral MODIFY IsDoctor NOT NULL";
                Db.nonQ(command);
            } 
            command = "UPDATE referral SET IsDoctor=1 WHERE PatNum = 0";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE allergy ADD DateAdverseReaction date NOT NULL DEFAULT '0001-01-01'";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE allergy ADD DateAdverseReaction date";
                Db.nonQ(command);
                command = "UPDATE allergy SET DateAdverseReaction = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE DateAdverseReaction IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE allergy MODIFY DateAdverseReaction NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE pharmacy ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE pharmacy SET DateTStamp = NOW()";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE pharmacy ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE pharmacy SET DateTStamp = SYSTIMESTAMP";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE medicationpat ADD DateStart date NOT NULL DEFAULT '0001-01-01'";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE medicationpat ADD DateStart date";
                Db.nonQ(command);
                command = "UPDATE medicationpat SET DateStart = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE DateStart IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE medicationpat MODIFY DateStart NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE medicationpat ADD DateStop date NOT NULL DEFAULT '0001-01-01'";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE medicationpat ADD DateStop date";
                Db.nonQ(command);
                command = "UPDATE medicationpat SET DateStop = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE DateStop IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE medicationpat MODIFY DateStop NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "UPDATE medicationpat SET DateStop = CURDATE() WHERE IsDiscontinued=1";
                Db.nonQ(command);
            }
            else
            {
                command = "UPDATE medicationpat SET DateStop = SYSDATE WHERE IsDiscontinued=1";
                Db.nonQ(command);
            } 
            command = "ALTER TABLE medicationpat DROP COLUMN IsDiscontinued";
            //both oracle and mysql
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE allergydef ADD Snomed tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE allergydef ADD Snomed number(3)";
                Db.nonQ(command);
                command = "UPDATE allergydef SET Snomed = 0 WHERE Snomed IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE allergydef MODIFY Snomed NOT NULL";
                Db.nonQ(command);
            } 
            //this was supposed to have been deleted:
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE allergydef ADD RxCui bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE allergydef ADD INDEX (RxCui)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE allergydef ADD RxCui number(20)";
                Db.nonQ(command);
                command = "UPDATE allergydef SET RxCui = 0 WHERE RxCui IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE allergydef MODIFY RxCui NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX allergydef_RxCui ON allergydef (RxCui)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE labresult ADD AbnormalFlag tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE labresult ADD AbnormalFlag number(3)";
                Db.nonQ(command);
                command = "UPDATE labresult SET AbnormalFlag = 0 WHERE AbnormalFlag IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE labresult MODIFY AbnormalFlag NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE disease ADD DateStart date NOT NULL DEFAULT '0001-01-01'";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE disease ADD DateStart date";
                Db.nonQ(command);
                command = "UPDATE disease SET DateStart = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE DateStart IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE disease MODIFY DateStart NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE disease ADD DateStop date NOT NULL DEFAULT '0001-01-01'";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE disease ADD DateStop date";
                Db.nonQ(command);
                command = "UPDATE disease SET DateStop = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE DateStop IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE disease MODIFY DateStop NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE rxpat ADD SendStatus tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE rxpat ADD SendStatus number(3)";
                Db.nonQ(command);
                command = "UPDATE rxpat SET SendStatus = 0 WHERE SendStatus IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE rxpat MODIFY SendStatus NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE provider ADD EcwID varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE provider ADD EcwID varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE labpanel ADD MedicalOrderNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE labpanel ADD INDEX (MedicalOrderNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE labpanel ADD MedicalOrderNum number(20)";
                Db.nonQ(command);
                command = "UPDATE labpanel SET MedicalOrderNum = 0 WHERE MedicalOrderNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE labpanel MODIFY MedicalOrderNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX labpanel_MedicalOrderNum ON labpanel (MedicalOrderNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE allergydef ADD MedicationNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE allergydef ADD INDEX (MedicationNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE allergydef ADD MedicationNum number(20)";
                Db.nonQ(command);
                command = "UPDATE allergydef SET MedicationNum = 0 WHERE MedicationNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE allergydef MODIFY MedicationNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX allergydef_MedicationNum ON allergydef (MedicationNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS orthochart";
                Db.nonQ(command);
                command = "CREATE TABLE orthochart (\r\n" + 
                "\t\t\t\t\t\tOrthoChartNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateService date NOT NULL DEFAULT \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tFieldName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFieldValue text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE orthochart'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE orthochart (\r\n" + 
                "\t\t\t\t\t\tOrthoChartNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateService date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFieldName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tFieldValue varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT orthochart_OrthoChartNum PRIMARY KEY (OrthoChartNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX orthochart_PatNum ON orthochart (PatNum)";
                Db.nonQ(command);
            } 
            command = "ALTER TABLE rxpat DROP COLUMN IsElectQueue";
            //both oracle and mysql
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE medication ADD RxCui bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE medication ADD INDEX (RxCui)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE medication ADD RxCui number(20)";
                Db.nonQ(command);
                command = "UPDATE medication SET RxCui = 0 WHERE RxCui IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE medication MODIFY RxCui NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX medication_RxCui ON medication (RxCui)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString,Comments) VALUES('ShowFeatureEhr','','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString,Comments) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ShowFeatureEhr','','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE provider ADD EhrKey varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE provider ADD EhrKey varchar2(255)";
                Db.nonQ(command);
            } 
            boolean usingECW = true;
            command = "SELECT COUNT(*) FROM program WHERE ProgName='eClinicalWorks' AND Enabled=1";
            if (StringSupport.equals(Db.getCount(command), "0"))
            {
                usingECW = false;
            }
             
            if (usingECW)
            {
                command = "UPDATE provider SET EcwID=Abbr";
                Db.nonQ(command);
            }
             
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS rxnorm";
                Db.nonQ(command);
                command = "CREATE TABLE rxnorm (\r\n" + 
                "\t\t\t\t\t\tRxNormNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tRxCui varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMmslCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255) NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE rxnorm'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE rxnorm (\r\n" + 
                "\t\t\t\t\t\tRxNormNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRxCui varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMmslCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tDescription varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT rxnorm_RxNormNum PRIMARY KEY (RxNormNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrprovkey";
                Db.nonQ(command);
                command = "CREATE TABLE ehrprovkey (\r\n" + 
                "\t\t\t\t\t\tEhrProvKeyNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProvKey varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFullTimeEquiv float NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNotes text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrprovkey'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrprovkey (\r\n" + 
                "\t\t\t\t\t\tEhrProvKeyNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tFName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tProvKey varchar2(255),\r\n" + 
                "\t\t\t\t\t\tFullTimeEquiv number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNotes varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrprovkey_EhrProvKeyNum PRIMARY KEY (EhrProvKeyNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrprovkey_PatNum ON ehrprovkey (PatNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString,Comments) VALUES('EhrProvKeyGeneratorPath','','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString,Comments) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'EhrProvKeyGeneratorPath','','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString,Comments) VALUES('ApptPrintColumnsPerPage','','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString,Comments) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ApptPrintColumnsPerPage','','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString,Comments) VALUES('ApptPrintFontSize','','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString,Comments) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ApptPrintFontSize','','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString,Comments) VALUES('ApptPrintTimeStart','','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString,Comments) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ApptPrintTimeStart','','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString,Comments) VALUES('ApptPrintTimeStop','','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString,Comments) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ApptPrintTimeStop','','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE provider ADD StateRxID varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE provider ADD StateRxID varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE medicalorder ADD ProvNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE medicalorder ADD INDEX (ProvNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE medicalorder ADD ProvNum number(20)";
                Db.nonQ(command);
                command = "UPDATE medicalorder SET ProvNum = 0 WHERE ProvNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE medicalorder MODIFY ProvNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX medicalorder_ProvNum ON medicalorder (ProvNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE medicationpat ADD ProvNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE medicationpat ADD INDEX (ProvNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE medicationpat ADD ProvNum number(20)";
                Db.nonQ(command);
                command = "UPDATE medicationpat SET ProvNum = 0 WHERE ProvNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE medicationpat MODIFY ProvNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX medicationpat_ProvNum ON medicationpat (ProvNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vitalsign ADD HasFollowupPlan tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vitalsign ADD HasFollowupPlan number(3)";
                Db.nonQ(command);
                command = "UPDATE vitalsign SET HasFollowupPlan = 0 WHERE HasFollowupPlan IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vitalsign MODIFY HasFollowupPlan NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vitalsign ADD IsIneligible tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vitalsign ADD IsIneligible number(3)";
                Db.nonQ(command);
                command = "UPDATE vitalsign SET IsIneligible = 0 WHERE IsIneligible IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vitalsign MODIFY IsIneligible NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vitalsign ADD Documentation text NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vitalsign ADD Documentation varchar2(4000)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE insplan ADD CanadianDiagnosticCode varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE insplan ADD CanadianDiagnosticCode varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE insplan ADD CanadianInstitutionCode varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE insplan ADD CanadianInstitutionCode varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE canadiannetwork ADD CanadianIsRprHandler tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE canadiannetwork ADD CanadianIsRprHandler number(3)";
                Db.nonQ(command);
                command = "UPDATE canadiannetwork SET CanadianIsRprHandler = 0 WHERE CanadianIsRprHandler IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE canadiannetwork MODIFY CanadianIsRprHandler NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE rxdef ADD RxCui bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE rxdef ADD INDEX (RxCui)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE rxdef ADD RxCui number(20)";
                Db.nonQ(command);
                command = "UPDATE rxdef SET RxCui = 0 WHERE RxCui IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE rxdef MODIFY RxCui NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX rxdef_RxCui ON rxdef (RxCui)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE rxpat ADD RxCui bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE rxpat ADD INDEX (RxCui)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE rxpat ADD RxCui number(20)";
                Db.nonQ(command);
                command = "UPDATE rxpat SET RxCui = 0 WHERE RxCui IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE rxpat MODIFY RxCui NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX rxpat_RxCui ON rxpat (RxCui)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE rxpat ADD DosageCode varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE rxpat ADD DosageCode varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE insplan ADD RxBIN varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE insplan ADD RxBIN varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrsummaryccd";
                Db.nonQ(command);
                command = "CREATE TABLE ehrsummaryccd (\r\n" + 
                "\t\t\t\t\t\tEhrSummaryCcdNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateSummary date NOT NULL DEFAULT \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tContentSummary text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrsummaryccd'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrsummaryccd (\r\n" + 
                "\t\t\t\t\t\tEhrSummaryCcdNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateSummary date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tContentSummary clob,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrsummaryccd_EhrSummaryCcdNum PRIMARY KEY (EhrSummaryCcdNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrsummaryccd_PatNum ON ehrsummaryccd (PatNum)";
                Db.nonQ(command);
            } 
            //Add ProcDelete permission to all who had ProcComplEdit------------------------------------------------------
            command = "SELECT NewerDate,NewerDays,UserGroupNum FROM grouppermission WHERE PermType=10";
            DataTable table = Db.getTable(command);
            DateTime newerDate = new DateTime();
            int newerDays = new int();
            long groupNum = new long();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    newerDate = PIn.Date(table.Rows[i][0].ToString());
                    newerDays = PIn.Int(table.Rows[i][1].ToString());
                    groupNum = PIn.Long(table.Rows[i][2].ToString());
                    command = "INSERT INTO grouppermission (NewerDate,NewerDays,UserGroupNum,PermType) " + "VALUES(" + POut.date(newerDate) + "," + POut.int(newerDays) + "," + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.ProcDelete).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            }
            else
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //oracle
                    newerDate = PIn.Date(table.Rows[i][0].ToString());
                    newerDays = PIn.Int(table.Rows[i][1].ToString());
                    groupNum = PIn.Long(table.Rows[i][2].ToString());
                    command = "INSERT INTO grouppermission (GroupPermNum,NewerDate,NewerDays,UserGroupNum,PermType) " + "VALUES((SELECT MAX(GroupPermNum)+1 FROM grouppermission)," + POut.date(newerDate) + "," + POut.int(newerDays) + "," + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.ProcDelete).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vaccinepat ADD NotGiven tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vaccinepat ADD NotGiven number(3)";
                Db.nonQ(command);
                command = "UPDATE vaccinepat SET NotGiven = 0 WHERE NotGiven IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vaccinepat MODIFY NotGiven NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vaccinepat ADD Note text NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vaccinepat ADD Note varchar2(4000)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vitalsign ADD ChildGotNutrition tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vitalsign ADD ChildGotNutrition number(3)";
                Db.nonQ(command);
                command = "UPDATE vitalsign SET ChildGotNutrition = 0 WHERE ChildGotNutrition IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vitalsign MODIFY ChildGotNutrition NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vitalsign ADD ChildGotPhysCouns tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vitalsign ADD ChildGotPhysCouns number(3)";
                Db.nonQ(command);
                command = "UPDATE vitalsign SET ChildGotPhysCouns = 0 WHERE ChildGotPhysCouns IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vitalsign MODIFY ChildGotPhysCouns NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "UPDATE icd9 SET ICD9Code=CONCAT(SUBSTR(ICD9Code,1,3),'.',SUBSTR(ICD9Code,4)) WHERE ICD9Code REGEXP '^[VE0-9]{3}[^.]?[0-9]+'";
                //explanation of the regular expression: All codes where the first three characters are V, E, or 0-9.  The fourth character must not be a period , so [^.]? means zero or more characters that are not a period.  And then [0-9]+ indicates 1 or more numbers after that. That's a complicated way of saying that we will not include codes that have already been converted to period format, and that we will not stick a period on codes that are only 3 numbers long.
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "UPDATE icd9 SET ICD9Code=CONCAT(SUBSTR(ICD9Code,1,3),CONCAT('.',SUBSTR(ICD9Code,4))) WHERE REGEXP_LIKE(ICD9Code, '^[VE0-9]{3}[^.]?[0-9]+')";
                //See above for explanation of the regular expression.
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrquarterlykey";
                Db.nonQ(command);
                command = "CREATE TABLE ehrquarterlykey (\r\n" + 
                "\t\t\t\t\t\tEhrQuarterlyKeyNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tYearValue int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tQuarterValue int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPracticeName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tKeyValue varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNotes text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrquarterlykey'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrquarterlykey (\r\n" + 
                "\t\t\t\t\t\tEhrQuarterlyKeyNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tYearValue number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tQuarterValue number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPracticeName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tKeyValue varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNotes varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrquarterlykey_EhrQuarterlyKe PRIMARY KEY (EhrQuarterlyKeyNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrquarterlykey_PatNum ON ehrquarterlykey (PatNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD6' LIMIT 1";
            }
            else
            {
                //oracle doesn't have LIMIT
                command = "SELECT * FROM (SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD6') WHERE RowNum<=1";
            } 
            DataTable tableClaimFormNum = Db.getTable(command);
            if (tableClaimFormNum.Rows.Count > 0)
            {
                long claimFormNum = PIn.Long(tableClaimFormNum.Rows[0][0].ToString());
                command = "UPDATE claimformitem SET FieldName='SubscrIDStrict' WHERE FieldName='SubscrID' AND ClaimFormNum=" + POut.long(claimFormNum);
                Db.nonQ(command);
                command = "UPDATE claimformitem SET FieldName='PatIDFromPatPlan' WHERE FieldName='PatientID-MedicaidOrSSN' AND ClaimFormNum=" + POut.long(claimFormNum);
                Db.nonQ(command);
            }
             
            command = "UPDATE preference SET ValueString = '11.0.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to11_0_9();
    }

    /**
    * Oracle compatible: 10/13/2011
    */
    private static void to11_0_9() throws Exception {
        if (FromVersion < new Version("11.0.9.0"))
        {
            String command = new String();
            //ClaimX Clearing House
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO clearinghouse(Description,ExportPath,IsDefault,Payors,Eformat,ResponsePath,CommBridge,ClientProgram,ISA05,ISA07,ISA08,ISA15,GS03) ";
                command += "VALUES(";
                command += "'ClaimX'";
                //Description
                command += ",'" + POut.string("C:\\ClaimX\\Temp\\") + "'";
                //ExportPath that the X12 is placed into
                command += ",'0'";
                //IsDefault
                command += ",''";
                //Payors
                command += ",'1'";
                //Eformat-1=X12
                command += ",''";
                //ResponsePath
                command += ",'12'";
                //CommBridge-12=ClaimX
                command += ",'" + POut.string("C:\\ProgramFiles\\ClaimX\\claimxclient.exe") + "'";
                //ClientProgram
                command += ",'30'";
                //ISA05
                command += ",'30'";
                //ISA07
                command += ",'351962405'";
                //ISA08
                command += ",'P'";
                //ISA15-P=Production, T=Test
                command += ",'351962405'";
                //GS03
                command += ")";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO clearinghouse(ClearinghouseNum,Description,ExportPath,IsDefault,Payors,Eformat,ResponsePath,CommBridge,ClientProgram,ISA05,ISA07,ISA08,ISA15,GS03) ";
                command += "VALUES(";
                command += "(SELECT MAX(ClearinghouseNum)+1 FROM clearinghouse)";
                command += ",'ClaimX'";
                //Description
                command += ",'" + POut.string("C:\\ClaimX\\Temp\\") + "'";
                //ExportPath that the X12 is placed into
                command += ",'0'";
                //IsDefault
                command += ",''";
                //Payors
                command += ",'1'";
                //Eformat-1=X12
                command += ",''";
                //ResponsePath
                command += ",'12'";
                //CommBridge-12=ClaimX
                command += ",'" + POut.string("C:\\ProgramFiles\\ClaimX\\claimxclient.exe") + "'";
                //ClientProgram
                command += ",'30'";
                //ISA05
                command += ",'30'";
                //ISA07
                command += ",'351962405'";
                //ISA08
                command += ",'P'";
                //ISA15-P=Production, T=Test
                command += ",'351962405'";
                //GS03
                command += ")";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '11.0.9.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to11_0_10();
    }

    /**
    * Oracle compatible: 10/13/2011
    */
    private static void to11_0_10() throws Exception {
        if (FromVersion < new Version("11.0.10.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD6' LIMIT 1";
            }
            else
            {
                //oracle doesn't have LIMIT
                command = "SELECT * FROM (SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD6') WHERE RowNum<=1";
            } 
            DataTable tableClaimFormNum = Db.getTable(command);
            if (tableClaimFormNum.Rows.Count > 0)
            {
                long claimFormNum = PIn.Long(tableClaimFormNum.Rows[0][0].ToString());
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES (" + POut.long(claimFormNum) + ",'PatientPatNum',494,117,112,16)";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormNum,FieldName,XPos,YPos,Width,Height) VALUES (" + POut.long(claimFormNum) + ",'BillingDentistNPI',308,117,103,16)";
                Db.nonQ(command);
            }
             
            //It is OK to run the following queries for all of our customers, because if they are not Canadian, then only the Canadian columns will be changed and will then not ever be used.
            //We do not want to check the region settings here because sometimes Canadian customers forget to set the region correctly on their computer before installing/upgrading.
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=32,CanadianNetworkNum=7 WHERE ElectID='311140'";
            //accerta
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=2469,CanadianNetworkNum=8 WHERE ElectID='000105'";
            //adsc
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=416,CanadianNetworkNum=7 WHERE ElectID='610226'";
            //aga
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='02',CanadianSupportedTypes=420,CanadianNetworkNum=7 WHERE ElectID='628112'";
            //appq
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=2468,CanadianNetworkNum=13 WHERE ElectID='000090'";
            //alberta blue cross
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=0,CanadianNetworkNum=7 WHERE ElectID='610191'";
            //assumption life
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=416,CanadianNetworkNum=7 WHERE ElectID='628151'";
            //autoben
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=416,CanadianNetworkNum=8 WHERE ElectID='610708'";
            //benecaid health benefit solutions
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='02',CanadianSupportedTypes=384,CanadianNetworkNum=7 WHERE ElectID='610146'";
            //benefits trust
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=416,CanadianNetworkNum=7 WHERE ElectID='400008'";
            //beneplan
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=0,CanadianNetworkNum=7 WHERE ElectID='600502'";
            //capitale
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=416,CanadianNetworkNum=9 WHERE ElectID='610129'";
            //cdcs
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=1,CanadianNetworkNum=7 WHERE ElectID='610099'";
            //claimsecure
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='02',CanadianSupportedTypes=32,CanadianNetworkNum=7 WHERE ElectID='000036'";
            //ccq
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=416,CanadianNetworkNum=8 WHERE ElectID='606258'";
            //co-operators
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=2464,CanadianNetworkNum=7 WHERE ElectID='610105'";
            //coughlin & associates
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=32,CanadianNetworkNum=8 WHERE ElectID='610153'";
            //cowan wright beauchamps
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=384,CanadianNetworkNum=8 WHERE ElectID='000051'";
            //desjardins financial security
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=384,CanadianNetworkNum=7 WHERE ElectID='000033'";
            //empire life insurance company
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='02',CanadianSupportedTypes=416,CanadianNetworkNum=10 WHERE ElectID='000029'";
            //equitable life
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=65956,CanadianNetworkNum=7 WHERE ElectID='610650'";
            //esorse corporation
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=416,CanadianNetworkNum=7 WHERE ElectID='610614'";
            //fas administrators
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='02',CanadianSupportedTypes=416,CanadianNetworkNum=10 WHERE ElectID='000011'";
            //great west life assurance company
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=420,CanadianNetworkNum=7 WHERE ElectID='000102'";
            //green sheild canada
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=416,CanadianNetworkNum=8 WHERE ElectID='610217'";
            //group medical services
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=416,CanadianNetworkNum=8 WHERE ElectID='610218'";
            //group medical services saskatchewan
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=33,CanadianNetworkNum=8 WHERE ElectID='605064'";
            //groupsource
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='02',CanadianSupportedTypes=416,CanadianNetworkNum=10 WHERE ElectID='000060'";
            //industrial alliance
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='02',CanadianSupportedTypes=416,CanadianNetworkNum=10 WHERE ElectID='000024'";
            //industrial alliance pacific insuarnce and financial
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=32,CanadianNetworkNum=8 WHERE ElectID='610643'";
            //internationale campagnie d'assurance vie
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=0,CanadianNetworkNum=7 WHERE ElectID='627265'";
            //johnson inc.
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='02',CanadianSupportedTypes=416,CanadianNetworkNum=10 WHERE ElectID='627223'";
            //johnston group
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='02',CanadianSupportedTypes=0,CanadianNetworkNum=7 WHERE ElectID='627585'";
            //lee-power & associates
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=32,CanadianNetworkNum=7 WHERE ElectID='610158'";
            //manion wilkins
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=2464,CanadianNetworkNum=11 WHERE ElectID='000094'";
            //manitoba blue cross
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=2432,CanadianNetworkNum=8 WHERE ElectID='000114'";
            //manitoba cleft palate program
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=2048,CanadianNetworkNum=8 WHERE ElectID='000113'";
            //manitoba health
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='02',CanadianSupportedTypes=416,CanadianNetworkNum=7 WHERE ElectID='000034'";
            //manufacturers life insurance company
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='02',CanadianSupportedTypes=416,CanadianNetworkNum=7 WHERE ElectID='610059'";
            //manulife financial
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='02',CanadianSupportedTypes=416,CanadianNetworkNum=7 WHERE ElectID='311113'";
            //maritime life assurance company
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=416,CanadianNetworkNum=7 WHERE ElectID='610070'";
            //maritime pro
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='02',CanadianSupportedTypes=417,CanadianNetworkNum=7 WHERE ElectID='601052'";
            //mdm
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='02',CanadianSupportedTypes=384,CanadianNetworkNum=7 WHERE ElectID='610047'";
            //medavie blue cross
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=416,CanadianNetworkNum=8 WHERE ElectID='610634'";
            //nexgenrx
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=32,CanadianNetworkNum=8 WHERE ElectID='610124'";
            //nihb
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=2469,CanadianNetworkNum=8 WHERE ElectID='000109'";
            //nova scotia community services
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=2469,CanadianNetworkNum=8 WHERE ElectID='000108'";
            //nova scotia medical services insurance
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=32,CanadianNetworkNum=8 WHERE ElectID='610172'";
            //nunatsiavut government department of health
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=2432,CanadianNetworkNum=12 WHERE ElectID='000064'";
            //pacific blue cross
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=2469,CanadianNetworkNum=8 WHERE ElectID='000103'";
            //quickcard
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=384,CanadianNetworkNum=8 WHERE ElectID='610256'";
            //pbas
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=32,CanadianNetworkNum=7 WHERE ElectID='610616'";
            //rwam insurance
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=0,CanadianNetworkNum=7 WHERE ElectID='000096'";
            //saskatchewan blue cross
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=32,CanadianNetworkNum=7 WHERE ElectID='610196'";
            //ses benefits
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=0,CanadianNetworkNum=8 WHERE ElectID='000079'";
            //ssq societe d'assurance-vie inc.
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=416,CanadianNetworkNum=7 WHERE ElectID='000020'";
            //standard life assurance company
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='02',CanadianSupportedTypes=416,CanadianNetworkNum=10 WHERE ElectID='000016'";
            //sun life of canada
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=0,CanadianNetworkNum=8 WHERE ElectID='000080'";
            //survivance
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='04',CanadianSupportedTypes=32,CanadianNetworkNum=8 WHERE ElectID='610677'";
            //syndicat des fonctionnaires municipaux mtl
            Db.nonQ(command);
            command = "UPDATE carrier SET CDAnetVersion='02',CanadianSupportedTypes=416,CanadianNetworkNum=7 WHERE ElectID='311109'";
            //wawanesa
            Db.nonQ(command);
            //We only want to insert these carriers if in Canada because they are of no use elsewhere.
            if (CultureInfo.CurrentCulture.Name.EndsWith("CA"))
            {
                //Canadian. en-CA or fr-CA
                command = "SELECT COUNT(*) FROM carrier WHERE ElectID='000090'";
                //alberta blue cross
                if (StringSupport.equals(Db.getCount(command), "0"))
                {
                    command = "INSERT INTO carrier (CarrierName,Address,Address2,City,State,Zip,Phone,ElectID,NoSendElect,IsCDA,CDAnetVersion,CanadianNetworkNum,IsHidden,CanadianEncryptionMethod,CanadianSupportedTypes) VALUES " + "('Alberta Blue Cross','10009 108th Street NW','','Edmonton','AB','T5J 3C5','1-800-661-6995','000090','0','1','04',13,'0',1,2468)";
                    Db.nonQ(command);
                }
                 
                command = "SELECT COUNT(*) FROM carrier WHERE ElectID='000114'";
                //manitoba cleft palate program
                if (StringSupport.equals(Db.getCount(command), "0"))
                {
                    command = "INSERT INTO carrier (CarrierName,Address,Address2,City,State,Zip,Phone,ElectID,NoSendElect,IsCDA,CDAnetVersion,CanadianNetworkNum,IsHidden,CanadianEncryptionMethod,CanadianSupportedTypes) VALUES " + "('Manitoba Cleft Palate Program','300 Carlton Street','','Winnipeg','MB','R3B 3M9','204-787-4882','000114','0','1','04',8,'0',1,2432)";
                    Db.nonQ(command);
                }
                 
                command = "SELECT COUNT(*) FROM carrier WHERE ElectID='000113'";
                //manitoba health
                if (StringSupport.equals(Db.getCount(command), "0"))
                {
                    command = "INSERT INTO carrier (CarrierName,Address,Address2,City,State,Zip,Phone,ElectID,NoSendElect,IsCDA,CDAnetVersion,CanadianNetworkNum,IsHidden,CanadianEncryptionMethod,CanadianSupportedTypes) VALUES " + "('Manitoba Health','300 Carlton Street','','Winnipeg','MB','R3B 3M9','204-788-2581','000113','0','1','04',8,'0',1,2048)";
                    Db.nonQ(command);
                }
                 
                command = "SELECT COUNT(*) FROM carrier WHERE ElectID='610256'";
                //pbas
                if (StringSupport.equals(Db.getCount(command), "0"))
                {
                    command = "INSERT INTO carrier (CarrierName,Address,Address2,City,State,Zip,Phone,ElectID,NoSendElect,IsCDA,CDAnetVersion,CanadianNetworkNum,IsHidden,CanadianEncryptionMethod,CanadianSupportedTypes) VALUES " + "('PBAS','318-2099 Lougheed Highway','','Port Coquitlam','BC','V3B 1A8','800-952-9932','610256','0','1','04',8,'0',1,384)";
                    Db.nonQ(command);
                }
                 
            }
             
            command = "UPDATE preference SET ValueString = '11.0.10.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to11_0_11();
    }

    /**
    * Oracle compatible: 10/13/2011
    */
    private static void to11_0_11() throws Exception {
        if (FromVersion < new Version("11.0.11.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                //Bug fix for disease column (depricated) being in use. This code is identical to the function run again in 11.0 and is safe to run more than once.
                boolean diseasefieldused = false;
                boolean problemfieldused = false;
                boolean allergyfieldused = false;
                command = "SELECT ItemOrder FROM displayfield WHERE InternalName='Diseases'";
                String str = Db.getScalar(command);
                int itemOrder = 0;
                if (!String.IsNullOrEmpty(str))
                {
                    diseasefieldused = true;
                    itemOrder = PIn.int(str);
                }
                 
                command = "SELECT * FROM displayfield WHERE InternalName='Problems'";
                if (Db.getTable(command).Rows.Count > 0)
                {
                    problemfieldused = true;
                }
                 
                command = "SELECT * FROM displayfield WHERE InternalName='Allergies'";
                if (Db.getTable(command).Rows.Count > 0)
                {
                    allergyfieldused = true;
                }
                 
                if (diseasefieldused && !problemfieldused && !allergyfieldused)
                {
                    //disease is used, problems and allergies are not used
                    command = "DELETE FROM displayfield WHERE InternalName='Diseases' AND Category=5";
                    Db.nonQ(command);
                    command = "INSERT INTO displayfield (InternalName,Description,ItemOrder,ColumnWidth,Category) VALUES ('Problems',''," + POut.int(itemOrder) + ",0,5)";
                    Db.nonQ(command);
                    command = "INSERT INTO displayfield (InternalName,Description,ItemOrder,ColumnWidth,Category) VALUES ('Allergies',''," + POut.int(itemOrder) + ",0,5)";
                    Db.nonQ(command);
                }
                 
            }
            else
            {
            } 
            //oracle
            //do nothing
            command = "UPDATE preference SET ValueString = '11.0.11.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to11_0_13();
    }

    /**
    * Oracle compatible: 10/13/2011
    */
    private static void to11_0_13() throws Exception {
        if (FromVersion < new Version("11.0.13.0"))
        {
            String command = new String();
            try
            {
                //most users will not have this table
                command = "ALTER TABLE phoneempdefault ADD PhoneExt int NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE phoneempdefault ADD IsUnavailable tinyint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE phoneempdefault ADD Notes text NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE phoneempdefault ADD IpAddress varchar(255) NOT NULL";
                Db.nonQ(command);
                command = "DROP TABLE phoneoverride";
                Db.nonQ(command);
            }
            catch (Exception __dummyCatchVar9)
            {
            }

            //do nothing
            command = "UPDATE preference SET ValueString = '11.0.13.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to11_0_15();
    }

    /**
    * Oracle compatible: 10/13/2011
    */
    private static void to11_0_15() throws Exception {
        if (FromVersion < new Version("11.0.15.0"))
        {
            String command = new String();
            try
            {
                //most users will not have this table
                command = "ALTER TABLE phone ADD ScreenshotPath varchar(255) NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE phone ADD ScreenshotImage mediumtext NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE phoneempdefault ADD IsPrivateScreen tinyint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE phoneempdefault CHANGE IpAddress ComputerName varchar(255) NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE phoneempdefault CHANGE IsUnavailable StatusOverride tinyint NOT NULL";
                Db.nonQ(command);
            }
            catch (Exception __dummyCatchVar10)
            {
            }

            //do nothing
            command = "UPDATE preference SET ValueString = '11.0.15.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to11_0_24();
    }

    /**
    * Oracle compatible: 10/13/2011
    */
    private static void to11_0_24() throws Exception {
        if (FromVersion < new Version("11.0.24.0"))
        {
            String command = new String();
            command = "ALTER TABLE allergydef DROP COLUMN RxCui";
            //both oracle and mysql
            Db.nonQ(command);
            //Primary key was renamed in 6.8.1 on accident.  Changing back so generating XML documentation works correctly.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE insfilingcodesubtype CHANGE InsFilingCodeSubTypeNum InsFilingCodeSubtypeNum BIGINT(20) NOT NULL AUTO_INCREMENT";
                Db.nonQ(command);
            }
            else
            {
            } 
            //oracle
            //No need to change column name in Oracle, strictly affects XML documentation generation.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE ehrprovkey ADD HasReportAccess tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE ehrprovkey ADD HasReportAccess number(3)";
                Db.nonQ(command);
                command = "UPDATE ehrprovkey SET HasReportAccess = 0 WHERE HasReportAccess IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE ehrprovkey MODIFY HasReportAccess NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE provider ADD EhrHasReportAccess tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE provider ADD EhrHasReportAccess number(3)";
                Db.nonQ(command);
                command = "UPDATE provider SET EhrHasReportAccess = 0 WHERE EhrHasReportAccess IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE provider MODIFY EhrHasReportAccess NOT NULL";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '11.0.24.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to11_0_36();
    }

    private static void to11_0_36() throws Exception {
        if (FromVersion < new Version("11.0.36.0"))
        {
            String command = new String();
            try
            {
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE procedurelog ADD INDEX procedurelog_ProcNumLab (ProcNumLab)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX procedurelog_ProcNumLab ON procedurelog (ProcNumLab)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception __dummyCatchVar11)
            {
            }

            //Oh well, it's just an index. Probably failed because it already exists anyway.
            command = "UPDATE preference SET ValueString = '11.0.36.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to11_1_1();
    }

    /**
    * Oracle compatible: 10/13/2011
    */
    private static void to11_1_1() throws Exception {
        if (FromVersion < new Version("11.1.1.0"))
        {
            String command = new String();
            //Set default appt schedule printing preferences.  Was released when not finished so can't trust current values.
            command = "UPDATE preference SET ValueString=" + POut.dateT(new DateTime(2011, 1, 1, 0, 0, 0)) + " WHERE PrefName='ApptPrintTimeStart'";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString=" + POut.dateT(new DateTime(2011, 1, 1, 23, 0, 0)) + " WHERE PrefName='ApptPrintTimeStop'";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString='8' WHERE PrefName='ApptPrintFontSize'";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString='10' WHERE PrefName='ApptPrintColumnsPerPage'";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('ScannerSuppressDialog','1')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ScannerSuppressDialog','1')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('ScannerResolution','150')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ScannerResolution','150')";
                Db.nonQ(command);
            } 
            command = "DELETE FROM preference WHERE PrefName = 'ScannerCompressionRadiographs'";
            Db.nonQ(command);
            command = "DELETE FROM preference WHERE PrefName = 'ScannerCompressionPhotos'";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE payment ADD IsRecurringCC tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE payment ADD IsRecurringCC number(3)";
                Db.nonQ(command);
                command = "UPDATE payment SET IsRecurringCC = 0 WHERE IsRecurringCC IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE payment MODIFY IsRecurringCC NOT NULL";
                Db.nonQ(command);
            } 
            //To keep current functionality, set all payments up to this point as recurring charges.
            command = "UPDATE payment SET IsRecurringCC=1";
            Db.nonQ(command);
            try
            {
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE procedurelog ADD INDEX (ProcDate)";
                    Db.nonQ(command);
                    command = "ALTER TABLE paysplit ADD INDEX (DatePay)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX procedurelog_ProcDate ON procedurelog (ProcDate)";
                    Db.nonQ(command);
                    command = "CREATE INDEX paysplit_DatePay ON paysplit (DatePay)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception __dummyCatchVar12)
            {
            }

            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS dashboardar";
                Db.nonQ(command);
                command = "CREATE TABLE dashboardar (\r\n" + 
                "\t\t\t\t\t\tDashboardARNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tDateCalc date NOT NULL DEFAULT \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tBalTotal double NOT NULL,\r\n" + 
                "\t\t\t\t\t\tInsEst double NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE dashboardar'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE dashboardar (\r\n" + 
                "\t\t\t\t\t\tDashboardARNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateCalc date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tBalTotal number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tInsEst number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT dashboardar_DashboardARNum PRIMARY KEY (DashboardARNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('ProcCodeListShowHidden','1')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ProcCodeListShowHidden','1')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claimpayment ADD DateIssued date NOT NULL DEFAULT '0001-01-01'";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claimpayment ADD DateIssued date";
                Db.nonQ(command);
                command = "UPDATE claimpayment SET DateIssued = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE DateIssued IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE claimpayment MODIFY DateIssued NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE sheetfield ADD TabOrder int NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE sheetfield ADD TabOrder number(11)";
                Db.nonQ(command);
                command = "UPDATE sheetfield SET TabOrder = 0 WHERE TabOrder IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE sheetfield MODIFY TabOrder NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE sheetfielddef ADD TabOrder int NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE sheetfielddef ADD TabOrder number(11)";
                Db.nonQ(command);
                command = "UPDATE sheetfielddef SET TabOrder = 0 WHERE TabOrder IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE sheetfielddef MODIFY TabOrder NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS aggpath";
                Db.nonQ(command);
                command = "CREATE TABLE aggpath (\r\n" + 
                "\t\t\t\t\t\tAggPathNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tRemoteURI varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRemoteUserName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRemotePassword varchar(255) NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE aggpath'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE aggpath (\r\n" + 
                "\t\t\t\t\t\tAggPathNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRemoteURI varchar2(255),\r\n" + 
                "\t\t\t\t\t\tRemoteUserName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tRemotePassword varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT aggpath_AggPathNum PRIMARY KEY (AggPathNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('AppointmentSearchBehavior','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'AppointmentSearchBehavior','0')";
                Db.nonQ(command);
            } 
            //Insert Apixia Imaging Bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Apixia', " + "'Apixia Digital Imaging by Apixia Inc.', " + "'0', " + "'" + POut.string("C:\\Program Files\\Digirex\\digirex.exe") + "'," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'System path to Apixia Digital Imaging ini file', " + "'" + POut.string("C:\\Program Files\\Digirex\\Switch.ini") + "')";
                Db.nonQ32(command);
                command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'Apixia')";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "(SELECT MAX(ProgramNum)+1 FROM program)," + "'Apixia', " + "'Apixia Digital Imaging by Apixia Inc.', " + "'0', " + "'" + POut.string("C:\\Program Files\\Digirex\\digirex.exe") + "'," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum)+1 FROM programproperty)," + "'" + POut.long(programNum) + "', " + "'System path to Apixia Digital Imaging ini file', " + "'" + POut.string("C:\\Program Files\\Digirex\\Switch.ini") + "')";
                Db.nonQ32(command);
                command = "INSERT INTO toolbutitem (ToolButItemNum,ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "(SELECT MAX(ToolButItemNum)+1 FROM toolbutitem)," + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'Apixia')";
                Db.nonQ32(command);
            } 
            //end Apixia Imaging bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD PriorAuthorizationNumber varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD PriorAuthorizationNumber varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE provider ADD IsNotPerson tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE provider ADD IsNotPerson number(3)";
                Db.nonQ(command);
                command = "UPDATE provider SET IsNotPerson = 0 WHERE IsNotPerson IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE provider MODIFY IsNotPerson NOT NULL";
                Db.nonQ(command);
            } 
            command = "UPDATE provider SET IsNotPerson=1 WHERE FName=''";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD SpecialProgramCode tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD SpecialProgramCode number(3)";
                Db.nonQ(command);
                command = "UPDATE claim SET SpecialProgramCode = 0 WHERE SpecialProgramCode IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE claim MODIFY SpecialProgramCode NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD UniformBillType varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD UniformBillType varchar2(255)";
                Db.nonQ(command);
            } 
            //Add Providers permission to groups with existing Setup permission------------------------------------------------------
            command = "SELECT DISTINCT UserGroupNum FROM grouppermission WHERE PermType=" + POut.int(((Enum)OpenDentBusiness.Permissions.Setup).ordinal());
            DataTable table = Db.getTable(command);
            long groupNum = new long();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (UserGroupNum,PermType) " + "VALUES(" + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.Providers).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            }
            else
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //oracle
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (GroupPermNum,NewerDays,UserGroupNum,PermType) " + "VALUES((SELECT MAX(GroupPermNum)+1 FROM grouppermission),0," + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.Providers).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            } 
            //Add ProcedureNote permission to everyone------------------------------------------------------
            command = "SELECT DISTINCT UserGroupNum FROM grouppermission";
            table = Db.getTable(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (UserGroupNum,PermType) " + "VALUES(" + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.ProcedureNote).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            }
            else
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //oracle
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (GroupPermNum,NewerDays,UserGroupNum,PermType) " + "VALUES((SELECT MAX(GroupPermNum)+1 FROM grouppermission),0," + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.ProcedureNote).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            } 
            //Add ReferralAdd permission to everyone------------------------------------------------------
            command = "SELECT DISTINCT UserGroupNum FROM grouppermission";
            table = Db.getTable(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (UserGroupNum,PermType) " + "VALUES(" + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.ReferralAdd).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            }
            else
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //oracle
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (GroupPermNum,NewerDays,UserGroupNum,PermType) " + "VALUES((SELECT MAX(GroupPermNum)+1 FROM grouppermission),0," + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.ReferralAdd).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD MedType tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD MedType number(3)";
                Db.nonQ(command);
                command = "UPDATE claim SET MedType = 0 WHERE MedType IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE claim MODIFY MedType NOT NULL";
                Db.nonQ(command);
            } 
            command = "ALTER TABLE claim DROP COLUMN EFormat";
            Db.nonQ(command);
            command = "ALTER TABLE procedurelog DROP COLUMN UnitCode";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('ClaimMedTypeIsInstWhenInsPlanIsMedical','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ClaimMedTypeIsInstWhenInsPlanIsMedical','0')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE procedurelog ADD DrugUnit tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE procedurelog ADD DrugUnit number(3)";
                Db.nonQ(command);
                command = "UPDATE procedurelog SET DrugUnit = 0 WHERE DrugUnit IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE procedurelog MODIFY DrugUnit NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE procedurelog ADD DrugQty float NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE procedurelog ADD DrugQty number(38,8)";
                Db.nonQ(command);
                command = "UPDATE procedurelog SET DrugQty = 0 WHERE DrugQty IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE procedurelog MODIFY DrugQty NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE procedurecode ADD DrugNDC varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE procedurecode ADD DrugNDC varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE procedurecode ADD RevenueCodeDefault varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE procedurecode ADD RevenueCodeDefault varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD AdmissionTypeCode varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD AdmissionTypeCode varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD AdmissionSourceCode varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD AdmissionSourceCode varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD PatientStatusCode varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD PatientStatusCode varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('ClearinghouseDefaultDent','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ClearinghouseDefaultDent','0')";
                Db.nonQ(command);
            } 
            //set this new pref with the existing default value from the clearinghouse table
            command = "SELECT ClearinghouseNum FROM clearinghouse WHERE IsDefault=1";
            long clearinghouseNum = PIn.long(Db.getScalar(command));
            command = "UPDATE preference SET ValueString=" + POut.long(clearinghouseNum) + " WHERE PrefName='ClearinghouseDefaultDent'";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('ClearinghouseDefaultMed','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ClearinghouseDefaultMed','0')";
                Db.nonQ(command);
            } 
            command = "ALTER TABLE clearinghouse DROP COLUMN IsDefault";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claimpayment ADD IsPartial tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claimpayment ADD IsPartial number(3)";
                Db.nonQ(command);
                command = "UPDATE claimpayment SET IsPartial = 0 WHERE IsPartial IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE claimpayment MODIFY IsPartial NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claimproc ADD PaymentRow int NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claimproc ADD PaymentRow number(11)";
                Db.nonQ(command);
                command = "UPDATE claimproc SET PaymentRow = 0 WHERE PaymentRow IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE claimproc MODIFY PaymentRow NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE patient ADD SuperFamily bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE patient ADD INDEX (SuperFamily)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE patient ADD SuperFamily number(20)";
                Db.nonQ(command);
                command = "UPDATE patient SET SuperFamily = 0 WHERE SuperFamily IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE patient MODIFY SuperFamily NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX patient_SuperFamily ON patient (SuperFamily)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('ShowFeatureSuperfamilies','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ShowFeatureSuperfamilies','0')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE refattach ADD ProcNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE refattach ADD INDEX (ProcNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE refattach ADD ProcNum number(20)";
                Db.nonQ(command);
                command = "UPDATE refattach SET ProcNum = 0 WHERE ProcNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE refattach MODIFY ProcNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX refattach_ProcNum ON refattach (ProcNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE refattach ADD DateProcComplete date NOT NULL DEFAULT '0001-01-01'";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE refattach ADD DateProcComplete date";
                Db.nonQ(command);
                command = "UPDATE refattach SET DateProcComplete = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE DateProcComplete IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE refattach MODIFY DateProcComplete NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('ProcGroupNoteDoesAggregate','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ProcGroupNoteDoesAggregate','0')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE statement ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE statement SET DateTStamp = NOW()";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE statement ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE statement SET DateTStamp = SYSTIMESTAMP";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '11.1.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to11_1_6();
    }

    private static void to11_1_6() throws Exception {
        if (FromVersion < new Version("11.1.6.0"))
        {
            String command = new String();
            try
            {
                //We added an index in version 11.0.36 for this column, but some of our customers were already on version 11.1, so we had to add it here as well.
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE procedurelog ADD INDEX procedurelog_ProcNumLab (ProcNumLab)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX procedurelog_ProcNumLab ON procedurelog (ProcNumLab)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception __dummyCatchVar13)
            {
            }

            //Oh well, it's just an index. Probably failed because it already exists anyway.
            command = "UPDATE preference SET ValueString = '11.1.6.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to11_1_7();
    }

    private static void to11_1_7() throws Exception {
        if (FromVersion < new Version("11.1.7.0"))
        {
            String command = new String();
            command = "ALTER TABLE insplan DROP COLUMN DedBeforePerc";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
            {
                command = "ALTER TABLE insplan MODIFY CanadianPlanFlag NULL";
                Db.nonQ(command);
            }
             
            command = "UPDATE preference SET ValueString = '11.1.7.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to11_1_9();
    }

    /**
    * Oracle compatible: 11/17/2011
    */
    private static void to11_1_9() throws Exception {
        if (FromVersion < new Version("11.1.9.0"))
        {
            //Update VixWin Bridge
            String command = "Select ProgramNum FROM program WHERE ProgName='VixWin'";
            long programNum = PIn.long(Db.getScalar(command));
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + POut.long(programNum) + ", " + "'Optional Image Path', " + "'')";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum)+1 FROM programproperty)," + POut.long(programNum) + ", " + "'Optional Image Path', " + "'')";
                Db.nonQ32(command);
            } 
            //Insert VixWinBase41 Imaging Bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'VixWinBase41', " + "'VixWin(Base41) from www.gendexxray.com', " + "'0', " + "'" + POut.string("C:\\VixWin\\VixWin.exe") + "'," + "'', " + "'This VixWin bridge uses base 41 PatNums.')";
                programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + POut.long(programNum) + ", " + "'Image Path', " + "'')";
                //User will be required to set up image path before using bridge. If they try to use it they will get a warning message and the bridge will fail gracefully.
                Db.nonQ32(command);
                command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + POut.long(programNum) + ", " + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + ", " + "'VixWinBase41')";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "(SELECT MAX(ProgramNum)+1 FROM program)," + "'VixWinBase41', " + "'VixWin(Base41) from www.gendexxray.com', " + "'0', " + "'" + POut.string("C:\\VixWin\\VixWin.exe") + "'," + "'', " + "'This VixWin bridge uses base 41 PatNums.')";
                programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum)+1 FROM programproperty)," + POut.long(programNum) + ", " + "'Image Path', " + "'')";
                //User will be required to set up image path before using bridge. If they try to use it they will get a warning message and the bridge will fail gracefully.
                Db.nonQ32(command);
                command = "INSERT INTO toolbutitem (ToolButItemNum,ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "(SELECT MAX(ToolButItemNum)+1 FROM toolbutitem)," + POut.long(programNum) + ", " + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + ", " + "'VixWinBase41')";
                Db.nonQ32(command);
            } 
            command = "UPDATE preference SET ValueString = '11.1.9.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_0_1();
    }

    /**
    * 
    */
    private static void to12_0_1() throws Exception {
        if (FromVersion < new Version("12.0.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('BillingEmailSubject','Statement for account [PatNum]')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'BillingEmailSubject','Statement for account [PatNum]')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('BillingEmailBodyText','Statement attached for [nameFL], account number [PatNum]')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'BillingEmailBodyText','Statement attached for [nameFL], account number [PatNum]')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE creditcard ADD PayPlanNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE creditcard ADD INDEX (PayPlanNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE creditcard ADD PayPlanNum number(20)";
                Db.nonQ(command);
                command = "UPDATE creditcard SET PayPlanNum = 0 WHERE PayPlanNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE creditcard MODIFY PayPlanNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX creditcard_PayPlanNum ON creditcard (PayPlanNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE popup ADD PopupLevel tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE popup ADD PopupLevel number(3)";
                Db.nonQ(command);
                command = "UPDATE popup SET PopupLevel = 0 WHERE PopupLevel IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE popup MODIFY PopupLevel NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('ChartAddProcNoRefreshGrid','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ChartAddProcNoRefreshGrid','0')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS eobattach";
                Db.nonQ(command);
                command = "CREATE TABLE eobattach (\r\n" + 
                "\t\t\t\t\t\tEobAttachNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tClaimPaymentNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTCreated datetime NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFileName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRawBase64 text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(ClaimPaymentNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE eobattach'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE eobattach (\r\n" + 
                "\t\t\t\t\t\tEobAttachNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tClaimPaymentNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTCreated date NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFileName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tRawBase64 clob,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT eobattach_EobAttachNum PRIMARY KEY (EobAttachNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX eobattach_ClaimPaymentNum ON eobattach (ClaimPaymentNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE insplan ADD CobRule tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE insplan ADD CobRule number(3)";
                Db.nonQ(command);
                command = "UPDATE insplan SET CobRule = 0 WHERE CobRule IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE insplan MODIFY CobRule NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('InsDefaultCobRule','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'InsDefaultCobRule','0')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('MobileSynchNewTables112Done','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'MobileSynchNewTables112Done','0')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('PatientFormsShowConsent','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'PatientFormsShowConsent','0')";
                Db.nonQ(command);
            } 
            //Add InsPlanChangeSubsc permission to all groups that had SecurityAdmin permission---------------------------------------------
            long groupNum = new long();
            command = "SELECT DISTINCT UserGroupNum " + "FROM grouppermission " + "WHERE PermType=" + POut.int(((Enum)OpenDentBusiness.Permissions.SecurityAdmin).ordinal());
            DataTable table = Db.getTable(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (UserGroupNum,PermType) " + "VALUES(" + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.InsPlanChangeSubsc).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            }
            else
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //oracle
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (GroupPermNum,NewerDays,UserGroupNum,PermType) " + "VALUES((SELECT MAX(GroupPermNum)+1 FROM grouppermission),0," + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.InsPlanChangeSubsc).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('MedicalFeeUsedForNewProcs','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'MedicalFeeUsedForNewProcs','0')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('PracticePayToAddress','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'PracticePayToAddress','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('PracticePayToAddress2','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'PracticePayToAddress2','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('PracticePayToCity','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'PracticePayToCity','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('PracticePayToST','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'PracticePayToST','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('PracticePayToZip','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'PracticePayToZip','')";
                Db.nonQ(command);
            } 
            try
            {
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE patient ADD INDEX (SiteNum)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX patient_SiteNum ON patient (SiteNum)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            try
            {
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE claimproc ADD INDEX (Status)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX claimproc_Status ON claimproc (Status)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            try
            {
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE patient ADD INDEX (PatStatus)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX patient_PatStatus ON patient (PatStatus)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            try
            {
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE patient ADD INDEX (ClinicNum)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX patient_ClinicNum ON patient (ClinicNum)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            try
            {
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE appointment ADD INDEX (DateTimeArrived)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX appointment_DateTimeArrived ON appointment (DateTimeArrived)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE apptview ADD ClinicNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE apptview ADD INDEX (ClinicNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE apptview ADD ClinicNum number(20)";
                Db.nonQ(command);
                command = "UPDATE apptview SET ClinicNum = 0 WHERE ClinicNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE apptview MODIFY ClinicNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX apptview_ClinicNum ON apptview (ClinicNum)";
                Db.nonQ(command);
            } 
            long claimFormNum = 0;
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO claimform(Description,IsHidden,FontName,FontSize,UniqueID,PrintImages,OffsetX,OffsetY) " + "VALUES ('UB04',0,'Tahoma',9.75,'OD10',0,0,0)";
                claimFormNum = Db.nonQ(command,true);
            }
            else
            {
                //oracle
                command = "INSERT INTO claimform(ClaimFormNum,Description,IsHidden,FontName,FontSize,UniqueID,PrintImages,OffsetX,OffsetY) " + "VALUES ((SELECT MAX(ClaimFormNum)+1 FROM claimform),'UB04',0,'Tahoma',9.75,'OD10',0,0,0)";
                claimFormNum = Db.nonQ(command,true);
            } 
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'UB04.jpg','','','4','5','860','1120')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','AccidentDate','MMddyyyy','45','164','68','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','AccidentST','','675','130','30','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentist','','24','14','239','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistAddress','','24','30','239','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistAddress2','','24','46','239','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistCity','','24','63','113','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistNPI','','682','682','151','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistSSNorTIN','','515','64','98','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistST','','145','63','30','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistZip','','183','63','80','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','DateService','MMddyy','685','64','68','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','DateService','MMddyyyy','132','130','66','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','DateService','MMddyy','615','64','68','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','DateService','MMddyyyy','460','666','68','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Diagnosis1','NoDec','26','880','78','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Diagnosis2','NoDec','105','881','78','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Diagnosis3','NoDec','185','881','78','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Diagnosis4','NoDec','265','881','78','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','FixedText','1','116','663','10','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','FixedText','1','172','663','10','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','FixedText','0001','15','664','46','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','FixedText','9','13','897','9','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedAccidentCode','','15','164','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedAdmissionSourceCode','','255','130','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedAdmissionTypeCode','','225','130','27','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedConditionCode18','','345','130','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedConditionCode19','','375','130','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedConditionCode20','','405','130','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedConditionCode21','','435','130','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedConditionCode22','','465','130','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedConditionCode23','','495','130','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedConditionCode24','','525','130','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedConditionCode25','','555','130','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedConditionCode26','','585','130','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedConditionCode27','','615','130','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedConditionCode28','','645','130','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsAAmtDue','NoDec','654','697','110','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsAAssignBen','','425','697','18','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsAAuthCode','','15','831','308','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsAEmployer','','584','831','249','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsAGroupName','','504','764','148','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsAGroupNum','','654','764','179','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsAInsuredID','','303','764','199','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsAInsuredName','','15','764','257','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsAName','','15','697','228','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsAOtherProvID','','682','698','151','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsAPlanID','','244','697','148','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsAPriorPmt','NoDec','544','697','101','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsARelation','','274','764','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsARelInfo','','394','697','18','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsBAmtDue','NoDec','654','714','110','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsBAssignBen','','425','714','18','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsBAuthCode','','15','848','308','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsBEmployer','','584','848','249','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsBGroupName','','504','781','148','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsBGroupNum','','654','781','179','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsBInsuredID','','303','781','199','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsBInsuredName','','15','781','257','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsBName','','15','714','228','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsBOtherProvID','','682','715','151','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsBPlanID','','244','714','148','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsBPriorPmt','NoDec','544','714','101','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsBRelation','','274','781','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsBRelInfo','','394','714','18','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsCAmtDue','NoDec','654','732','110','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsCAssignBen','','425','732','18','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsCAuthCode','','15','864','308','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsCEmployer','','584','864','249','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsCGroupName','','504','798','148','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsCGroupNum','','654','798','179','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsCInsuredID','','303','798','199','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsCInsuredName','','15','798','257','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsCName','','15','732','228','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsCOtherProvID','','682','733','151','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsCPlanID','','244','732','148','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsCPriorPmt','NoDec','544','732','101','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsCRelation','','274','798','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsCRelInfo','','394','732','18','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedInsCrossoverIndicator','','776','53','50','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedPatientStatusCode','','315','130','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedUniformBillType','','785','30','49','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValAmount39a','NoDec','574','216','99','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValAmount39b','NoDec','574','232','99','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValAmount39c','NoDec','574','249','99','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValAmount39d','NoDec','574','265','99','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValAmount40a','NoDec','704','216','99','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValAmount40b','NoDec','704','232','99','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValAmount40c','NoDec','704','249','99','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValAmount40d','NoDec','704','265','99','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValAmount41a','NoDec','833','216','99','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValAmount41b','NoDec','833','232','99','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValAmount41c','NoDec','833','249','99','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValAmount41d','NoDec','833','265','99','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValCode39a','','445','216','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValCode39b','','445','232','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValCode39c','','445','249','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValCode39d','','445','265','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValCode40a','','575','216','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValCode40b','','575','232','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValCode40c','','575','249','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValCode40d','','575','265','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValCode41a','','705','216','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValCode41b','','705','232','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValCode41c','','705','249','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MedValCode41d','','705','265','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P10CodeAndMods','','311','448','148','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P10Date','MMddyyyy','461','448','68','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P10Description','','62','448','247','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P10Fee','NoDec','704','448','93','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P10RevCode','','15','448','45','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P10UnitQty','','531','448','77','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1CodeAndMods','','311','299','148','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1Date','MMddyyyy','461','299','68','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1Description','','62','299','247','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1Fee','NoDec','704','299','93','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1RevCode','','15','299','45','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1UnitQty','','531','299','77','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2CodeAndMods','','311','316','148','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2Date','MMddyyyy','461','316','68','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2Description','','62','316','247','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2Fee','NoDec','704','316','93','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2RevCode','','15','316','45','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2UnitQty','','531','316','77','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3CodeAndMods','','311','332','148','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3Date','MMddyyyy','461','332','68','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3Description','','62','332','247','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3Fee','NoDec','704','332','93','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3RevCode','','15','332','45','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3UnitQty','','531','332','77','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4CodeAndMods','','311','349','148','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4Date','MMddyyyy','461','349','68','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4Description','','62','349','247','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4Fee','NoDec','704','349','93','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4RevCode','','15','349','45','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4UnitQty','','531','349','77','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5CodeAndMods','','311','365','148','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5Date','MMddyyyy','461','365','68','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5Description','','62','365','247','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5Fee','NoDec','704','365','93','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5RevCode','','15','365','45','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5UnitQty','','531','365','77','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6CodeAndMods','','311','382','148','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6Date','MMddyyyy','461','382','68','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6Description','','62','382','247','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6Fee','NoDec','704','382','93','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6RevCode','','15','382','45','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6UnitQty','','531','382','77','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P7CodeAndMods','','311','398','148','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P7Date','MMddyyyy','461','398','68','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P7Description','','62','398','247','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P7Fee','NoDec','704','398','93','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P7RevCode','','15','398','45','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P7UnitQty','','531','398','77','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P8CodeAndMods','','311','415','148','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P8Date','MMddyyyy','461','415','68','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P8Description','','62','415','247','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P8Fee','NoDec','704','415','93','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P8RevCode','','15','415','45','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P8UnitQty','','531','415','77','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P9CodeAndMods','','311','431','148','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P9Date','MMddyyyy','461','431','68','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P9Description','','62','431','247','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P9Fee','NoDec','704','431','93','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P9RevCode','','15','431','45','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P9UnitQty','','531','431','77','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientAddress','','426','80','409','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientChartNum','','545','14','238','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientCity','','325','97','319','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientDOB','MMddyyyy','15','130','88','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientFirstMiddleLast','','26','97','287','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientGenderLetter','','105','130','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientST','','655','97','28','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientZip','','695','97','98','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Remarks','','15','1014','238','50')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TotalFee','NoDec','704','666','94','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TreatingDentistFName','','715','982','118','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TreatingDentistLName','','538','982','155','17')";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TreatingDentistNPI','','600','966','100','17')";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE clearinghouse ADD ISA02 varchar(10) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE clearinghouse ADD ISA02 varchar2(10)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE clearinghouse ADD ISA04 varchar(10) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE clearinghouse ADD ISA04 varchar2(10)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE clearinghouse ADD ISA16 varchar(2) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE clearinghouse ADD ISA16 varchar2(2)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE clearinghouse ADD SeparatorData varchar(2) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE clearinghouse ADD SeparatorData varchar2(2)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE clearinghouse ADD SeparatorSegment varchar(2) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE clearinghouse ADD SeparatorSegment varchar2(2)";
                Db.nonQ(command);
            } 
            //Denti-Cal clearinghouse.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO clearinghouse(Description,ExportPath,Payors,Eformat,ISA05,SenderTin,ISA07,ISA08,ISA15,Password,ResponsePath,CommBridge,ClientProgram,\r\n" + 
                "\t\t\t\t\t\tLastBatchNumber,ModemPort,LoginID,SenderName,SenderTelephone,GS03,ISA02,ISA04,ISA16,SeparatorData,SeparatorSegment) \r\n" + 
                "\t\t\t\t\tVALUES (\'Denti-Cal\',\'" + POut.string("C:\\Denti-Cal\\") + "','','5','ZZ','','ZZ','DENTICAL','P','','','13','',0,0,'','','','DENTICAL','DENTICAL','NONE','22','1D','1C')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO clearinghouse(ClearinghouseNum,Description,ExportPath,Payors,Eformat,ISA05,SenderTin,ISA07,ISA08,ISA15,Password,ResponsePath,CommBridge,ClientProgram,\r\n" + 
                "\t\t\t\t\t\tLastBatchNumber,ModemPort,LoginID,SenderName,SenderTelephone,GS03,ISA02,ISA04,ISA16,SeparatorData,SeparatorSegment) \r\n" + 
                "\t\t\t\t\tVALUES ((SELECT MAX(ClearinghouseNum+1) FROM clearinghouse),\'Denti-Cal\',\'" + POut.string("C:\\Denti-Cal\\") + "','','5','ZZ','','ZZ','DENTICAL','P','','','13','',0,0,'','','','DENTICAL','DENTICAL','NONE','22','1D','1C')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS aggpath";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE aggpath'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
            } 
            //IAP bridge was using a hardcoded path.  Now we will allow users to use a custom path.
            //Only update the path if the user doesn't have a custom path already entered.
            command = "SELECT Path FROM program WHERE ProgName='IAP'";
            if (StringSupport.equals(Db.getScalar(command), ""))
            {
                command = "UPDATE program SET Path='" + POut.string("C:\\IAPlus\\") + "' WHERE ProgName='IAP'";
                Db.nonQ(command);
            }
             
            command = "UPDATE program SET Note='No buttons are available.' WHERE ProgName='IAP'";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS centralconnection";
                Db.nonQ(command);
                command = "CREATE TABLE centralconnection (\r\n" + 
                "\t\t\t\t\t\tCentralConnectionNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tServerName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDatabaseName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMySqlUser varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMySqlPassword varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tServiceURI varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOdUser varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOdPassword varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tItemOrder int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tWebServiceIsEcw tinyint NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE centralconnection'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE centralconnection (\r\n" + 
                "\t\t\t\t\t\tCentralConnectionNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tServerName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tDatabaseName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMySqlUser varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMySqlPassword varchar2(255),\r\n" + 
                "\t\t\t\t\t\tServiceURI varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOdUser varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOdPassword varchar2(255),\r\n" + 
                "\t\t\t\t\t\tNote varchar2(255),\r\n" + 
                "\t\t\t\t\t\tItemOrder number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tWebServiceIsEcw number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT centralconnection_CentralConne PRIMARY KEY (CentralConnectionNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            //Add the 1500 claim form fields if the claim form does not already exist. The unique ID is OD9.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD9' LIMIT 1";
            }
            else
            {
                //oracle doesn't have LIMIT
                command = "SELECT * FROM (SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD9') WHERE RowNum<=1";
            } 
            DataTable tableClaimFormNum = Db.getTable(command);
            if (tableClaimFormNum.Rows.Count == 0)
            {
                //The 1500 claim form does not exist, so safe to add.
                claimFormNum = 0;
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "INSERT INTO claimform(Description,IsHidden,FontName,FontSize,UniqueID,PrintImages,OffsetX,OffsetY) " + "VALUES ('1500',0,'Arial',9,'OD9',1,0,0)";
                    claimFormNum = Db.nonQ(command,true);
                }
                else
                {
                    //oracle
                    command = "INSERT INTO claimform(ClaimFormNum,Description,IsHidden,FontName,FontSize,UniqueID,PrintImages,OffsetX,OffsetY) " + "VALUES ((SELECT MAX(ClaimFormNum)+1 FROM claimform),'1500',0,'Arial',9,'OD9',1,0,0)";
                    claimFormNum = Db.nonQ(command,true);
                } 
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'1500.gif','','','-54','13','905','1165')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','AccidentST','','467','396','30','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentist','','531','994','250','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentist','','256','995','235','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistAddress','','531','1010','250','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistAddress','','256','1009','235','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistCity','','531','1026','139','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistCity','','256','1023','132','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistNPI','','260','1045','92','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistNPI','','531','1045','92','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistNumIsSSN','','191','961','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistNumIsTIN','','210','961','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistPh123','','680','978','40','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistPh456','','719','978','40','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistPh78910','','759','978','48','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistSSNorTIN','','39','959','131','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistST','','671','1026','30','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistST','','388','1023','28','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistZip','','701','1026','80','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistZip','','416','1023','75','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Diagnosis1','','52','662','70','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Diagnosis2','','52','695','70','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Diagnosis3','','324','662','70','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Diagnosis4','','325','694','70','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','EmployerName','','528','394','250','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','FixedText','1','615','763','20','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','FixedText','1','615','796','20','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','FixedText','1','615','828','20','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','FixedText','1','615','862','20','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','FixedText','1','615','895','20','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','FixedText','1','615','929','20','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','GroupNum','','530','327','250','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsAutoAccident','','370','396','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsFTStudent','','430','295','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsGroupHealthPlan','','329','161','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsMedicaidClaim','','97','162','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsNotAutoAccident','','430','395','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsNotOccupational','','430','362','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsNotOtherAccident','','431','428','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsOccupational','','370','362','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsOtherAccident','','370','428','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsPTStudent','','491','295','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsCarrierName','','36','460','245','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsExists','','540','462','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsGroupNum','','36','358','245','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsNotExists','','591','462','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsSubscrDOB','MM     dd     yyyy','42','397','100','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsSubscrIsFemale','','261','396','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsSubscrIsMale','','200','396','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsSubscrLastFirst','','36','325','245','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1Code','','273','762','55','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1CodeMod1','','340','762','30','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1CodeMod2','','375','762','30','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1CodeMod3','','405','762','29','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1CodeMod4','','434','762','29','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1Date','MM    dd    yy','32','762','77','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1Date','MM    dd     yy','122','762','78','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1Diagnosis','','470','762','35','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1Fee','','598','762','70','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1PlaceNumericCode','','206','762','28','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1TreatProvNPI','','698','762','100','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2Code','','273','796','55','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2CodeMod1','','340','796','30','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2CodeMod2','','375','796','30','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2CodeMod3','','405','796','29','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2CodeMod4','','434','796','29','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2Date','MM    dd    yy','32','796','77','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2Date','MM    dd     yy','122','796','78','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2Diagnosis','','470','796','35','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2Fee','','598','796','70','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2PlaceNumericCode','','205','796','28','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2TreatProvNPI','','698','796','100','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3Code','','273','828','55','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3CodeMod1','','340','827','30','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3CodeMod2','','375','827','30','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3CodeMod3','','405','827','29','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3CodeMod4','','434','827','29','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3Date','MM    dd    yy','32','829','77','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3Date','MM    dd     yy','121','829','78','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3Diagnosis','','470','828','35','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3Fee','','598','828','70','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3PlaceNumericCode','','206','829','28','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3TreatProvNPI','','698','828','100','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4Code','','273','862','55','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4CodeMod1','','340','862','30','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4CodeMod2','','375','862','30','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4CodeMod3','','405','862','29','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4CodeMod4','','434','862','29','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4Date','MM    dd    yy','32','863','77','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4Date','MM    dd     yy','122','863','78','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4Diagnosis','','470','863','35','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4Fee','','598','862','70','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4PlaceNumericCode','','205','863','28','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4TreatProvNPI','','699','862','100','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5Code','','273','895','55','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5CodeMod1','','340','895','30','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5CodeMod2','','375','895','30','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5CodeMod3','','405','895','29','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5CodeMod4','','434','895','29','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5Date','MM    dd    yy','32','895','77','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5Date','MM    dd     yy','122','895','78','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5Diagnosis','','470','895','35','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5Fee','','598','895','70','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5PlaceNumericCode','','205','895','28','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5TreatProvNPI','','699','894','100','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6Code','','273','929','55','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6CodeMod1','','340','929','30','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6CodeMod2','','375','929','30','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6CodeMod3','','405','929','29','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6CodeMod4','','434','929','29','16')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6Date','MM    dd    yy','32','929','77','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6Date','MM    dd     yy','122','929','78','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6Diagnosis','','470','929','35','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6Fee','','598','929','70','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6PlaceNumericCode','','205','929','28','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6TreatProvNPI','','699','928','100','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientAddress','','37','226','245','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientAssignment','','577','525','210','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientCity','','37','258','200','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientDOB','MM    dd    yyyy','333','195','95','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientIsFemale','','490','194','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientIsMale','','441','195','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientIsMarried','','430','262','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientIsSingle','','370','262','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientLastFirst','','37','194','245','13')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientPhone','','169','296','120','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientRelease','','78','526','240','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientReleaseDate','MM/dd/yyyy','384','525','113','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientST','','281','259','30','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientZip','','37','293','100','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PriInsAddress','','419','96','250','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PriInsAddress2','','419','110','250','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PriInsCarrierName','','419','82','250','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PriInsCity','','419','124','140','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PriInsST','','560','124','30','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PriInsZip','','590','124','79','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','ReferringProvNameFL','','32','597','250','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','ReferringProvNPI','','343','597','150','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','RelatIsChild','','440','229','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','RelatIsOther','','490','228','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','RelatIsSelf','','349','229','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','RelatIsSpouse','','400','229','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','ShowPreauthorizationIfPreauth','','143','69','200','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrAddress','','530','225','250','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrCity','','530','260','200','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrDOB','MM    dd     yyyy','554','363','100','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrID','','529','161','200','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrIsFemale','','771','362','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrIsMale','','701','362','0','0')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrLastFirst','','530','192','250','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrPhone','','672','293','120','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrST','','760','260','50','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrZip','','531','294','100','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TotalFee','','620','961','75','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TreatingDentistSigDate','','169','1035','74','14')";
                Db.nonQ(command);
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TreatingDentistSignature','','27','1020','142','30')";
                Db.nonQ(command);
            }
             
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('CentralManagerPassHash','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'CentralManagerPassHash','')";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '12.0.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_0_2();
    }

    /**
    * This is a helper method for the 12.0.1 and 12.4.12 conversions.  Without it, there would be an additional 1200 lines of code.
    */
    private static String getClaimFormItemNum() throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            return "(SELECT MAX(ClaimFormItemNum)+1 FROM claimformitem)";
        }
        else
        {
            return "0";
        } 
    }

    //for mysql, this seems to be allowed and will automatically increment.
    //Should work fine for both autoincrement and regular.
    /**
    * Oracle compatible: 01/04/2012
    */
    private static void to12_0_2() throws Exception {
        if (FromVersion < new Version("12.0.2.0"))
        {
            String command = new String();
            //Insert MiPACS Imaging Bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'MiPACS', " + "'MiPACS Imaging', " + "'0', " + "'" + POut.string("C:\\Program Files\\MiDentView\\Cmdlink.exe") + "'," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'MiPACS')";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "(SELECT MAX(ProgramNum)+1 FROM program)," + "'MiPACS', " + "'MiPACS Imaging', " + "'0', " + "'" + POut.string("C:\\Program Files\\MiDentView\\Cmdlink.exe") + "'," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO toolbutitem (ToolButItemNum,ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "(SELECT MAX(ToolButItemNum)+1 FROM toolbutitem)," + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'MiPACS')";
                Db.nonQ32(command);
            } 
            try
            {
                //end MiPACS Imaging bridge
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE paysplit ADD INDEX (PayPlanNum)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX paysplit_PayPlanNum ON paysplit (PayPlanNum)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            command = "UPDATE preference SET ValueString = '12.0.2.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_0_5();
    }

    /**
    * Oracle compatible: 02/02/2012
    */
    private static void to12_0_5() throws Exception {
        if (FromVersion < new Version("12.0.5.0"))
        {
            String command = new String();
            //Delete duplicate MiPACS Imaging Bridge
            command = "SELECT * FROM program WHERE ProgName='MiPACS'";
            DataTable table = Db.getTable(command);
            if (table.Rows.Count > 1)
            {
                long programNum = PIn.Long(table.Rows[1]["ProgramNum"].ToString());
                command = "DELETE FROM program WHERE ProgramNum=" + POut.long(programNum);
                Db.nonQ(command);
                command = "DELETE FROM toolbutitem WHERE ProgramNum=" + POut.long(programNum);
                Db.nonQ(command);
            }
             
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + table.Rows[0]["ProgramNum"].ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ32(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum+1) FROM programproperty)," + "'" + table.Rows[0]["ProgramNum"].ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ32(command);
            } 
            command = "SELECT * FROM program WHERE ProgName='Apixia'";
            table = Db.getTable(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + table.Rows[0]["ProgramNum"].ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ32(command);
                command = "UPDATE preference SET ValueString = '12.0.5.0' WHERE PrefName = 'DataBaseVersion'";
                Db.nonQ(command);
            }
            else
            {
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum+1) FROM programproperty)," + "'" + table.Rows[0]["ProgramNum"].ToString() + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ32(command);
                command = "UPDATE preference SET ValueString = '12.0.5.0' WHERE PrefName = 'DataBaseVersion'";
                Db.nonQ(command);
            } 
        }
         
        to12_0_6();
    }

    /**
    * Oracle compatible: 01/08/2013
    */
    private static void to12_0_6() throws Exception {
        if (FromVersion < new Version("12.0.6.0"))
        {
            String command = new String();
            //EmdeonMedical clearinghouse.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO clearinghouse(Description,ExportPath,Payors,Eformat,ISA05,SenderTin,ISA07,ISA08,ISA15,Password,ResponsePath,CommBridge,ClientProgram,\r\n" + 
                "\t\t\t\t\t\t\tLastBatchNumber,ModemPort,LoginID,SenderName,SenderTelephone,GS03,ISA02,ISA04,ISA16,SeparatorData,SeparatorSegment) \r\n" + 
                "\t\t\t\t\t\tVALUES (\'Emdeon Medical\',\'" + POut.string("C:\\EmdeonMedical\\Claims\\") + "','','6','ZZ','','ZZ','133052274','P',''," + "'" + POut.string("C:\\EmdeonMedical\\Reports\\") + "','14','',0,0,'','','','133052274','','','','','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO clearinghouse(ClearinghouseNum,Description,ExportPath,Payors,Eformat,ISA05,SenderTin,ISA07,ISA08,ISA15,Password,ResponsePath,CommBridge,ClientProgram,\r\n" + 
                "\t\t\t\t\t\t\tLastBatchNumber,ModemPort,LoginID,SenderName,SenderTelephone,GS03,ISA02,ISA04,ISA16,SeparatorData,SeparatorSegment) \r\n" + 
                "\t\t\t\t\t\tVALUES ((SELECT MAX(ClearinghouseNum+1) FROM clearinghouse),\'Emdeon Medical\',\'" + POut.string("C:\\EmdeonMedical\\Claims\\") + "','','6','ZZ','','ZZ','133052274','P',''," + "'" + POut.string("C:\\EmdeonMedical\\Reports\\") + "','14','',0,0,'','','','133052274','','','','','')";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '12.0.6.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_1_0();
    }

    /**
    * Oracle compatible: 01/08/2013
    */
    private static void to12_1_0() throws Exception {
        if (FromVersion < new Version("12.1.0.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('MobileSynchNewTables121Done','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'MobileSynchNewTables121Done','0')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('AccountShowPaymentNums','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'AccountShowPaymentNums','0')";
                Db.nonQ(command);
            } 
            try
            {
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE insplan ADD INDEX (TrojanID)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX insplan_TrojanID ON insplan (TrojanID)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE statement ADD IsReceipt tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE statement ADD IsReceipt number(3)";
                Db.nonQ(command);
                command = "UPDATE statement SET IsReceipt = 0 WHERE IsReceipt IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE statement MODIFY IsReceipt NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE userod ADD ClinicIsRestricted tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE userod ADD ClinicIsRestricted number(3)";
                Db.nonQ(command);
                command = "UPDATE userod SET ClinicIsRestricted = 0 WHERE ClinicIsRestricted IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE userod MODIFY ClinicIsRestricted NOT NULL";
                Db.nonQ(command);
            } 
            command = "UPDATE userod SET ClinicIsRestricted = 1 WHERE ClinicNum != 0";
            //to preserve old ClinicNum behavior.
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('TimeCardOvertimeFirstDayOfWeek','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'TimeCardOvertimeFirstDayOfWeek','0')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('AccountingSoftware','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'AccountingSoftware','0')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('QuickBooksCompanyFile','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'QuickBooksCompanyFile','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('QuickBooksDepositAccounts','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'QuickBooksDepositAccounts','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('QuickBooksIncomeAccount','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'QuickBooksIncomeAccount','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('ReplicationFailureAtServer_id','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ReplicationFailureAtServer_id','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE replicationserver ADD SlaveMonitor varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE replicationserver ADD SlaveMonitor varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE commlog ADD DateTimeEnd datetime DEFAULT '0001-01-01' NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE commlog ADD DateTimeEnd date";
                Db.nonQ(command);
                command = "UPDATE commlog SET DateTimeEnd = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE DateTimeEnd IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE commlog MODIFY DateTimeEnd NOT NULL";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '12.1.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_1_7();
    }

    /**
    * Oracle compatible: 01/08/2013
    */
    private static void to12_1_7() throws Exception {
        if (FromVersion < new Version("12.1.7.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD CustomTracking bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE claim ADD INDEX (CustomTracking)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD CustomTracking number(20)";
                Db.nonQ(command);
                command = "UPDATE claim SET CustomTracking = 0 WHERE CustomTracking IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE claim MODIFY CustomTracking NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX claim_CustomTracking ON claim (CustomTracking)";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '12.1.7.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_2_1();
    }

    /**
    * Oracle compatible: 01/08/2013
    */
    private static void to12_2_1() throws Exception {
        if (FromVersion < new Version("12.2.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS custrefentry";
                Db.nonQ(command);
                command = "CREATE TABLE custrefentry (\r\n" + 
                "\t\t\t\t\t\tCustRefEntryNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNumCust bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNumRef bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateEntry date NOT NULL DEFAULT \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tNote varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNumCust),\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNumRef)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE custrefentry'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE custrefentry (\r\n" + 
                "\t\t\t\t\t\tCustRefEntryNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNumCust number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNumRef number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateEntry date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT custrefentry_CustRefEntryNum PRIMARY KEY (CustRefEntryNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX custrefentry_PatNumCust ON custrefentry (PatNumCust)";
                Db.nonQ(command);
                command = "CREATE INDEX custrefentry_PatNumRef ON custrefentry (PatNumRef)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS custreference";
                Db.nonQ(command);
                command = "CREATE TABLE custreference (\r\n" + 
                "\t\t\t\t\t\tCustReferenceNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateMostRecent date NOT NULL DEFAULT \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tNote varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsBadRef tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE custreference'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE custreference (\r\n" + 
                "\t\t\t\t\t\tCustReferenceNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateMostRecent date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote varchar2(255),\r\n" + 
                "\t\t\t\t\t\tIsBadRef number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT custreference_CustReferenceNum PRIMARY KEY (CustReferenceNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX custreference_PatNum ON custreference (PatNum)";
                Db.nonQ(command);
            } 
            //Create a customer reference object for every customer in the db.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO custreference (PatNum) SELECT PatNum FROM patient";
                Db.nonQ(command);
            }
             
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE appointment ADD ColorOverride int NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE appointment ADD ColorOverride number(11)";
                Db.nonQ(command);
                command = "UPDATE appointment SET ColorOverride = 0 WHERE ColorOverride IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE appointment MODIFY ColorOverride NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD DateResent date NOT NULL DEFAULT '0001-01-01'";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD DateResent date";
                Db.nonQ(command);
                command = "UPDATE claim SET DateResent = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE DateResent IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE claim MODIFY DateResent NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD CorrectionType tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD CorrectionType number(3)";
                Db.nonQ(command);
                command = "UPDATE claim SET CorrectionType = 0 WHERE CorrectionType IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE claim MODIFY CorrectionType NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD ClaimIdentifier varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD ClaimIdentifier varchar2(255)";
                Db.nonQ(command);
            } 
            command = "UPDATE claim SET ClaimIdentifier=" + DbHelper.Concat(new String[]{ "PatNum", "'/'", "ClaimNum" });
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE claim ADD OrigRefNum varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE claim ADD OrigRefNum varchar2(255)";
                Db.nonQ(command);
            } 
            //Add RefAttachDelete permission to everyone------------------------------------------------------
            command = "SELECT DISTINCT UserGroupNum FROM grouppermission";
            DataTable table = Db.getTable(command);
            long groupNum = new long();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (UserGroupNum,PermType) " + "VALUES(" + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.RefAttachDelete).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            }
            else
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //oracle
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (GroupPermNum,NewerDays,UserGroupNum,PermType) " + "VALUES((SELECT MAX(GroupPermNum)+1 FROM grouppermission),0," + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.RefAttachDelete).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            } 
            //Add RefAttachAdd permission to everyone------------------------------------------------------
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (UserGroupNum,PermType) " + "VALUES(" + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.RefAttachAdd).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            }
            else
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //oracle
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (GroupPermNum,NewerDays,UserGroupNum,PermType) " + "VALUES((SELECT MAX(GroupPermNum)+1 FROM grouppermission),0," + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.RefAttachAdd).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE apptfielddef ADD FieldType tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE apptfielddef ADD FieldType number(3)";
                Db.nonQ(command);
                command = "UPDATE apptfielddef SET FieldType = 0 WHERE FieldType IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE apptfielddef MODIFY FieldType NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE apptfielddef ADD PickList varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE apptfielddef ADD PickList varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE procedurecode ADD ProvNumDefault bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE procedurecode ADD INDEX (ProvNumDefault)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE procedurecode ADD ProvNumDefault number(20)";
                Db.nonQ(command);
                command = "UPDATE procedurecode SET ProvNumDefault = 0 WHERE ProvNumDefault IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE procedurecode MODIFY ProvNumDefault NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX procedurecode_ProvNumDefault ON procedurecode (ProvNumDefault)";
                Db.nonQ(command);
            } 
            //Getting rid of AutoItem from CommLogItem enum.  Set all commlogs using AutoItem to None.
            command = "UPDATE commlog SET Mode_=0 WHERE Mode_=5";
            Db.nonQ(command);
            //Getting rid of IsStatementSent from commlog table.
            command = "ALTER TABLE commlog DROP COLUMN IsStatementSent";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE computerpref ADD ScanDocSelectSource tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE computerpref ADD ScanDocSelectSource number(3)";
                Db.nonQ(command);
                command = "UPDATE computerpref SET ScanDocSelectSource = 0 WHERE ScanDocSelectSource IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE computerpref MODIFY ScanDocSelectSource NOT NULL";
                Db.nonQ(command);
            } 
            command = "UPDATE computerpref SET ScanDocSelectSource = 1";
            //Default to show select scanner popup.
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE computerpref ADD ScanDocShowOptions tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE computerpref ADD ScanDocShowOptions number(3)";
                Db.nonQ(command);
                command = "UPDATE computerpref SET ScanDocShowOptions = 0 WHERE ScanDocShowOptions IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE computerpref MODIFY ScanDocShowOptions NOT NULL";
                Db.nonQ(command);
            } 
            command = "UPDATE computerpref SET ScanDocShowOptions = 1";
            //Default to show scanner options when scanning.
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE computerpref ADD ScanDocDuplex tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE computerpref ADD ScanDocDuplex number(3)";
                Db.nonQ(command);
                command = "UPDATE computerpref SET ScanDocDuplex = 0 WHERE ScanDocDuplex IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE computerpref MODIFY ScanDocDuplex NOT NULL";
                Db.nonQ(command);
            } 
            command = "UPDATE computerpref SET ScanDocDuplex = 1";
            //Default to always attempt to scan duplex
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE computerpref ADD ScanDocGrayscale tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE computerpref ADD ScanDocGrayscale number(3)";
                Db.nonQ(command);
                command = "UPDATE computerpref SET ScanDocGrayscale = 0 WHERE ScanDocGrayscale IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE computerpref MODIFY ScanDocGrayscale NOT NULL";
                Db.nonQ(command);
            } 
            command = "UPDATE computerpref SET ScanDocGrayscale = 1";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE computerpref ADD ScanDocResolution int NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE computerpref ADD ScanDocResolution number(11)";
                Db.nonQ(command);
                command = "UPDATE computerpref SET ScanDocResolution = 0 WHERE ScanDocResolution IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE computerpref MODIFY ScanDocResolution NOT NULL";
                Db.nonQ(command);
            } 
            command = "SELECT ValueString FROM preference WHERE PrefName='ScannerResolution'";
            int scannerRes = PIn.int(Db.getScalar(command));
            command = "UPDATE computerpref SET ScanDocResolution = " + POut.int(scannerRes);
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE computerpref ADD ScanDocQuality tinyint unsigned NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE computerpref ADD ScanDocQuality number(3)";
                Db.nonQ(command);
                command = "UPDATE computerpref SET ScanDocQuality = 0 WHERE ScanDocQuality IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE computerpref MODIFY ScanDocQuality NOT NULL";
                Db.nonQ(command);
            } 
            command = "SELECT ValueString FROM preference WHERE PrefName='ScannerCompression'";
            int scannerComp = PIn.int(Db.getScalar(command));
            command = "UPDATE computerpref SET ScanDocQuality = " + POut.int(scannerComp);
            Db.nonQ(command);
            command = "DELETE FROM preference WHERE PrefName = 'ScannerCompression'";
            Db.nonQ(command);
            command = "DELETE FROM preference WHERE PrefName = 'ScannerResolution'";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE timecardrule ADD BeforeTimeOfDay time NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE timecardrule ADD BeforeTimeOfDay date";
                Db.nonQ(command);
                command = "UPDATE timecardrule SET BeforeTimeOfDay = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE BeforeTimeOfDay IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE timecardrule MODIFY BeforeTimeOfDay NOT NULL";
                Db.nonQ(command);
            } 
            if (CultureInfo.CurrentCulture.Name.EndsWith("CA"))
            {
                //Canadian. en-CA or fr-CA
                command = "SELECT CanadianNetworkNum FROM canadiannetwork WHERE Abbrev='CSI' LIMIT 1";
                long canadianNetworkNumCSI = PIn.long(Db.getScalar(command));
                command = "SELECT COUNT(*) FROM carrier WHERE ElectID='000116'";
                //boilermakers' national benefit plan
                if (StringSupport.equals(Db.getCount(command), "0"))
                {
                    command = "INSERT INTO carrier (CarrierName,Address,Address2,City,State,Zip,Phone,ElectID,NoSendElect,IsCDA,CDAnetVersion,CanadianNetworkNum,IsHidden,CanadianEncryptionMethod,CanadianSupportedTypes) VALUES " + "('Boilermakers\\' National Benefit Plan','45 McIntosh Drive','','Markham','ON','L3R 8C7','1-800-668-7547','000116','0','1','04'," + POut.long(canadianNetworkNumCSI) + ",'0',1,384)";
                    Db.nonQ(command);
                }
                 
                command = "SELECT COUNT(*) FROM carrier WHERE ElectID='000115'";
                //u.a. local 46 dental plan
                if (StringSupport.equals(Db.getCount(command), "0"))
                {
                    command = "INSERT INTO carrier (CarrierName,Address,Address2,City,State,Zip,Phone,ElectID,NoSendElect,IsCDA,CDAnetVersion,CanadianNetworkNum,IsHidden,CanadianEncryptionMethod,CanadianSupportedTypes) VALUES " + "('U.A. Local 46 Dental Plan','936 Warden Avenue','','Scarborough','ON','M1L 4C9','1-800-263-3564','000115','0','1','04'," + POut.long(canadianNetworkNumCSI) + ",'0',1,384)";
                    Db.nonQ(command);
                }
                 
                command = "SELECT COUNT(*) FROM carrier WHERE ElectID='000110'";
                //u.a. local 787 Health Trust Fund Dental Plan
                if (StringSupport.equals(Db.getCount(command), "0"))
                {
                    command = "INSERT INTO carrier (CarrierName,Address,Address2,City,State,Zip,Phone,ElectID,NoSendElect,IsCDA,CDAnetVersion,CanadianNetworkNum,IsHidden,CanadianEncryptionMethod,CanadianSupportedTypes) VALUES " + "('U.A. Local 787 Health Trust Fund Dental Plan','419 Deerhurst Drive','','Brampton','ON','L6T 5K3','1-204-985-3940','000110','0','1','04'," + POut.long(canadianNetworkNumCSI) + ",'0',1,384)";
                    Db.nonQ(command);
                }
                 
            }
             
            //Insert RayMage Imaging Bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'RayMage', " + "'RayMage from www.cefla.com', " + "'0', " + "'" + POut.string("C:\\Program Files\\MyRay\\rayMage\\rayMage.exe") + "'," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ(command);
                command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'RayMage')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "(SELECT MAX(ProgramNum)+1 FROM program)," + "'RayMage', " + "'RayMage from www.cefla.com', " + "'0', " + "'" + POut.string("C:\\Program Files\\MyRay\\rayMage\\rayMage.exe") + "'," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum+1) FROM programproperty)," + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ(command);
                command = "INSERT INTO toolbutitem (ToolButItemNum,ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "(SELECT MAX(ToolButItemNum)+1 FROM toolbutitem)," + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'RayMage')";
                Db.nonQ(command);
            } 
            //end RayMage Imaging bridge
            //Insert BioPAK Imaging Bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'BioPAK', " + "'BioPAK from www.bioresearchinc.com', " + "'0', " + "'" + POut.string("BioPAK.exe") + "'," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ(command);
                command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'BioPAK')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "(SELECT MAX(ProgramNum)+1 FROM program)," + "'BioPAK', " + "'BioPAK from www.bioresearchinc.com', " + "'0', " + "'" + POut.string("BioPAK.exe") + "'," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum+1) FROM programproperty)," + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ(command);
                command = "INSERT INTO toolbutitem (ToolButItemNum,ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "(SELECT MAX(ToolButItemNum)+1 FROM toolbutitem)," + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'BioPAK')";
                Db.nonQ(command);
            } 
            //end BioPAK Imaging bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE securitylog ADD FKey bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE securitylog ADD INDEX (FKey)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE securitylog ADD FKey number(20)";
                Db.nonQ(command);
                command = "UPDATE securitylog SET FKey = 0 WHERE FKey IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE securitylog MODIFY FKey NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX securitylog_FKey ON securitylog (FKey)";
                Db.nonQ(command);
            } 
            //This will be specific to eCW because we don't use IsStandalone anywhere else.
            command = "UPDATE programproperty SET PropertyDesc=\'eClinicalWorksMode\' WHERE PropertyDesc=\'IsStandalone\'";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '12.2.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_2_17();
    }

    /**
    * Oracle compatible: 01/08/2013
    */
    private static void to12_2_17() throws Exception {
        if (FromVersion < new Version("12.2.17.0"))
        {
            String command = "";
            //Add the 1500 claim form field for prior authorization if it does not already exist. The unique ID is OD9.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD9' LIMIT 1";
            }
            else
            {
                //oracle doesn't have LIMIT
                command = "SELECT * FROM (SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD9') WHERE RowNum<=1";
            } 
            long claimFormNum = PIn.long(Db.getScalar(command));
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (0," + POut.long(claimFormNum) + ",'','PriorAuthString','','528','695','282','14')";
            }
            else
            {
                command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES ((SELECT MAX(ClaimFormItemNum)+1 FROM claimformitem)," + POut.long(claimFormNum) + ",'','PriorAuthString','','528','695','282','14')";
            } 
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '12.2.17.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_2_28();
    }

    /**
    * Oracle compatible: 01/08/2013
    */
    private static void to12_2_28() throws Exception {
        if (FromVersion < new Version("12.2.28.0"))
        {
            String command = "";
            //Fix medical claim form 1500, P*Date fields printing issue. Fields were too narrow. The unique ID is OD9.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD9' LIMIT 1";
            }
            else
            {
                //oracle doesn't have LIMIT
                command = "SELECT * FROM (SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD9') WHERE RowNum<=1";
            } 
            long claimFormNum = PIn.long(Db.getScalar(command));
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "UPDATE claimformitem SET width = 80 WHERE FieldName LIKE 'P%Date' AND ClaimFormNum = " + claimFormNum;
                Db.nonQ(command);
                command = "UPDATE claimformitem SET XPos = 206 WHERE FieldName LIKE 'P%PlaceNumericCode' AND ClaimFormNum = " + claimFormNum;
                Db.nonQ(command);
            }
            else
            {
                command = "UPDATE claimformitem SET width = 80 WHERE FieldName LIKE 'P%Date' AND ClaimFormNum = " + claimFormNum;
                Db.nonQ(command);
                command = "UPDATE claimformitem SET XPos = 206 WHERE FieldName LIKE 'P%PlaceNumericCode' AND ClaimFormNum = " + claimFormNum;
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '12.2.28.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_3_1();
    }

    //In version 12.2.34, there is an eCW section here.
    /**
    * Oracle compatible: 01/09/2013
    */
    private static void to12_3_1() throws Exception {
        if (FromVersion < new Version("12.3.1.0"))
        {
            String command = new String();
            //Removing Appointment Complete-Time bar, Patient Note Text and Completed Pt. Note Text.
            command = "DELETE FROM definition WHERE Category=17 AND ItemName='Appointment Complete-Time bar'";
            //Cat 17=AppointmentColors
            Db.nonQ(command);
            command = "DELETE FROM definition WHERE Category=17 AND ItemName='Patient Note Text'";
            Db.nonQ(command);
            command = "DELETE FROM definition WHERE Category=17 AND ItemName='Completed Pt. Note Text'";
            Db.nonQ(command);
            command = "DELETE FROM definition WHERE Category=17 AND ItemName='Patient Note - Pt Name'";
            Db.nonQ(command);
            //Fix the ItemOrder of the AppointmentColors category
            command = "UPDATE definition SET ItemOrder=2 WHERE Category=17 AND ItemName='Appointment Complete-Background'";
            Db.nonQ(command);
            command = "UPDATE definition SET ItemOrder=3 WHERE Category=17 AND ItemName='Holiday'";
            Db.nonQ(command);
            command = "UPDATE definition SET ItemOrder=4 WHERE Category=17 AND ItemName='Blockout Text'";
            Db.nonQ(command);
            command = "UPDATE definition SET ItemOrder=5 WHERE Category=17 AND ItemName='Patient Note Background'";
            Db.nonQ(command);
            command = "UPDATE definition SET ItemOrder=6 WHERE Category=17 AND ItemName='Completed Pt. Note Background'";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('AppointmentTimeIsLocked','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'AppointmentTimeIsLocked','0')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('RecallAgeAdult','12')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'RecallAgeAdult','12')";
                Db.nonQ(command);
            } 
            try
            {
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE hl7msg ADD INDEX (HL7Status)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX hl7msg_HL7Status ON hl7msg (HL7Status)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            //ex is needed, or exception won't get caught.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE hl7msg ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE hl7msg SET DateTStamp = NOW()";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE hl7msg ADD DateTStamp timestamp";
                Db.nonQ(command);
                command = "UPDATE hl7msg SET DateTStamp = SYSTIMESTAMP";
                Db.nonQ(command);
            } 
            try
            {
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE hl7msg ADD INDEX (DateTStamp)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX hl7msg_DateTStamp ON hl7msg (DateTStamp)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            //ex is needed, or exception won't get caught.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('TextMsgOkStatusTreatAsNo','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'TextMsgOkStatusTreatAsNo','0')";
                Db.nonQ(command);
            } 
            command = "DELETE FROM preference WHERE PrefName='MedicalEclaimsEnabled'";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE patient ADD TxtMsgOk tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE patient ADD TxtMsgOk number(3)";
                Db.nonQ(command);
                command = "UPDATE patient SET TxtMsgOk = 0 WHERE TxtMsgOk IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE patient MODIFY TxtMsgOk NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE programproperty ADD ComputerName varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE programproperty ADD ComputerName varchar2(255)";
                Db.nonQ(command);
            } 
            //Insert CallFire Bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'CallFire', " + "'CallFire from www.callfire.com', " + "'0', " + "''," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Key From CallFire', " + "'')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "(SELECT MAX(ProgramNum)+1 FROM program)," + "'CallFire', " + "'CallFire from www.callfire.com', " + "'0', " + "''," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum+1) FROM programproperty)," + "'" + POut.long(programNum) + "', " + "'Key From CallFire', " + "'')";
                Db.nonQ(command);
            } 
            //end CallFire bridge
            //ImageDelete was removed from global lock date.  Set the permission dates to the current lock dates.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "UPDATE grouppermission gp,preference pdate,preference pdays \r\n" + 
                "\t\t\t\t\t\tSET gp.NewerDate=pdate.ValueString,gp.NewerDays=pdays.ValueString\r\n" + 
                "\t\t\t\t\t\tWHERE pdate.PrefName=\'SecurityLockDate\'\r\n" + 
                "\t\t\t\t\t\tAND pdays.PrefName=\'SecurityLockDays\'\r\n" + 
                "\t\t\t\t\t\tAND gp.PermType=44";
                //ImageDelete
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "UPDATE grouppermission\r\n" + 
                "\t\t\t\t\t\tSET NewerDate=TO_DATE((SELECT ValueString FROM preference WHERE prefname=\'SecurityLockDate\'),\'yyyy-mm-dd\')\r\n" + 
                "\t\t\t\t\t\t,NewerDays=(SELECT ValueString FROM preference WHERE PrefName=\'SecurityLockDays\')\r\n" + 
                "\t\t\t\t\t\tWHERE PermType=44";
                //ImageDelete
                Db.nonQ(command);
            } 
            //Add CarrierAdd permission to everyone------------------------------------------------------
            command = "SELECT DISTINCT UserGroupNum FROM grouppermission";
            DataTable table = Db.getTable(command);
            long groupNum = new long();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (UserGroupNum,PermType) " + "VALUES(" + POut.long(groupNum) + ",58)";
                    //CarrierCreate
                    Db.nonQ32(command);
                }
            }
            else
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //oracle
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (GroupPermNum,NewerDays,UserGroupNum,PermType) " + "VALUES((SELECT MAX(GroupPermNum)+1 FROM grouppermission),0," + POut.long(groupNum) + ",58)";
                    //CarrierCreate
                    Db.nonQ32(command);
                }
            } 
            //Text Message Confirmations--------------------------------------------------------------------------------------------------------------------------------------
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('ConfirmTextMessage','[NameF], we would like to confirm your dental appointment on [date] at [time].')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) " + "VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ConfirmTextMessage','[NameF], we would like to confirm your dental appointment on [date] at [time].')";
                Db.nonQ(command);
            } 
            command = "SELECT MAX(ItemOrder) FROM definition WHERE Category=" + POut.int(((Enum)DefCat.ApptConfirmed).ordinal());
            int itemOrder = PIn.int(Db.getScalar(command)) + 1;
            //eg 7+1
            long defNumTextMessaged = new long();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO definition(Category,ItemOrder,ItemName,ItemValue) " + "VALUES(" + POut.int(((Enum)DefCat.ApptConfirmed).ordinal()) + "," + POut.int(itemOrder) + ",'Texted','Texted')";
                defNumTextMessaged = Db.nonQ(command,true);
            }
            else
            {
                //oracle
                command = "INSERT INTO definition(DefNum,Category,ItemOrder,ItemName,ItemValue) " + "VALUES((SELECT MAX(PrefNum)+1 FROM preference)," + POut.int(((Enum)DefCat.ApptConfirmed).ordinal()) + "," + POut.int(itemOrder) + ",'Texted','Texted')";
                defNumTextMessaged = Db.nonQ(command,true);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('ConfirmStatusTextMessaged','" + POut.long(defNumTextMessaged) + "')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ConfirmStatusTextMessaged','" + POut.long(defNumTextMessaged) + "')";
                Db.nonQ(command);
            } 
            //End Text Message Confirmations----------------------------------------------------------------------------------------------------------------------------------
            //add ReportDashbaord permissions to all groups------------------------------------------------------
            command = "SELECT UserGroupNum FROM usergroup";
            table = Db.getTable(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (UserGroupNum,PermType) " + "VALUES(" + POut.long(groupNum) + "," + POut.Long(((Enum)OpenDentBusiness.Permissions.ReportDashboard).ordinal()) + ")";
                    Db.nonQ(command);
                }
            }
            else
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //oracle
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (GroupPermNum,NewerDays,UserGroupNum,PermType) " + "VALUES((SELECT MAX(GroupPermNum)+1 FROM grouppermission),0," + POut.long(groupNum) + "," + POut.Long(((Enum)OpenDentBusiness.Permissions.ReportDashboard).ordinal()) + ")";
                    Db.nonQ(command);
                }
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('ICD9DefaultForNewProcs','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ICD9DefaultForNewProcs','')";
                Db.nonQ(command);
            } 
            try
            {
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE patient ADD INDEX (Email)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX patient_Email ON patient (Email)";
                    Db.nonQ(command);
                } 
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE appointment ADD INDEX (AptStatus)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX appointment_AptStatus ON appointment (AptStatus)";
                    Db.nonQ(command);
                } 
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE commlog ADD INDEX (CommDateTime)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX commlog_CommDateTime ON commlog (CommDateTime)";
                    Db.nonQ(command);
                } 
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE commlog ADD INDEX (CommType)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX commlog_CommType ON commlog (CommType)";
                    Db.nonQ(command);
                } 
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE recall ADD INDEX (DatePrevious)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX recall_DatePrevious ON recall (DatePrevious)";
                    Db.nonQ(command);
                } 
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE recall ADD INDEX (IsDisabled)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX recall_IsDisabled ON recall (IsDisabled)";
                    Db.nonQ(command);
                } 
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE recall ADD INDEX (RecallTypeNum)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX recall_RecallTypeNum ON recall (RecallTypeNum)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            //ex is needed, or exception won't get caught.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS installmentplan";
                Db.nonQ(command);
                command = "CREATE TABLE installmentplan (\r\n" + 
                "\t\t\t\t\t\tInstallmentPlanNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateAgreement date NOT NULL DEFAULT \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tDateFirstPayment date NOT NULL DEFAULT \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tMonthlyPayment double NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAPR float NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE installmentplan'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE installmentplan (\r\n" + 
                "\t\t\t\t\t\tInstallmentPlanNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateAgreement date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateFirstPayment date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMonthlyPayment number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAPR number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote varchar2(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT installmentplan_InstallmentPla PRIMARY KEY (InstallmentPlanNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX installmentplan_PatNum ON installmentplan (PatNum)";
                Db.nonQ(command);
            } 
            //Insert ClioSoft Bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'ClioSoft', " + "'ClioSoft from www.sotaimaging.com', " + "'0', " + "'" + POut.string("C:\\Program Files (x86)\\ClioSoft\\ClioSoft.exe") + "'," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ(command);
                command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'ClioSoft')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "(SELECT MAX(ProgramNum)+1 FROM program)," + "'ClioSoft', " + "'ClioSoft from www.sotaimaging.com', " + "'0', " + "'" + POut.string("C:\\Program Files (x86)\\ClioSoft\\ClioSoft.exe") + "'," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum+1) FROM programproperty)," + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ(command);
                command = "INSERT INTO toolbutitem (ToolButItemNum,ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "(SELECT MAX(ToolButItemNum)+1 FROM toolbutitem)," + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'ClioSoft')";
                Db.nonQ(command);
            } 
            //end ClioSoft bridge
            //Add AutoNoteQuickNoteEdit permission to everyone------------------------------------------------------
            command = "SELECT DISTINCT UserGroupNum FROM grouppermission";
            table = Db.getTable(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (UserGroupNum,PermType) " + "VALUES(" + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.AutoNoteQuickNoteEdit).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            }
            else
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //oracle
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (GroupPermNum,NewerDays,UserGroupNum,PermType) " + "VALUES((SELECT MAX(GroupPermNum)+1 FROM grouppermission),0," + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.AutoNoteQuickNoteEdit).ordinal()) + ")";
                    Db.nonQ32(command);
                }
            } 
            //Insert Tscan Bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Tscan', " + "'Tscan from www.tekscan.com', " + "'0', " + "'" + POut.string("tscan.exe") + "'," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ(command);
                command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'Tscan')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "(SELECT MAX(ProgramNum)+1 FROM program)," + "'Tscan', " + "'Tscan from www.tekscan.com', " + "'0', " + "'" + POut.string("tscan.exe") + "'," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum+1) FROM programproperty)," + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ(command);
                command = "INSERT INTO toolbutitem (ToolButItemNum,ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "(SELECT MAX(ToolButItemNum)+1 FROM toolbutitem)," + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'Tscan')";
                Db.nonQ(command);
            } 
            //end Tscan bridge
            command = "UPDATE preference SET ValueString = '12.3.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_3_3();
    }

    /**
    * Oracle compatible: 01/09/2013
    */
    private static void to12_3_3() throws Exception {
        if (FromVersion < new Version("12.3.3.0"))
        {
            String command = "";
            command = "UPDATE claimformitem SET FieldName='PayToDentistAddress' WHERE FieldName='BillingDentistAddress'";
            Db.nonQ(command);
            command = "UPDATE claimformitem SET FieldName='PayToDentistAddress2' WHERE FieldName='BillingDentistAddress2'";
            Db.nonQ(command);
            command = "UPDATE claimformitem SET FieldName='PayToDentistCity' WHERE FieldName='BillingDentistCity'";
            Db.nonQ(command);
            command = "UPDATE claimformitem SET FieldName='PayToDentistST' WHERE FieldName='BillingDentistST'";
            Db.nonQ(command);
            command = "UPDATE claimformitem SET FieldName='PayToDentistZip' WHERE FieldName='BillingDentistZip'";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '12.3.3.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_3_6();
    }

    /**
    * Also in 12.2.34Oracle compatible: 01/09/2013
    */
    private static void to12_3_6() throws Exception {
        if (FromVersion < new Version("12.3.6.0"))
        {
            String command = "";
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "SELECT ProgramNum FROM program WHERE ProgName='eClinicalWorks'";
                int programNum = PIn.int(Db.getScalar(command));
                command = "SELECT COUNT(*) FROM programproperty WHERE ProgramNum=" + programNum + " AND PropertyDesc='eCWServer'";
                if (StringSupport.equals(Db.getCount(command), "0"))
                {
                    //Also added in 12.2 so we need to check to see if it exists
                    command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.Long(programNum) + "', " + "'eCWServer', " + "'')";
                    Db.nonQ(command);
                }
                 
                command = "SELECT COUNT(*) FROM programproperty WHERE ProgramNum=" + programNum + " AND PropertyDesc='eCWPort'";
                if (StringSupport.equals(Db.getCount(command), "0"))
                {
                    //Also added in 12.2 so we need to check to see if it exists
                    command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.Long(programNum) + "', " + "'eCWPort', " + "'4928')";
                    Db.nonQ(command);
                }
                 
            }
            else
            {
            } 
            //oracle
            //eCW will never use Oracle.
            command = "UPDATE preference SET ValueString = '12.3.6.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_3_12();
    }

    /**
    * Oracle compatible: 01/09/2013
    */
    private static void to12_3_12() throws Exception {
        if (FromVersion < new Version("12.3.12.0"))
        {
            String command = "";
            //Sheets created in 12.3 with misc check boxes would have a trailing semicolon.  So we will remove the colon for the sheet field def.
            command = "UPDATE sheetfielddef set FieldName='misc' WHERE FieldType=8 AND FieldName='misc:'";
            //FieldType 8 = CheckBox.
            Db.nonQ(command);
            //And remove the colon from all patient forms.
            command = "UPDATE sheetfield SET FieldName='misc' WHERE FieldType=8 AND FieldName='misc:'";
            //FieldType 8 = CheckBox.
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '12.3.12.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_3_20();
    }

    /**
    * Oracle compatible: 01/09/2013
    */
    private static void to12_3_20() throws Exception {
        if (FromVersion < new Version("12.3.20.0"))
        {
            String command = "";
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('RecallExcludeIfAnyFutureAppt','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'RecallExcludeIfAnyFutureAppt','0')";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '12.3.20.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_4_1();
    }

    /**
    * Oracle compatible: 01/09/2013
    */
    private static void to12_4_1() throws Exception {
        if (FromVersion < new Version("12.4.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS hl7def";
                Db.nonQ(command);
                command = "CREATE TABLE hl7def (\r\n" + 
                "\t\t\t\t\t\tHL7DefNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tModeTx tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIncomingFolder varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOutgoingFolder varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIncomingPort varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOutgoingIpPort varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFieldSeparator varchar(5) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tComponentSeparator varchar(5) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSubcomponentSeparator varchar(5) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRepetitionSeparator varchar(5) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEscapeCharacter varchar(5) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsInternal tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tInternalType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tInternalTypeVersion varchar(50) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsEnabled tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHL7Server varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHL7ServiceName varchar(255) NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE hl7def'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE hl7def (\r\n" + 
                "\t\t\t\t\t\tHL7DefNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar2(255),\r\n" + 
                "\t\t\t\t\t\tModeTx number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIncomingFolder varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOutgoingFolder varchar2(255),\r\n" + 
                "\t\t\t\t\t\tIncomingPort varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOutgoingIpPort varchar2(255),\r\n" + 
                "\t\t\t\t\t\tFieldSeparator varchar2(5),\r\n" + 
                "\t\t\t\t\t\tComponentSeparator varchar2(5),\r\n" + 
                "\t\t\t\t\t\tSubcomponentSeparator varchar2(5),\r\n" + 
                "\t\t\t\t\t\tRepetitionSeparator varchar2(5),\r\n" + 
                "\t\t\t\t\t\tEscapeCharacter varchar2(5),\r\n" + 
                "\t\t\t\t\t\tIsInternal number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tInternalType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tInternalTypeVersion varchar2(50),\r\n" + 
                "\t\t\t\t\t\tIsEnabled number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote clob,\r\n" + 
                "\t\t\t\t\t\tHL7Server varchar2(255),\r\n" + 
                "\t\t\t\t\t\tHL7ServiceName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT hl7def_HL7DefNum PRIMARY KEY (HL7DefNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS hl7deffield";
                Db.nonQ(command);
                command = "CREATE TABLE hl7deffield (\r\n" + 
                "\t\t\t\t\t\tHL7DefFieldNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tHL7DefSegmentNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrdinalPos int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTableId varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDataType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFieldName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFixedText text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(HL7DefSegmentNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE hl7deffield'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE hl7deffield (\r\n" + 
                "\t\t\t\t\t\tHL7DefFieldNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHL7DefSegmentNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrdinalPos number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTableId varchar2(255),\r\n" + 
                "\t\t\t\t\t\tDataType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tFieldName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tFixedText varchar2(2000),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT hl7deffield_HL7DefFieldNum PRIMARY KEY (HL7DefFieldNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX hl7deffield_HL7DefSegmentNum ON hl7deffield (HL7DefSegmentNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS hl7defmessage";
                Db.nonQ(command);
                command = "CREATE TABLE hl7defmessage (\r\n" + 
                "\t\t\t\t\t\tHL7DefMessageNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tHL7DefNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMessageType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEventType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tInOrOut tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tItemOrder int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(HL7DefNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE hl7defmessage'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE hl7defmessage (\r\n" + 
                "\t\t\t\t\t\tHL7DefMessageNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHL7DefNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMessageType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tEventType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tInOrOut number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tItemOrder number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote clob,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT hl7defmessage_HL7DefMessageNum PRIMARY KEY (HL7DefMessageNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX hl7defmessage_HL7DefNum ON hl7defmessage (HL7DefNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS hl7defsegment";
                Db.nonQ(command);
                command = "CREATE TABLE hl7defsegment (\r\n" + 
                "\t\t\t\t\t\tHL7DefSegmentNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tHL7DefMessageNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tItemOrder int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCanRepeat tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsOptional tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSegmentName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(HL7DefMessageNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE hl7defsegment'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE hl7defsegment (\r\n" + 
                "\t\t\t\t\t\tHL7DefSegmentNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHL7DefMessageNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tItemOrder number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCanRepeat number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsOptional number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSegmentName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tNote clob,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT hl7defsegment_HL7DefSegmentNum PRIMARY KEY (HL7DefSegmentNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX hl7defsegment_HL7DefMessageNum ON hl7defsegment (HL7DefMessageNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE recall ADD DateScheduled date NOT NULL DEFAULT '0001-01-01'";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE recall ADD DateScheduled date";
                Db.nonQ(command);
                command = "UPDATE recall SET DateScheduled = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE DateScheduled IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE recall MODIFY DateScheduled NOT NULL";
                Db.nonQ(command);
            } 
            try
            {
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE recall ADD INDEX (DateScheduled)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX recall_DateScheduled ON recall (DateScheduled)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            //ex is needed, or exception won't get caught.
            DataTable table = new DataTable();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "SELECT recalltrigger.RecallTypeNum,MIN(DATE(appointment.AptDateTime)) AS AptDateTime,recall.PatNum\r\n" + 
                "\t\t\t\t\t\tFROM appointment,procedurelog,recalltrigger,recall\r\n" + 
                "\t\t\t\t\t\tWHERE appointment.AptNum=procedurelog.AptNum  \r\n" + 
                "\t\t\t\t\t\tAND procedurelog.CodeNum=recalltrigger.CodeNum \r\n" + 
                "\t\t\t\t\t\tAND recall.PatNum=procedurelog.PatNum \r\n" + 
                "\t\t\t\t\t\tAND recalltrigger.RecallTypeNum=recall.RecallTypeNum \r\n" + 
                "\t\t\t\t\t\tAND (appointment.AptStatus=1 " + "OR appointment.AptStatus=4) " + "AND appointment.AptDateTime > CURDATE() " + "GROUP BY recalltrigger.RecallTypeNum,recall.PatNum ";
                //Scheduled
                //ASAP
                //early this morning
                table = Db.getTable(command);
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    if (StringSupport.equals(table.Rows[i]["RecallTypeNum"].ToString(), ""))
                    {
                        continue;
                    }
                     
                    //this might happen if there are zero results, but the MIN in the query causes one result row with NULLs.
                    command = "UPDATE recall\tSET recall.DateScheduled=" + POut.Date(PIn.Date(table.Rows[i]["AptDateTime"].ToString())) + " " + "WHERE recall.RecallTypeNum=" + POut.Long(PIn.Long(table.Rows[i]["RecallTypeNum"].ToString())) + " " + "AND recall.PatNum=" + POut.Long(PIn.Long(table.Rows[i]["PatNum"].ToString()));
                    Db.nonQ(command);
                }
            }
            else
            {
                //oracle
                command = "SELECT recalltrigger.RecallTypeNum,MIN(TO_DATE(appointment.AptDateTime)) AS AptDateTime,recall.PatNum\r\n" + 
                "\t\t\t\t\t\tFROM appointment,procedurelog,recalltrigger,recall\r\n" + 
                "\t\t\t\t\t\tWHERE appointment.AptNum=procedurelog.AptNum  \r\n" + 
                "\t\t\t\t\t\tAND procedurelog.CodeNum=recalltrigger.CodeNum \r\n" + 
                "\t\t\t\t\t\tAND recall.PatNum=procedurelog.PatNum \r\n" + 
                "\t\t\t\t\t\tAND recalltrigger.RecallTypeNum=recall.RecallTypeNum \r\n" + 
                "\t\t\t\t\t\tAND (appointment.AptStatus=1 " + "OR appointment.AptStatus=4) " + "AND appointment.AptDateTime > SYSDATE " + "GROUP BY recalltrigger.RecallTypeNum,recall.PatNum ";
                //Scheduled
                //ASAP
                //early this morning
                table = Db.getTable(command);
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    if (StringSupport.equals(table.Rows[i]["RecallTypeNum"].ToString(), ""))
                    {
                        continue;
                    }
                     
                    command = "UPDATE recall\tSET recall.DateScheduled=" + POut.Date(PIn.Date(table.Rows[i]["AptDateTime"].ToString())) + " " + "WHERE recall.RecallTypeNum=" + POut.Long(PIn.Long(table.Rows[i]["RecallTypeNum"].ToString())) + " " + "AND recall.PatNum=" + POut.Long(PIn.Long(table.Rows[i]["PatNum"].ToString()));
                    Db.nonQ(command);
                }
            } 
            //Insert CaptureLink Bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'CaptureLink', " + "'CaptureLink from www.henryschein.ca', " + "'0', " + "'" + POut.string("C:\\Program Files\\imaginIT\\ImaginIT.exe") + "'," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ(command);
                command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'CaptureLink')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "(SELECT MAX(ProgramNum)+1 FROM program)," + "'CaptureLink', " + "'CaptureLink from www.henryschein.ca', " + "'0', " + "'" + POut.string("C:\\Program Files\\imaginIT\\ImaginIT.exe") + "'," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum+1) FROM programproperty)," + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ(command);
                command = "INSERT INTO toolbutitem (ToolButItemNum,ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "(SELECT MAX(ToolButItemNum)+1 FROM toolbutitem)," + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'CaptureLink')";
                Db.nonQ(command);
            } 
            //end CaptureLink bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE deposit ADD Memo varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE deposit ADD Memo varchar2(255)";
                Db.nonQ(command);
            } 
            //Insert Divvy Systems/eCards bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Divvy', " + "'Divvy from www.divvysystems.com', " + "'0', " + "''," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Username', " + "'')";
                Db.nonQ(command);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Password', " + "'')";
                Db.nonQ(command);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'API Key', " + "'')";
                Db.nonQ(command);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'DesignID for Recall Cards', " + "'')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "(SELECT MAX(ProgramNum)+1 FROM program)," + "'Divvy', " + "'Divvy from www.divvysystems.com', " + "'0', " + "''," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum+1) FROM programproperty)," + "'" + POut.long(programNum) + "', " + "'Username', " + "'')";
                Db.nonQ(command);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum+1) FROM programproperty)," + "'" + POut.long(programNum) + "', " + "'Password', " + "'')";
                Db.nonQ(command);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum+1) FROM programproperty)," + "'" + POut.long(programNum) + "', " + "'API Key', " + "'')";
                Db.nonQ(command);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum+1) FROM programproperty)," + "'" + POut.long(programNum) + "', " + "'DesignID for Recall Cards', " + "'')";
                Db.nonQ(command);
            } 
            //end Divvy Systems/eCards bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('InsDefaultAssignBen','1')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'InsDefaultAssignBen','1')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE procedurelog ADD UnitQtyType tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE procedurelog ADD UnitQtyType number(3)";
                Db.nonQ(command);
                command = "UPDATE procedurelog SET UnitQtyType = 0 WHERE UnitQtyType IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE procedurelog MODIFY UnitQtyType NOT NULL";
                Db.nonQ(command);
            } 
            //Fix medical claim form 1500, unit quantity fields.  The unique ID is OD9.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD9' LIMIT 1";
            }
            else
            {
                //oracle doesn't have LIMIT
                command = "SELECT * FROM (SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD9') WHERE RowNum<=1";
            } 
            long claimFormNum = PIn.long(Db.getScalar(command));
            command = "UPDATE claimformitem SET FieldName='P1UnitQty',FormatString='' WHERE ClaimFormNum=" + POut.long(claimFormNum) + " AND FormatString='1' AND Xpos=615 AND YPos=763";
            Db.nonQ(command);
            command = "UPDATE claimformitem SET FieldName='P2UnitQty',FormatString='' WHERE ClaimFormNum=" + POut.long(claimFormNum) + " AND FormatString='1' AND Xpos=615 AND YPos=796";
            Db.nonQ(command);
            command = "UPDATE claimformitem SET FieldName='P3UnitQty',FormatString='' WHERE ClaimFormNum=" + POut.long(claimFormNum) + " AND FormatString='1' AND Xpos=615 AND YPos=828";
            Db.nonQ(command);
            command = "UPDATE claimformitem SET FieldName='P4UnitQty',FormatString='' WHERE ClaimFormNum=" + POut.long(claimFormNum) + " AND FormatString='1' AND Xpos=615 AND YPos=862";
            Db.nonQ(command);
            command = "UPDATE claimformitem SET FieldName='P5UnitQty',FormatString='' WHERE ClaimFormNum=" + POut.long(claimFormNum) + " AND FormatString='1' AND Xpos=615 AND YPos=895";
            Db.nonQ(command);
            command = "UPDATE claimformitem SET FieldName='P6UnitQty',FormatString='' WHERE ClaimFormNum=" + POut.long(claimFormNum) + " AND FormatString='1' AND Xpos=615 AND YPos=929";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE hl7msg ADD PatNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE hl7msg ADD INDEX (PatNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE hl7msg ADD PatNum number(20)";
                Db.nonQ(command);
                command = "UPDATE hl7msg SET PatNum = 0 WHERE PatNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE hl7msg MODIFY PatNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX hl7msg_PatNum ON hl7msg (PatNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE hl7msg ADD Note text NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE hl7msg ADD Note varchar2(2000)";
                Db.nonQ(command);
            } 
            //Permission for billing
            command = "SELECT UserGroupNum FROM usergroup";
            table = Db.getTable(command);
            long groupNum = new long();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (UserGroupNum,PermType) " + "VALUES(" + POut.long(groupNum) + "," + POut.Long(((Enum)OpenDentBusiness.Permissions.Billing).ordinal()) + ")";
                    Db.nonQ(command);
                }
            }
            else
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //oracle
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (GroupPermNum,NewerDays,UserGroupNum,PermType) " + "VALUES((SELECT MAX(GroupPermNum)+1 FROM grouppermission),0," + POut.long(groupNum) + "," + POut.Long(((Enum)OpenDentBusiness.Permissions.Billing).ordinal()) + ")";
                    Db.nonQ(command);
                }
            } 
            //Add EquipmentSetup permission to all groups that had Setup permission---------------------------------------------
            command = "SELECT DISTINCT UserGroupNum " + "FROM grouppermission " + "WHERE PermType=" + POut.int(((Enum)OpenDentBusiness.Permissions.Setup).ordinal());
            table = Db.getTable(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (UserGroupNum,PermType) " + "VALUES(" + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.EquipmentSetup).ordinal()) + ")";
                    Db.nonQ(command);
                }
            }
            else
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //oracle
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (GroupPermNum,NewerDays,UserGroupNum,PermType) " + "VALUES((SELECT MAX(GroupPermNum)+1 FROM grouppermission),0," + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.EquipmentSetup).ordinal()) + ")";
                    Db.nonQ(command);
                }
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "SELECT ProgramNum FROM program WHERE ProgName='eClinicalWorks'";
                int programNum = PIn.int(Db.getScalar(command));
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.Long(programNum) + "', " + "'HL7Server', " + "'')";
                Db.nonQ(command);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.Long(programNum) + "', " + "'HL7ServiceName', " + "'')";
                Db.nonQ(command);
            }
            else
            {
            } 
            //oracle
            //eCW will never use Oracle.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE clockevent ADD AmountBonus double NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE clockevent ADD AmountBonus number(38,8)";
                Db.nonQ(command);
                command = "UPDATE clockevent SET AmountBonus = 0 WHERE AmountBonus IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE clockevent MODIFY AmountBonus NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE clockevent ADD AmountBonusAuto double NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE clockevent ADD AmountBonusAuto number(38,8)";
                Db.nonQ(command);
                command = "UPDATE clockevent SET AmountBonusAuto = 0 WHERE AmountBonusAuto IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE clockevent MODIFY AmountBonusAuto NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE timecardrule ADD AmtDiff double NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE timecardrule ADD AmtDiff number(38,8)";
                Db.nonQ(command);
                command = "UPDATE timecardrule SET AmtDiff = 0 WHERE AmtDiff IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE timecardrule MODIFY AmtDiff NOT NULL";
                Db.nonQ(command);
            } 
            //Negatives should not be part of prefs.  Too confusing.  But moving to a new pref name is not easy.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('AtoZfolderUsed','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'AtoZfolderUsed','')";
                Db.nonQ(command);
            } 
            command = "SELECT ValueString FROM preference WHERE PrefName='AtoZfolderNotRequired'";
            String atozFolderNotRequired = Db.getScalar(command);
            if (StringSupport.equals(atozFolderNotRequired, "1"))
            {
                command = "UPDATE preference SET ValueString='0' WHERE PrefName='AtoZfolderUsed'";
                Db.nonQ(command);
            }
            else
            {
                //blank or 0
                command = "UPDATE preference SET ValueString='1' WHERE PrefName='AtoZfolderUsed'";
                Db.nonQ(command);
            } 
            //command="UPDATE preference SET ValueString='' WHERE PrefName='AtoZfolderNotRequired'";//we can't do this because we need the old value in place during update.
            command = "UPDATE preference SET Comments='Deprecated.  Use AtoZfolderUsed instead' WHERE PrefName='AtoZfolderNotRequired'";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS documentmisc";
                Db.nonQ(command);
                command = "CREATE TABLE documentmisc (\r\n" + 
                "\t\t\t\t\t\tDocMiscNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tDateCreated date NOT NULL DEFAULT \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tFileName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDocMiscType tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRawBase64 longtext NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE documentmisc'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE documentmisc (\r\n" + 
                "\t\t\t\t\t\tDocMiscNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateCreated date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFileName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tDocMiscType number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRawBase64 clob,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT documentmisc_DocMiscNum PRIMARY KEY (DocMiscNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            //Add ProblemEdit permission to all groups that had Setup permission---------------------------------------------
            command = "SELECT DISTINCT UserGroupNum " + "FROM grouppermission " + "WHERE PermType=" + POut.int(((Enum)OpenDentBusiness.Permissions.Setup).ordinal());
            table = Db.getTable(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (UserGroupNum,PermType) " + "VALUES(" + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.ProblemEdit).ordinal()) + ")";
                    Db.nonQ(command);
                }
            }
            else
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //oracle
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (GroupPermNum,NewerDays,UserGroupNum,PermType) " + "VALUES((SELECT MAX(GroupPermNum)+1 FROM grouppermission),0," + POut.long(groupNum) + "," + POut.int(((Enum)OpenDentBusiness.Permissions.ProblemEdit).ordinal()) + ")";
                    Db.nonQ(command);
                }
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS toothgridcell";
                Db.nonQ(command);
                command = "CREATE TABLE toothgridcell (\r\n" + 
                "\t\t\t\t\t\tToothGridCellNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tSheetFieldNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tToothGridColNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tValueEntered varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tToothNum varchar(10) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(SheetFieldNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(ToothGridColNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE toothgridcell'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE toothgridcell (\r\n" + 
                "\t\t\t\t\t\tToothGridCellNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSheetFieldNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tToothGridColNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tValueEntered varchar2(255),\r\n" + 
                "\t\t\t\t\t\tToothNum varchar2(10),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT toothgridcell_ToothGridCellNum PRIMARY KEY (ToothGridCellNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX toothgridcell_SheetFieldNum ON toothgridcell (SheetFieldNum)";
                Db.nonQ(command);
                command = "CREATE INDEX toothgridcell_ToothGridColNum ON toothgridcell (ToothGridColNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS toothgridcol";
                Db.nonQ(command);
                command = "CREATE TABLE toothgridcol (\r\n" + 
                "\t\t\t\t\t\tToothGridColNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tSheetFieldNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNameItem varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCellType tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tItemOrder smallint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tColumnWidth smallint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProcStatus tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(SheetFieldNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(CodeNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE toothgridcol'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE toothgridcol (\r\n" + 
                "\t\t\t\t\t\tToothGridColNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSheetFieldNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNameItem varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCellType number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tItemOrder number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tColumnWidth number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProcStatus number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT toothgridcol_ToothGridColNum PRIMARY KEY (ToothGridColNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX toothgridcol_SheetFieldNum ON toothgridcol (SheetFieldNum)";
                Db.nonQ(command);
                command = "CREATE INDEX toothgridcol_CodeNum ON toothgridcol (CodeNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS toothgriddef";
                Db.nonQ(command);
                command = "CREATE TABLE toothgriddef (\r\n" + 
                "\t\t\t\t\t\tToothGridDefNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tNameInternal varchar(255),\r\n" + 
                "\t\t\t\t\t\tNameShowing varchar(255),\r\n" + 
                "\t\t\t\t\t\tCellType tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tItemOrder smallint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tColumnWidth smallint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProcStatus tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(CodeNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE toothgriddef'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE toothgriddef (\r\n" + 
                "\t\t\t\t\t\tToothGridDefNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNameInternal varchar2(255),\r\n" + 
                "\t\t\t\t\t\tNameShowing varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCellType number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tItemOrder number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tColumnWidth number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProcStatus number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT toothgriddef_ToothGridDefNum PRIMARY KEY (ToothGridDefNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX toothgriddef_CodeNum ON toothgriddef (CodeNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE sheetfield ADD ReportableName varchar(255)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE sheetfield ADD ReportableName varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE sheetfielddef ADD ReportableName varchar(255)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE sheetfielddef ADD ReportableName varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE provider ADD StateWhereLicensed varchar(50) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE provider ADD StateWhereLicensed varchar2(50)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('PracticeFax','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'PracticeFax','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('PublicHealthScreeningUsePat','0')";
                Db.nonQ(command);
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('PublicHealthScreeningSheet','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'PublicHealthScreeningUsePat','0')";
                Db.nonQ(command);
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'PublicHealthScreeningSheet','0')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE clinic ADD Fax varchar(50) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE clinic ADD Fax varchar2(50)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS screenpat";
                Db.nonQ(command);
                command = "CREATE TABLE screenpat (\r\n" + 
                "\t\t\t\t\t\tScreenPatNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tScreenGroupNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSheetNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(ScreenGroupNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(SheetNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE screenpat'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE screenpat (\r\n" + 
                "\t\t\t\t\t\tScreenPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tScreenGroupNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSheetNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT screenpat_ScreenPatNum PRIMARY KEY (ScreenPatNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX screenpat_PatNum ON screenpat (PatNum)";
                Db.nonQ(command);
                command = "CREATE INDEX screenpat_ScreenGroupNum ON screenpat (ScreenGroupNum)";
                Db.nonQ(command);
                command = "CREATE INDEX screenpat_SheetNum ON screenpat (SheetNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE adjustment ADD StatementNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE adjustment ADD INDEX (StatementNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE adjustment ADD StatementNum number(20)";
                Db.nonQ(command);
                command = "UPDATE adjustment SET StatementNum = 0 WHERE StatementNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE adjustment MODIFY StatementNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX adjustment_StatementNum ON adjustment (StatementNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE procedurelog ADD StatementNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE procedurelog ADD INDEX (StatementNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE procedurelog ADD StatementNum number(20)";
                Db.nonQ(command);
                command = "UPDATE procedurelog SET StatementNum = 0 WHERE StatementNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE procedurelog MODIFY StatementNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX procedurelog_StatementNum ON procedurelog (StatementNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE statement ADD IsInvoice tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE statement ADD IsInvoice number(3)";
                Db.nonQ(command);
                command = "UPDATE statement SET IsInvoice = 0 WHERE IsInvoice IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE statement MODIFY IsInvoice NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE statement ADD IsInvoiceCopy tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE statement ADD IsInvoiceCopy number(3)";
                Db.nonQ(command);
                command = "UPDATE statement SET IsInvoiceCopy = 0 WHERE IsInvoiceCopy IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE statement MODIFY IsInvoiceCopy NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('BillingDefaultsInvoiceNote','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'BillingDefaultsInvoiceNote','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('NewCropAccountId','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'NewCropAccountId','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('NewCropName','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'NewCropName','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('NewCropPassword','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'NewCropPassword','')";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '12.4.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_4_12();
    }

    /**
    * Oracle compatible: 01/09/2013
    */
    private static void to12_4_12() throws Exception {
        if (FromVersion < new Version("12.4.12.0"))
        {
            String command = new String();
            //Add the ADA2012 claim form. The unique ID is OD11.
            long claimFormNum = 0;
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO claimform(Description,IsHidden,FontName,FontSize,UniqueID,PrintImages,OffsetX,OffsetY) " + "VALUES ('ADA 2012',0,'Arial',9,'OD11',1,0,0)";
                claimFormNum = Db.nonQ(command,true);
            }
            else
            {
                //oracle
                command = "INSERT INTO claimform(ClaimFormNum,Description,IsHidden,FontName,FontSize,UniqueID,PrintImages,OffsetX,OffsetY) " + "VALUES ((SELECT MAX(ClaimFormNum)+1 FROM claimform),'ADA 2012',0,'Arial',9,'OD11',1,0,0)";
                claimFormNum = Db.nonQ(command,true);
            } 
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P9UnitQty','',490,617,30,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P10UnitQty','',490,633,30,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P8UnitQty','',490,601,30,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P7UnitQty','',490,584,30,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6UnitQty','',490,567,30,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4UnitQty','',490,533,30,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5UnitQty','',490,550,30,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3UnitQty','',490,516,30,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2UnitQty','',490,499,30,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1UnitQty','',490,483,30,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P9Diagnosis','',440,617,50,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P10Diagnosis','',440,633,50,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P8Diagnosis','',440,601,50,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P7Diagnosis','',440,584,50,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6Diagnosis','',440,567,50,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4Diagnosis','',440,533,50,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5Diagnosis','',440,550,50,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3Diagnosis','',440,516,50,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2Diagnosis','',440,499,50,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1Diagnosis','',440,483,50,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Diagnosis4','',610,683,80,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Diagnosis2','',502,683,80,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Diagnosis3','',610,666,80,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Diagnosis1','',502,666,80,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PlaceNumericCode','',510,750,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TreatingDentistNPI','',451,981,160,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistNPI','',42,1029,100,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss17','',333,683,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TreatingProviderSpecialty','',699,999,130,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss16','',333,667,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss15','',314,667,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss13','',274,667,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss14','',294,667,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss12','',253,667,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss11','',234,667,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss9','',193,667,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss10','',214,667,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss8','',174,667,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss7','',155,667,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss6','',134,667,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss5','',113,667,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss3','',73,667,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss2','',54,667,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss1','',34,667,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss4','',94,667,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TotalFee','',827,683,59,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P10Fee','',827,633,59,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P10Description','',521,633,240,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P10Code','',382,633,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P10Surface','',322,633,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P10ToothNumber','',204,633,110,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P10System','',172,633,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P10Area','',142,633,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P10Date','MM/dd/yyyy',42,633,96,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P9Fee','',827,617,59,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P9Description','',521,617,240,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P9Code','',382,617,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P9Surface','',322,617,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P9ToothNumber','',204,617,110,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P9System','',172,617,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P9Area','',142,617,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P9Date','MM/dd/yyyy',42,617,96,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P8Fee','',827,601,59,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P8Description','',521,601,240,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P8Code','',382,601,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P8Surface','',322,601,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P8ToothNumber','',204,601,110,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P8System','',172,601,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P8Date','MM/dd/yyyy',42,601,96,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P8Area','',142,601,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P7Description','',521,584,240,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P7Fee','',827,584,59,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P7Code','',382,584,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P7Surface','',322,584,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P7ToothNumber','',204,584,110,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P7System','',172,584,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P7Area','',142,584,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P7Date','MM/dd/yyyy',42,584,96,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6Fee','',827,567,59,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6Code','',382,567,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6Description','',521,567,240,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6Surface','',322,567,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6System','',172,567,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6ToothNumber','',204,567,110,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6Date','MM/dd/yyyy',42,567,96,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P6Area','',142,567,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5Fee','',827,550,59,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5Description','',521,550,240,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5Code','',382,550,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5Surface','',322,550,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5ToothNumber','',204,550,110,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5System','',172,550,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5Area','',142,550,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P5Date','MM/dd/yyyy',42,550,96,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4Fee','',827,533,59,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4Description','',521,533,240,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4Code','',382,533,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4Surface','',322,533,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4ToothNumber','',204,533,110,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4System','',172,533,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4Area','',142,533,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P4Date','MM/dd/yyyy',42,533,96,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3Fee','',827,516,59,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3Description','',521,516,240,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3Code','',382,516,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3Surface','',322,516,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3ToothNumber','',204,516,110,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3System','',172,516,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3Area','',142,516,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P3Date','MM/dd/yyyy',42,516,96,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2Description','',521,499,240,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2Fee','',827,499,59,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2Code','',382,499,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2ToothNumber','',204,499,110,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2Surface','',322,499,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2System','',172,499,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2Area','',142,499,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P2Date','MM/dd/yyyy',42,499,96,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1Fee','',827,483,59,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1Description','',521,483,240,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1Code','',382,483,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1Surface','',322,483,54,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1ToothNumber','',204,483,110,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1System','',172,483,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1Area','',142,483,27,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','P1Date','MM/dd/yyyy',42,483,96,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientSSN','',665,416,100,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientIsFemale','',614,416,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientIsMale','',584,416,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientDOB','MM/dd/yyyy',448,416,90,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientZip','',698,382,100,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientST','',645,382,40,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientCity','',448,382,185,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientAddress2','',448,366,350,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientAddress','',448,350,350,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientLastFirst','',448,334,350,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','RelatIsOther','',645,301,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','RelatIsChild','',555,301,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','RelatIsSpouse','',495,301,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','RelatIsSelf','',445,301,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','EmployerName','',581,250,230,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrIsFemale','',614,217,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrID','',665,215,120,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','GroupNum','',448,250,95,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrIsMale','',585,217,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrDOB','MM/dd/yyyy',448,215,100,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrZip','',698,181,100,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrST','',645,181,40,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrCity','',448,181,185,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrAddress2','',448,165,350,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrAddress','',448,149,350,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsZip','',292,416,100,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsST','',239,416,40,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','SubscrLastFirst','',448,133,350,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsCity','',42,416,185,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsAddress','',42,400,350,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsCarrierName','',42,384,350,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsRelatIsChild','',284,351,0,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsRelatIsOther','',354,351,0,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsRelatIsSelf','',174,351,0,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsRelatIsSpouse','',225,351,0,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsGroupNum','',42,349,111,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsSubscrID','',258,316,130,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsSubscrIsFemale','',205,318,0,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PriInsZip','',300,215,100,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsSubscrIsMale','',174,318,0,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsSubscrDOB','MM/dd/yyyy',42,316,100,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsExistsMed','',155,251,0,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsExistsDent','',75,251,0,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PriInsST','',248,215,40,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','OtherInsSubscrLastFirst','',43,283,340,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PriInsAddress2','',85,199,315,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PriInsCity','',85,215,150,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PriInsCarrierName','',85,167,315,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PriInsAddress','',85,183,315,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PreAuthString','',42,116,200,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsEnclosuresAttached','',723,767,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsPreAuth','',195,68,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsStandardClaim','',34,68,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TreatingDentistProviderID','',685,1048,130,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistProviderID','',294,1048,120,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss19','',294,683,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss18','',314,683,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss20','',274,683,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss22','',234,683,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss21','',253,683,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss24','',193,683,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss23','',214,683,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss25','',174,683,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss27','',134,683,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss26','',155,683,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss28','',113,683,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss32','',34,683,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss31','',54,683,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss30','',73,683,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Miss29','',94,683,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientRelease','',42,801,240,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','Remarks','',77,701,708,29)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientReleaseDate','MM/dd/yyyy',298,801,110,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientAssignment','',42,867,240,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PatientAssignmentDate','MM/dd/yyyy',298,867,110,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','FixedText','B',504,650,14,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsNotOrtho','',444,798,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsOrtho','',534,798,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','DateOrthoPlaced','MM/dd/yyyy',676,797,110,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','MonthsOrthoRemaining','',484,830,30,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsReplacementProsth','',564,833,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsNotReplacementProsth','',534,833,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','DatePriorProsthPlaced','MM/dd/yyyy',676,830,110,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsOtherAccident','',694,867,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsAutoAccident','',594,866,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','IsOccupational','',444,866,0,0)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','AccidentST','',792,882,35,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','AccidentDate','MM/dd/yyyy',573,882,110,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentist','',42,947,350,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PayToDentistAddress2','',42,979,350,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PayToDentistAddress','',42,963,350,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PayToDentistST','',239,995,40,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PayToDentistCity','',42,995,185,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','PayToDentistZip','',292,995,100,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistLicenseNum','',170,1029,100,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistSSNorTIN','',300,1029,100,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistPh123','',84,1048,30,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistPh78910','',164,1048,50,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','BillingDentistPh456','',126,1048,30,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TreatingDentistSignature','',438,949,245,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TreatingDentistSigDate','MM/dd/yyyy',709,949,100,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TreatingDentistLicense','',699,981,130,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TreatingDentistAddress','',434,1013,350,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TreatingDentistCity','',434,1029,165,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TreatingDentistST','',606,1029,40,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TreatingDentistZip','',658,1029,110,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TreatingDentistPh456','',524,1048,30,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TreatingDentistPh123','',485,1048,30,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'','TreatingDentistPh78910','',563,1048,40,14)";
            Db.nonQ(command);
            command = "INSERT INTO claimformitem (ClaimFormItemNum,ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) " + "VALUES (" + getClaimFormItemNum() + "," + POut.long(claimFormNum) + ",'ADA2012.gif','','',17,15,815,1063)";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '12.4.12.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_4_14();
    }

    /**
    * Oracle compatible: 01/09/2013
    */
    private static void to12_4_14() throws Exception {
        if (FromVersion < new Version("12.4.14.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS erxlog";
                Db.nonQ(command);
                command = "CREATE TABLE erxlog (\r\n" + 
                "\t\t\t\t\t\tErxLogNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMsgText mediumtext NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTStamp timestamp,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE erxlog'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE erxlog (\r\n" + 
                "\t\t\t\t\t\tErxLogNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMsgText clob,\r\n" + 
                "\t\t\t\t\t\tDateTStamp timestamp,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT erxlog_ErxLogNum PRIMARY KEY (ErxLogNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX erxlog_PatNum ON erxlog (PatNum)";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '12.4.14.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_4_22();
    }

    /**
    * Oracle compatible: 01/09/2013
    */
    private static void to12_4_22() throws Exception {
        if (FromVersion < new Version("12.4.22.0"))
        {
            String command = new String();
            //Claimstream clearinghouse.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO clearinghouse(Description,ExportPath,Payors,Eformat,ISA05,SenderTin,ISA07,ISA08,ISA15,Password,ResponsePath,CommBridge,ClientProgram,\r\n" + 
                "\t\t\t\t\t\tLastBatchNumber,ModemPort,LoginID,SenderName,SenderTelephone,GS03,ISA02,ISA04,ISA16,SeparatorData,SeparatorSegment) \r\n" + 
                "\t\t\t\t\t\tVALUES (\'Claimstream\',\'" + POut.string("C:\\ccd\\abc\\") + "','000090','3','','','','','','','','15','" + POut.string("C:\\ccd\\abc\\ccdws.exe") + "',0,0,'','','','','','','','','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO clearinghouse(ClearinghouseNum,Description,ExportPath,Payors,Eformat,ISA05,SenderTin,ISA07,ISA08,ISA15,Password,ResponsePath,CommBridge,ClientProgram,\r\n" + 
                "\t\t\t\t\t\tLastBatchNumber,ModemPort,LoginID,SenderName,SenderTelephone,GS03,ISA02,ISA04,ISA16,SeparatorData,SeparatorSegment) \r\n" + 
                "\t\t\t\t\t\tVALUES ((SELECT MAX(ClearinghouseNum+1) FROM clearinghouse),\'Claimstream\',\'" + POut.string("C:\\ccd\\abc\\") + "','000090','3','','','','','','','','15','" + POut.string("C:\\ccd\\abc\\ccdws.exe") + "',0,0,'','','','','','','','','')";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '12.4.22.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_4_28();
    }

    /**
    * Oracle compatible: 01/09/2013
    */
    private static void to12_4_28() throws Exception {
        if (FromVersion < new Version("12.4.28.0"))
        {
            String command = new String();
            if (CultureInfo.CurrentCulture.Name.EndsWith("US"))
            {
                //United States
                long codeNum = 0;
                String procCode = "D1208";
                //This code is needed for important automation.
                command = "SELECT CodeNum FROM procedurecode WHERE ProcCode='" + POut.string(procCode) + "'";
                DataTable dtProcCode = Db.getTable(command);
                if (dtProcCode.Rows.Count == 0)
                {
                    //The procedure code does not exist
                    //Make sure the procedure code category exists before inserting the procedure code
                    String procCatDescript = "Cleanings";
                    long defNum = 0;
                    command = "SELECT DefNum FROM definition WHERE Category=" + POut.long((long)DefCat.ProcCodeCats) + " AND ItemName='" + POut.string(procCatDescript) + "'";
                    DataTable dtDef = Db.getTable(command);
                    if (dtDef.Rows.Count == 0)
                    {
                        //The procedure code category does not exist, add it
                        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                        {
                            command = "INSERT INTO definition (Category,ItemName,ItemOrder) " + "VALUES (" + POut.long((long)DefCat.ProcCodeCats) + ",'" + POut.string(procCatDescript) + "'," + POut.Long(DefC.getLong()[((Enum)DefCat.ProcCodeCats).ordinal()].Length) + ")";
                        }
                        else
                        {
                            //oracle
                            command = "INSERT INTO definition (DefNum,Category,ItemName,ItemOrder) " + "VALUES ((SELECT MAX(DefNum)+1 FROM definition)," + POut.long((long)DefCat.ProcCodeCats) + ",'" + POut.string(procCatDescript) + "'," + POut.Long(DefC.getLong()[((Enum)DefCat.ProcCodeCats).ordinal()].Length) + ")";
                        } 
                        defNum = Db.nonQ(command,true);
                    }
                    else
                    {
                        //The procedure code category already exists, get the existing defnum
                        defNum = PIn.Long(dtDef.Rows[0][0].ToString());
                    } 
                    //The following variables might be useful if we need to copy this pattern later for adding more codes.
                    String procDescript = "topical application of fluoride";
                    String procAbbrDesc = "Flo";
                    String procTime = "/";
                    long procTreatArea = 3;
                    int procNoBillIns = 0;
                    int procIsProsth = 0;
                    int procIsHygiene = 1;
                    int procPaintType = 0;
                    //none
                    if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                    {
                        command = "INSERT INTO procedurecode(ProcCode,Descript,AbbrDesc,\r\n" + 
                        "\t\t\t\t\t\t\t\t\tProcTime,ProcCat,TreatArea,NoBillIns,IsProsth,IsHygiene,PaintType,DefaultNote,SubstitutionCode) \r\n" + 
                        "\t\t\t\t\t\t\t\tVALUES (\'" + POut.string(procCode) + "','" + POut.string(procDescript) + "','" + POut.string(procAbbrDesc) + "'," + "'" + POut.string(procTime) + "','" + POut.long(defNum) + "'," + POut.long(procTreatArea) + "," + POut.int(procNoBillIns) + "," + POut.int(procIsProsth) + "," + POut.int(procIsHygiene) + "," + POut.int(procPaintType) + ",'','')";
                        codeNum = Db.nonQ(command,true);
                    }
                    else
                    {
                        //oracle
                        command = "INSERT INTO procedurecode(CodeNum,ProcCode,Descript,AbbrDesc,\r\n" + 
                        "\t\t\t\t\t\t\t\t\tProcTime,ProcCat,TreatArea,NoBillIns,IsProsth,IsHygiene,PaintType,IsCanadianLab,BaseUnits,SubstOnlyIf,IsMultiVisit,ProvNumDefault,GraphicColor,DefaultNote,SubstitutionCode) \r\n" + 
                        "\t\t\t\t\t\t\t\tVALUES ((SELECT MAX(CodeNum)+1 FROM procedurecode),\'" + POut.string(procCode) + "','" + POut.string(procDescript) + "','" + POut.string(procAbbrDesc) + "'," + "'" + POut.string(procTime) + "','" + POut.long(defNum) + "'," + POut.long(procTreatArea) + "," + POut.int(procNoBillIns) + "," + POut.int(procIsProsth) + "," + POut.int(procIsHygiene) + "," + POut.int(procPaintType) + ",0,0,0,0,0,0,'','')";
                        codeNum = Db.nonQ(command,true);
                    } 
                }
                else
                {
                    //end D1208 insert
                    //D1208 already exists.
                    codeNum = PIn.Long(dtProcCode.Rows[0][0].ToString());
                } 
                //Various references to the old D1203 and D1204 need to be changed to the new D1208.
                long codeNumD1203 = 0;
                command = "SELECT CodeNum FROM procedurecode WHERE ProcCode='D1203'";
                dtProcCode = Db.getTable(command);
                if (dtProcCode.Rows.Count > 0)
                {
                    codeNumD1203 = PIn.Long(dtProcCode.Rows[0][0].ToString());
                }
                 
                long codeNumD1204 = 0;
                command = "SELECT CodeNum FROM procedurecode WHERE ProcCode='D1204'";
                dtProcCode = Db.getTable(command);
                if (dtProcCode.Rows.Count > 0)
                {
                    codeNumD1204 = PIn.Long(dtProcCode.Rows[0][0].ToString());
                }
                 
                //Update benefits to remove the old codes and replace with the new code. We ignore CodeNum=0 in case D1203 or D1204 is not in the database.
                command = "UPDATE benefit SET CodeNum=" + POut.long(codeNum) + " WHERE CodeNum<>0 AND (CodeNum=" + POut.long(codeNumD1203) + " OR CodeNum=" + POut.long(codeNumD1204) + ")";
                Db.nonQ(command);
                //Clean up insurance plans with obvious duplicate fluoride benefits (plans that used to have benefits for both D1203 and D1204).
                command = "SELECT DISTINCT PlanNum,CovCatNum,TimePeriod,Quantity,CoverageLevel " + "FROM benefit " + "WHERE BenefitType=" + POut.long((long)InsBenefitType.Limitations) + " AND MonetaryAmt=-1 AND PatPlanNum=0 AND Percent=-1 " + "AND QuantityQualifier=" + POut.long((long)BenefitQuantity.AgeLimit) + " AND CodeNum=" + POut.long(codeNum);
                DataTable dtBenFlo = Db.getTable(command);
                command = "DELETE FROM benefit " + "WHERE BenefitType=" + POut.long((long)InsBenefitType.Limitations) + " AND MonetaryAmt=-1 AND PatPlanNum=0 AND Percent=-1 " + "AND QuantityQualifier=" + POut.long((long)BenefitQuantity.AgeLimit) + " AND CodeNum=" + POut.long(codeNum);
                Db.nonQ(command);
                for (int i = 0;i < dtBenFlo.Rows.Count;i++)
                {
                    long planNum = PIn.Long(dtBenFlo.Rows[i]["PlanNum"].ToString());
                    long covCatNum = PIn.Long(dtBenFlo.Rows[i]["CovCatNum"].ToString());
                    long timePeriod = PIn.Long(dtBenFlo.Rows[i]["TimePeriod"].ToString());
                    long quantity = PIn.Long(dtBenFlo.Rows[i]["Quantity"].ToString());
                    long coverageLevel = PIn.Long(dtBenFlo.Rows[i]["CoverageLevel"].ToString());
                    if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                    {
                        command = "INSERT INTO benefit (PlanNum,PatPlanNum,CovCatNum,BenefitType,Percent,MonetaryAmt,TimePeriod," + "QuantityQualifier,Quantity,CodeNum,CoverageLevel) " + "VALUES (" + POut.long(planNum) + ",0," + POut.long(covCatNum) + "," + POut.long((long)InsBenefitType.Limitations) + ",-1,-1," + POut.long(timePeriod) + "," + POut.long((long)BenefitQuantity.AgeLimit) + "," + POut.long(quantity) + "," + POut.long(codeNum) + "," + POut.long(coverageLevel) + ")";
                        Db.nonQ(command);
                    }
                    else
                    {
                        //oracle
                        command = "INSERT INTO benefit (BenefitNum,PlanNum,PatPlanNum,CovCatNum,BenefitType,Percent,MonetaryAmt,TimePeriod," + "QuantityQualifier,Quantity,CodeNum,CoverageLevel) " + "VALUES ((SELECT MAX(BenefitNum)+1 FROM benefit)," + POut.long(planNum) + ",0," + POut.long(covCatNum) + "," + POut.long((long)InsBenefitType.Limitations) + ",-1,-1," + POut.long(timePeriod) + "," + POut.long((long)BenefitQuantity.AgeLimit) + "," + POut.long(quantity) + "," + POut.long(codeNum) + "," + POut.long(coverageLevel) + ")";
                        Db.nonQ(command);
                    } 
                }
                //end benefit inserts
                //Update recall triggers with new fluoride code.
                command = "UPDATE recalltrigger SET CodeNum=" + POut.long(codeNum) + " WHERE CodeNum<>0 AND (CodeNum=" + POut.long(codeNumD1203) + " OR CodeNum=" + POut.long(codeNumD1204) + ")";
                Db.nonQ(command);
                //Update the fluoride procedures on the recall triggers.
                command = "SELECT * FROM recalltype";
                //Should only be a handful of results.
                DataTable dtRecallType = Db.getTable(command);
                for (int i = 0;i < dtRecallType.Rows.Count;i++)
                {
                    String procs = PIn.String(dtRecallType.Rows[i]["Procedures"].ToString());
                    String procsNew = procs.Replace("D1203", "D1208").Replace("D1204", "D1208");
                    if (!StringSupport.equals(procs, procsNew))
                    {
                        long recallTypeNum = PIn.Long(dtRecallType.Rows[i]["RecallTypeNum"].ToString());
                        command = "UPDATE recalltype SET Procedures='" + POut.string(procsNew) + "' WHERE RecallTypeNum=" + POut.long(recallTypeNum);
                        Db.nonQ(command);
                    }
                     
                }
            }
             
            //end United States update
            command = "UPDATE preference SET ValueString = '12.4.28.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_4_30();
    }

    /**
    * Oracle compatible: 01/09/2013
    */
    private static void to12_4_30() throws Exception {
        if (FromVersion < new Version("12.4.30.0"))
        {
            String command = new String();
            if (CultureInfo.CurrentCulture.Name.EndsWith("US"))
            {
                //United States
                //Move depricated codes to the Obsolete procedure code category.
                //Make sure the procedure code category exists before moving the procedure codes.
                String procCatDescript = "Obsolete";
                long defNum = 0;
                command = "SELECT DefNum FROM definition WHERE Category=" + POut.long((long)DefCat.ProcCodeCats) + " AND ItemName='" + POut.string(procCatDescript) + "'";
                DataTable dtDef = Db.getTable(command);
                if (dtDef.Rows.Count == 0)
                {
                    //The procedure code category does not exist, add it
                    if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                    {
                        command = "INSERT INTO definition (Category,ItemName,ItemOrder) " + "VALUES (" + POut.long((long)DefCat.ProcCodeCats) + ",'" + POut.string(procCatDescript) + "'," + POut.Long(DefC.getLong()[((Enum)DefCat.ProcCodeCats).ordinal()].Length) + ")";
                    }
                    else
                    {
                        //oracle
                        command = "INSERT INTO definition (DefNum,Category,ItemName,ItemOrder) " + "VALUES ((SELECT MAX(DefNum)+1 FROM definition)," + POut.long((long)DefCat.ProcCodeCats) + ",'" + POut.string(procCatDescript) + "'," + POut.Long(DefC.getLong()[((Enum)DefCat.ProcCodeCats).ordinal()].Length) + ")";
                    } 
                    defNum = Db.nonQ(command,true);
                }
                else
                {
                    //The procedure code category already exists, get the existing defnum
                    defNum = PIn.Long(dtDef.Rows[0][0].ToString());
                } 
                String[] cdtCodesDeleted = new String[]{ "D0360", "D0362", "D1203", "D1204", "D4271", "D6254", "D6795", "D6970", "D6972", "D6973", "D6976", "D6977" };
                for (int i = 0;i < cdtCodesDeleted.Length;i++)
                {
                    String procCode = cdtCodesDeleted[i];
                    command = "SELECT CodeNum FROM procedurecode WHERE ProcCode='" + POut.string(procCode) + "'";
                    DataTable dtProcCode = Db.getTable(command);
                    if (dtProcCode.Rows.Count == 0)
                    {
                        continue;
                    }
                     
                    //The procedure code does not exist in this database.
                    //Do not try to move it.
                    long codeNum = PIn.Long(dtProcCode.Rows[0][0].ToString());
                    command = "UPDATE procedurecode SET ProcCat=" + POut.long(defNum) + " WHERE CodeNum=" + POut.long(codeNum);
                    Db.nonQ(command);
                }
            }
             
            //end United States update
            command = "UPDATE preference SET ValueString = '12.4.30.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_4_32();
    }

    /**
    * Oracle compatible: 01/09/2013
    */
    private static void to12_4_32() throws Exception {
        if (FromVersion < new Version("12.4.32.0"))
        {
            String command = new String();
            if (CultureInfo.CurrentCulture.Name.EndsWith("US"))
            {
                //United States
                long codeNumD1203 = 0;
                command = "SELECT CodeNum FROM procedurecode WHERE ProcCode='D1203'";
                DataTable dtProcCode = Db.getTable(command);
                if (dtProcCode.Rows.Count > 0)
                {
                    codeNumD1203 = PIn.Long(dtProcCode.Rows[0][0].ToString());
                }
                 
                long codeNumD1204 = 0;
                command = "SELECT CodeNum FROM procedurecode WHERE ProcCode='D1204'";
                dtProcCode = Db.getTable(command);
                if (dtProcCode.Rows.Count > 0)
                {
                    codeNumD1204 = PIn.Long(dtProcCode.Rows[0][0].ToString());
                }
                 
                long codeNumD1208 = 0;
                command = "SELECT CodeNum FROM procedurecode WHERE ProcCode='D1208'";
                dtProcCode = Db.getTable(command);
                if (dtProcCode.Rows.Count > 0)
                {
                    codeNumD1208 = PIn.Long(dtProcCode.Rows[0][0].ToString());
                }
                 
                //Change the procedures on currently scheduled appointments to show D1208 instead of D1203/4.
                command = "UPDATE procedurelog " + "SET CodeNum=" + POut.long(codeNumD1208) + " " + "WHERE ProcStatus=" + POut.long((long)OpenDentBusiness.ProcStat.TP) + " AND CodeNum<>0 AND (CodeNum=" + POut.long(codeNumD1203) + " OR CodeNum=" + POut.long(codeNumD1204) + ")";
                Db.nonQ(command);
                //Appt procs quick add, change the flouride code to D1208 instead of D1203/4.
                command = "SELECT DefNum,ItemValue FROM definition WHERE Category=" + POut.long((long)DefCat.ApptProcsQuickAdd);
                //A short list, so just get them all.
                DataTable dtApptProcsQuickAdd = Db.getTable(command);
                for (int i = 0;i < dtApptProcsQuickAdd.Rows.Count;i++)
                {
                    String procs = PIn.String(dtApptProcsQuickAdd.Rows[i]["ItemValue"].ToString());
                    String procs1208 = procs.Replace("D1203", "D1208").Replace("D1204", "D1208");
                    if (StringSupport.equals(procs, procs1208))
                    {
                        continue;
                    }
                     
                    //There were no D1203 and no D1204.
                    long defNum = PIn.Long(dtApptProcsQuickAdd.Rows[i]["DefNum"].ToString());
                    command = "UPDATE definition SET ItemValue='" + POut.string(procs1208) + "' WHERE DefNum=" + POut.long(defNum);
                    Db.nonQ(command);
                }
                //proc buttons, change flouride  to D1208 instead of D1203/4. We don't care about possible duplicates because they are highly unlikely.
                command = "UPDATE procbuttonitem SET CodeNum=" + POut.long(codeNumD1208) + " WHERE CodeNum<>0 AND (CodeNum=" + POut.long(codeNumD1203) + " OR CodeNum=" + POut.long(codeNumD1204) + ")";
                Db.nonQ(command);
            }
             
            //end United States update
            command = "UPDATE preference SET ValueString = '12.4.32.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to12_4_38();
    }

    /**
    * Oracle compatible: 02/23/2013
    */
    private static void to12_4_38() throws Exception {
        if (FromVersion < new Version("12.4.38.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
            {
            }
            else
            {
                //skip.  Too hard for too little benefit.
                //The code below synchronizes recall.DateScheduled for all patients.  There was a bug, that necessitated doing this.
                //This is essentially a copy of the code from Recalls.SynchScheduledApptFull().
                //Clear out DateScheduled column for all pats before changing
                command = "UPDATE recall SET recall.DateScheduled=" + POut.Date(DateTime.MinValue);
                Db.nonQ(command);
                //get all active patients with future scheduled appointments that have a procedure attached which is a recall trigger procedure
                command = "SELECT DISTINCT patient.PatNum " + "FROM patient " + "INNER JOIN appointment ON appointment.PatNum=patient.PatNum AND AptDateTime>CURDATE() AND (AptStatus=1 OR AptStatus=4) " + "INNER JOIN procedurelog ON procedurelog.AptNum=appointment.AptNum " + "INNER JOIN recalltrigger ON recalltrigger.CodeNum=procedurelog.CodeNum " + "WHERE PatStatus=0";
                DataTable tablePats = Db.getTable(command);
                for (int p = 0;p < tablePats.Rows.Count;p++)
                {
                    //Get table of future appointment dates with recall type for this patient, where a procedure is attached that is a recall trigger procedure
                    command = "SELECT recalltrigger.RecallTypeNum,MIN(DATE(appointment.AptDateTime)) AS AptDateTime\r\n" + 
                    "\t\t\t\t\t\t\tFROM appointment,procedurelog,recalltrigger,recall\r\n" + 
                    "\t\t\t\t\t\t\tWHERE appointment.AptNum=procedurelog.AptNum \r\n" + 
                    "\t\t\t\t\t\t\tAND appointment.PatNum=" + POut.Long(PIn.Long(tablePats.Rows[p][0].ToString())) + " \r\n" + 
                    "\t\t\t\t\t\t\tAND procedurelog.CodeNum=recalltrigger.CodeNum \r\n" + 
                    "\t\t\t\t\t\t\tAND recall.PatNum=appointment.PatNum \r\n" + 
                    "\t\t\t\t\t\t\tAND recalltrigger.RecallTypeNum=recall.RecallTypeNum \r\n" + 
                    "\t\t\t\t\t\t\tAND (appointment.AptStatus=1 " + "OR appointment.AptStatus=4) " + "AND appointment.AptDateTime>CURDATE() " + "GROUP BY recalltrigger.RecallTypeNum";
                    //Scheduled
                    //ASAP
                    //early this morning
                    DataTable tableSchedDate = Db.getTable(command);
                    for (int i = 0;i < tableSchedDate.Rows.Count;i++)
                    {
                        //Update the recalls for this patient with DATE(AptDateTime) where there is a future appointment with recall proc on it
                        if (StringSupport.equals(tableSchedDate.Rows[i]["RecallTypeNum"].ToString(), ""))
                        {
                            continue;
                        }
                         
                        command = "UPDATE recall\tSET recall.DateScheduled=" + POut.Date(PIn.Date(tableSchedDate.Rows[i]["AptDateTime"].ToString())) + " " + "WHERE recall.RecallTypeNum=" + POut.Long(PIn.Long(tableSchedDate.Rows[i]["RecallTypeNum"].ToString())) + " " + "AND recall.PatNum=" + POut.Long(PIn.Long(tablePats.Rows[p][0].ToString())) + " ";
                        Db.nonQ(command);
                    }
                }
            } 
            command = "UPDATE preference SET ValueString = '12.4.38.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_1_1();
    }

    /**
    * Oracle compatible: 02/23/2013
    */
    private static void to13_1_1() throws Exception {
        if (FromVersion < new Version("13.1.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE clockevent CHANGE AmountBonus AmountBonus double NOT NULL default -1";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE clockevent MODIFY (AmountBonus NUMBER(38,8) DEFAULT '-1')";
                //Column is already NOT NULL.
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE clockevent CHANGE AmountBonusAuto AmountBonusAuto double NOT NULL default -1";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE clockevent MODIFY (AmountBonusAuto NUMBER(38,8) DEFAULT '-1')";
                //Column is already NOT NULL.
                Db.nonQ(command);
            } 
            command = "SELECT ValueString FROM preference WHERE PrefName='StatementShowNotes'";
            String prefStatementShowNotes = Db.getScalar(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('StatementShowAdjNotes','" + prefStatementShowNotes + "')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'StatementShowAdjNotes','" + prefStatementShowNotes + "')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('ProcLockingIsAllowed','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ProcLockingIsAllowed','0')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE procedurelog ADD IsLocked tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE procedurelog ADD IsLocked number(3)";
                Db.nonQ(command);
                command = "UPDATE procedurelog SET IsLocked = 0 WHERE IsLocked IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE procedurelog MODIFY IsLocked NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE hl7def ADD ShowDemographics tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE hl7def ADD ShowDemographics number(3)";
                Db.nonQ(command);
                command = "UPDATE hl7def SET ShowDemographics = 0 WHERE ShowDemographics IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE hl7def MODIFY ShowDemographics NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE hl7def ADD ShowAppts tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE hl7def ADD ShowAppts number(3)";
                Db.nonQ(command);
                command = "UPDATE hl7def SET ShowAppts = 0 WHERE ShowAppts IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE hl7def MODIFY ShowAppts NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE hl7def ADD ShowAccount tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE hl7def ADD ShowAccount number(3)";
                Db.nonQ(command);
                command = "UPDATE hl7def SET ShowAccount = 0 WHERE ShowAccount IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE hl7def MODIFY ShowAccount NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS dictcustom";
                Db.nonQ(command);
                command = "CREATE TABLE dictcustom (\r\n" + 
                "\t\t\t\t\t\tDictCustomNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tWordText varchar(255) NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE dictcustom'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE dictcustom (\r\n" + 
                "\t\t\t\t\t\tDictCustomNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tWordText varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT dictcustom_DictCustomNum PRIMARY KEY (DictCustomNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            if (CultureInfo.CurrentCulture.Name.EndsWith("CA"))
            {
                //Canadian. en-CA or fr-CA
                command = "SELECT CanadianNetworkNum FROM canadiannetwork WHERE Abbrev='CSI' LIMIT 1";
                long canadianNetworkNumCSI = PIn.long(Db.getScalar(command));
                command = "SELECT COUNT(*) FROM carrier WHERE ElectID='000118'";
                //local 1030 health benefit plan
                if (StringSupport.equals(Db.getCount(command), "0"))
                {
                    command = "INSERT INTO carrier (CarrierName,Address,Address2,City,State,Zip,Phone,ElectID,NoSendElect,IsCDA,CDAnetVersion,CanadianNetworkNum,IsHidden,CanadianEncryptionMethod,CanadianSupportedTypes) VALUES " + "('Local 1030 Health Benefit Plan','45 McIntosh Drive','','Markham','ON','L3R 8C7','1-800-263-3564','000118','0','1','04'," + POut.long(canadianNetworkNumCSI) + ",'0',1,1944)";
                    Db.nonQ(command);
                }
                 
                command = "SELECT COUNT(*) FROM carrier WHERE ElectID='000119'";
                //sheet metal workers local 30 benefit plan
                if (StringSupport.equals(Db.getCount(command), "0"))
                {
                    command = "INSERT INTO carrier (CarrierName,Address,Address2,City,State,Zip,Phone,ElectID,NoSendElect,IsCDA,CDAnetVersion,CanadianNetworkNum,IsHidden,CanadianEncryptionMethod,CanadianSupportedTypes) VALUES " + "('Sheet Metal Workers Local 30 Benefit Plan','45 McIntosh Drive','','Markham','ON','L3R 8C7','1-800-263-3564','000119','0','1','04'," + POut.long(canadianNetworkNumCSI) + ",'0',1,1944)";
                    Db.nonQ(command);
                }
                 
                command = "SELECT COUNT(*) FROM carrier WHERE ElectID='000120'";
                //the building union of canada health benefit
                if (StringSupport.equals(Db.getCount(command), "0"))
                {
                    command = "INSERT INTO carrier (CarrierName,Address,Address2,City,State,Zip,Phone,ElectID,NoSendElect,IsCDA,CDAnetVersion,CanadianNetworkNum,IsHidden,CanadianEncryptionMethod,CanadianSupportedTypes) VALUES " + "('The Building Union of Canada Health Benefit','45 McIntosh Drive','','Markham','ON','L3R 8C7','1-800-263-3564','000120','0','1','04'," + POut.long(canadianNetworkNumCSI) + ",'0',1,1944)";
                    Db.nonQ(command);
                }
                 
            }
             
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS wikipage";
                Db.nonQ(command);
                command = "CREATE TABLE wikipage (\r\n" + 
                "\t\t\t\t\t\tWikiPageNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tUserNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPageTitle varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tKeyWords varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPageContent MEDIUMTEXT NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeSaved datetime NOT NULL DEFAULT \'0001-01-01 00:00:00\',\r\n" + 
                "\t\t\t\t\t\tINDEX(UserNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE wikipage'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE wikipage (\r\n" + 
                "\t\t\t\t\t\tWikiPageNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUserNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPageTitle varchar2(255),\r\n" + 
                "\t\t\t\t\t\tKeyWords varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPageContent clob,\r\n" + 
                "\t\t\t\t\t\tDateTimeSaved date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT wikipage_WikiPageNum PRIMARY KEY (WikiPageNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX wikipage_UserNum ON wikipage (UserNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS wikipagehist";
                Db.nonQ(command);
                command = "CREATE TABLE wikipagehist (\r\n" + 
                "\t\t\t\t\t\tWikiPageNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tUserNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPageTitle varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPageContent MEDIUMTEXT NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeSaved datetime NOT NULL DEFAULT \'0001-01-01 00:00:00\',\r\n" + 
                "\t\t\t\t\t\tIsDeleted tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(UserNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE wikipagehist'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE wikipagehist (\r\n" + 
                "\t\t\t\t\t\tWikiPageNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUserNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPageTitle varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPageContent clob,\r\n" + 
                "\t\t\t\t\t\tDateTimeSaved date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsDeleted number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT wikipagehist_WikiPageNum PRIMARY KEY (WikiPageNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX wikipagehist_UserNum ON wikipagehist (UserNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS emailaddress";
                Db.nonQ(command);
                command = "CREATE TABLE emailaddress (\r\n" + 
                "\t\t\t\t\t\tEmailAddressNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tSMTPserver varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEmailUsername varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEmailPassword varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tServerPort int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUseSSL tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSenderAddress varchar(255) NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE emailaddress'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE emailaddress (\r\n" + 
                "\t\t\t\t\t\tEmailAddressNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSMTPserver varchar2(255),\r\n" + 
                "\t\t\t\t\t\tEmailUsername varchar2(255),\r\n" + 
                "\t\t\t\t\t\tEmailPassword varchar2(255),\r\n" + 
                "\t\t\t\t\t\tServerPort number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUseSSL number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSenderAddress varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT emailaddress_EmailAddressNum PRIMARY KEY (EmailAddressNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            //Jason: Talked with Ryan and these are going to be the only two pages in this table.  Oracle requires a PK, so manually setting PK's of 1 and 2.
            //todo: edit these 2 starting wikipages
            //Oracle requires PK to be not null and does not have auto incrementing.  Simply hard code the PK here.
            //no usernum set for the first 2 pages
            command = "INSERT INTO wikipage (WikiPageNum,UserNum,PageTitle,KeyWords,PageContent,DateTimeSaved) VALUES(" + "1," + "0," + "'_Master'," + "''," + "'" + POut.string("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n" + 
            "<head>\r\n" + 
            "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n" + 
            "<style type=\"text/css\">\r\n" + 
            "<!--\r\n" + 
            "*{\r\n" + 
            "\tborder: 0px;\r\n" + 
            "\tmargin: 0px;\r\n" + 
            "}\r\n" + 
            "body{\r\n" + 
            "\tmargin:\t\t3px;\r\n" + 
            "\tfont-size:\t9pt;\r\n" + 
            "\tfont-family:\tarial,sans-serif;\r\n" + 
            "}\r\n" + 
            "p{\r\n" + 
            "\tmargin-top: 0px;\r\n" + 
            "\tmargin-bottom: 0px;\r\n" + 
            "}\r\n" + 
            "h1, h1 a{\r\n" + 
            "\tfont-size:20pt;\r\n" + 
            "\tcolor:#005677;\r\n" + 
            "}\r\n" + 
            "h2, h2 a {\r\n" + 
            "\tfont-size:16pt;\r\n" + 
            "\tcolor:#005677;\r\n" + 
            "}\r\n" + 
            "h3, h3 a {\r\n" + 
            "\tfont-size:12pt;\r\n" + 
            "\tcolor:#005677;\r\n" + 
            "}\r\n" + 
            "ul{\r\n" + 
            "\tlist-style-position: inside;/*This puts the bullets inside the div rect instead of outside*/\r\n" + 
            "}\r\n" + 
            "ol{\r\n" + 
            "\tlist-style-position: inside;\r\n" + 
            "}\r\n" + 
            "ul .ListItemContent{\r\n" + 
            "\tposition: relative; left: -5px;/*Tightens up the spacing between bullets and text*/\r\n" + 
            "}\r\n" + 
            "ol .ListItemContent{\r\n" + 
            "\tposition: relative; left: -1px;/*Tightens up the spacing between numbers and text*/\r\n" + 
            "}\r\n" + 
            "a{\r\n" + 
            "\tcolor:rgb(68,81,199);/*same blue color as wikipedia*/\r\n" + 
            "\ttext-decoration:none;\r\n" + 
            "}\r\n" + 
            "a:hover{\r\n" + 
            "\ttext-decoration:underline;\r\n" + 
            "}\r\n" + 
            "table, th, td, tr {\r\n" + 
            "\tborder-collapse:collapse;\r\n" + 
            "\tborder:1px solid #999999;\r\n" + 
            "\tpadding:2px;\r\n" + 
            "}\r\n" + 
            ".PageNotExists, a.PageNotExists {\r\n" + 
            "\tborder-bottom:1px dashed #000000;\r\n" + 
            "}\r\n" + 
            "a.PageNotExists:hover {\r\n" + 
            "\tborder-bottom:1px solid #000000;\r\n" + 
            "\ttext-decoration:none;\r\n" + 
            "}\r\n" + 
            ".keywords, a.keywords:hover {\r\n" + 
            "\tcolor:#000000;\r\n" + 
            "\tbackground-color:#eeeeee;\r\n" + 
            "}\r\n" + 
            "-->\r\n" + 
            "</style>\r\n" + 
            "</head>\r\n" + 
            "@@@body@@@\r\n" + 
            "</html>") + "',";
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
            {
                command += "SYSDATE";
            }
            else
            {
                command += "NOW()";
            } 
            command += ")";
            Db.nonQ(command);
            //blank home page
            command = "INSERT INTO wikipage (WikiPageNum,UserNum,PageTitle,KeyWords,PageContent,DateTimeSaved) VALUES(" + "2," + "0," + "'Home'," + "''," + "'Home',";
            //Oracle requires PK to be not null and does not have auto incrementing.  Simply hard code the PK here.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
            {
                command += "SYSDATE";
            }
            else
            {
                command += "NOW()";
            } 
            command += ")";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('EmailDefaultAddressNum','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'EmailDefaultAddressNum','')";
                Db.nonQ(command);
            } 
            String emailUsername = Db.getScalar("SELECT ValueString FROM preference WHERE PrefName='EmailUsername'");
            if (!StringSupport.equals(emailUsername, ""))
            {
                String emailPassword = Db.getScalar("SELECT ValueString FROM preference WHERE PrefName='EmailPassword'");
                String senderAddress = Db.getScalar("SELECT ValueString FROM preference WHERE PrefName='EmailSenderAddress'");
                int serverPort = PIn.Int(Db.getScalar("SELECT ValueString FROM preference WHERE PrefName='EmailPort'").ToString());
                String smtpServer = Db.getScalar("SELECT ValueString FROM preference WHERE PrefName='EmailSMTPServer'");
                boolean useSSL = PIn.bool(Db.getScalar("SELECT ValueString FROM preference WHERE PrefName='EmailUseSSL'"));
                command = "INSERT INTO emailaddress(EmailPassword,EmailUsername,SenderAddress,ServerPort,SMTPServer,UseSSL) " + "VALUES('" + POut.string(emailPassword) + "','" + POut.string(emailUsername) + "','" + POut.string(senderAddress) + "'," + POut.int(serverPort) + ",'" + POut.string(smtpServer) + "'," + POut.bool(useSSL) + ")";
                long defaultEmailAddressNum = Db.nonQ(command,true);
                command = "UPDATE preference SET ValueString = " + POut.long(defaultEmailAddressNum) + " WHERE PrefName = 'EmailDefaultAddressNum'";
                Db.nonQ(command);
            }
             
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE clinic ADD EmailAddressNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE clinic ADD INDEX (EmailAddressNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE clinic ADD EmailAddressNum number(20)";
                Db.nonQ(command);
                command = "UPDATE clinic SET EmailAddressNum = 0 WHERE EmailAddressNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE clinic MODIFY EmailAddressNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX clinic_EmailAddressNum ON clinic (EmailAddressNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE toothgriddef ADD SheetFieldDefNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE toothgriddef ADD INDEX (SheetFieldDefNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE toothgriddef ADD SheetFieldDefNum number(20)";
                Db.nonQ(command);
                command = "UPDATE toothgriddef SET SheetFieldDefNum = 0 WHERE SheetFieldDefNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE toothgriddef MODIFY SheetFieldDefNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX toothgriddef_SheetFieldDefNum ON toothgriddef (SheetFieldDefNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('ElectronicRxDateStartedUsing131'," + DbHelper.now() + ")";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ElectronicRxDateStartedUsing131'," + DbHelper.now() + ")";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE rxpat ADD NewCropGuid varchar(40) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE rxpat ADD NewCropGuid varchar2(40)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE payment CHANGE PayNote PayNote TEXT NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE payment MODIFY (PayNote varchar2(4000) NOT NULL)";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '13.1.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_1_3();
    }

    /**
    * Oracle compatible: 02/23/2013
    */
    private static void to13_1_3() throws Exception {
        if (FromVersion < new Version("13.1.3.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('SpellCheckIsEnabled','1')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'SpellCheckIsEnabled','1')";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '13.1.3.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_1_14();
    }

    /**
    * Oracle compatible: 05/16/2013
    */
    private static void to13_1_14() throws Exception {
        if (FromVersion < new Version("13.1.14.0"))
        {
            String command = new String();
            command = "UPDATE preference SET ValueString = " + DbHelper.now() + " WHERE PrefName = 'ElectronicRxDateStartedUsing131'";
            Db.nonQ(command);
            command = "UPDATE preference SET ValueString = '13.1.14.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_1_19();
    }

    /**
    * Oracle compatible: 05/16/2013
    */
    private static void to13_1_19() throws Exception {
        if (FromVersion < new Version("13.1.19.0"))
        {
            String command = new String();
            try
            {
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE adjustment ADD INDEX (ProcNum)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX adjustment_ProcNum ON adjustment (ProcNum)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            //ex is needed, or exception won't get caught.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS wikilistheaderwidth";
                Db.nonQ(command);
                command = "CREATE TABLE wikilistheaderwidth (\r\n" + 
                "\t\t\t\t\t\tWikiListHeaderWidthNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tListName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tColName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tColWidth int NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                //WikiLists Not Supported in Oracle. but we're still adding this table here for consistency of the schema.  Also, we might turn on this feature for Oracle some day.
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE wikilistheaderwidth'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE wikilistheaderwidth (\r\n" + 
                "\t\t\t\t\t\tWikiListHeaderWidthNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tListName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tColName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tColWidth number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT wikilistheaderwidth_WikiListHe PRIMARY KEY (WikiListHeaderWidthNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "SELECT ProgramNum FROM program WHERE ProgName='eClinicalWorks'";
                int programNum = PIn.int(Db.getScalar(command));
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.Long(programNum) + "', " + "'MedicalPanelUrl', " + "'')";
                Db.nonQ(command);
            }
            else
            {
            } 
            //oracle
            //eCW will never use Oracle.
            command = "UPDATE preference SET ValueString = '13.1.19.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_1_32();
    }

    private static void to13_1_32() throws Exception {
        if (FromVersion < new Version("13.1.32.0"))
        {
            String command = new String();
            try
            {
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE medicationpat ADD INDEX (PatNum)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX medicationpat_PatNum ON medicationpat (PatNum)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            //ex is needed, or exception won't get caught.
            command = "UPDATE preference SET ValueString = '13.1.32.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_1_33();
    }

    private static void to13_1_33() throws Exception {
        if (FromVersion < new Version("13.1.33.0"))
        {
            String command = new String();
            boolean isNewCropEnabled = false;
            command = "SELECT ValueString FROM preference WHERE PrefName='NewCropAccountId'";
            if (!StringSupport.equals(Db.getScalar(command), ""))
            {
                isNewCropEnabled = true;
            }
             
            //Insert NewCrop Bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'NewCrop'," + "'NewCrop electronic Rx'," + "'" + POut.bool(isNewCropEnabled) + "'," + "''," + "''," + "'NewCrop only works for the United States and its territories, including Puerto Rico.  Disable if you are located elsewhere.')";
                //The enabled status of the NewCrop bridge is synchronous with the NewCropAccountId preference. If disabled later, then the NewCropAccountId will also be cleared.
                //No program path.
                //No command line, because not program path.
                Db.nonQ(command);
            }
            else
            {
                //No programproperties, because we only need the Enabled checkbox.
                //oracle
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "(SELECT MAX(ProgramNum)+1 FROM program)," + "'NewCrop'," + "'NewCrop electronic Rx'," + "'" + POut.bool(isNewCropEnabled) + "'," + "''," + "''," + "'NewCrop only works for the United States and its territories, including Puerto Rico.  Disable if you are located elsewhere.')";
                //The enabled status of the NewCrop bridge is synchronous with the NewCropAccountId preference. If disabled later, then the NewCropAccountId will also be cleared.
                //No program path.
                //No command line, because not program path.
                Db.nonQ(command);
            } 
            //No programproperties, because we only need the Enabled checkbox.
            //end NewCrop bridge
            command = "UPDATE preference SET ValueString = '13.1.33.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_1_38();
    }

    private static void to13_1_38() throws Exception {
        if (FromVersion < new Version("13.1.38.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('BillingElectSaveHistory','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'BillingElectSaveHistory','0')";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '13.1.38.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_2_1();
    }

    public static System.Version LatestVersion = new Version("14.2.0.0");
    //This value must be changed when a new conversion is to be triggered.
    /**
    * Oracle compatible: 07/11/2013
    */
    private static void to13_2_1() throws Exception {
        if (FromVersion < new Version("13.2.1.0"))
        {
            String command = new String();
            //Add TaskEdit permission to everyone------------------------------------------------------
            command = "SELECT DISTINCT UserGroupNum FROM grouppermission";
            DataTable table = Db.getTable(command);
            long groupNum = new long();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (UserGroupNum,PermType) " + "VALUES(" + POut.long(groupNum) + ",66)";
                    //POut.Int((int)Permissions.TaskEdit)
                    Db.nonQ(command);
                }
            }
            else
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //oracle
                    groupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
                    command = "INSERT INTO grouppermission (GroupPermNum,NewerDays,UserGroupNum,PermType) " + "VALUES((SELECT MAX(GroupPermNum)+1 FROM grouppermission),0," + POut.long(groupNum) + ",66)";
                    //POut.Int((int)Permissions.TaskEdit)
                    Db.nonQ(command);
                }
            } 
            //add WikiListSetup permissions for users that have security admin------------------------------------------------------
            command = "SELECT UserGroupNum FROM grouppermission WHERE PermType=24";
            //POut.Int((int)Permissions.SecurityAdmin)
            table = Db.getTable(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    groupNum = PIn.Long(table.Rows[i][0].ToString());
                    command = "INSERT INTO grouppermission (NewerDate,UserGroupNum,PermType) " + "VALUES('0001-01-01'," + POut.long(groupNum) + ",67)";
                    //POut.Int((int)Permissions.WikiListSetup);
                    Db.nonQ32(command);
                }
            }
            else
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //oracle
                    groupNum = PIn.Long(table.Rows[i][0].ToString());
                    command = "INSERT INTO grouppermission (GroupPermNum,NewerDays,NewerDate,UserGroupNum,PermType) " + "VALUES((SELECT MAX(GroupPermNum)+1 FROM grouppermission),0,TO_DATE('0001-01-01','YYYY-MM-DD')," + POut.long(groupNum) + ",67)";
                    //POut.Int((int)Permissions.WikiListSetup)
                    Db.nonQ32(command);
                }
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('PatientPortalURL','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'PatientPortalURL','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE procedurelog ADD BillingNote varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE procedurelog ADD BillingNote varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE procedurelog ADD RepeatChargeNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE procedurelog ADD INDEX (RepeatChargeNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE procedurelog ADD RepeatChargeNum number(20)";
                Db.nonQ(command);
                command = "UPDATE procedurelog SET RepeatChargeNum = 0 WHERE RepeatChargeNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE procedurelog MODIFY RepeatChargeNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX procedurelog_RepeatChargeNum ON procedurelog (RepeatChargeNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS reseller";
                Db.nonQ(command);
                command = "CREATE TABLE reseller (\r\n" + 
                "\t\t\t\t\t\tResellerNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUserName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tResellerPassword varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE reseller'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE reseller (\r\n" + 
                "\t\t\t\t\t\tResellerNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUserName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tResellerPassword varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT reseller_ResellerNum PRIMARY KEY (ResellerNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX reseller_PatNum ON reseller (PatNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS resellerservice";
                Db.nonQ(command);
                command = "CREATE TABLE resellerservice (\r\n" + 
                "\t\t\t\t\t\tResellerServiceNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tResellerNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFee double NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(ResellerNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(CodeNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE resellerservice'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE resellerservice (\r\n" + 
                "\t\t\t\t\t\tResellerServiceNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tResellerNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFee number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT resellerservice_ResellerServic PRIMARY KEY (ResellerServiceNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX resellerservice_ResellerNum ON resellerservice (ResellerNum)";
                Db.nonQ(command);
                command = "CREATE INDEX resellerservice_CodeNum ON resellerservice (CodeNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE registrationkey ADD IsResellerCustomer tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE registrationkey ADD IsResellerCustomer number(3)";
                Db.nonQ(command);
                command = "UPDATE registrationkey SET IsResellerCustomer = 0 WHERE IsResellerCustomer IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE registrationkey MODIFY IsResellerCustomer NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE repeatcharge ADD CopyNoteToProc tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE repeatcharge ADD CopyNoteToProc number(3)";
                Db.nonQ(command);
                command = "UPDATE repeatcharge SET CopyNoteToProc = 0 WHERE CopyNoteToProc IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE repeatcharge MODIFY CopyNoteToProc NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS xchargetransaction";
                Db.nonQ(command);
                command = "CREATE TABLE xchargetransaction (\r\n" + 
                "\t\t\t\t\t\tXChargeTransactionNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tTransType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAmount double NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCCEntry varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tResult varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tClerkID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tResultCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tExpiration varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCCType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCreditCardNum varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tBatchNum varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tItemNum varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tApprCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTransactionDateTime datetime NOT NULL DEFAULT \'0001-01-01 00:00:00\',\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(TransactionDateTime)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE xchargetransaction'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE xchargetransaction (\r\n" + 
                "\t\t\t\t\t\tXChargeTransactionNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTransType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tAmount number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCCEntry varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tResult varchar2(255),\r\n" + 
                "\t\t\t\t\t\tClerkID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tResultCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tExpiration varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCCType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCreditCardNum varchar2(255),\r\n" + 
                "\t\t\t\t\t\tBatchNum varchar2(255),\r\n" + 
                "\t\t\t\t\t\tItemNum varchar2(255),\r\n" + 
                "\t\t\t\t\t\tApprCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tTransactionDateTime date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT xchargetransaction_XChargeTran PRIMARY KEY (XChargeTransactionNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX xchargetransaction_PatNum ON xchargetransaction (PatNum)";
                Db.nonQ(command);
                command = "CREATE INDEX xchargetransaction_Transaction ON xchargetransaction (TransactionDateTime)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('CanadaODAMemberNumber','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'CanadaODAMemberNumber','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('CanadaODAMemberPass','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'CanadaODAMemberPass','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE patient ADD SmokingSnoMed varchar(32) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE patient ADD SmokingSnoMed varchar2(32)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE repeatcharge ADD CreatesClaim tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE repeatcharge ADD CreatesClaim number(3)";
                Db.nonQ(command);
                command = "UPDATE repeatcharge SET CreatesClaim = 0 WHERE CreatesClaim IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE repeatcharge MODIFY CreatesClaim NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE repeatcharge ADD IsEnabled tinyint NOT NULL";
                Db.nonQ(command);
                command = "UPDATE repeatcharge SET IsEnabled = 1";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE repeatcharge ADD IsEnabled number(3)";
                Db.nonQ(command);
                //command="UPDATE repeatcharge SET IsEnabled = 0 WHERE IsEnabled IS NULL";
                command = "UPDATE repeatcharge SET IsEnabled = 1 WHERE IsEnabled IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE repeatcharge MODIFY IsEnabled NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE rxalert ADD IsHighSignificance tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE rxalert ADD IsHighSignificance number(3)";
                Db.nonQ(command);
                command = "UPDATE rxalert SET IsHighSignificance = 0 WHERE IsHighSignificance IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE rxalert MODIFY IsHighSignificance NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('EhrRxAlertHighSeverity','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'EhrRxAlertHighSeverity','0')";
                Db.nonQ(command);
            } 
            //Oracle compatible
            command = "UPDATE patient SET SmokingSnoMed='449868002' WHERE SmokeStatus=5";
            //CurrentEveryDay
            Db.nonQ(command);
            command = "UPDATE patient SET SmokingSnoMed='428041000124106' WHERE SmokeStatus=4";
            //CurrentSomeDay
            Db.nonQ(command);
            command = "UPDATE patient SET SmokingSnoMed='8517006' WHERE SmokeStatus=3";
            //FormerSmoker
            Db.nonQ(command);
            command = "UPDATE patient SET SmokingSnoMed='266919005' WHERE SmokeStatus=2";
            //NeverSmoked
            Db.nonQ(command);
            command = "UPDATE patient SET SmokingSnoMed='77176002' WHERE SmokeStatus=1";
            //SmokerUnknownCurrent
            Db.nonQ(command);
            command = "UPDATE patient SET SmokingSnoMed='266927001' WHERE SmokeStatus=0";
            //UnknownIfEver
            Db.nonQ(command);
            command = "ALTER TABLE patient DROP COLUMN SmokeStatus";
            Db.nonQ(command);
            //Add ICD9Code to DiseaseDef and update eduresource and disease to use DiseaseDefNum instead of ICD9Num----------------------------------------------------
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE diseasedef ADD ICD9Code varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE diseasedef ADD ICD9Code varchar2(255)";
                Db.nonQ(command);
            } 
            //command="SELECT DISTINCT Description,ICD9Code,icd9.ICD9Num "
            //  +"FROM icd9,eduresource,disease,reminderrule "
            //  +"WHERE icd9.ICD9Num=eduresource.ICD9Num "
            //  +"OR icd9.ICD9Num=disease.ICD9Num "
            //  +"OR (ReminderCriterion=6 AND icd9.ICD9Num=CriterionFK)";//6=ICD9
            //table=Db.GetTable(command);
            List<String> listDescription = new List<String>();
            List<String> listICD9Code = new List<String>();
            List<long> listICD9Num = new List<long>();
            command = "SELECT DISTINCT icd9.Description,icd9.ICD9Code,icd9.ICD9Num " + "FROM icd9,eduresource " + "WHERE icd9.ICD9Num=eduresource.ICD9Num";
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                listDescription.Add(PIn.String(table.Rows[i]["Description"].ToString()));
                listICD9Code.Add(PIn.String(table.Rows[i]["ICD9Code"].ToString()));
                listICD9Num.Add(PIn.Long(table.Rows[i]["ICD9Num"].ToString()));
            }
            command = "SELECT DISTINCT Description,ICD9Code,icd9.ICD9Num " + "FROM icd9,disease " + "WHERE icd9.ICD9Num=disease.ICD9Num ";
            //6=ICD9
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                if (listICD9Num.Contains(PIn.Long(table.Rows[i]["ICD9Num"].ToString())))
                {
                    continue;
                }
                 
                listDescription.Add(PIn.String(table.Rows[i]["Description"].ToString()));
                listICD9Code.Add(PIn.String(table.Rows[i]["ICD9Code"].ToString()));
                listICD9Num.Add(PIn.Long(table.Rows[i]["ICD9Num"].ToString()));
            }
            command = "SELECT DISTINCT Description,ICD9Code,icd9.ICD9Num " + "FROM icd9,reminderrule " + "WHERE (ReminderCriterion=6 AND icd9.ICD9Num=CriterionFK)";
            //6=ICD9
            table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                if (listICD9Num.Contains(PIn.Long(table.Rows[i]["ICD9Num"].ToString())))
                {
                    continue;
                }
                 
                listDescription.Add(PIn.String(table.Rows[i]["Description"].ToString()));
                listICD9Code.Add(PIn.String(table.Rows[i]["ICD9Code"].ToString()));
                listICD9Num.Add(PIn.Long(table.Rows[i]["ICD9Num"].ToString()));
            }
            command = "SELECT MAX(ItemOrder) FROM diseasedef";
            int itemOrderCur = PIn.int(Db.getScalar(command));
            for (int i = 0;i < listICD9Num.Count;i++)
            {
                //for(int i=0;i<table.Rows.Count;i++) {
                //  itemOrderCur++;
                //  if(DataConnection.DBtype==DatabaseType.MySql) {
                //    command="INSERT INTO diseasedef(DiseaseName,ItemOrder,ICD9Code) VALUES('"
                //      +POut.String(table.Rows[i]["Description"].ToString())+"',"+POut.Int(itemOrderCur)+",'"+POut.String(table.Rows[i]["ICD9Code"].ToString())+"')";
                //  }
                //  else {//oracle
                //    command="INSERT INTO diseasedef(DiseaseDefNum,DiseaseName,ItemOrder,ICD9Code) VALUES((SELECT MAX(DiseaseDefNum)+1 FROM diseasedef),'"
                //      +POut.String(table.Rows[i]["Description"].ToString())+"',"+POut.Int(itemOrderCur)+",'"+POut.String(table.Rows[i]["ICD9Code"].ToString())+"')";
                //  }
                //  long defNum=Db.NonQ(command,true);
                //  command="UPDATE eduresource SET DiseaseDefNum="+POut.Long(defNum)+" WHERE ICD9Num="+table.Rows[i]["ICD9Num"].ToString();
                //  Db.NonQ(command);
                //  command="UPDATE disease SET DiseaseDefNum="+POut.Long(defNum)+" WHERE ICD9Num="+table.Rows[i]["ICD9Num"].ToString();
                //  Db.NonQ(command);
                //  command="UPDATE reminderrule SET CriterionFK="+POut.Long(defNum)+" WHERE CriterionFK="+table.Rows[i]["ICD9Num"].ToString()+" AND ReminderCriterion=6";
                //  Db.NonQ(command);
                //}
                itemOrderCur++;
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "INSERT INTO diseasedef(DiseaseName,ItemOrder,ICD9Code) VALUES('" + POut.String(listDescription[i]) + "'," + POut.int(itemOrderCur) + ",'" + POut.String(listICD9Code[i]) + "')";
                }
                else
                {
                    //oracle
                    command = "INSERT INTO diseasedef(DiseaseDefNum,DiseaseName,ItemOrder,ICD9Code) VALUES((SELECT MAX(DiseaseDefNum)+1 FROM diseasedef),'" + POut.String(listDescription[i]) + "'," + POut.int(itemOrderCur) + ",'" + POut.String(listICD9Code[i]) + "')";
                } 
                long defNum = Db.nonQ(command,true);
                command = "UPDATE eduresource SET DiseaseDefNum=" + POut.long(defNum) + " WHERE ICD9Num=" + POut.Long(listICD9Num[i]);
                Db.nonQ(command);
                command = "UPDATE disease SET DiseaseDefNum=" + POut.long(defNum) + " WHERE ICD9Num=" + POut.Long(listICD9Num[i]);
                Db.nonQ(command);
                command = "UPDATE reminderrule SET CriterionFK=" + POut.long(defNum) + " WHERE CriterionFK=" + POut.Long(listICD9Num[i]) + " AND ReminderCriterion=6";
                Db.nonQ(command);
            }
            command = "ALTER TABLE eduresource DROP COLUMN ICD9Num";
            Db.nonQ(command);
            command = "ALTER TABLE disease DROP COLUMN ICD9Num";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE diseasedef ADD SnomedCode varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE diseasedef ADD SnomedCode varchar2(255)";
                Db.nonQ(command);
            } 
            //Update reminderrule.ReminderCriterion - set ICD9 (6) to Problem (0)------------------------------------------------------------------------------------
            command = "UPDATE reminderrule SET ReminderCriterion=0 WHERE ReminderCriterion=6";
            Db.nonQ(command);
            //Update patientrace-------------------------------------------------------------------------------------------------------------------------------------
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('LanguagesIndicateNone','Declined to Specify')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'LanguagesIndicateNone','Declined to Specify')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS patientrace";
                Db.nonQ(command);
                command = "CREATE TABLE patientrace (\r\n" + 
                "\t\t\t\t\t\tPatientRaceNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRace tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE patientrace'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE patientrace (\r\n" + 
                "\t\t\t\t\t\tPatientRaceNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRace number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT patientrace_PatientRaceNum PRIMARY KEY (PatientRaceNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX patientrace_PatNum ON patientrace (PatNum)";
                Db.nonQ(command);
            } 
            //Create Custom Language "DeclinedToSpecify" ----------------------------------------------------------------------------------------------------------
            command = "SELECT ValueString FROM preference WHERE PrefName = 'LanguagesUsedByPatients'";
            String valueString = Db.getScalar(command);
            command = "UPDATE preference SET ValueString='" + (POut.string(valueString) + ",Declined to Specify").Trim(',') + "'" + " WHERE PrefName='LanguagesUsedByPatients'";
            //trim ,(comma) off
            Db.nonQ(command);
            //update Race and Ethnicity for EHR.---------------------------------------------------------------------------------------------------------------------
            //Get a list of patients that have a race set.
            command = "SELECT PatNum, Race FROM patient WHERE Race!=0";
            table = Db.getTable(command);
            String maxPkStr = "1";
            for (int i = 0;i < table.Rows.Count;i++)
            {
                //Used for Orcale.  Oracle has to insert the first row manually setting the PK to 1.
                String patNum = table.Rows[i]["PatNum"].ToString();
                OpenDentBusiness.PIn.APPLY __dummyScrutVar0 = PIn.Int(table.Rows[i]["Race"].ToString());
                //PatientRaceOld
                if (__dummyScrutVar0.equals(0))
                {
                    continue;
                }
                else //PatientRaceOld.Unknown
                //Do nothing.  No entry means "Unknown", the old default.
                if (__dummyScrutVar0.equals(1))
                {
                    //PatientRaceOld.Multiracial
                    if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                    {
                        command = "INSERT INTO patientrace (PatNum,Race) VALUES (" + patNum + ",7)";
                    }
                    else
                    {
                        //oracle
                        command = "INSERT INTO patientrace (PatientRaceNum,PatNum,Race) VALUES (" + maxPkStr + "," + patNum + ",7)";
                    } 
                }
                else if (__dummyScrutVar0.equals(2))
                {
                    //PatientRaceOld.HispanicLatino
                    if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                    {
                        command = "INSERT INTO patientrace (PatNum,Race) VALUES (" + patNum + ",9)";
                        Db.nonQ(command);
                        command = "INSERT INTO patientrace (PatNum,Race) VALUES (" + patNum + ",6)";
                    }
                    else
                    {
                        //oracle
                        command = "INSERT INTO patientrace (PatientRaceNum,PatNum,Race) VALUES (" + maxPkStr + "," + patNum + ",9)";
                        Db.nonQ(command);
                        command = "INSERT INTO patientrace (PatientRaceNum,PatNum,Race) VALUES ((SELECT MAX(PatientRaceNum+1) FROM patientrace)," + patNum + ",6)";
                    } 
                }
                else if (__dummyScrutVar0.equals(3))
                {
                    //PatientRaceOld.AfricanAmerican
                    if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                    {
                        command = "INSERT INTO patientrace (PatNum,Race) VALUES (" + patNum + ",1)";
                    }
                    else
                    {
                        //oracle
                        command = "INSERT INTO patientrace (PatientRaceNum,PatNum,Race) VALUES (" + maxPkStr + "," + patNum + ",1)";
                    } 
                }
                else if (__dummyScrutVar0.equals(4))
                {
                    //PatientRaceOld.White
                    if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                    {
                        command = "INSERT INTO patientrace (PatNum,Race) VALUES (" + patNum + ",9)";
                    }
                    else
                    {
                        //oracle
                        command = "INSERT INTO patientrace (PatientRaceNum,PatNum,Race) VALUES (" + maxPkStr + "," + patNum + ",9)";
                    } 
                }
                else if (__dummyScrutVar0.equals(5))
                {
                    //PatientRaceOld.HawaiiOrPacIsland
                    if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                    {
                        command = "INSERT INTO patientrace (PatNum,Race) VALUES (" + patNum + ",5)";
                    }
                    else
                    {
                        //oracle
                        command = "INSERT INTO patientrace (PatientRaceNum,PatNum,Race) VALUES (" + maxPkStr + "," + patNum + ",5)";
                    } 
                }
                else if (__dummyScrutVar0.equals(6))
                {
                    //PatientRaceOld.AmericanIndian
                    if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                    {
                        command = "INSERT INTO patientrace (PatNum,Race) VALUES (" + patNum + ",2)";
                    }
                    else
                    {
                        //oracle
                        command = "INSERT INTO patientrace (PatientRaceNum,PatNum,Race) VALUES (" + maxPkStr + "," + patNum + ",2)";
                    } 
                }
                else if (__dummyScrutVar0.equals(7))
                {
                    //PatientRaceOld.Asian
                    if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                    {
                        command = "INSERT INTO patientrace (PatNum,Race) VALUES (" + patNum + ",3)";
                    }
                    else
                    {
                        //oracle
                        command = "INSERT INTO patientrace (PatientRaceNum,PatNum,Race) VALUES (" + maxPkStr + "," + patNum + ",3)";
                    } 
                }
                else if (__dummyScrutVar0.equals(8))
                {
                    //PatientRaceOld.Other
                    if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                    {
                        command = "INSERT INTO patientrace (PatNum,Race) VALUES (" + patNum + ",8)";
                    }
                    else
                    {
                        //oracle
                        command = "INSERT INTO patientrace (PatientRaceNum,PatNum,Race) VALUES (" + maxPkStr + "," + patNum + ",8)";
                    } 
                }
                else if (__dummyScrutVar0.equals(9))
                {
                    //PatientRaceOld.Aboriginal
                    if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                    {
                        command = "INSERT INTO patientrace (PatNum,Race) VALUES (" + patNum + ",0)";
                    }
                    else
                    {
                        //oracle
                        command = "INSERT INTO patientrace (PatientRaceNum,PatNum,Race) VALUES (" + maxPkStr + "," + patNum + ",0)";
                    } 
                }
                else if (__dummyScrutVar0.equals(10))
                {
                    //PatientRaceOld.BlackHispanic
                    if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                    {
                        command = "INSERT INTO patientrace (PatNum,Race) VALUES (" + patNum + ",1)";
                        Db.nonQ(command);
                        command = "INSERT INTO patientrace (PatNum,Race) VALUES (" + patNum + ",6)";
                    }
                    else
                    {
                        //oracle
                        command = "INSERT INTO patientrace (PatientRaceNum,PatNum,Race) VALUES (" + maxPkStr + "," + patNum + ",1)";
                        Db.nonQ(command);
                        command = "INSERT INTO patientrace (PatientRaceNum,PatNum,Race) VALUES ((SELECT MAX(PatientRaceNum+1) FROM patientrace)," + patNum + ",6)";
                    } 
                }
                else
                {
                    continue;
                }           
                //should never happen, useful for debugging.
                //end switch
                Db.nonQ(command);
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle && StringSupport.equals(maxPkStr, "1"))
                {
                    //At least one row has been entered.  Set the pk string to the auto-increment SQL for Oracle.
                    maxPkStr = "(SELECT MAX(PatientRaceNum+1) FROM patientrace)";
                }
                 
            }
            //Apex clearinghouse.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO clearinghouse(Description,ExportPath,Payors,Eformat,ISA05,SenderTin,ISA07,ISA08,ISA15,Password,ResponsePath,CommBridge,ClientProgram,\r\n" + 
                "\t\t\t\t\t\tLastBatchNumber,ModemPort,LoginID,SenderName,SenderTelephone,GS03,ISA02,ISA04,ISA16,SeparatorData,SeparatorSegment) \r\n" + 
                "\t\t\t\t\t\tVALUES (\'Apex\',\'" + POut.string("C:\\ONETOUCH\\") + "','','5','ZZ','870578776','ZZ','99999','P','','','0','',0,0,'','Apex','8008409152','99999','','','','','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO clearinghouse(ClearinghouseNum,Description,ExportPath,Payors,Eformat,ISA05,SenderTin,ISA07,ISA08,ISA15,Password,ResponsePath,CommBridge,ClientProgram,\r\n" + 
                "\t\t\t\t\t\tLastBatchNumber,ModemPort,LoginID,SenderName,SenderTelephone,GS03,ISA02,ISA04,ISA16,SeparatorData,SeparatorSegment) \r\n" + 
                "\t\t\t\t\t\tVALUES ((SELECT MAX(ClearinghouseNum+1) FROM clearinghouse),\'Apex\',\'" + POut.string("C:\\ONETOUCH\\") + "','','5','ZZ','870578776','ZZ','99999','P','','','0','',0,0,'','Apex','8008409152','99999','','','','','')";
                Db.nonQ(command);
            } 
            //Insert Guru Bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'Guru', " + "'Guru from guru.waziweb.com', " + "'0', " + "''," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ(command);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Guru image path', " + "'C:\')";
                Db.nonQ(command);
                command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.long(programNum) + "', " + "'2', " + "'Guru')";
                //ToolBarsAvail.ChartModule
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "(SELECT MAX(ProgramNum)+1 FROM program)," + "'Guru', " + "'Guru from guru.waziweb.com/', " + "'0', " + "''," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum+1) FROM programproperty)," + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ(command);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum+1) FROM programproperty)," + "'" + POut.long(programNum) + "', " + "'Guru image path', " + "'C:\')";
                Db.nonQ(command);
                command = "INSERT INTO toolbutitem (ToolButItemNum,ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "(SELECT MAX(ToolButItemNum)+1 FROM toolbutitem)," + "'" + POut.long(programNum) + "', " + "'2', " + "'Guru')";
                //ToolBarsAvail.ChartModule
                Db.nonQ(command);
            } 
            //end Guru bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('NewCropPartnerName','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'NewCropPartnerName','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE emailaddress ADD SMTPserverIncoming varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE emailaddress ADD SMTPserverIncoming varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE emailaddress ADD ServerPortIncoming int NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE emailaddress ADD ServerPortIncoming number(11)";
                Db.nonQ(command);
                command = "UPDATE emailaddress SET ServerPortIncoming = 0 WHERE ServerPortIncoming IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE emailaddress MODIFY ServerPortIncoming NOT NULL";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '13.2.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_2_2();
    }

    /**
    * Oracle compatible: 07/11/2013
    */
    private static void to13_2_2() throws Exception {
        if (FromVersion < new Version("13.2.2.0"))
        {
            String command = new String();
            //Convert languages in the LanguagesUsedByPatients preference from ISO639-1 to ISO639-2 for languages which are not custom.
            command = "SELECT ValueString FROM preference WHERE PrefName='LanguagesUsedByPatients'";
            String strLanguageList = PIn.string(Db.getScalar(command));
            if (!StringSupport.equals(strLanguageList, ""))
            {
                StringBuilder sb = new StringBuilder();
                String[] lanstring = strLanguageList.Split(',');
                for (int i = 0;i < lanstring.Length;i++)
                {
                    if (StringSupport.equals(lanstring[i], ""))
                    {
                        continue;
                    }
                     
                    if (sb.Length > 0)
                    {
                        sb.Append(",");
                    }
                     
                    try
                    {
                        sb.Append(CultureInfo.GetCultureInfo(lanstring[i]).ThreeLetterISOLanguageName);
                    }
                    catch (Exception __dummyCatchVar0)
                    {
                        //custom language
                        sb.Append(lanstring[i]);
                    }
                
                }
                command = "UPDATE preference SET ValueString='" + POut.String(sb.ToString()) + "' WHERE PrefName='LanguagesUsedByPatients'";
                Db.nonQ(command);
            }
             
            //Convert languages in the patient.Langauge column from ISO639-1 to ISO639-2 for languages which are not custom.
            command = "SELECT PatNum,Language FROM patient WHERE Language<>'' AND Language IS NOT NULL";
            DataTable tablePatLanguages = Db.getTable(command);
            for (int i = 0;i < tablePatLanguages.Rows.Count;i++)
            {
                String lang = PIn.String(tablePatLanguages.Rows[i]["Language"].ToString());
                try
                {
                    lang = CultureInfo.GetCultureInfo(lang).ThreeLetterISOLanguageName;
                    long patNum = PIn.Long(tablePatLanguages.Rows[i]["PatNum"].ToString());
                    command = "UPDATE patient SET Language='" + POut.string(lang) + "' WHERE PatNum=" + POut.long(patNum);
                    Db.nonQ(command);
                }
                catch (Exception __dummyCatchVar1)
                {
                }
            
            }
            //Custom language
            //Do not modify.
            command = "UPDATE preference SET ValueString = '13.2.2.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_2_4();
    }

    private static void to13_2_4() throws Exception {
        if (FromVersion < new Version("13.2.4.0"))
        {
            //This fixes a bug in the conversion script above at lines 324 and 328
            String command = new String();
            command = "SELECT DiseaseDefNum,DiseaseName,ICD9Code,SnomedCode FROM diseasedef ORDER BY DiseaseDefNum ASC";
            DataTable table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                for (int j = i + 1;j < table.Rows.Count;j++)
                {
                    //compare each row (i)
                    //with every row below it
                    if (PIn.String(table.Rows[i]["DiseaseName"].ToString()) != PIn.String(table.Rows[j]["DiseaseName"].ToString()) || PIn.String(table.Rows[i]["ICD9Code"].ToString()) != PIn.String(table.Rows[j]["ICD9Code"].ToString()) || PIn.String(table.Rows[i]["SnomedCode"].ToString()) != PIn.String(table.Rows[j]["SnomedCode"].ToString()))
                    {
                        continue;
                    }
                     
                    //row i and row j are "identical".  Because DiseaseDefNum is ascending, we want to keep row j, not row i.
                    //Always use POut when entering data into the database. Jordan ok'd omitting it here for readability. Do not use this as an example.
                    //The queries below will probably not make any changes.  Just if they used this part of the program heavily after the
                    command = "UPDATE eduresource SET DiseaseDefNum=" + table.Rows[j]["DiseaseDefNum"].ToString() + " WHERE DiseaseDefNum=" + table.Rows[i]["DiseaseDefNum"].ToString();
                    Db.nonQ(command);
                    command = "UPDATE disease SET DiseaseDefNum=" + table.Rows[j]["DiseaseDefNum"].ToString() + " WHERE DiseaseDefNum=" + table.Rows[i]["DiseaseDefNum"].ToString();
                    Db.nonQ(command);
                    command = "UPDATE reminderrule SET CriterionFK=" + table.Rows[j]["DiseaseDefNum"].ToString() + " WHERE CriterionFK=" + table.Rows[i]["DiseaseDefNum"].ToString() + " AND ReminderCriterion=6";
                    Db.nonQ(command);
                    command = "DELETE FROM diseasedef WHERE DiseaseDefNum=" + table.Rows[i]["DiseaseDefNum"].ToString();
                    Db.nonQ(command);
                }
            }
            command = "UPDATE preference SET ValueString = '13.2.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_2_7();
    }

    private static void to13_2_7() throws Exception {
        if (FromVersion < new Version("13.2.7.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE patient ADD Country varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE patient ADD Country varchar2(255)";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '13.2.7.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_2_16();
    }

    private static void to13_2_16() throws Exception {
        if (FromVersion < new Version("13.2.16.0"))
        {
            String command = new String();
            //Get the 1500 claim form primary key. The unique ID is OD9.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD9' LIMIT 1";
            }
            else
            {
                //oracle doesn't have LIMIT
                command = "SELECT * FROM (SELECT ClaimFormNum FROM claimform WHERE UniqueID='OD9') WHERE RowNum<=1";
            } 
            DataTable tableClaimFormNum = Db.getTable(command);
            if (tableClaimFormNum.Rows.Count > 0)
            {
                //The claim form should exist, but might not if foreign.
                long claimFormNum = PIn.long(Db.getScalar(command));
                //Change the form facility address from the pay to address to the treating address.  The pay to address still shows under the billing section of the 1500 claim form.
                command = "UPDATE claimformitem SET FieldName='TreatingDentistAddress' WHERE claimformnum=" + POut.long(claimFormNum) + " AND FieldName='PayToDentistAddress' AND XPos<400";
                Db.nonQ(command);
                command = "UPDATE claimformitem SET FieldName='TreatingDentistCity' WHERE claimformnum=" + POut.long(claimFormNum) + " AND FieldName='PayToDentistCity' AND XPos<470";
                Db.nonQ(command);
                command = "UPDATE claimformitem SET FieldName='TreatingDentistST' WHERE claimformnum=" + POut.long(claimFormNum) + " AND FieldName='PayToDentistST' AND XPos<500";
                Db.nonQ(command);
                command = "UPDATE claimformitem SET FieldName='TreatingDentistZip' WHERE claimformnum=" + POut.long(claimFormNum) + " AND FieldName='PayToDentistZip' AND XPos<520";
                Db.nonQ(command);
            }
             
            command = "UPDATE preference SET ValueString = '13.2.16.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_2_22();
    }

    private static void to13_2_22() throws Exception {
        if (FromVersion < new Version("13.2.22.0"))
        {
            String command = new String();
            //Moving codes to the Obsolete category that were deleted in CDT 2014.
            if (CultureInfo.CurrentCulture.Name.EndsWith("US"))
            {
                //United States
                //Move depricated codes to the Obsolete procedure code category.
                //Make sure the procedure code category exists before moving the procedure codes.
                String procCatDescript = "Obsolete";
                long defNum = 0;
                command = "SELECT DefNum FROM definition WHERE Category=11 AND ItemName='" + POut.string(procCatDescript) + "'";
                //11 is DefCat.ProcCodeCats
                DataTable dtDef = Db.getTable(command);
                if (dtDef.Rows.Count == 0)
                {
                    //The procedure code category does not exist, add it
                    if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                    {
                        command = "INSERT INTO definition (Category,ItemName,ItemOrder) " + "VALUES (11" + ",'" + POut.string(procCatDescript) + "'," + POut.Long(DefC.getLong()[11].Length) + ")";
                    }
                    else
                    {
                        //11 is DefCat.ProcCodeCats
                        //oracle
                        command = "INSERT INTO definition (DefNum,Category,ItemName,ItemOrder) " + "VALUES ((SELECT MAX(DefNum)+1 FROM definition),11,'" + POut.string(procCatDescript) + "'," + POut.Long(DefC.getLong()[11].Length) + ")";
                    } 
                    //11 is DefCat.ProcCodeCats
                    defNum = Db.nonQ(command,true);
                }
                else
                {
                    //The procedure code category already exists, get the existing defnum
                    defNum = PIn.Long(dtDef.Rows[0]["DefNum"].ToString());
                } 
                String[] cdtCodesDeleted = new String[]{ "D0363", "D3354", "D5860", "D5861" };
                for (int i = 0;i < cdtCodesDeleted.Length;i++)
                {
                    String procCode = cdtCodesDeleted[i];
                    command = "SELECT CodeNum FROM procedurecode WHERE ProcCode='" + POut.string(procCode) + "'";
                    DataTable dtProcCode = Db.getTable(command);
                    if (dtProcCode.Rows.Count == 0)
                    {
                        continue;
                    }
                     
                    //The procedure code does not exist in this database.
                    //Do not try to move it.
                    long codeNum = PIn.Long(dtProcCode.Rows[0]["CodeNum"].ToString());
                    command = "UPDATE procedurecode SET ProcCat=" + POut.long(defNum) + " WHERE CodeNum=" + POut.long(codeNum);
                    Db.nonQ(command);
                }
            }
             
            //end United States update
            command = "UPDATE preference SET ValueString = '13.2.22.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_2_27();
    }

    private static void to13_2_27() throws Exception {
        if (FromVersion < new Version("13.2.27.0"))
        {
            String command = new String();
            //Insert DentalStudio Bridge
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO program (ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "'DentalStudio', " + "'DentalStudio from www.villasm.com', " + "'0', " + "'" + POut.string("C:\\Program Files (x86)\\DentalStudioPlus\\AutoStartup.exe") + "'," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ(command);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'UserName (clear to use OD username)', " + "'Admin')";
                Db.nonQ(command);
                command = "INSERT INTO programproperty (ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "'" + POut.long(programNum) + "', " + "'UserPassword', " + "'12345678')";
                Db.nonQ(command);
                command = "INSERT INTO toolbutitem (ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'DentalStudio')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO program (ProgramNum,ProgName,ProgDesc,Enabled,Path,CommandLine,Note" + ") VALUES(" + "(SELECT MAX(ProgramNum)+1 FROM program)," + "'DentalStudio', " + "'DentalStudio from www.villasm.com', " + "'0', " + "'" + POut.string("C:\\Program Files (x86)\\DentalStudioPlus\\AutoStartup.exe") + "'," + "'', " + "'')";
                long programNum = Db.nonQ(command,true);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum+1) FROM programproperty)," + "'" + POut.long(programNum) + "', " + "'Enter 0 to use PatientNum, or 1 to use ChartNum', " + "'0')";
                Db.nonQ(command);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum+1) FROM programproperty)," + "'" + POut.long(programNum) + "', " + "'UserName (clear to use OD username)', " + "'Admin')";
                Db.nonQ(command);
                command = "INSERT INTO programproperty (ProgramPropertyNum,ProgramNum,PropertyDesc,PropertyValue" + ") VALUES(" + "(SELECT MAX(ProgramPropertyNum+1) FROM programproperty)," + "'" + POut.long(programNum) + "', " + "'UserPassword', " + "'12345678')";
                Db.nonQ(command);
                command = "INSERT INTO toolbutitem (ToolButItemNum,ProgramNum,ToolBar,ButtonText) " + "VALUES (" + "(SELECT MAX(ToolButItemNum)+1 FROM toolbutitem)," + "'" + POut.long(programNum) + "', " + "'" + POut.int((((Enum)ToolBarsAvail.ChartModule).ordinal())) + "', " + "'DentalStudio')";
                Db.nonQ(command);
            } 
            //end DentalStudio bridge
            command = "UPDATE preference SET ValueString = '13.2.27.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_3_1();
    }

    private static void to13_3_1() throws Exception {
        if (FromVersion < new Version("13.3.1.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('EmailInboxComputerName','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'EmailInboxComputerName','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('EmailInboxCheckInterval','5')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'EmailInboxCheckInterval','5')";
                Db.nonQ(command);
            } 
            //Add Family Health table for EHR A.13 (Family Health History)
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS familyhealth";
                Db.nonQ(command);
                command = "CREATE TABLE familyhealth (\r\n" + 
                "\t\t\t\t\t\tFamilyHealthNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRelationship tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDiseaseDefNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPersonName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(DiseaseDefNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE familyhealth'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE familyhealth (\r\n" + 
                "\t\t\t\t\t\tFamilyHealthNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRelationship number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDiseaseDefNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPersonName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT familyhealth_FamilyHealthNum PRIMARY KEY (FamilyHealthNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX familyhealth_PatNum ON familyhealth (PatNum)";
                Db.nonQ(command);
                command = "CREATE INDEX familyhealth_DiseaseDefNum ON familyhealth (DiseaseDefNum)";
                Db.nonQ(command);
            } 
            //Add securityloghash table for EHR D.2
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS securityloghash";
                Db.nonQ(command);
                command = "CREATE TABLE securityloghash (\r\n" + 
                "\t\t\t\t\t\tSecurityLogHashNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tSecurityLogNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLogHash varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(SecurityLogNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE securityloghash'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE securityloghash (\r\n" + 
                "\t\t\t\t\t\tSecurityLogHashNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSecurityLogNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLogHash varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT securityloghash_SecurityLogHas PRIMARY KEY (SecurityLogHashNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX securityloghash_SecurityLogNum ON securityloghash (SecurityLogNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE emailmessage CHANGE BodyText BodyText LONGTEXT NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                //Changing a column's datatype from VARCHAR2 to clob yields the following error in oracle:  ORA-22858: invalid alteration of datatype
                //The easiest way to get change the datatype from VARCHAR2 to clob is to create a temp column then rename it.
                command = "ALTER TABLE emailmessage ADD (BodyTextClob clob NOT NULL)";
                Db.nonQ(command);
                command = "UPDATE emailmessage SET BodyTextClob=BodyText";
                Db.nonQ(command);
                command = "ALTER TABLE emailmessage DROP COLUMN BodyText";
                Db.nonQ(command);
                command = "ALTER TABLE emailmessage RENAME COLUMN BodyTextClob TO BodyText";
                Db.nonQ(command);
            } 
            //Electronic Dental Services (EDS) clearinghouse.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO clearinghouse(Description,ExportPath,Payors,Eformat,ISA05,SenderTin,ISA07,ISA08,ISA15,Password,ResponsePath,CommBridge,\r\n" + 
                "\t\t\t\t\tClientProgram,LastBatchNumber,ModemPort,LoginID,SenderName,SenderTelephone,GS03,ISA02,ISA04,ISA16,SeparatorData,SeparatorSegment) \r\n" + 
                "\t\t\t\t\tVALUES (\'Electronic Dental Services\',\'" + POut.string("C:\\EDS\\Claims\\In\\") + "','','1','ZZ','','ZZ','EDS','P','','','0','" + POut.string("C:\\Program Files\\EDS\\edsbridge.exe") + "',0,0,'','','','EDS','','','','','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO clearinghouse (ClearinghouseNum,Description,ExportPath,Payors,Eformat,ISA05,SenderTin,ISA07,ISA08,ISA15,Password,ResponsePath,CommBridge,ClientProgram,\r\n" + 
                "\t\t\t\t\tLastBatchNumber,ModemPort,LoginID,SenderName,SenderTelephone,GS03,ISA02,ISA04,ISA16,SeparatorData,SeparatorSegment) \r\n" + 
                "\t\t\t\t\tVALUES ((SELECT MAX(ClearinghouseNum+1) FROM clearinghouse),\'Electronic Dental Services\',\'" + POut.string("C:\\EDS\\Claims\\In\\") + "','','1','ZZ','','ZZ','EDS','P','','','0','" + POut.string("C:\\Program Files\\EDS\\edsbridge.exe") + "',0,0,'','','','EDS','','','','','')";
                Db.nonQ(command);
            } 
            //codesystem
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS codesystem";
                Db.nonQ(command);
                command = "CREATE TABLE codesystem (\r\n" + 
                "\t\t\t\t\t\tCodeSystemNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tCodeSystemName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tVersionCur varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tVersionAvail varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHL7OID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(CodeSystemName)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE codesystem'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE codesystem (\r\n" + 
                "\t\t\t\t\t\tCodeSystemNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeSystemName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tVersionCur varchar2(255),\r\n" + 
                "\t\t\t\t\t\tVersionAvail varchar2(255),\r\n" + 
                "\t\t\t\t\t\tHL7OID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tNote varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT codesystem_CodeSystemNum PRIMARY KEY (CodeSystemNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX codesystem_CodeSystemName ON codesystem (CodeSystemName)";
                Db.nonQ(command);
            } 
            //No need for mysql/oracle split
            command = "INSERT INTO codesystem (CodeSystemNum,CodeSystemName,HL7OID,VersionAvail,VersionCur,Note) VALUES (1,\'AdministrativeSex\',\'2.16.840.1.113883.18.2\',\'HL7v2.5\',\'HL7v2.5\',\'\')";
            Db.nonQ(command);
            command = "INSERT INTO codesystem (CodeSystemNum,CodeSystemName,HL7OID) VALUES (2,\'CDCREC\',\'2.16.840.1.113883.6.238\')";
            Db.nonQ(command);
            command = "INSERT INTO codesystem (CodeSystemNum,CodeSystemName,HL7OID) VALUES (3,\'CDT\',\'2.16.840.1.113883.6.13\')";
            Db.nonQ(command);
            command = "INSERT INTO codesystem (CodeSystemNum,CodeSystemName,HL7OID) VALUES (4,\'CPT\',\'2.16.840.1.113883.6.12\')";
            Db.nonQ(command);
            command = "INSERT INTO codesystem (CodeSystemNum,CodeSystemName,HL7OID) VALUES (5,\'CVX\',\'2.16.840.1.113883.12.292\')";
            Db.nonQ(command);
            command = "INSERT INTO codesystem (CodeSystemNum,CodeSystemName,HL7OID) VALUES (6,\'HCPCS\',\'2.16.840.1.113883.6.285\')";
            Db.nonQ(command);
            command = "INSERT INTO codesystem (CodeSystemNum,CodeSystemName,HL7OID) VALUES (7,\'ICD10CM\',\'2.16.840.1.113883.6.90\')";
            Db.nonQ(command);
            command = "INSERT INTO codesystem (CodeSystemNum,CodeSystemName,HL7OID) VALUES (8,\'ICD9CM\',\'2.16.840.1.113883.6.103\')";
            Db.nonQ(command);
            command = "INSERT INTO codesystem (CodeSystemNum,CodeSystemName,HL7OID) VALUES (9,\'LOINC\',\'2.16.840.1.113883.6.1\')";
            Db.nonQ(command);
            command = "INSERT INTO codesystem (CodeSystemNum,CodeSystemName,HL7OID) VALUES (10,\'RXNORM\',\'2.16.840.1.113883.6.88\')";
            Db.nonQ(command);
            command = "INSERT INTO codesystem (CodeSystemNum,CodeSystemName,HL7OID) VALUES (11,\'SNOMEDCT\',\'2.16.840.1.113883.6.96\')";
            Db.nonQ(command);
            command = "INSERT INTO codesystem (CodeSystemNum,CodeSystemName,HL7OID) VALUES (12,\'SOP\',\'2.16.840.1.113883.3.221.5\')";
            Db.nonQ(command);
            //CDCREC (CDC Race and Ethnicity)-------------------------------------------------------------------------------------------------------------------------
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS cdcrec";
                Db.nonQ(command);
                command = "CREATE TABLE cdcrec (\r\n" + 
                "\t\t\t\t\t\tCdcrecNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tCdcrecCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHeirarchicalCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(CdcrecCode)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE cdcrec'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE cdcrec (\r\n" + 
                "\t\t\t\t\t\tCdcrecNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCdcrecCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tHeirarchicalCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tDescription varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT cdcrec_CdcrecNum PRIMARY KEY (CdcrecNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX cdcrec_CdcrecCode ON cdcrec (CdcrecCode)";
                Db.nonQ(command);
            } 
            //CDT ----------------------------------------------------------------------------------------------------------------------------------------------------
            //Not neccesary, stored in ProcCode table
            //CPT (Current Procedure Terminology)---------------------------------------------------------------------------------------------------------------------
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS cpt";
                Db.nonQ(command);
                command = "CREATE TABLE cpt (\r\n" + 
                "\t\t\t\t\t\tCptNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tCptCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(4000) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(CptCode)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE cpt'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE cpt (\r\n" + 
                "\t\t\t\t\t\tCptNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCptCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tDescription varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT cpt_CptNum PRIMARY KEY (CptNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX cpt_CptCode ON cpt (CptCode)";
                Db.nonQ(command);
            } 
            //CVX (Vaccine Administered)------------------------------------------------------------------------------------------------------------------------------
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS cvx";
                Db.nonQ(command);
                command = "CREATE TABLE cvx (\r\n" + 
                "\t\t\t\t\t\tCvxNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tCvxCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsActive varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(CvxCode)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE cvx'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE cvx (\r\n" + 
                "\t\t\t\t\t\tCvxNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCvxCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tDescription varchar2(255),\r\n" + 
                "\t\t\t\t\t\tIsActive varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT cvx_CvxNum PRIMARY KEY (CvxNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX cvx_CvxCode ON cvx (CvxCode)";
                Db.nonQ(command);
            } 
            //HCPCS (Healhtcare Common Procedure Coding System)-------------------------------------------------------------------------------------------------------
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS hcpcs";
                Db.nonQ(command);
                command = "CREATE TABLE hcpcs (\r\n" + 
                "\t\t\t\t\t\tHcpcsNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tHcpcsCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescriptionShort varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(HcpcsCode)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE hcpcs'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE hcpcs (\r\n" + 
                "\t\t\t\t\t\tHcpcsNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHcpcsCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tDescriptionShort varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT hcpcs_HcpcsNum PRIMARY KEY (HcpcsNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX hcpcs_HcpcsCode ON hcpcs (HcpcsCode)";
                Db.nonQ(command);
            } 
            //ICD10CM International Classification of Diseases, 10th Revision, Clinical Modification------------------------------------------------------------------
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS icd10";
                Db.nonQ(command);
                command = "CREATE TABLE icd10 (\r\n" + 
                "\t\t\t\t\t\tIcd10Num bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tIcd10Code varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(Icd10Code)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE icd10'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE icd10 (\r\n" + 
                "\t\t\t\t\t\tIcd10Num number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIcd10Code varchar2(255),\r\n" + 
                "\t\t\t\t\t\tDescription varchar2(255),\r\n" + 
                "\t\t\t\t\t\tIsCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT icd10_Icd10Num PRIMARY KEY (Icd10Num)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX icd10_Icd10Code ON icd10 (Icd10Code)";
                Db.nonQ(command);
            } 
            //ICD9CM International Classification of Diseases, 9th Revision, Clinical Modification--------------------------------------------------------------------
            //Already Exists.
            //LOINC (Logical Observation Identifier Names and Codes)--------------------------------------------------------------------------------------------------
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS loinc";
                Db.nonQ(command);
                command = "CREATE TABLE loinc (\r\n" + 
                "\t\t\t\t\t\tLoincNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tLoincCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tComponent varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPropertyObserved varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTimeAspct varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSystemMeasured varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tScaleType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMethodType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tStatusOfCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNameShort varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tClassType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitsRequired tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderObs varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHL7FieldSubfieldID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tExternalCopyrightNotice text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNameLongCommon varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitsUCUM varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRankCommonTests int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRankCommonOrders int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(LoincCode)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE loinc'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE loinc (\r\n" + 
                "\t\t\t\t\t\tLoincNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLoincCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tComponent varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPropertyObserved varchar2(255),\r\n" + 
                "\t\t\t\t\t\tTimeAspct varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSystemMeasured varchar2(255),\r\n" + 
                "\t\t\t\t\t\tScaleType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMethodType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tStatusOfCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tNameShort varchar2(255),\r\n" + 
                "\t\t\t\t\t\tClassType varchar2(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitsRequired number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderObs varchar2(255),\r\n" + 
                "\t\t\t\t\t\tHL7FieldSubfieldID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tExternalCopyrightNotice varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tNameLongCommon varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUnitsUCUM varchar2(255),\r\n" + 
                "\t\t\t\t\t\tRankCommonTests number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRankCommonOrders number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT loinc_LoincNum PRIMARY KEY (LoincNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX loinc_LoincCode ON loinc (LoincCode)";
                Db.nonQ(command);
            } 
            //RXNORM--------------------------------------------------------------------------------------------------------------------------------------------------
            //Already Exists.
            //SNOMEDCT (Systematic Nomencalture of Medicine Clinical Terms)-------------------------------------------------------------------------------------------
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS snomed";
                Db.nonQ(command);
                command = "CREATE TABLE snomed (\r\n" + 
                "\t\t\t\t\t\tSnomedNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tSnomedCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(SnomedCode)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE snomed'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE snomed (\r\n" + 
                "\t\t\t\t\t\tSnomedNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSnomedCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tDescription varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT snomed_SnomedNum PRIMARY KEY (SnomedNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX snomed_SnomedCode ON snomed (SnomedCode)";
                Db.nonQ(command);
            } 
            //SOP (Source of Payment Typology)------------------------------------------------------------------------------------------------------------------------
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS sop";
                Db.nonQ(command);
                command = "CREATE TABLE sop (\r\n" + 
                "\t\t\t\t\t\tSopNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tSopCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(SopCode)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE sop'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE sop (\r\n" + 
                "\t\t\t\t\t\tSopNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSopCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tDescription varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT sop_SopNum PRIMARY KEY (SopNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX sop_SopCode ON sop (SopCode)";
                Db.nonQ(command);
            } 
            //Rename emailaddress.SMTPserverIncoming to emailaddress.Pop3ServerIncoming, but leave data type alone. CRUD generator cannot write this query. See pattern for convert database.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE emailaddress CHANGE SMTPserverIncoming Pop3ServerIncoming varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE emailaddress RENAME COLUMN SMTPserverIncoming TO Pop3ServerIncoming";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE medicationpat ADD MedDescript varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE medicationpat ADD MedDescript varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE medicationpat ADD RxCui bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE medicationpat ADD INDEX (RxCui)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE medicationpat ADD RxCui number(20)";
                Db.nonQ(command);
                command = "UPDATE medicationpat SET RxCui = 0 WHERE RxCui IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE medicationpat MODIFY RxCui NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX medicationpat_RxCui ON medicationpat (RxCui)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "UPDATE medicationpat,medication SET medicationpat.RxCui=medication.RxCui WHERE medicationpat.MedicationNum=medication.MedicationNum";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "UPDATE medicationpat SET medicationpat.RxCui=(SELECT medication.RxCui FROM medication WHERE medication.MedicationNum=medicationpat.MedicationNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE medicationpat ADD NewCropGuid varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE medicationpat ADD NewCropGuid varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE medicationpat ADD IsCpoe tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE medicationpat ADD IsCpoe number(3)";
                Db.nonQ(command);
                command = "UPDATE medicationpat SET IsCpoe = 0 WHERE IsCpoe IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE medicationpat MODIFY IsCpoe NOT NULL";
                Db.nonQ(command);
            } 
            //oracle compatible
            command = "UPDATE medicationpat SET IsCpoe=1 " + "WHERE PatNote!='' AND DateStart > " + POut.date((new DateTime(1880, 1, 1)));
            Db.nonQ(command);
            //Add additional EHR Measures to DB
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(16,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(17,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(18,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(19,-1,-1)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),16,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),17,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),18,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),19,-1,-1)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('MeaningfulUseTwo','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'MeaningfulUseTwo','0')";
                Db.nonQ(command);
            } 
            //Time Card Overhaul for differential pay----------------------------------------------------------------------------------------------------------------
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE clockevent ADD Rate2Hours time NOT NULL";
                Db.nonQ(command);
                command = "UPDATE clockevent SET rate2hours='-01:00:00'";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE clockevent ADD Rate2Hours varchar2(255)";
                Db.nonQ(command);
                command = "UPDATE clockevent SET rate2hours='-01:00:00'";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE clockevent ADD Rate2Auto time NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE clockevent ADD Rate2Auto varchar2(255)";
                Db.nonQ(command);
            } 
            command = "ALTER TABLE timecardrule DROP COLUMN AmtDiff";
            Db.nonQ(command);
            command = "ALTER TABLE clockevent DROP COLUMN AmountBonus";
            Db.nonQ(command);
            command = "ALTER TABLE clockevent DROP COLUMN AmountBonusAuto";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehramendment";
                Db.nonQ(command);
                command = "CREATE TABLE ehramendment (\r\n" + 
                "\t\t\t\t\t\tEhrAmendmentNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsAccepted tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSource tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSourceName text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFileName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRawBase64 longtext NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTRequest datetime NOT NULL DEFAULT \'0001-01-01 00:00:00\',\r\n" + 
                "\t\t\t\t\t\tDateTAcceptDeny datetime NOT NULL DEFAULT \'0001-01-01 00:00:00\',\r\n" + 
                "\t\t\t\t\t\tDateTAppend datetime NOT NULL DEFAULT \'0001-01-01 00:00:00\',\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehramendment'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehramendment (\r\n" + 
                "\t\t\t\t\t\tEhrAmendmentNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsAccepted number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar2(2000),\r\n" + 
                "\t\t\t\t\t\tSource number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSourceName varchar2(2000),\r\n" + 
                "\t\t\t\t\t\tFileName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tRawBase64 clob,\r\n" + 
                "\t\t\t\t\t\tDateTRequest date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTAcceptDeny date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTAppend date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehramendment_EhrAmendmentNum PRIMARY KEY (EhrAmendmentNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehramendment_PatNum ON ehramendment (PatNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE popup ADD UserNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE popup ADD INDEX (UserNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE popup ADD UserNum number(20)";
                Db.nonQ(command);
                command = "UPDATE popup SET UserNum = 0 WHERE UserNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE popup MODIFY UserNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX popup_UserNum ON popup (UserNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE popup ADD DateTimeEntry datetime NOT NULL";
                Db.nonQ(command);
                command = "UPDATE popup SET DateTimeEntry='0001-01-01 00:00:00'";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE popup ADD DateTimeEntry date";
                Db.nonQ(command);
                command = "UPDATE popup SET DateTimeEntry = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE DateTimeEntry IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE popup MODIFY DateTimeEntry NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE popup ADD IsArchived tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE popup ADD IsArchived number(3)";
                Db.nonQ(command);
                command = "UPDATE popup SET IsArchived = 0 WHERE IsArchived IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE popup MODIFY IsArchived NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE popup ADD PopupNumArchive bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE popup ADD INDEX (PopupNumArchive)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE popup ADD PopupNumArchive number(20)";
                Db.nonQ(command);
                command = "UPDATE popup SET PopupNumArchive = 0 WHERE PopupNumArchive IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE popup MODIFY PopupNumArchive NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX popup_PopupNumArchive ON popup (PopupNumArchive)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE patientrace ADD CdcrecCode varchar(255) NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE patientrace ADD INDEX (CdcrecCode)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE patientrace ADD CdcrecCode varchar2(255)";
                Db.nonQ(command);
                command = "UPDATE patientrace SET CdcrecCode = '' WHERE CdcrecCode IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE patientrace MODIFY CdcrecCode NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX patientrace_CdcrecCode ON patientrace (CdcrecCode)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vitalsign ADD WeightCode varchar(255) NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vitalsign ADD INDEX (WeightCode)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vitalsign ADD WeightCode varchar2(255)";
                Db.nonQ(command);
                command = "CREATE INDEX vitalsign_WeightCode ON vitalsign (WeightCode)";
                Db.nonQ(command);
            } 
            try
            {
                //Add indexes for code systems------------------------------------------------------------------------------------------------------
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE diseasedef ADD INDEX (Icd9Code)";
                    Db.nonQ(command);
                    command = "ALTER TABLE diseasedef ADD INDEX (SnomedCode)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX diseasedef_Icd9Code ON diseasedef (Icd9Code)";
                    Db.nonQ(command);
                    command = "CREATE INDEX diseasedef_SnomedCode ON diseasedef (SnomedCode)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            try
            {
                //Only an index. (Exception ex) required to catch thrown exception
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE icd9 ADD INDEX (Icd9Code)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX icd9_Icd9Code ON icd9 (Icd9Code)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            try
            {
                //Only an index. (Exception ex) required to catch thrown exception
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE rxnorm ADD INDEX (RxCui)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX rxnorm_RxCui ON rxnorm (RxCui)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            //Only an index. (Exception ex) required to catch thrown exception
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE insplan ADD SopCode varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE insplan ADD SopCode varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS payortype";
                Db.nonQ(command);
                command = "CREATE TABLE payortype (\r\n" + 
                "\t\t\t\t\t\tPayorTypeNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateStart date NOT NULL DEFAULT \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tSopCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(SopCode)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE payortype'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE payortype (\r\n" + 
                "\t\t\t\t\t\tPayorTypeNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateStart date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSopCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tNote varchar2(2000),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT payortype_PayorTypeNum PRIMARY KEY (PayorTypeNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX payortype_PatNum ON payortype (PatNum)";
                Db.nonQ(command);
                command = "CREATE INDEX payortype_SopCode ON payortype (SopCode)";
                Db.nonQ(command);
            } 
            //oracle compatible
            command = "UPDATE patientrace SET CdcrecCode='2054-5' WHERE Race=1";
            //AfricanAmerican
            Db.nonQ(command);
            command = "UPDATE patientrace SET CdcrecCode='1002-5' WHERE Race=2";
            //AmericanIndian
            Db.nonQ(command);
            command = "UPDATE patientrace SET CdcrecCode='2028-9' WHERE Race=3";
            //Asian
            Db.nonQ(command);
            command = "UPDATE patientrace SET CdcrecCode='2076-8' WHERE Race=5";
            //HawaiiOrPacIsland
            Db.nonQ(command);
            command = "UPDATE patientrace SET CdcrecCode='2135-2' WHERE Race=6";
            //Hispanic
            Db.nonQ(command);
            command = "UPDATE patientrace SET CdcrecCode='2131-1' WHERE Race=8";
            //Other
            Db.nonQ(command);
            command = "UPDATE patientrace SET CdcrecCode='2106-3' WHERE Race=9";
            //White
            Db.nonQ(command);
            command = "UPDATE patientrace SET CdcrecCode='2186-5' WHERE Race=10";
            //NotHispanic
            Db.nonQ(command);
            //oracle compatible
            //We will insert another patientrace row specifying 'NotHispanic' if there is not a Hispanic entry or a DeclinedToSpecify entry but there is at least one other patientrace entry.  The absence of ethnicity was assumed NotHispanic in the past, now we are going to explicitly store that value.  enum=10, CdcrecCode='2186-5'
            command = "SELECT DISTINCT PatNum FROM patientrace WHERE PatNum NOT IN(SELECT PatNum FROM patientrace WHERE Race IN(4,6))";
            //4=DeclinedToSpecify,6=Hispanic
            DataTable table = Db.getTable(command);
            long patNum = 0;
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    patNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
                    command = "INSERT INTO patientrace (PatNum,Race,CdcrecCode) VALUES(" + POut.long(patNum) + ",10,'2186-5')";
                    Db.nonQ(command);
                }
            }
            else
            {
                for (int i = 0;i < table.Rows.Count;i++)
                {
                    //oracle
                    patNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
                    command = "INSERT INTO patientrace (PatientRaceNum,PatNum,Race,CdcrecCode) " + "VALUES((SELECT MAX(PatientRaceNum)+1 FROM patientrace)," + POut.long(patNum) + ",10,'2186-5')";
                    Db.nonQ(command);
                }
            } 
            //intervention
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS intervention";
                Db.nonQ(command);
                command = "CREATE TABLE intervention (\r\n" + 
                "\t\t\t\t\t\tInterventionNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProvNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeValue varchar(30) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeSystem varchar(30) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeEntry date NOT NULL DEFAULT \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tCodeSet tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(ProvNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(CodeValue)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE intervention'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE intervention (\r\n" + 
                "\t\t\t\t\t\tInterventionNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProvNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeValue varchar2(30),\r\n" + 
                "\t\t\t\t\t\tCodeSystem varchar2(30),\r\n" + 
                "\t\t\t\t\t\tNote varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tCodeSet number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateTimeEntry date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT intervention_InterventionNum PRIMARY KEY (InterventionNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX intervention_PatNum ON intervention (PatNum)";
                Db.nonQ(command);
                command = "CREATE INDEX intervention_ProvNum ON intervention (ProvNum)";
                Db.nonQ(command);
                command = "CREATE INDEX intervention_CodeValue ON intervention (CodeValue)";
                Db.nonQ(command);
            } 
            //ehrnotperformed
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrnotperformed";
                Db.nonQ(command);
                command = "CREATE TABLE ehrnotperformed (\r\n" + 
                "\t\t\t\t\t\tEhrNotPerformedNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProvNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeValue varchar(30) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeSystem varchar(30) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeValueReason varchar(30) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeSystemReason varchar(30) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateEntry date NOT NULL DEFAULT \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(ProvNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(CodeValue),\r\n" + 
                "\t\t\t\t\t\tINDEX(CodeValueReason)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrnotperformed'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrnotperformed (\r\n" + 
                "\t\t\t\t\t\tEhrNotPerformedNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProvNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeValue varchar2(30),\r\n" + 
                "\t\t\t\t\t\tCodeSystem varchar2(30),\r\n" + 
                "\t\t\t\t\t\tCodeValueReason varchar2(30),\r\n" + 
                "\t\t\t\t\t\tCodeSystemReason varchar2(30),\r\n" + 
                "\t\t\t\t\t\tNote varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tDateEntry date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrnotperformed_EhrNotPerforme PRIMARY KEY (EhrNotPerformedNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrnotperformed_PatNum ON ehrnotperformed (PatNum)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrnotperformed_ProvNum ON ehrnotperformed (ProvNum)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrnotperformed_CodeValue ON ehrnotperformed (CodeValue)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrnotperformed_CodeValueReaso ON ehrnotperformed (CodeValueReason)";
                Db.nonQ(command);
            } 
            //encounter
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS encounter";
                Db.nonQ(command);
                command = "CREATE TABLE encounter (\r\n" + 
                "\t\t\t\t\t\tEncounterNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProvNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeValue varchar(30) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeSystem varchar(30) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tNote text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateEncounter date NOT NULL DEFAULT \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(ProvNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(CodeValue)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE encounter'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE encounter (\r\n" + 
                "\t\t\t\t\t\tEncounterNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProvNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCodeValue varchar2(30),\r\n" + 
                "\t\t\t\t\t\tCodeSystem varchar2(30),\r\n" + 
                "\t\t\t\t\t\tNote varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tDateEncounter date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT encounter_EncounterNum PRIMARY KEY (EncounterNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX encounter_PatNum ON encounter (PatNum)";
                Db.nonQ(command);
                command = "CREATE INDEX encounter_ProvNum ON encounter (ProvNum)";
                Db.nonQ(command);
                command = "CREATE INDEX encounter_CodeValue ON encounter (CodeValue)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('NistTimeServerUrl','nist-time-server.eoni.com')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'NistTimeServerUrl','nist-time-server.eoni.com')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE ehrsummaryccd ADD EmailAttachNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE ehrsummaryccd ADD INDEX (EmailAttachNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE ehrsummaryccd ADD EmailAttachNum number(20)";
                Db.nonQ(command);
                command = "UPDATE ehrsummaryccd SET EmailAttachNum = 0 WHERE EmailAttachNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE ehrsummaryccd MODIFY EmailAttachNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX ehrsummaryccd_EmailAttachNum ON ehrsummaryccd (EmailAttachNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vitalsign ADD HeightExamCode varchar(30) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vitalsign ADD HeightExamCode varchar2(30)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vitalsign ADD WeightExamCode varchar(30) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vitalsign ADD WeightExamCode varchar2(30)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vitalsign ADD BMIExamCode varchar(30) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vitalsign ADD BMIExamCode varchar2(30)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vitalsign ADD EhrNotPerformedNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vitalsign ADD INDEX (EhrNotPerformedNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vitalsign ADD EhrNotPerformedNum number(20)";
                Db.nonQ(command);
                command = "UPDATE vitalsign SET EhrNotPerformedNum = 0 WHERE EhrNotPerformedNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vitalsign MODIFY EhrNotPerformedNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX vitalsign_EhrNotPerformedNum ON vitalsign (EhrNotPerformedNum)";
                Db.nonQ(command);
            } 
            //Add exam codes to vital sign rows currently in the db using the most generic code from each set
            command = "UPDATE vitalsign SET HeightExamCode='8302-2' WHERE Height!=0";
            //8302-2 is "Body height"
            Db.nonQ(command);
            command = "UPDATE vitalsign SET WeightExamCode='29463-7' WHERE Weight!=0";
            //29463-7 is "Body weight"
            Db.nonQ(command);
            command = "UPDATE vitalsign SET BMIExamCode='59574-4' WHERE Height!=0 AND Weight!=0";
            //59574-4 is "Body mass index (BMI) [Percentile]"
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                //Update over/underweight code, only 1 LOINC code for overweight and 1 for underweight
                //Based on age before the start of the measurement period, which is age before any birthday in the year of DateTaken.  Different range for 18-64 and 65+.  Under 18 not classified under/over
                command = "UPDATE vitalsign,patient SET WeightCode='238131007'/*Overweight*/ " + "WHERE patient.PatNum=vitalsign.PatNum AND Height!=0 AND Weight!=0 " + "AND Birthdate>'1880-01-01' AND (" + "(YEAR(DateTaken)-YEAR(Birthdate)-1>=65 AND (Weight*703)/(Height*Height)>=30) " + "OR " + "(YEAR(DateTaken)-YEAR(Birthdate)-1 BETWEEN 18 AND 64 AND (Weight*703)/(Height*Height)>=25))";
                Db.nonQ(command);
                command = "UPDATE vitalsign,patient	SET WeightCode='248342006'/*Underweight*/ " + "WHERE patient.PatNum=vitalsign.PatNum	AND Height!=0 AND Weight!=0 " + "AND Birthdate>'1880-01-01' AND (" + "(YEAR(DateTaken)-YEAR(patient.Birthdate)-1>=65 AND (Weight*703)/(Height*Height)<23) " + "OR " + "(YEAR(DateTaken)-YEAR(patient.Birthdate)-1 BETWEEN 18 AND 64 AND (Weight*703)/(Height*Height)<18.5))";
                Db.nonQ(command);
            }
            else
            {
            } 
            //oracle
            //EHR not oracle compatible so the vital sign WeightCode will not be used, only for ehr reporting
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vitalsign ADD PregDiseaseNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vitalsign ADD INDEX (PregDiseaseNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vitalsign ADD PregDiseaseNum number(20)";
                Db.nonQ(command);
                command = "UPDATE vitalsign SET PregDiseaseNum = 0 WHERE PregDiseaseNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vitalsign MODIFY PregDiseaseNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX vitalsign_PregDiseaseNum ON vitalsign (PregDiseaseNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('CQMDefaultEncounterCodeValue','none')";
                //we cannot preset this to a SNOMEDCT code since the customer may not be US
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'CQMDefaultEncounterCodeValue','none')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('CQMDefaultEncounterCodeSystem','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'CQMDefaultEncounterCodeSystem','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('PregnancyDefaultCodeValue','none')";
                //we cannot preset this to a SNOMEDCT code since the customer may not be US
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'PregnancyDefaultCodeValue','none')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('PregnancyDefaultCodeSystem','')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'PregnancyDefaultCodeSystem','')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE diseasedef ADD Icd10Code varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE diseasedef ADD Icd10Code varchar2(255)";
                Db.nonQ(command);
            } 
            try
            {
                //Add indexes for code systems------------------------------------------------------------------------------------------------------
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE diseasedef ADD INDEX (Icd10Code)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX diseasedef_Icd10Code ON diseasedef (Icd10Code)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            try
            {
                //Only an index. (Exception ex) required to catch thrown exception
                //Add indexes to speed up payroll------------------------------------------------------------------------------------------------------
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE clockevent ADD INDEX (TimeDisplayed1)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX clockevent_TimeDisplayed1 ON clockevent (TimeDisplayed1)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            //Only an index. (Exception ex) required to catch thrown exception
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName) VALUES('ADPCompanyCode')";
                //No default value.
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'ADPCompanyCode')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE employee ADD PayrollID varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE employee ADD PayrollID varchar2(255)";
                Db.nonQ(command);
            } 
            try
            {
                //Add indexes to speed up customer management window------------------------------------------------------------------------------------
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE registrationkey ADD INDEX (PatNum)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX registrationkey_PatNum ON clockevent (PatNum)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            try
            {
                //Only an index. (Exception ex) required to catch thrown exception
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "ALTER TABLE repeatcharge ADD INDEX (PatNum)";
                    Db.nonQ(command);
                }
                else
                {
                    //oracle
                    command = "CREATE INDEX repeatcharge_PatNum ON clockevent (PatNum)";
                    Db.nonQ(command);
                } 
            }
            catch (Exception ex)
            {
            }

            //Only an index. (Exception ex) required to catch thrown exception
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE allergydef CHANGE Snomed SnomedType tinyint";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE allergydef RENAME COLUMN Snomed TO SnomedType";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE allergydef ADD SnomedAllergyTo varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE allergydef ADD SnomedAllergyTo varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE allergy ADD SnomedReaction varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE allergy ADD SnomedReaction varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE dunning ADD EmailSubject varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE dunning ADD EmailSubject varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE dunning ADD EmailBody mediumtext NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE dunning ADD EmailBody clob";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE statement ADD EmailSubject varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE statement ADD EmailSubject varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE statement ADD EmailBody mediumtext NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE statement ADD EmailBody clob";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS maparea";
                Db.nonQ(command);
                command = "CREATE TABLE maparea (\r\n" + 
                "\t\t\t\t\t\tMapAreaNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tExtension int NOT NULL,\r\n" + 
                "\t\t\t\t\t\tXPos double NOT NULL,\r\n" + 
                "\t\t\t\t\t\tYPos double NOT NULL,\r\n" + 
                "\t\t\t\t\t\tWidth double NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHeight double NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tItemType tinyint NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE maparea'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE maparea (\r\n" + 
                "\t\t\t\t\t\tMapAreaNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tExtension number(11) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tXPos number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tYPos number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tWidth number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tHeight number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar2(255),\r\n" + 
                "\t\t\t\t\t\tItemType number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT maparea_MapAreaNum PRIMARY KEY (MapAreaNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '13.3.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_3_4();
    }

    private static void to13_3_4() throws Exception {
        if (FromVersion < new Version("13.3.4.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE emailmessage ADD RecipientAddress varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE emailmessage ADD RecipientAddress varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS emailmessageuid";
                Db.nonQ(command);
                command = "CREATE TABLE emailmessageuid (\r\n" + 
                "\t\t\t\t\t\tEmailMessageUidNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tUid text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRecipientAddress varchar(255) NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE emailmessageuid'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE emailmessageuid (\r\n" + 
                "\t\t\t\t\t\tEmailMessageUidNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\t\"Uid\" varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tRecipientAddress varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT emailmessageuid_EmailMessageUi PRIMARY KEY (EmailMessageUidNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '13.3.4.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_3_5();
    }

    private static void to13_3_5() throws Exception {
        if (FromVersion < new Version("13.3.5.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE erxlog ADD ProvNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE erxlog ADD INDEX (ProvNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE erxlog ADD ProvNum number(20)";
                Db.nonQ(command);
                command = "UPDATE erxlog SET ProvNum = 0 WHERE ProvNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE erxlog MODIFY ProvNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX erxlog_ProvNum ON erxlog (ProvNum)";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '13.3.5.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_3_6();
    }

    /**
    * Oracle compatible: 12/26/2013
    */
    private static void to13_3_6() throws Exception {
        if (FromVersion < new Version("13.3.6.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE emailmessage ADD RawEmailIn longtext NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE emailmessage ADD RawEmailIn clob";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '13.3.6.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to13_3_7();
    }

    private static void to13_3_7() throws Exception {
        if (FromVersion < new Version("13.3.7.0"))
        {
            String command = new String();
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE emailmessageuid CHANGE Uid MsgId text";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE emailmessageuid RENAME COLUMN \"Uid\" TO MsgId";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '13.3.7.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to14_1_1();
    }

    private static void to14_1_1() throws Exception {
        if (FromVersion < new Version("14.1.1.0"))
        {
            String command = new String();
            //Added permission EhrShowCDS.     No one has this permission by default.  This is more like a user level preference than a permission.
            //Added permission EhrInfoButton.  No one has this permission by default.  This is more like a user level preference than a permission.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrtrigger";
                Db.nonQ(command);
                command = "CREATE TABLE ehrtrigger (\r\n" + 
                "\t\t\t\t\t\tEhrTriggerNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProblemSnomedList text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProblemIcd9List text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProblemIcd10List text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProblemDefNumList text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicationNumList text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tRxCuiList text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCvxList text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAllergyDefNumList text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDemographicsList text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLabLoincList text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tVitalLoincList text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tInstructions text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tBibliography text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCardinality tinyint NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrtrigger'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrtrigger (\r\n" + 
                "\t\t\t\t\t\tEhrTriggerNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar2(255),\r\n" + 
                "\t\t\t\t\t\tProblemSnomedList varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tProblemIcd9List varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tProblemIcd10List varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tProblemDefNumList varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tMedicationNumList varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tRxCuiList varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tCvxList varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tAllergyDefNumList varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tDemographicsList varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tLabLoincList varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tVitalLoincList varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tInstructions varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tBibliography varchar2(4000),\r\n" + 
                "\t\t\t\t\t\tCardinality number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrtrigger_EhrTriggerNum PRIMARY KEY (EhrTriggerNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE provider ADD EmailAddressNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE provider ADD INDEX (EmailAddressNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE provider ADD EmailAddressNum number(20)";
                Db.nonQ(command);
                command = "UPDATE provider SET EmailAddressNum = 0 WHERE EmailAddressNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE provider MODIFY EmailAddressNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX provider_EmailAddressNum ON provider (EmailAddressNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE ehrmeasureevent ADD CodeValueEvent varchar(30) NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE ehrmeasureevent ADD INDEX (CodeValueEvent)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE ehrmeasureevent ADD CodeValueEvent varchar2(30)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrmeasureevent_CodeValueEvent ON ehrmeasureevent (CodeValueEvent)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE ehrmeasureevent ADD CodeSystemEvent varchar(30) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE ehrmeasureevent ADD CodeSystemEvent varchar2(30)";
                Db.nonQ(command);
            } 
            //oracle compatible
            command = "UPDATE ehrmeasureevent SET CodeValueEvent='11366-2' WHERE EventType=8";
            //Set all TobaccoUseAssessed ehrmeasureevents to code for 'History of tobacco use Narrative'
            Db.nonQ(command);
            command = "UPDATE ehrmeasureevent SET CodeSystemEvent='LOINC' WHERE EventType=8";
            //All TobaccoUseAssessed codes are LOINC codes
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE ehrmeasureevent ADD CodeValueResult varchar(30) NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE ehrmeasureevent ADD INDEX (CodeValueResult)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE ehrmeasureevent ADD CodeValueResult varchar2(30)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrmeasureevent_CodeValueResult ON ehrmeasureevent (CodeValueResult)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE ehrmeasureevent ADD CodeSystemResult varchar(30) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE ehrmeasureevent ADD CodeSystemResult varchar2(30)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE intervention CHANGE DateTimeEntry DateEntry date NOT NULL DEFAULT '0001-01-01'";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE intervention CHANGE DateTimeEntry DateEntry date";
                Db.nonQ(command);
                command = "UPDATE intervention SET DateEntry = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE DateEntry IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE intervention MODIFY DateEntry NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE ehrsummaryccd MODIFY ContentSummary longtext NOT NULL";
                Db.nonQ(command);
            }
             
            //oracle ContentSummary data type is already clob which can handle up to 4GB of data.
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE disease ADD SnomedProblemType varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE disease ADD SnomedProblemType varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE disease ADD FunctionStatus tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE disease ADD FunctionStatus number(3)";
                Db.nonQ(command);
                command = "UPDATE disease SET FunctionStatus = 0 WHERE FunctionStatus IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE disease MODIFY FunctionStatus NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrcareplan";
                Db.nonQ(command);
                command = "CREATE TABLE ehrcareplan (\r\n" + 
                "\t\t\t\t\t\tEhrCarePlanNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSnomedEducation varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tInstructions varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrcareplan'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrcareplan (\r\n" + 
                "\t\t\t\t\t\tEhrCarePlanNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSnomedEducation varchar2(255),\r\n" + 
                "\t\t\t\t\t\tInstructions varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrcareplan_EhrCarePlanNum PRIMARY KEY (EhrCarePlanNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrcareplan_PatNum ON ehrcareplan (PatNum)";
                Db.nonQ(command);
            } 
            //Add UCUM table
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ucum";
                Db.nonQ(command);
                command = "CREATE TABLE ucum (\r\n" + 
                "\t\t\t\t\t\tUcumNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tUcumCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDescription varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIsInUse tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(UcumCode)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ucum'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ucum (\r\n" + 
                "\t\t\t\t\t\tUcumNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUcumCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tDescription varchar2(255),\r\n" + 
                "\t\t\t\t\t\tIsInUse number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ucum_UcumNum PRIMARY KEY (UcumNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ucum_UcumCode ON ucum (UcumCode)";
                Db.nonQ(command);
            } 
            //Add UCUM to Code System Importer
            command = "INSERT INTO codesystem (CodeSystemNum,CodeSystemName,HL7OID) VALUES (13,\'UCUM\',\'2.16.840.1.113883.6.8\')";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE ehrcareplan ADD DatePlanned date NOT NULL DEFAULT '0001-01-01'";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE ehrcareplan ADD DatePlanned date";
                Db.nonQ(command);
                command = "UPDATE ehrcareplan SET DatePlanned = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE DatePlanned IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE ehrcareplan MODIFY DatePlanned NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('PatientPortalNotifyBody','Please go to this link and login using your credentials. [URL]')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'PatientPortalNotifyBody','Please go to this link and login using your credentials. [URL]')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('PatientPortalNotifySubject','You have a secure message waiting for you')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'PatientPortalNotifySubject','You have a secure message waiting for you')";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE emailmessage ADD ProvNumWebMail bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE emailmessage ADD INDEX (ProvNumWebMail)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE emailmessage ADD ProvNumWebMail number(20)";
                Db.nonQ(command);
                command = "UPDATE emailmessage SET ProvNumWebMail = 0 WHERE ProvNumWebMail IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE emailmessage MODIFY ProvNumWebMail NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX emailmessage_ProvNumWebMail ON emailmessage (ProvNumWebMail)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE emailmessage ADD PatNumSubj bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE emailmessage ADD INDEX (PatNumSubj)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE emailmessage ADD PatNumSubj number(20)";
                Db.nonQ(command);
                command = "UPDATE emailmessage SET PatNumSubj = 0 WHERE PatNumSubj IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE emailmessage MODIFY PatNumSubj NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX emailmessage_PatNumSubj ON emailmessage (PatNumSubj)";
                Db.nonQ(command);
            } 
            //Added Table cdspermission
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS cdspermission";
                Db.nonQ(command);
                command = "CREATE TABLE cdspermission (\r\n" + 
                "\t\t\t\t\t\tCDSPermissionNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tUserNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSetupCDS tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tShowCDS tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tShowInfobutton tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEditBibliography tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProblemCDS tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicationCDS tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAllergyCDS tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDemographicCDS tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLabTestCDS tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tVitalCDS tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(UserNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE cdspermission'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE cdspermission (\r\n" + 
                "\t\t\t\t\t\tCDSPermissionNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUserNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSetupCDS number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tShowCDS number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tShowInfobutton number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEditBibliography number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tProblemCDS number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicationCDS number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAllergyCDS number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDemographicCDS number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tLabTestCDS number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tVitalCDS number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT cdspermission_CDSPermissionNum PRIMARY KEY (CDSPermissionNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX cdspermission_UserNum ON cdspermission (UserNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrlab";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlab (\r\n" + 
                "\t\t\t\t\t\tEhrLabNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEhrLabMessageNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderControlCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPlacerOrderNum varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPlacerOrderNamespace varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPlacerOrderUniversalID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPlacerOrderUniversalIDType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFillerOrderNum varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFillerOrderNamespace varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFillerOrderUniversalID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFillerOrderUniversalIDType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPlacerGroupNum varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPlacerGroupNamespace varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPlacerGroupUniversalID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPlacerGroupUniversalIDType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderLName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderFName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderMiddleNames varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderSuffix varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderPrefix varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderAssigningAuthorityNamespaceID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderAssigningAuthorityUniversalID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderAssigningAuthorityIDType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderNameTypeCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderIdentifierTypeCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSetIdOBR bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUsiID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUsiText varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUsiCodeSystemName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUsiIDAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUsiTextAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUsiCodeSystemNameAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUsiTextOriginal varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationDateTimeStart varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationDateTimeEnd varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenActionCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tResultDateTime varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tResultStatus varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentObservationID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentObservationText varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentObservationCodeSystemName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentObservationIDAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentObservationTextAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentObservationCodeSystemNameAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentObservationTextOriginal varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentObservationSubID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentPlacerOrderNum varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentPlacerOrderNamespace varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentPlacerOrderUniversalID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentPlacerOrderUniversalIDType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentFillerOrderNum varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentFillerOrderNamespace varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentFillerOrderUniversalID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentFillerOrderUniversalIDType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tListEhrLabResultsHandlingF tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tListEhrLabResultsHandlingN tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTQ1SetId bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTQ1DateTimeStart varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTQ1DateTimeEnd varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(EhrLabMessageNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(SetIdOBR),\r\n" + 
                "\t\t\t\t\t\tINDEX(TQ1SetId)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrlab'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlab (\r\n" + 
                "\t\t\t\t\t\tEhrLabNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEhrLabMessageNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderControlCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPlacerOrderNum varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPlacerOrderNamespace varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPlacerOrderUniversalID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPlacerOrderUniversalIDType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tFillerOrderNum varchar2(255),\r\n" + 
                "\t\t\t\t\t\tFillerOrderNamespace varchar2(255),\r\n" + 
                "\t\t\t\t\t\tFillerOrderUniversalID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tFillerOrderUniversalIDType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPlacerGroupNum varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPlacerGroupNamespace varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPlacerGroupUniversalID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPlacerGroupUniversalIDType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderLName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderFName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderMiddleNames varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderSuffix varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderPrefix varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderAssigningAuthorityNamespaceID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderAssigningAuthorityUniversalID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderAssigningAuthorityIDType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderNameTypeCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderIdentifierTypeCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSetIdOBR number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUsiID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUsiText varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUsiCodeSystemName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUsiIDAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUsiTextAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUsiCodeSystemNameAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUsiTextOriginal varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationDateTimeStart varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationDateTimeEnd varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenActionCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tResultDateTime varchar2(255),\r\n" + 
                "\t\t\t\t\t\tResultStatus varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentObservationID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentObservationText varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentObservationCodeSystemName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentObservationIDAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentObservationTextAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentObservationCodeSystemNameAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentObservationTextOriginal varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentObservationSubID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentPlacerOrderNum varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentPlacerOrderNamespace varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentPlacerOrderUniversalID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentPlacerOrderUniversalIDType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentFillerOrderNum varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentFillerOrderNamespace varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentFillerOrderUniversalID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentFillerOrderUniversalIDType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tListEhrLabResultsHandlingF number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tListEhrLabResultsHandlingN number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTQ1SetId number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTQ1DateTimeStart varchar2(255),\r\n" + 
                "\t\t\t\t\t\tTQ1DateTimeEnd varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrlab_EhrLabNum PRIMARY KEY (EhrLabNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlab_PatNum ON ehrlab (PatNum)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlab_EhrLabMessageNum ON ehrlab (EhrLabMessageNum)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlab_SetIdOBR ON ehrlab (SetIdOBR)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlab_TQ1SetId ON ehrlab (TQ1SetId)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrlabresult";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlabresult (\r\n" + 
                "\t\t\t\t\t\tEhrLabResultNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tEhrLabNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSetIdOBX bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tValueType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierText varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierCodeSystemName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierIDAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierTextAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierCodeSystemNameAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierTextOriginal varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierSub varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementText varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementCodeSystemName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementIDAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementTextAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementCodeSystemNameAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementTextOriginal varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueDateTime varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueTime time NOT NULL DEFAULT \'00:00:00\',\r\n" + 
                "\t\t\t\t\t\tObservationValueComparator varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueNumber1 double NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueSeparatorOrSuffix varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueNumber2 double NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueNumeric double NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueText varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitsID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitsText varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitsCodeSystemName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitsIDAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitsTextAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitsCodeSystemNameAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitsTextOriginal varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\treferenceRange varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAbnormalFlags varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationResultStatus varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationDateTime varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAnalysisDateTime varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationNameAssigningAuthorityNamespaceId varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationNameAssigningAuthorityUniversalId varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationNameAssigningAuthorityUniversalIdType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationIdentifierTypeCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationIdentifier varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressStreet varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressOtherDesignation varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressCity varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressStateOrProvince varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressZipOrPostalCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressCountryCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressAddressType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressCountyOrParishCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorLName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorFName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorMiddleNames varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorSuffix varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorPrefix varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorAssigningAuthorityNamespaceID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorAssigningAuthorityUniversalID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorAssigningAuthorityIDType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorNameTypeCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorIdentifierTypeCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(EhrLabNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(SetIdOBX)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrlabresult'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlabresult (\r\n" + 
                "\t\t\t\t\t\tEhrLabResultNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEhrLabNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSetIdOBX number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tValueType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierText varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierCodeSystemName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierIDAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierTextAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierCodeSystemNameAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierTextOriginal varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierSub varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementText varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementCodeSystemName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementIDAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementTextAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementCodeSystemNameAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementTextOriginal varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueDateTime varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueTime date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueComparator varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueNumber1 number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueSeparatorOrSuffix varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueNumber2 number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueNumeric number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueText varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUnitsID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUnitsText varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUnitsCodeSystemName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUnitsIDAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUnitsTextAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUnitsCodeSystemNameAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUnitsTextOriginal varchar2(255),\r\n" + 
                "\t\t\t\t\t\treferenceRange varchar2(255),\r\n" + 
                "\t\t\t\t\t\tAbnormalFlags varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationResultStatus varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationDateTime varchar2(255),\r\n" + 
                "\t\t\t\t\t\tAnalysisDateTime varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationNameAssigningAuthorityNamespaceId varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationNameAssigningAuthorityUniversalId varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationNameAssigningAuthorityUniversalIdType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationIdentifierTypeCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationIdentifier varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressStreet varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressOtherDesignation varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressCity varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressStateOrProvince varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressZipOrPostalCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressCountryCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressAddressType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressCountyOrParishCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorLName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorFName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorMiddleNames varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorSuffix varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorPrefix varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorAssigningAuthorityNamespaceID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorAssigningAuthorityUniversalID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorAssigningAuthorityIDType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorNameTypeCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorIdentifierTypeCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrlabresult_EhrLabResultNum PRIMARY KEY (EhrLabResultNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlabresult_EhrLabNum ON ehrlabresult (EhrLabNum)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlabresult_SetIdOBX ON ehrlabresult (SetIdOBX)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrlab";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlab (\r\n" + 
                "\t\t\t\t\t\tEhrLabNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderControlCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPlacerOrderNum varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPlacerOrderNamespace varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPlacerOrderUniversalID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPlacerOrderUniversalIDType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFillerOrderNum varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFillerOrderNamespace varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFillerOrderUniversalID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tFillerOrderUniversalIDType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPlacerGroupNum varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPlacerGroupNamespace varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPlacerGroupUniversalID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPlacerGroupUniversalIDType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderLName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderFName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderMiddleNames varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderSuffix varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderPrefix varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderAssigningAuthorityNamespaceID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderAssigningAuthorityUniversalID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderAssigningAuthorityIDType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderNameTypeCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderingProviderIdentifierTypeCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSetIdOBR bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUsiID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUsiText varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUsiCodeSystemName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUsiIDAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUsiTextAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUsiCodeSystemNameAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUsiTextOriginal varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationDateTimeStart varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationDateTimeEnd varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenActionCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tResultDateTime varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tResultStatus varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentObservationID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentObservationText varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentObservationCodeSystemName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentObservationIDAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentObservationTextAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentObservationCodeSystemNameAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentObservationTextOriginal varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentObservationSubID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentPlacerOrderNum varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentPlacerOrderNamespace varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentPlacerOrderUniversalID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentPlacerOrderUniversalIDType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentFillerOrderNum varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentFillerOrderNamespace varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentFillerOrderUniversalID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tParentFillerOrderUniversalIDType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tListEhrLabResultsHandlingF tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tListEhrLabResultsHandlingN tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTQ1SetId bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTQ1DateTimeStart varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTQ1DateTimeEnd varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(PatNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(SetIdOBR),\r\n" + 
                "\t\t\t\t\t\tINDEX(TQ1SetId)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrlab'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlab (\r\n" + 
                "\t\t\t\t\t\tEhrLabNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tOrderControlCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPlacerOrderNum varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPlacerOrderNamespace varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPlacerOrderUniversalID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPlacerOrderUniversalIDType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tFillerOrderNum varchar2(255),\r\n" + 
                "\t\t\t\t\t\tFillerOrderNamespace varchar2(255),\r\n" + 
                "\t\t\t\t\t\tFillerOrderUniversalID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tFillerOrderUniversalIDType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPlacerGroupNum varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPlacerGroupNamespace varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPlacerGroupUniversalID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPlacerGroupUniversalIDType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderLName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderFName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderMiddleNames varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderSuffix varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderPrefix varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderAssigningAuthorityNamespaceID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderAssigningAuthorityUniversalID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderAssigningAuthorityIDType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderNameTypeCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tOrderingProviderIdentifierTypeCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSetIdOBR number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUsiID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUsiText varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUsiCodeSystemName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUsiIDAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUsiTextAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUsiCodeSystemNameAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUsiTextOriginal varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationDateTimeStart varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationDateTimeEnd varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenActionCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tResultDateTime varchar2(255),\r\n" + 
                "\t\t\t\t\t\tResultStatus varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentObservationID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentObservationText varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentObservationCodeSystemName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentObservationIDAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentObservationTextAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentObservationCodeSystemNameAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentObservationTextOriginal varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentObservationSubID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentPlacerOrderNum varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentPlacerOrderNamespace varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentPlacerOrderUniversalID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentPlacerOrderUniversalIDType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentFillerOrderNum varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentFillerOrderNamespace varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentFillerOrderUniversalID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tParentFillerOrderUniversalIDType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tListEhrLabResultsHandlingF number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tListEhrLabResultsHandlingN number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTQ1SetId number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tTQ1DateTimeStart varchar2(255),\r\n" + 
                "\t\t\t\t\t\tTQ1DateTimeEnd varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrlab_EhrLabNum PRIMARY KEY (EhrLabNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlab_PatNum ON ehrlab (PatNum)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlab_SetIdOBR ON ehrlab (SetIdOBR)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlab_TQ1SetId ON ehrlab (TQ1SetId)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrlabclinicalinfo";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlabclinicalinfo (\r\n" + 
                "\t\t\t\t\t\tEhrLabClinicalInfoNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tEhrLabNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tClinicalInfoID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tClinicalInfoText varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tClinicalInfoCodeSystemName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tClinicalInfoIDAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tClinicalInfoTextAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tClinicalInfoCodeSystemNameAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tClinicalInfoTextOriginal varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(EhrLabNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrlabclinicalinfo'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlabclinicalinfo (\r\n" + 
                "\t\t\t\t\t\tEhrLabClinicalInfoNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEhrLabNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tClinicalInfoID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tClinicalInfoText varchar2(255),\r\n" + 
                "\t\t\t\t\t\tClinicalInfoCodeSystemName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tClinicalInfoIDAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tClinicalInfoTextAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tClinicalInfoCodeSystemNameAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tClinicalInfoTextOriginal varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrlabclinicalinfo_EhrLabClini PRIMARY KEY (EhrLabClinicalInfoNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlabclinicalinfo_EhrLabNum ON ehrlabclinicalinfo (EhrLabNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrlabnote";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlabnote (\r\n" + 
                "\t\t\t\t\t\tEhrLabNoteNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tEhrLabNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEhrLabResultNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tComments text NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(EhrLabNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(EhrLabResultNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrlabnote'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlabnote (\r\n" + 
                "\t\t\t\t\t\tEhrLabNoteNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEhrLabNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEhrLabResultNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tComments clob,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrlabnote_EhrLabNoteNum PRIMARY KEY (EhrLabNoteNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlabnote_EhrLabNum ON ehrlabnote (EhrLabNum)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlabnote_EhrLabResultNum ON ehrlabnote (EhrLabResultNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrlabresult";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlabresult (\r\n" + 
                "\t\t\t\t\t\tEhrLabResultNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tEhrLabNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSetIdOBX bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tValueType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierText varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierCodeSystemName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierIDAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierTextAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierCodeSystemNameAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierTextOriginal varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierSub varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementText varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementCodeSystemName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementIDAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementTextAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementCodeSystemNameAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementTextOriginal varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueDateTime varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueTime time NOT NULL DEFAULT \'00:00:00\',\r\n" + 
                "\t\t\t\t\t\tObservationValueComparator varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueNumber1 double NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueSeparatorOrSuffix varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueNumber2 double NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueNumeric double NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueText varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitsID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitsText varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitsCodeSystemName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitsIDAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitsTextAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitsCodeSystemNameAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUnitsTextOriginal varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\treferenceRange varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAbnormalFlags varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationResultStatus varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationDateTime varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAnalysisDateTime varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationNameAssigningAuthorityNamespaceId varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationNameAssigningAuthorityUniversalId varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationNameAssigningAuthorityUniversalIdType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationIdentifierTypeCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationIdentifier varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressStreet varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressOtherDesignation varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressCity varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressStateOrProvince varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressZipOrPostalCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressCountryCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressAddressType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressCountyOrParishCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorLName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorFName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorMiddleNames varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorSuffix varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorPrefix varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorAssigningAuthorityNamespaceID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorAssigningAuthorityUniversalID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorAssigningAuthorityIDType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorNameTypeCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorIdentifierTypeCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(EhrLabNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(SetIdOBX)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrlabresult'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlabresult (\r\n" + 
                "\t\t\t\t\t\tEhrLabResultNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEhrLabNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSetIdOBX number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tValueType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierText varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierCodeSystemName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierIDAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierTextAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierCodeSystemNameAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierTextOriginal varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationIdentifierSub varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementText varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementCodeSystemName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementIDAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementTextAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementCodeSystemNameAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueCodedElementTextOriginal varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueDateTime varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueTime date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueComparator varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueNumber1 number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueSeparatorOrSuffix varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationValueNumber2 number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueNumeric number(38,8) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tObservationValueText varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUnitsID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUnitsText varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUnitsCodeSystemName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUnitsIDAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUnitsTextAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUnitsCodeSystemNameAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUnitsTextOriginal varchar2(255),\r\n" + 
                "\t\t\t\t\t\treferenceRange varchar2(255),\r\n" + 
                "\t\t\t\t\t\tAbnormalFlags varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationResultStatus varchar2(255),\r\n" + 
                "\t\t\t\t\t\tObservationDateTime varchar2(255),\r\n" + 
                "\t\t\t\t\t\tAnalysisDateTime varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationNameAssigningAuthorityNamespaceId varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationNameAssigningAuthorityUniversalId varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationNameAssigningAuthorityUniversalIdType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationIdentifierTypeCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationIdentifier varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressStreet varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressOtherDesignation varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressCity varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressStateOrProvince varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressZipOrPostalCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressCountryCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressAddressType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tPerformingOrganizationAddressCountyOrParishCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorLName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorFName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorMiddleNames varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorSuffix varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorPrefix varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorAssigningAuthorityNamespaceID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorAssigningAuthorityUniversalID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorAssigningAuthorityIDType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorNameTypeCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMedicalDirectorIdentifierTypeCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrlabresult_EhrLabResultNum PRIMARY KEY (EhrLabResultNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlabresult_EhrLabNum ON ehrlabresult (EhrLabNum)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlabresult_SetIdOBX ON ehrlabresult (SetIdOBX)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrlabresultscopyto";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlabresultscopyto (\r\n" + 
                "\t\t\t\t\t\tEhrLabResultsCopyToNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tEhrLabNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCopyToID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCopyToLName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCopyToFName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCopyToMiddleNames varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCopyToSuffix varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCopyToPrefix varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCopyToAssigningAuthorityNamespaceID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCopyToAssigningAuthorityUniversalID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCopyToAssigningAuthorityIDType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCopyToNameTypeCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCopyToIdentifierTypeCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(EhrLabNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrlabresultscopyto'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlabresultscopyto (\r\n" + 
                "\t\t\t\t\t\tEhrLabResultsCopyToNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEhrLabNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCopyToID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCopyToLName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCopyToFName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCopyToMiddleNames varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCopyToSuffix varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCopyToPrefix varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCopyToAssigningAuthorityNamespaceID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCopyToAssigningAuthorityUniversalID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCopyToAssigningAuthorityIDType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCopyToNameTypeCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCopyToIdentifierTypeCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrlabresultscopyto_EhrLabResu PRIMARY KEY (EhrLabResultsCopyToNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlabresultscopyto_EhrLabNum ON ehrlabresultscopyto (EhrLabNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrlabspecimen";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlabspecimen (\r\n" + 
                "\t\t\t\t\t\tEhrLabSpecimenNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tEhrLabNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSetIdSPM bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenTypeID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenTypeText varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenTypeCodeSystemName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenTypeIDAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenTypeTextAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenTypeCodeSystemNameAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenTypeTextOriginal varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCollectionDateTimeStart varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCollectionDateTimeEnd varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(EhrLabNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(SetIdSPM)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrlabspecimen'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlabspecimen (\r\n" + 
                "\t\t\t\t\t\tEhrLabSpecimenNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEhrLabNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSetIdSPM number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenTypeID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenTypeText varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenTypeCodeSystemName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenTypeIDAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenTypeTextAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenTypeCodeSystemNameAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenTypeTextOriginal varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCollectionDateTimeStart varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCollectionDateTimeEnd varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrlabspecimen_EhrLabSpecimenN PRIMARY KEY (EhrLabSpecimenNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlabspecimen_EhrLabNum ON ehrlabspecimen (EhrLabNum)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlabspecimen_SetIdSPM ON ehrlabspecimen (SetIdSPM)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrlabspecimencondition";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlabspecimencondition (\r\n" + 
                "\t\t\t\t\t\tEhrLabSpecimenConditionNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tEhrLabSpecimenNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenConditionID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenConditionText varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenConditionCodeSystemName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenConditionIDAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenConditionTextAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenConditionCodeSystemNameAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenConditionTextOriginal varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(EhrLabSpecimenNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrlabspecimencondition'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlabspecimencondition (\r\n" + 
                "\t\t\t\t\t\tEhrLabSpecimenConditionNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEhrLabSpecimenNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenConditionID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenConditionText varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenConditionCodeSystemName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenConditionIDAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenConditionTextAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenConditionCodeSystemNameAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenConditionTextOriginal varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrlabspecimencondition_EhrLab PRIMARY KEY (EhrLabSpecimenConditionNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlabspecimencondition_EhrLab ON ehrlabspecimencondition (EhrLabSpecimenNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrlabspecimenrejectreason";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlabspecimenrejectreason (\r\n" + 
                "\t\t\t\t\t\tEhrLabSpecimenRejectReasonNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tEhrLabSpecimenNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenRejectReasonID varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenRejectReasonText varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenRejectReasonCodeSystemName varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenRejectReasonIDAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenRejectReasonTextAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenRejectReasonCodeSystemNameAlt varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenRejectReasonTextOriginal varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(EhrLabSpecimenNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrlabspecimenrejectreason'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlabspecimenrejectreason (\r\n" + 
                "\t\t\t\t\t\tEhrLabSpecimenRejectReasonNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEhrLabSpecimenNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tSpecimenRejectReasonID varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenRejectReasonText varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenRejectReasonCodeSystemName varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenRejectReasonIDAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenRejectReasonTextAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenRejectReasonCodeSystemNameAlt varchar2(255),\r\n" + 
                "\t\t\t\t\t\tSpecimenRejectReasonTextOriginal varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrlabspecimenrejectreason_Ehr PRIMARY KEY (EhrLabSpecimenRejectReasonNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlabspecimenrejectreason_Ehr ON ehrlabspecimenrejectreason (EhrLabSpecimenNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE guardian ADD IsGuardian tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE guardian ADD IsGuardian number(3)";
                Db.nonQ(command);
                command = "UPDATE guardian SET IsGuardian = 0 WHERE IsGuardian IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE guardian MODIFY IsGuardian NOT NULL";
                Db.nonQ(command);
            } 
            command = "UPDATE guardian SET IsGuardian=1";
            //Works for both MySQL and Oracle.
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE allergydef ADD UniiCode varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE allergydef ADD UniiCode varchar2(255)";
                Db.nonQ(command);
            } 
            //Oracle compatible.
            command = "ALTER TABLE allergydef DROP COLUMN SnomedAllergyTo";
            Db.nonQ(command);
            //OID External
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS oidexternal";
                Db.nonQ(command);
                command = "CREATE TABLE oidexternal (\r\n" + 
                "\t\t\t\t\t\tOIDExternalNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tIDType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIDInternal bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIDExternal varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\trootExternal varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(IDType,IDInternal),\r\n" + 
                "\t\t\t\t\t\tINDEX(rootExternal(62),IDExternal(62))\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                //Index is 1000/8=125/n where n is the number of columns to be indexed together. In this case the result is 62.5=62
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE oidexternal'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE oidexternal (\r\n" + 
                "\t\t\t\t\t\tOIDExternalNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIDType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tIDInternal number(20),\r\n" + 
                "\t\t\t\t\t\tIDExternal varchar2(255),\r\n" + 
                "\t\t\t\t\t\trootExternal varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT oidexternal_OIDExternalNum PRIMARY KEY (OIDExternalNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX oidexternal_type_ID ON oidexternal (IDType, IDInternal)";
                Db.nonQ(command);
                command = "CREATE INDEX oidexternal_root_extension ON oidexternal (rootExternal, IDExternal)";
                Db.nonQ(command);
            } 
            //OID Internal
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS oidinternal";
                Db.nonQ(command);
                command = "CREATE TABLE oidinternal (\r\n" + 
                "\t\t\t\t\t\tOIDInternalNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tIDType varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIDRoot varchar(255) NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE oidinternal'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE oidinternal (\r\n" + 
                "\t\t\t\t\t\tOIDInternalNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIDType varchar2(255),\r\n" + 
                "\t\t\t\t\t\tIDRoot varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT oidinternal_OIDInternalNum PRIMARY KEY (OIDInternalNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vaccinepat ADD FilledCity varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vaccinepat ADD FilledCity varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vaccinepat ADD FilledST varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vaccinepat ADD FilledST varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vaccinepat ADD CompletionStatus tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vaccinepat ADD CompletionStatus number(3)";
                Db.nonQ(command);
                command = "UPDATE vaccinepat SET CompletionStatus = 0 WHERE CompletionStatus IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vaccinepat MODIFY CompletionStatus NOT NULL";
                Db.nonQ(command);
            } 
            //MySQL and Oracle
            command = "UPDATE vaccinepat SET CompletionStatus=CASE WHEN NotGiven=1 THEN 2 ELSE 0 END";
            //If was NotGiven then CompletionStatus=NotAdministered, otherwise CompletionStatus=Complete.
            Db.nonQ(command);
            //MySQL and Oracle
            command = "ALTER TABLE vaccinepat DROP COLUMN NotGiven";
            Db.nonQ(command);
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vaccinepat ADD AdministrationNoteCode tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vaccinepat ADD AdministrationNoteCode number(3)";
                Db.nonQ(command);
                command = "UPDATE vaccinepat SET AdministrationNoteCode = 0 WHERE AdministrationNoteCode IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vaccinepat MODIFY AdministrationNoteCode NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vaccinepat ADD UserNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vaccinepat ADD INDEX (UserNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vaccinepat ADD UserNum number(20)";
                Db.nonQ(command);
                command = "UPDATE vaccinepat SET UserNum = 0 WHERE UserNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vaccinepat MODIFY UserNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX vaccinepat_UserNum ON vaccinepat (UserNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vaccinepat ADD ProvNumOrdering bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vaccinepat ADD INDEX (ProvNumOrdering)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vaccinepat ADD ProvNumOrdering number(20)";
                Db.nonQ(command);
                command = "UPDATE vaccinepat SET ProvNumOrdering = 0 WHERE ProvNumOrdering IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vaccinepat MODIFY ProvNumOrdering NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX vaccinepat_ProvNumOrdering ON vaccinepat (ProvNumOrdering)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vaccinepat ADD ProvNumAdminister bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vaccinepat ADD INDEX (ProvNumAdminister)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vaccinepat ADD ProvNumAdminister number(20)";
                Db.nonQ(command);
                command = "UPDATE vaccinepat SET ProvNumAdminister = 0 WHERE ProvNumAdminister IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vaccinepat MODIFY ProvNumAdminister NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX vaccinepat_ProvNumAdminister ON vaccinepat (ProvNumAdminister)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vaccinepat ADD DateExpire date NOT NULL DEFAULT '0001-01-01'";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vaccinepat ADD DateExpire date";
                Db.nonQ(command);
                command = "UPDATE vaccinepat SET DateExpire = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE DateExpire IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vaccinepat MODIFY DateExpire NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vaccinepat ADD RefusalReason tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vaccinepat ADD RefusalReason number(3)";
                Db.nonQ(command);
                command = "UPDATE vaccinepat SET RefusalReason = 0 WHERE RefusalReason IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vaccinepat MODIFY RefusalReason NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vaccinepat ADD ActionCode tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vaccinepat ADD ActionCode number(3)";
                Db.nonQ(command);
                command = "UPDATE vaccinepat SET ActionCode = 0 WHERE ActionCode IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vaccinepat MODIFY ActionCode NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vaccinepat ADD AdministrationRoute tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vaccinepat ADD AdministrationRoute number(3)";
                Db.nonQ(command);
                command = "UPDATE vaccinepat SET AdministrationRoute = 0 WHERE AdministrationRoute IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vaccinepat MODIFY AdministrationRoute NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vaccinepat ADD AdministrationSite tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vaccinepat ADD AdministrationSite number(3)";
                Db.nonQ(command);
                command = "UPDATE vaccinepat SET AdministrationSite = 0 WHERE AdministrationSite IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vaccinepat MODIFY AdministrationSite NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS vaccineobs";
                Db.nonQ(command);
                command = "CREATE TABLE vaccineobs (\r\n" + 
                "\t\t\t\t\t\tVaccineObsNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tVaccinePatNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tValType tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIdentifyingCode tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tValReported varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tValCodeSystem tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tVaccineObsNumGroup bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUcumCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDateObs date NOT NULL DEFAULT \'0001-01-01\',\r\n" + 
                "\t\t\t\t\t\tMethodCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(VaccinePatNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(VaccineObsNumGroup)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE vaccineobs'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE vaccineobs (\r\n" + 
                "\t\t\t\t\t\tVaccineObsNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tVaccinePatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tValType number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIdentifyingCode number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tValReported varchar2(255),\r\n" + 
                "\t\t\t\t\t\tValCodeSystem number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tVaccineObsNumGroup number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUcumCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tDateObs date DEFAULT TO_DATE(\'0001-01-01\',\'YYYY-MM-DD\') NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMethodCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT vaccineobs_VaccineObsNum PRIMARY KEY (VaccineObsNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX vaccineobs_VaccinePatNum ON vaccineobs (VaccinePatNum)";
                Db.nonQ(command);
                command = "CREATE INDEX vaccineobs_VaccineObsNumGroup ON vaccineobs (VaccineObsNumGroup)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE ehrmeasureevent ADD FKey bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE ehrmeasureevent ADD INDEX (FKey)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE ehrmeasureevent ADD FKey number(20)";
                Db.nonQ(command);
                command = "UPDATE ehrmeasureevent SET FKey = 0 WHERE FKey IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE ehrmeasureevent MODIFY FKey NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX ehrmeasureevent_FKey ON ehrmeasureevent (FKey)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE vitalsign ADD BMIPercentile int NOT NULL";
                Db.nonQ(command);
                command = "UPDATE vitalsign SET BMIPercentile=-1";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE vitalsign ADD BMIPercentile number(11)";
                Db.nonQ(command);
                command = "UPDATE vitalsign SET BMIPercentile = -1 WHERE BMIPercentile IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE vitalsign MODIFY BMIPercentile NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE procedurelog ADD SnomedBodySite varchar(255) NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE procedurelog ADD SnomedBodySite varchar2(255)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrpatient";
                Db.nonQ(command);
                command = "CREATE TABLE ehrpatient (\r\n" + 
                "\t\t\t\t\t\tPatNum bigint NOT NULL PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tMotherMaidenFname varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMotherMaidenLname varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tVacShareOk tinyint NOT NULL\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrpatient'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrpatient (\r\n" + 
                "\t\t\t\t\t\tPatNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tMotherMaidenFname varchar2(255),\r\n" + 
                "\t\t\t\t\t\tMotherMaidenLname varchar2(255),\r\n" + 
                "\t\t\t\t\t\tVacShareOk number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrpatient_PatNum PRIMARY KEY (PatNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehraptobs";
                Db.nonQ(command);
                command = "CREATE TABLE ehraptobs (\r\n" + 
                "\t\t\t\t\t\tEhrAptObsNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tAptNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIdentifyingCode tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tValType tinyint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tValReported varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tUcumCode varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tValCodeSystem varchar(255) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(AptNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehraptobs'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehraptobs (\r\n" + 
                "\t\t\t\t\t\tEhrAptObsNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tAptNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tIdentifyingCode number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tValType number(3) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tValReported varchar2(255),\r\n" + 
                "\t\t\t\t\t\tUcumCode varchar2(255),\r\n" + 
                "\t\t\t\t\t\tValCodeSystem varchar2(255),\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehraptobs_EhrAptObsNum PRIMARY KEY (EhrAptObsNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehraptobs_AptNum ON ehraptobs (AptNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE patient ADD DateTimeDeceased datetime DEFAULT '0001-01-01' NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE patient ADD DateTimeDeceased date";
                Db.nonQ(command);
                command = "UPDATE patient SET DateTimeDeceased = TO_DATE('0001-01-01','YYYY-MM-DD') WHERE DateTimeDeceased IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE patient MODIFY DateTimeDeceased NOT NULL";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE ehrlab ADD IsCpoe tinyint NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE ehrlab ADD IsCpoe number(3)";
                Db.nonQ(command);
                command = "UPDATE ehrlab SET IsCpoe = 0 WHERE IsCpoe IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE ehrlab MODIFY IsCpoe NOT NULL";
                Db.nonQ(command);
            } 
            //Add additional EHR Measures to DB
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(20,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(21,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(22,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(23,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(24,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(25,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(26,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(27,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(MeasureType,Numerator,Denominator) VALUES(28,-1,-1)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),20,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),21,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),22,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),23,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),24,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),25,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),26,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),27,-1,-1)";
                Db.nonQ(command);
                command = "INSERT INTO ehrmeasure(EhrMeasureNum,MeasureType,Numerator,Denominator) VALUES((SELECT MAX(EhrMeasureNum)+1 FROM ehrmeasure),28,-1,-1)";
                Db.nonQ(command);
            } 
            //Split patientrace DeclinedToSpecify into DeclinedToSpecifyRace and DeclinedToSpecifyEthnicity.
            command = "SELECT PatNum FROM patientrace WHERE Race=4";
            //DeclinedToSpecifyRace
            DataTable table = Db.getTable(command);
            for (int i = 0;i < table.Rows.Count;i++)
            {
                String patNum = table.Rows[i]["PatNum"].ToString();
                if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
                {
                    command = "INSERT INTO patientrace (PatNum,Race) VALUES (" + patNum + ",11)";
                }
                else
                {
                    //DeclinedToSpecifyEthnicity
                    //oracle
                    command = "INSERT INTO patientrace (PatientRaceNum,PatNum,Race,CdcrecCode) VALUES ((SELECT MAX(PatientRaceNum+1) FROM patientrace)," + patNum + ",11,'')";
                } 
                Db.nonQ(command);
            }
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "DROP TABLE IF EXISTS ehrlabimage";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlabimage (\r\n" + 
                "\t\t\t\t\t\tEhrLabImageNum bigint NOT NULL auto_increment PRIMARY KEY,\r\n" + 
                "\t\t\t\t\t\tEhrLabNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDocNum bigint NOT NULL,\r\n" + 
                "\t\t\t\t\t\tINDEX(EhrLabNum),\r\n" + 
                "\t\t\t\t\t\tINDEX(DocNum)\r\n" + 
                "\t\t\t\t\t\t) DEFAULT CHARSET=utf8";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "BEGIN EXECUTE IMMEDIATE 'DROP TABLE ehrlabimage'; EXCEPTION WHEN OTHERS THEN NULL; END;";
                Db.nonQ(command);
                command = "CREATE TABLE ehrlabimage (\r\n" + 
                "\t\t\t\t\t\tEhrLabImageNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tEhrLabNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tDocNum number(20) NOT NULL,\r\n" + 
                "\t\t\t\t\t\tCONSTRAINT ehrlabimage_EhrLabImageNum PRIMARY KEY (EhrLabImageNum)\r\n" + 
                "\t\t\t\t\t\t)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlabimage_EhrLabNum ON ehrlabimage (EhrLabNum)";
                Db.nonQ(command);
                command = "CREATE INDEX ehrlabimage_DocNum ON ehrlabimage (DocNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE apptfielddef CHANGE PickList PickList TEXT NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE apptfielddef MODIFY (PickList varchar2(4000) NOT NULL)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE refattach ADD ProvNum bigint NOT NULL";
                Db.nonQ(command);
                command = "ALTER TABLE refattach ADD INDEX (ProvNum)";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE refattach ADD ProvNum number(20)";
                Db.nonQ(command);
                command = "UPDATE refattach SET ProvNum = 0 WHERE ProvNum IS NULL";
                Db.nonQ(command);
                command = "ALTER TABLE refattach MODIFY ProvNum NOT NULL";
                Db.nonQ(command);
                command = "CREATE INDEX refattach_ProvNum ON refattach (ProvNum)";
                Db.nonQ(command);
            } 
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "ALTER TABLE ehrlab ADD OriginalPIDSegment text NOT NULL";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "ALTER TABLE ehrlab ADD OriginalPIDSegment varchar2(4000)";
                Db.nonQ(command);
            } 
            //Added TimeCardADPExportIncludesName preference
            if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.MySql)
            {
                command = "INSERT INTO preference(PrefName,ValueString) VALUES('TimeCardADPExportIncludesName','0')";
                Db.nonQ(command);
            }
            else
            {
                //oracle
                command = "INSERT INTO preference(PrefNum,PrefName,ValueString) VALUES((SELECT MAX(PrefNum)+1 FROM preference),'TimeCardADPExportIncludesName','0')";
                Db.nonQ(command);
            } 
            command = "UPDATE preference SET ValueString = '14.1.1.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
        to14_2_0();
    }

    private static void to14_2_0() throws Exception {
        if (FromVersion < new Version("14.2.0.0"))
        {
            String command = new String();
            command = "UPDATE preference SET ValueString = '14.2.0.0' WHERE PrefName = 'DataBaseVersion'";
            Db.nonQ(command);
        }
         
    }

}
//To14_3_0();

//To14_3_0();