//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:03 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.Equipment;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EquipmentCrud   
{
    /**
    * Gets one Equipment object from the database using the primary key.  Returns null if not found.
    */
    public static Equipment selectOne(long equipmentNum) throws Exception {
        String command = "SELECT * FROM equipment " + "WHERE EquipmentNum = " + POut.long(equipmentNum);
        List<Equipment> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Equipment object from the database using a query.
    */
    public static Equipment selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Equipment> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Equipment objects from the database using a query.
    */
    public static List<Equipment> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Equipment> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Equipment> tableToList(DataTable table) throws Exception {
        List<Equipment> retVal = new List<Equipment>();
        Equipment equipment;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            equipment = new Equipment();
            equipment.EquipmentNum = PIn.Long(table.Rows[i]["EquipmentNum"].ToString());
            equipment.Description = PIn.String(table.Rows[i]["Description"].ToString());
            equipment.SerialNumber = PIn.String(table.Rows[i]["SerialNumber"].ToString());
            equipment.ModelYear = PIn.String(table.Rows[i]["ModelYear"].ToString());
            equipment.DatePurchased = PIn.Date(table.Rows[i]["DatePurchased"].ToString());
            equipment.DateSold = PIn.Date(table.Rows[i]["DateSold"].ToString());
            equipment.PurchaseCost = PIn.Double(table.Rows[i]["PurchaseCost"].ToString());
            equipment.MarketValue = PIn.Double(table.Rows[i]["MarketValue"].ToString());
            equipment.Location = PIn.String(table.Rows[i]["Location"].ToString());
            equipment.DateEntry = PIn.Date(table.Rows[i]["DateEntry"].ToString());
            retVal.Add(equipment);
        }
        return retVal;
    }

    /**
    * Inserts one Equipment into the database.  Returns the new priKey.
    */
    public static long insert(Equipment equipment) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            equipment.EquipmentNum = DbHelper.getNextOracleKey("equipment","EquipmentNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(equipment, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        equipment.EquipmentNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(equipment, false);
        } 
    }

    /**
    * Inserts one Equipment into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Equipment equipment, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            equipment.EquipmentNum = ReplicationServers.getKey("equipment","EquipmentNum");
        }
         
        String command = "INSERT INTO equipment (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "EquipmentNum,";
        }
         
        command += "Description,SerialNumber,ModelYear,DatePurchased,DateSold,PurchaseCost,MarketValue,Location,DateEntry) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(equipment.EquipmentNum) + ",";
        }
         
        command += "'" + POut.string(equipment.Description) + "'," + "'" + POut.string(equipment.SerialNumber) + "'," + "'" + POut.string(equipment.ModelYear) + "'," + POut.date(equipment.DatePurchased) + "," + POut.date(equipment.DateSold) + "," + "'" + POut.double(equipment.PurchaseCost) + "'," + "'" + POut.double(equipment.MarketValue) + "'," + "'" + POut.string(equipment.Location) + "'," + POut.date(equipment.DateEntry) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            equipment.EquipmentNum = Db.nonQ(command,true);
        } 
        return equipment.EquipmentNum;
    }

    /**
    * Updates one Equipment in the database.
    */
    public static void update(Equipment equipment) throws Exception {
        String command = "UPDATE equipment SET " + "Description  = '" + POut.string(equipment.Description) + "', " + "SerialNumber = '" + POut.string(equipment.SerialNumber) + "', " + "ModelYear    = '" + POut.string(equipment.ModelYear) + "', " + "DatePurchased=  " + POut.date(equipment.DatePurchased) + ", " + "DateSold     =  " + POut.date(equipment.DateSold) + ", " + "PurchaseCost = '" + POut.double(equipment.PurchaseCost) + "', " + "MarketValue  = '" + POut.double(equipment.MarketValue) + "', " + "Location     = '" + POut.string(equipment.Location) + "', " + "DateEntry    =  " + POut.date(equipment.DateEntry) + " " + "WHERE EquipmentNum = " + POut.long(equipment.EquipmentNum);
        Db.nonQ(command);
    }

    /**
    * Updates one Equipment in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Equipment equipment, Equipment oldEquipment) throws Exception {
        String command = "";
        if (!StringSupport.equals(equipment.Description, oldEquipment.Description))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.string(equipment.Description) + "'";
        }
         
        if (!StringSupport.equals(equipment.SerialNumber, oldEquipment.SerialNumber))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SerialNumber = '" + POut.string(equipment.SerialNumber) + "'";
        }
         
        if (!StringSupport.equals(equipment.ModelYear, oldEquipment.ModelYear))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ModelYear = '" + POut.string(equipment.ModelYear) + "'";
        }
         
        if (equipment.DatePurchased != oldEquipment.DatePurchased)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DatePurchased = " + POut.date(equipment.DatePurchased) + "";
        }
         
        if (equipment.DateSold != oldEquipment.DateSold)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateSold = " + POut.date(equipment.DateSold) + "";
        }
         
        if (equipment.PurchaseCost != oldEquipment.PurchaseCost)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PurchaseCost = '" + POut.double(equipment.PurchaseCost) + "'";
        }
         
        if (equipment.MarketValue != oldEquipment.MarketValue)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MarketValue = '" + POut.double(equipment.MarketValue) + "'";
        }
         
        if (!StringSupport.equals(equipment.Location, oldEquipment.Location))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Location = '" + POut.string(equipment.Location) + "'";
        }
         
        if (equipment.DateEntry != oldEquipment.DateEntry)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateEntry = " + POut.date(equipment.DateEntry) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE equipment SET " + command + " WHERE EquipmentNum = " + POut.long(equipment.EquipmentNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one Equipment from the database.
    */
    public static void delete(long equipmentNum) throws Exception {
        String command = "DELETE FROM equipment " + "WHERE EquipmentNum = " + POut.long(equipmentNum);
        Db.nonQ(command);
    }

}


