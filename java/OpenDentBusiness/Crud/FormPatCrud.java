//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:04 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.FormPat;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class FormPatCrud   
{
    /**
    * Gets one FormPat object from the database using the primary key.  Returns null if not found.
    */
    public static FormPat selectOne(long formPatNum) throws Exception {
        String command = "SELECT * FROM formpat " + "WHERE FormPatNum = " + POut.long(formPatNum);
        List<FormPat> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one FormPat object from the database using a query.
    */
    public static FormPat selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<FormPat> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of FormPat objects from the database using a query.
    */
    public static List<FormPat> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<FormPat> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<FormPat> tableToList(DataTable table) throws Exception {
        List<FormPat> retVal = new List<FormPat>();
        FormPat formPat;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            formPat = new FormPat();
            formPat.FormPatNum = PIn.Long(table.Rows[i]["FormPatNum"].ToString());
            formPat.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            formPat.FormDateTime = PIn.DateT(table.Rows[i]["FormDateTime"].ToString());
            retVal.Add(formPat);
        }
        return retVal;
    }

    /**
    * Inserts one FormPat into the database.  Returns the new priKey.
    */
    public static long insert(FormPat formPat) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            formPat.FormPatNum = DbHelper.getNextOracleKey("formpat","FormPatNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(formPat, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        formPat.FormPatNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(formPat, false);
        } 
    }

    /**
    * Inserts one FormPat into the database.  Provides option to use the existing priKey.
    */
    public static long insert(FormPat formPat, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            formPat.FormPatNum = ReplicationServers.getKey("formpat","FormPatNum");
        }
         
        String command = "INSERT INTO formpat (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "FormPatNum,";
        }
         
        command += "PatNum,FormDateTime) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(formPat.FormPatNum) + ",";
        }
         
        command += POut.long(formPat.PatNum) + "," + POut.dateT(formPat.FormDateTime) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            formPat.FormPatNum = Db.nonQ(command,true);
        } 
        return formPat.FormPatNum;
    }

    /**
    * Updates one FormPat in the database.
    */
    public static void update(FormPat formPat) throws Exception {
        String command = "UPDATE formpat SET " + "PatNum      =  " + POut.long(formPat.PatNum) + ", " + "FormDateTime=  " + POut.dateT(formPat.FormDateTime) + " " + "WHERE FormPatNum = " + POut.long(formPat.FormPatNum);
        Db.nonQ(command);
    }

    /**
    * Updates one FormPat in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(FormPat formPat, FormPat oldFormPat) throws Exception {
        String command = "";
        if (formPat.PatNum != oldFormPat.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.long(formPat.PatNum) + "";
        }
         
        if (formPat.FormDateTime != oldFormPat.FormDateTime)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FormDateTime = " + POut.dateT(formPat.FormDateTime) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE formpat SET " + command + " WHERE FormPatNum = " + POut.long(formPat.FormPatNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one FormPat from the database.
    */
    public static void delete(long formPatNum) throws Exception {
        String command = "DELETE FROM formpat " + "WHERE FormPatNum = " + POut.long(formPatNum);
        Db.nonQ(command);
    }

}


