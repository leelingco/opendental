//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:57:58 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.AllergyDef;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;
import OpenDentBusiness.SnomedAllergy;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class AllergyDefCrud   
{
    /**
    * Gets one AllergyDef object from the database using the primary key.  Returns null if not found.
    */
    public static AllergyDef selectOne(long allergyDefNum) throws Exception {
        String command = "SELECT * FROM allergydef " + "WHERE AllergyDefNum = " + POut.long(allergyDefNum);
        List<AllergyDef> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one AllergyDef object from the database using a query.
    */
    public static AllergyDef selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<AllergyDef> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of AllergyDef objects from the database using a query.
    */
    public static List<AllergyDef> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<AllergyDef> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<AllergyDef> tableToList(DataTable table) throws Exception {
        List<AllergyDef> retVal = new List<AllergyDef>();
        AllergyDef allergyDef;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            allergyDef = new AllergyDef();
            allergyDef.AllergyDefNum = PIn.Long(table.Rows[i]["AllergyDefNum"].ToString());
            allergyDef.Description = PIn.String(table.Rows[i]["Description"].ToString());
            allergyDef.IsHidden = PIn.Bool(table.Rows[i]["IsHidden"].ToString());
            allergyDef.DateTStamp = PIn.DateT(table.Rows[i]["DateTStamp"].ToString());
            allergyDef.SnomedType = (SnomedAllergy)PIn.Int(table.Rows[i]["SnomedType"].ToString());
            allergyDef.MedicationNum = PIn.Long(table.Rows[i]["MedicationNum"].ToString());
            allergyDef.UniiCode = PIn.String(table.Rows[i]["UniiCode"].ToString());
            retVal.Add(allergyDef);
        }
        return retVal;
    }

    /**
    * Inserts one AllergyDef into the database.  Returns the new priKey.
    */
    public static long insert(AllergyDef allergyDef) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            allergyDef.AllergyDefNum = DbHelper.getNextOracleKey("allergydef","AllergyDefNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(allergyDef, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        allergyDef.AllergyDefNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(allergyDef, false);
        } 
    }

    /**
    * Inserts one AllergyDef into the database.  Provides option to use the existing priKey.
    */
    public static long insert(AllergyDef allergyDef, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            allergyDef.AllergyDefNum = ReplicationServers.getKey("allergydef","AllergyDefNum");
        }
         
        String command = "INSERT INTO allergydef (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "AllergyDefNum,";
        }
         
        command += "Description,IsHidden,SnomedType,MedicationNum,UniiCode) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(allergyDef.AllergyDefNum) + ",";
        }
         
        //DateTStamp can only be set by MySQL
        command += "'" + POut.string(allergyDef.Description) + "'," + POut.bool(allergyDef.IsHidden) + "," + POut.int(((Enum)allergyDef.SnomedType).ordinal()) + "," + POut.long(allergyDef.MedicationNum) + "," + "'" + POut.string(allergyDef.UniiCode) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            allergyDef.AllergyDefNum = Db.nonQ(command,true);
        } 
        return allergyDef.AllergyDefNum;
    }

    /**
    * Updates one AllergyDef in the database.
    */
    public static void update(AllergyDef allergyDef) throws Exception {
        //DateTStamp can only be set by MySQL
        String command = "UPDATE allergydef SET " + "Description  = '" + POut.string(allergyDef.Description) + "', " + "IsHidden     =  " + POut.bool(allergyDef.IsHidden) + ", " + "SnomedType   =  " + POut.int(((Enum)allergyDef.SnomedType).ordinal()) + ", " + "MedicationNum=  " + POut.long(allergyDef.MedicationNum) + ", " + "UniiCode     = '" + POut.string(allergyDef.UniiCode) + "' " + "WHERE AllergyDefNum = " + POut.long(allergyDef.AllergyDefNum);
        Db.nonQ(command);
    }

    /**
    * Updates one AllergyDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(AllergyDef allergyDef, AllergyDef oldAllergyDef) throws Exception {
        String command = "";
        if (!StringSupport.equals(allergyDef.Description, oldAllergyDef.Description))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.string(allergyDef.Description) + "'";
        }
         
        if (allergyDef.IsHidden != oldAllergyDef.IsHidden)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsHidden = " + POut.bool(allergyDef.IsHidden) + "";
        }
         
        //DateTStamp can only be set by MySQL
        if (allergyDef.SnomedType != oldAllergyDef.SnomedType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SnomedType = " + POut.int(((Enum)allergyDef.SnomedType).ordinal()) + "";
        }
         
        if (allergyDef.MedicationNum != oldAllergyDef.MedicationNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MedicationNum = " + POut.long(allergyDef.MedicationNum) + "";
        }
         
        if (!StringSupport.equals(allergyDef.UniiCode, oldAllergyDef.UniiCode))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UniiCode = '" + POut.string(allergyDef.UniiCode) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE allergydef SET " + command + " WHERE AllergyDefNum = " + POut.long(allergyDef.AllergyDefNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one AllergyDef from the database.
    */
    public static void delete(long allergyDefNum) throws Exception {
        String command = "DELETE FROM allergydef " + "WHERE AllergyDefNum = " + POut.long(allergyDefNum);
        Db.nonQ(command);
    }

}


