//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:01 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.ImageType;
import OpenDentBusiness.OdDbType;
import OpenDentBusiness.OdSqlParameter;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class DocumentCrud   
{
    /**
    * Gets one Document object from the database using the primary key.  Returns null if not found.
    */
    public static OpenDentBusiness.Document selectOne(long docNum) throws Exception {
        String command = "SELECT * FROM document " + "WHERE DocNum = " + POut.long(docNum);
        List<OpenDentBusiness.Document> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Document object from the database using a query.
    */
    public static OpenDentBusiness.Document selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<OpenDentBusiness.Document> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Document objects from the database using a query.
    */
    public static List<OpenDentBusiness.Document> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<OpenDentBusiness.Document> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<OpenDentBusiness.Document> tableToList(DataTable table) throws Exception {
        List<OpenDentBusiness.Document> retVal = new List<OpenDentBusiness.Document>();
        OpenDentBusiness.Document document;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            document = new OpenDentBusiness.Document();
            document.DocNum = PIn.Long(table.Rows[i]["DocNum"].ToString());
            document.Description = PIn.String(table.Rows[i]["Description"].ToString());
            document.DateCreated = PIn.Date(table.Rows[i]["DateCreated"].ToString());
            document.DocCategory = PIn.Long(table.Rows[i]["DocCategory"].ToString());
            document.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            document.FileName = PIn.String(table.Rows[i]["FileName"].ToString());
            document.ImgType = (ImageType)PIn.Int(table.Rows[i]["ImgType"].ToString());
            document.IsFlipped = PIn.Bool(table.Rows[i]["IsFlipped"].ToString());
            document.DegreesRotated = PIn.Int(table.Rows[i]["DegreesRotated"].ToString());
            document.ToothNumbers = PIn.String(table.Rows[i]["ToothNumbers"].ToString());
            document.Note = PIn.String(table.Rows[i]["Note"].ToString());
            document.SigIsTopaz = PIn.Bool(table.Rows[i]["SigIsTopaz"].ToString());
            document.Signature = PIn.String(table.Rows[i]["Signature"].ToString());
            document.CropX = PIn.Int(table.Rows[i]["CropX"].ToString());
            document.CropY = PIn.Int(table.Rows[i]["CropY"].ToString());
            document.CropW = PIn.Int(table.Rows[i]["CropW"].ToString());
            document.CropH = PIn.Int(table.Rows[i]["CropH"].ToString());
            document.WindowingMin = PIn.Int(table.Rows[i]["WindowingMin"].ToString());
            document.WindowingMax = PIn.Int(table.Rows[i]["WindowingMax"].ToString());
            document.MountItemNum = PIn.Long(table.Rows[i]["MountItemNum"].ToString());
            document.DateTStamp = PIn.DateT(table.Rows[i]["DateTStamp"].ToString());
            document.RawBase64 = PIn.String(table.Rows[i]["RawBase64"].ToString());
            document.Thumbnail = PIn.String(table.Rows[i]["Thumbnail"].ToString());
            retVal.Add(document);
        }
        return retVal;
    }

    /**
    * Inserts one Document into the database.  Returns the new priKey.
    */
    public static long insert(OpenDentBusiness.Document document) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            document.DocNum = DbHelper.getNextOracleKey("document","DocNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(document, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        document.DocNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(document, false);
        } 
    }

    /**
    * Inserts one Document into the database.  Provides option to use the existing priKey.
    */
    public static long insert(OpenDentBusiness.Document document, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            document.DocNum = ReplicationServers.getKey("document","DocNum");
        }
         
        String command = "INSERT INTO document (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "DocNum,";
        }
         
        command += "Description,DateCreated,DocCategory,PatNum,FileName,ImgType,IsFlipped,DegreesRotated,ToothNumbers,Note,SigIsTopaz,Signature,CropX,CropY,CropW,CropH,WindowingMin,WindowingMax,MountItemNum,RawBase64,Thumbnail) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(document.DocNum) + ",";
        }
         
        //DateTStamp can only be set by MySQL
        command += "'" + POut.string(document.Description) + "'," + POut.date(document.DateCreated) + "," + POut.long(document.DocCategory) + "," + POut.long(document.PatNum) + "," + "'" + POut.string(document.FileName) + "'," + POut.int(((Enum)document.ImgType).ordinal()) + "," + POut.bool(document.IsFlipped) + "," + POut.int(document.DegreesRotated) + "," + "'" + POut.string(document.ToothNumbers) + "'," + "'" + POut.string(document.Note) + "'," + POut.bool(document.SigIsTopaz) + "," + "'" + POut.string(document.Signature) + "'," + POut.int(document.CropX) + "," + POut.int(document.CropY) + "," + POut.int(document.CropW) + "," + POut.int(document.CropH) + "," + POut.int(document.WindowingMin) + "," + POut.int(document.WindowingMax) + "," + POut.long(document.MountItemNum) + "," + DbHelper.getParamChar() + "paramRawBase64," + DbHelper.getParamChar() + "paramThumbnail)";
        if (document.RawBase64 == null)
        {
            document.RawBase64 = "";
        }
         
        OdSqlParameter paramRawBase64 = new OdSqlParameter("paramRawBase64", OdDbType.Text, document.RawBase64);
        if (document.Thumbnail == null)
        {
            document.Thumbnail = "";
        }
         
        OdSqlParameter paramThumbnail = new OdSqlParameter("paramThumbnail", OdDbType.Text, document.Thumbnail);
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command,paramRawBase64,paramThumbnail);
        }
        else
        {
            document.DocNum = Db.nonQ(command,true,paramRawBase64,paramThumbnail);
        } 
        return document.DocNum;
    }

    /**
    * Updates one Document in the database.
    */
    public static void update(OpenDentBusiness.Document document) throws Exception {
        //DateTStamp can only be set by MySQL
        String command = "UPDATE document SET " + "Description   = '" + POut.string(document.Description) + "', " + "DateCreated   =  " + POut.date(document.DateCreated) + ", " + "DocCategory   =  " + POut.long(document.DocCategory) + ", " + "PatNum        =  " + POut.long(document.PatNum) + ", " + "FileName      = '" + POut.string(document.FileName) + "', " + "ImgType       =  " + POut.int(((Enum)document.ImgType).ordinal()) + ", " + "IsFlipped     =  " + POut.bool(document.IsFlipped) + ", " + "DegreesRotated=  " + POut.int(document.DegreesRotated) + ", " + "ToothNumbers  = '" + POut.string(document.ToothNumbers) + "', " + "Note          = '" + POut.string(document.Note) + "', " + "SigIsTopaz    =  " + POut.bool(document.SigIsTopaz) + ", " + "Signature     = '" + POut.string(document.Signature) + "', " + "CropX         =  " + POut.int(document.CropX) + ", " + "CropY         =  " + POut.int(document.CropY) + ", " + "CropW         =  " + POut.int(document.CropW) + ", " + "CropH         =  " + POut.int(document.CropH) + ", " + "WindowingMin  =  " + POut.int(document.WindowingMin) + ", " + "WindowingMax  =  " + POut.int(document.WindowingMax) + ", " + "MountItemNum  =  " + POut.long(document.MountItemNum) + ", " + "RawBase64     =  " + DbHelper.getParamChar() + "paramRawBase64, " + "Thumbnail     =  " + DbHelper.getParamChar() + "paramThumbnail " + "WHERE DocNum = " + POut.long(document.DocNum);
        if (document.RawBase64 == null)
        {
            document.RawBase64 = "";
        }
         
        OdSqlParameter paramRawBase64 = new OdSqlParameter("paramRawBase64", OdDbType.Text, document.RawBase64);
        if (document.Thumbnail == null)
        {
            document.Thumbnail = "";
        }
         
        OdSqlParameter paramThumbnail = new OdSqlParameter("paramThumbnail", OdDbType.Text, document.Thumbnail);
        Db.nonQ(command,paramRawBase64,paramThumbnail);
    }

    /**
    * Updates one Document in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(OpenDentBusiness.Document document, OpenDentBusiness.Document oldDocument) throws Exception {
        String command = "";
        if (!StringSupport.equals(document.Description, oldDocument.Description))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.string(document.Description) + "'";
        }
         
        if (document.DateCreated != oldDocument.DateCreated)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateCreated = " + POut.date(document.DateCreated) + "";
        }
         
        if (document.DocCategory != oldDocument.DocCategory)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DocCategory = " + POut.long(document.DocCategory) + "";
        }
         
        if (document.PatNum != oldDocument.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.long(document.PatNum) + "";
        }
         
        if (!StringSupport.equals(document.FileName, oldDocument.FileName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FileName = '" + POut.string(document.FileName) + "'";
        }
         
        if (document.ImgType != oldDocument.ImgType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ImgType = " + POut.int(((Enum)document.ImgType).ordinal()) + "";
        }
         
        if (document.IsFlipped != oldDocument.IsFlipped)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsFlipped = " + POut.bool(document.IsFlipped) + "";
        }
         
        if (document.DegreesRotated != oldDocument.DegreesRotated)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DegreesRotated = " + POut.int(document.DegreesRotated) + "";
        }
         
        if (!StringSupport.equals(document.ToothNumbers, oldDocument.ToothNumbers))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ToothNumbers = '" + POut.string(document.ToothNumbers) + "'";
        }
         
        if (!StringSupport.equals(document.Note, oldDocument.Note))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.string(document.Note) + "'";
        }
         
        if (document.SigIsTopaz != oldDocument.SigIsTopaz)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SigIsTopaz = " + POut.bool(document.SigIsTopaz) + "";
        }
         
        if (!StringSupport.equals(document.Signature, oldDocument.Signature))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Signature = '" + POut.string(document.Signature) + "'";
        }
         
        if (document.CropX != oldDocument.CropX)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CropX = " + POut.int(document.CropX) + "";
        }
         
        if (document.CropY != oldDocument.CropY)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CropY = " + POut.int(document.CropY) + "";
        }
         
        if (document.CropW != oldDocument.CropW)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CropW = " + POut.int(document.CropW) + "";
        }
         
        if (document.CropH != oldDocument.CropH)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CropH = " + POut.int(document.CropH) + "";
        }
         
        if (document.WindowingMin != oldDocument.WindowingMin)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "WindowingMin = " + POut.int(document.WindowingMin) + "";
        }
         
        if (document.WindowingMax != oldDocument.WindowingMax)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "WindowingMax = " + POut.int(document.WindowingMax) + "";
        }
         
        if (document.MountItemNum != oldDocument.MountItemNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MountItemNum = " + POut.long(document.MountItemNum) + "";
        }
         
        //DateTStamp can only be set by MySQL
        if (!StringSupport.equals(document.RawBase64, oldDocument.RawBase64))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RawBase64 = " + DbHelper.getParamChar() + "paramRawBase64";
        }
         
        if (!StringSupport.equals(document.Thumbnail, oldDocument.Thumbnail))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Thumbnail = " + DbHelper.getParamChar() + "paramThumbnail";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        if (document.RawBase64 == null)
        {
            document.RawBase64 = "";
        }
         
        OdSqlParameter paramRawBase64 = new OdSqlParameter("paramRawBase64", OdDbType.Text, document.RawBase64);
        if (document.Thumbnail == null)
        {
            document.Thumbnail = "";
        }
         
        OdSqlParameter paramThumbnail = new OdSqlParameter("paramThumbnail", OdDbType.Text, document.Thumbnail);
        command = "UPDATE document SET " + command + " WHERE DocNum = " + POut.long(document.DocNum);
        Db.nonQ(command,paramRawBase64,paramThumbnail);
    }

    /**
    * Deletes one Document from the database.
    */
    public static void delete(long docNum) throws Exception {
        String command = "DELETE FROM document " + "WHERE DocNum = " + POut.long(docNum);
        Db.nonQ(command);
    }

}


