//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:57:58 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.CentralConnection;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class CentralConnectionCrud   
{
    /**
    * Gets one CentralConnection object from the database using the primary key.  Returns null if not found.
    */
    public static CentralConnection selectOne(long centralConnectionNum) throws Exception {
        String command = "SELECT * FROM centralconnection " + "WHERE CentralConnectionNum = " + POut.long(centralConnectionNum);
        List<CentralConnection> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one CentralConnection object from the database using a query.
    */
    public static CentralConnection selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<CentralConnection> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of CentralConnection objects from the database using a query.
    */
    public static List<CentralConnection> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<CentralConnection> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<CentralConnection> tableToList(DataTable table) throws Exception {
        List<CentralConnection> retVal = new List<CentralConnection>();
        CentralConnection centralConnection;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            centralConnection = new CentralConnection();
            centralConnection.CentralConnectionNum = PIn.Long(table.Rows[i]["CentralConnectionNum"].ToString());
            centralConnection.ServerName = PIn.String(table.Rows[i]["ServerName"].ToString());
            centralConnection.DatabaseName = PIn.String(table.Rows[i]["DatabaseName"].ToString());
            centralConnection.MySqlUser = PIn.String(table.Rows[i]["MySqlUser"].ToString());
            centralConnection.MySqlPassword = PIn.String(table.Rows[i]["MySqlPassword"].ToString());
            centralConnection.ServiceURI = PIn.String(table.Rows[i]["ServiceURI"].ToString());
            centralConnection.OdUser = PIn.String(table.Rows[i]["OdUser"].ToString());
            centralConnection.OdPassword = PIn.String(table.Rows[i]["OdPassword"].ToString());
            centralConnection.Note = PIn.String(table.Rows[i]["Note"].ToString());
            centralConnection.ItemOrder = PIn.Int(table.Rows[i]["ItemOrder"].ToString());
            centralConnection.WebServiceIsEcw = PIn.Bool(table.Rows[i]["WebServiceIsEcw"].ToString());
            retVal.Add(centralConnection);
        }
        return retVal;
    }

    /**
    * Inserts one CentralConnection into the database.  Returns the new priKey.
    */
    public static long insert(CentralConnection centralConnection) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            centralConnection.CentralConnectionNum = DbHelper.getNextOracleKey("centralconnection","CentralConnectionNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(centralConnection, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        centralConnection.CentralConnectionNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(centralConnection, false);
        } 
    }

    /**
    * Inserts one CentralConnection into the database.  Provides option to use the existing priKey.
    */
    public static long insert(CentralConnection centralConnection, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            centralConnection.CentralConnectionNum = ReplicationServers.getKey("centralconnection","CentralConnectionNum");
        }
         
        String command = "INSERT INTO centralconnection (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "CentralConnectionNum,";
        }
         
        command += "ServerName,DatabaseName,MySqlUser,MySqlPassword,ServiceURI,OdUser,OdPassword,Note,ItemOrder,WebServiceIsEcw) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(centralConnection.CentralConnectionNum) + ",";
        }
         
        command += "'" + POut.string(centralConnection.ServerName) + "'," + "'" + POut.string(centralConnection.DatabaseName) + "'," + "'" + POut.string(centralConnection.MySqlUser) + "'," + "'" + POut.string(centralConnection.MySqlPassword) + "'," + "'" + POut.string(centralConnection.ServiceURI) + "'," + "'" + POut.string(centralConnection.OdUser) + "'," + "'" + POut.string(centralConnection.OdPassword) + "'," + "'" + POut.string(centralConnection.Note) + "'," + POut.int(centralConnection.ItemOrder) + "," + POut.bool(centralConnection.WebServiceIsEcw) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            centralConnection.CentralConnectionNum = Db.nonQ(command,true);
        } 
        return centralConnection.CentralConnectionNum;
    }

    /**
    * Updates one CentralConnection in the database.
    */
    public static void update(CentralConnection centralConnection) throws Exception {
        String command = "UPDATE centralconnection SET " + "ServerName          = '" + POut.string(centralConnection.ServerName) + "', " + "DatabaseName        = '" + POut.string(centralConnection.DatabaseName) + "', " + "MySqlUser           = '" + POut.string(centralConnection.MySqlUser) + "', " + "MySqlPassword       = '" + POut.string(centralConnection.MySqlPassword) + "', " + "ServiceURI          = '" + POut.string(centralConnection.ServiceURI) + "', " + "OdUser              = '" + POut.string(centralConnection.OdUser) + "', " + "OdPassword          = '" + POut.string(centralConnection.OdPassword) + "', " + "Note                = '" + POut.string(centralConnection.Note) + "', " + "ItemOrder           =  " + POut.int(centralConnection.ItemOrder) + ", " + "WebServiceIsEcw     =  " + POut.bool(centralConnection.WebServiceIsEcw) + " " + "WHERE CentralConnectionNum = " + POut.long(centralConnection.CentralConnectionNum);
        Db.nonQ(command);
    }

    /**
    * Updates one CentralConnection in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(CentralConnection centralConnection, CentralConnection oldCentralConnection) throws Exception {
        String command = "";
        if (!StringSupport.equals(centralConnection.ServerName, oldCentralConnection.ServerName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ServerName = '" + POut.string(centralConnection.ServerName) + "'";
        }
         
        if (!StringSupport.equals(centralConnection.DatabaseName, oldCentralConnection.DatabaseName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DatabaseName = '" + POut.string(centralConnection.DatabaseName) + "'";
        }
         
        if (!StringSupport.equals(centralConnection.MySqlUser, oldCentralConnection.MySqlUser))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MySqlUser = '" + POut.string(centralConnection.MySqlUser) + "'";
        }
         
        if (!StringSupport.equals(centralConnection.MySqlPassword, oldCentralConnection.MySqlPassword))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MySqlPassword = '" + POut.string(centralConnection.MySqlPassword) + "'";
        }
         
        if (!StringSupport.equals(centralConnection.ServiceURI, oldCentralConnection.ServiceURI))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ServiceURI = '" + POut.string(centralConnection.ServiceURI) + "'";
        }
         
        if (!StringSupport.equals(centralConnection.OdUser, oldCentralConnection.OdUser))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "OdUser = '" + POut.string(centralConnection.OdUser) + "'";
        }
         
        if (!StringSupport.equals(centralConnection.OdPassword, oldCentralConnection.OdPassword))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "OdPassword = '" + POut.string(centralConnection.OdPassword) + "'";
        }
         
        if (!StringSupport.equals(centralConnection.Note, oldCentralConnection.Note))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.string(centralConnection.Note) + "'";
        }
         
        if (centralConnection.ItemOrder != oldCentralConnection.ItemOrder)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ItemOrder = " + POut.int(centralConnection.ItemOrder) + "";
        }
         
        if (centralConnection.WebServiceIsEcw != oldCentralConnection.WebServiceIsEcw)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "WebServiceIsEcw = " + POut.bool(centralConnection.WebServiceIsEcw) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE centralconnection SET " + command + " WHERE CentralConnectionNum = " + POut.long(centralConnection.CentralConnectionNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one CentralConnection from the database.
    */
    public static void delete(long centralConnectionNum) throws Exception {
        String command = "DELETE FROM centralconnection " + "WHERE CentralConnectionNum = " + POut.long(centralConnectionNum);
        Db.nonQ(command);
    }

}


