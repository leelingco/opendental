//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:57:58 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.AutoCondComparison;
import OpenDentBusiness.AutoCondField;
import OpenDentBusiness.AutomationCondition;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class AutomationConditionCrud   
{
    /**
    * Gets one AutomationCondition object from the database using the primary key.  Returns null if not found.
    */
    public static AutomationCondition selectOne(long automationConditionNum) throws Exception {
        String command = "SELECT * FROM automationcondition " + "WHERE AutomationConditionNum = " + POut.long(automationConditionNum);
        List<AutomationCondition> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one AutomationCondition object from the database using a query.
    */
    public static AutomationCondition selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<AutomationCondition> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of AutomationCondition objects from the database using a query.
    */
    public static List<AutomationCondition> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<AutomationCondition> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<AutomationCondition> tableToList(DataTable table) throws Exception {
        List<AutomationCondition> retVal = new List<AutomationCondition>();
        AutomationCondition automationCondition;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            automationCondition = new AutomationCondition();
            automationCondition.AutomationConditionNum = PIn.Long(table.Rows[i]["AutomationConditionNum"].ToString());
            automationCondition.AutomationNum = PIn.Long(table.Rows[i]["AutomationNum"].ToString());
            automationCondition.CompareField = (AutoCondField)PIn.Int(table.Rows[i]["CompareField"].ToString());
            automationCondition.Comparison = (AutoCondComparison)PIn.Int(table.Rows[i]["Comparison"].ToString());
            automationCondition.CompareString = PIn.String(table.Rows[i]["CompareString"].ToString());
            retVal.Add(automationCondition);
        }
        return retVal;
    }

    /**
    * Inserts one AutomationCondition into the database.  Returns the new priKey.
    */
    public static long insert(AutomationCondition automationCondition) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            automationCondition.AutomationConditionNum = DbHelper.getNextOracleKey("automationcondition","AutomationConditionNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(automationCondition, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        automationCondition.AutomationConditionNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(automationCondition, false);
        } 
    }

    /**
    * Inserts one AutomationCondition into the database.  Provides option to use the existing priKey.
    */
    public static long insert(AutomationCondition automationCondition, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            automationCondition.AutomationConditionNum = ReplicationServers.getKey("automationcondition","AutomationConditionNum");
        }
         
        String command = "INSERT INTO automationcondition (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "AutomationConditionNum,";
        }
         
        command += "AutomationNum,CompareField,Comparison,CompareString) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(automationCondition.AutomationConditionNum) + ",";
        }
         
        command += POut.long(automationCondition.AutomationNum) + "," + POut.int(((Enum)automationCondition.CompareField).ordinal()) + "," + POut.int(((Enum)automationCondition.Comparison).ordinal()) + "," + "'" + POut.string(automationCondition.CompareString) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            automationCondition.AutomationConditionNum = Db.nonQ(command,true);
        } 
        return automationCondition.AutomationConditionNum;
    }

    /**
    * Updates one AutomationCondition in the database.
    */
    public static void update(AutomationCondition automationCondition) throws Exception {
        String command = "UPDATE automationcondition SET " + "AutomationNum         =  " + POut.long(automationCondition.AutomationNum) + ", " + "CompareField          =  " + POut.int(((Enum)automationCondition.CompareField).ordinal()) + ", " + "Comparison            =  " + POut.int(((Enum)automationCondition.Comparison).ordinal()) + ", " + "CompareString         = '" + POut.string(automationCondition.CompareString) + "' " + "WHERE AutomationConditionNum = " + POut.long(automationCondition.AutomationConditionNum);
        Db.nonQ(command);
    }

    /**
    * Updates one AutomationCondition in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(AutomationCondition automationCondition, AutomationCondition oldAutomationCondition) throws Exception {
        String command = "";
        if (automationCondition.AutomationNum != oldAutomationCondition.AutomationNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AutomationNum = " + POut.long(automationCondition.AutomationNum) + "";
        }
         
        if (automationCondition.CompareField != oldAutomationCondition.CompareField)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CompareField = " + POut.int(((Enum)automationCondition.CompareField).ordinal()) + "";
        }
         
        if (automationCondition.Comparison != oldAutomationCondition.Comparison)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Comparison = " + POut.int(((Enum)automationCondition.Comparison).ordinal()) + "";
        }
         
        if (!StringSupport.equals(automationCondition.CompareString, oldAutomationCondition.CompareString))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CompareString = '" + POut.string(automationCondition.CompareString) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE automationcondition SET " + command + " WHERE AutomationConditionNum = " + POut.long(automationCondition.AutomationConditionNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one AutomationCondition from the database.
    */
    public static void delete(long automationConditionNum) throws Exception {
        String command = "DELETE FROM automationcondition " + "WHERE AutomationConditionNum = " + POut.long(automationConditionNum);
        Db.nonQ(command);
    }

}


