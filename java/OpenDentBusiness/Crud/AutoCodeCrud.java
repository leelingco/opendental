//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:57:58 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.AutoCode;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class AutoCodeCrud   
{
    /**
    * Gets one AutoCode object from the database using the primary key.  Returns null if not found.
    */
    public static AutoCode selectOne(long autoCodeNum) throws Exception {
        String command = "SELECT * FROM autocode " + "WHERE AutoCodeNum = " + POut.long(autoCodeNum);
        List<AutoCode> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one AutoCode object from the database using a query.
    */
    public static AutoCode selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<AutoCode> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of AutoCode objects from the database using a query.
    */
    public static List<AutoCode> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<AutoCode> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<AutoCode> tableToList(DataTable table) throws Exception {
        List<AutoCode> retVal = new List<AutoCode>();
        AutoCode autoCode;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            autoCode = new AutoCode();
            autoCode.AutoCodeNum = PIn.Long(table.Rows[i]["AutoCodeNum"].ToString());
            autoCode.Description = PIn.String(table.Rows[i]["Description"].ToString());
            autoCode.IsHidden = PIn.Bool(table.Rows[i]["IsHidden"].ToString());
            autoCode.LessIntrusive = PIn.Bool(table.Rows[i]["LessIntrusive"].ToString());
            retVal.Add(autoCode);
        }
        return retVal;
    }

    /**
    * Inserts one AutoCode into the database.  Returns the new priKey.
    */
    public static long insert(AutoCode autoCode) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            autoCode.AutoCodeNum = DbHelper.getNextOracleKey("autocode","AutoCodeNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(autoCode, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        autoCode.AutoCodeNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(autoCode, false);
        } 
    }

    /**
    * Inserts one AutoCode into the database.  Provides option to use the existing priKey.
    */
    public static long insert(AutoCode autoCode, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            autoCode.AutoCodeNum = ReplicationServers.getKey("autocode","AutoCodeNum");
        }
         
        String command = "INSERT INTO autocode (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "AutoCodeNum,";
        }
         
        command += "Description,IsHidden,LessIntrusive) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(autoCode.AutoCodeNum) + ",";
        }
         
        command += "'" + POut.string(autoCode.Description) + "'," + POut.bool(autoCode.IsHidden) + "," + POut.bool(autoCode.LessIntrusive) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            autoCode.AutoCodeNum = Db.nonQ(command,true);
        } 
        return autoCode.AutoCodeNum;
    }

    /**
    * Updates one AutoCode in the database.
    */
    public static void update(AutoCode autoCode) throws Exception {
        String command = "UPDATE autocode SET " + "Description  = '" + POut.string(autoCode.Description) + "', " + "IsHidden     =  " + POut.bool(autoCode.IsHidden) + ", " + "LessIntrusive=  " + POut.bool(autoCode.LessIntrusive) + " " + "WHERE AutoCodeNum = " + POut.long(autoCode.AutoCodeNum);
        Db.nonQ(command);
    }

    /**
    * Updates one AutoCode in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(AutoCode autoCode, AutoCode oldAutoCode) throws Exception {
        String command = "";
        if (!StringSupport.equals(autoCode.Description, oldAutoCode.Description))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.string(autoCode.Description) + "'";
        }
         
        if (autoCode.IsHidden != oldAutoCode.IsHidden)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsHidden = " + POut.bool(autoCode.IsHidden) + "";
        }
         
        if (autoCode.LessIntrusive != oldAutoCode.LessIntrusive)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "LessIntrusive = " + POut.bool(autoCode.LessIntrusive) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE autocode SET " + command + " WHERE AutoCodeNum = " + POut.long(autoCode.AutoCodeNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one AutoCode from the database.
    */
    public static void delete(long autoCodeNum) throws Exception {
        String command = "DELETE FROM autocode " + "WHERE AutoCodeNum = " + POut.long(autoCodeNum);
        Db.nonQ(command);
    }

}


