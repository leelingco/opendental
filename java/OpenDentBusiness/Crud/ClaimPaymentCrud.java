//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:57:59 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.ClaimPayment;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ClaimPaymentCrud   
{
    /**
    * Gets one ClaimPayment object from the database using the primary key.  Returns null if not found.
    */
    public static ClaimPayment selectOne(long claimPaymentNum) throws Exception {
        String command = "SELECT * FROM claimpayment " + "WHERE ClaimPaymentNum = " + POut.long(claimPaymentNum);
        List<ClaimPayment> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ClaimPayment object from the database using a query.
    */
    public static ClaimPayment selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ClaimPayment> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ClaimPayment objects from the database using a query.
    */
    public static List<ClaimPayment> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ClaimPayment> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ClaimPayment> tableToList(DataTable table) throws Exception {
        List<ClaimPayment> retVal = new List<ClaimPayment>();
        ClaimPayment claimPayment;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            claimPayment = new ClaimPayment();
            claimPayment.ClaimPaymentNum = PIn.Long(table.Rows[i]["ClaimPaymentNum"].ToString());
            claimPayment.CheckDate = PIn.Date(table.Rows[i]["CheckDate"].ToString());
            claimPayment.CheckAmt = PIn.Double(table.Rows[i]["CheckAmt"].ToString());
            claimPayment.CheckNum = PIn.String(table.Rows[i]["CheckNum"].ToString());
            claimPayment.BankBranch = PIn.String(table.Rows[i]["BankBranch"].ToString());
            claimPayment.Note = PIn.String(table.Rows[i]["Note"].ToString());
            claimPayment.ClinicNum = PIn.Long(table.Rows[i]["ClinicNum"].ToString());
            claimPayment.DepositNum = PIn.Long(table.Rows[i]["DepositNum"].ToString());
            claimPayment.CarrierName = PIn.String(table.Rows[i]["CarrierName"].ToString());
            claimPayment.DateIssued = PIn.Date(table.Rows[i]["DateIssued"].ToString());
            claimPayment.IsPartial = PIn.Bool(table.Rows[i]["IsPartial"].ToString());
            retVal.Add(claimPayment);
        }
        return retVal;
    }

    /**
    * Inserts one ClaimPayment into the database.  Returns the new priKey.
    */
    public static long insert(ClaimPayment claimPayment) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            claimPayment.ClaimPaymentNum = DbHelper.getNextOracleKey("claimpayment","ClaimPaymentNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(claimPayment, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        claimPayment.ClaimPaymentNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(claimPayment, false);
        } 
    }

    /**
    * Inserts one ClaimPayment into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ClaimPayment claimPayment, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            claimPayment.ClaimPaymentNum = ReplicationServers.getKey("claimpayment","ClaimPaymentNum");
        }
         
        String command = "INSERT INTO claimpayment (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "ClaimPaymentNum,";
        }
         
        command += "CheckDate,CheckAmt,CheckNum,BankBranch,Note,ClinicNum,DepositNum,CarrierName,DateIssued,IsPartial) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(claimPayment.ClaimPaymentNum) + ",";
        }
         
        command += POut.date(claimPayment.CheckDate) + "," + "'" + POut.Double(claimPayment.CheckAmt) + "'," + "'" + POut.string(claimPayment.CheckNum) + "'," + "'" + POut.string(claimPayment.BankBranch) + "'," + "'" + POut.string(claimPayment.Note) + "'," + POut.long(claimPayment.ClinicNum) + "," + POut.long(claimPayment.DepositNum) + "," + "'" + POut.string(claimPayment.CarrierName) + "'," + POut.date(claimPayment.DateIssued) + "," + POut.bool(claimPayment.IsPartial) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            claimPayment.ClaimPaymentNum = Db.nonQ(command,true);
        } 
        return claimPayment.ClaimPaymentNum;
    }

    /**
    * Updates one ClaimPayment in the database.
    */
    public static void update(ClaimPayment claimPayment) throws Exception {
        String command = "UPDATE claimpayment SET " + "CheckDate      =  " + POut.date(claimPayment.CheckDate) + ", " + "CheckAmt       = '" + POut.Double(claimPayment.CheckAmt) + "', " + "CheckNum       = '" + POut.string(claimPayment.CheckNum) + "', " + "BankBranch     = '" + POut.string(claimPayment.BankBranch) + "', " + "Note           = '" + POut.string(claimPayment.Note) + "', " + "ClinicNum      =  " + POut.long(claimPayment.ClinicNum) + ", " + "DepositNum     =  " + POut.long(claimPayment.DepositNum) + ", " + "CarrierName    = '" + POut.string(claimPayment.CarrierName) + "', " + "DateIssued     =  " + POut.date(claimPayment.DateIssued) + ", " + "IsPartial      =  " + POut.bool(claimPayment.IsPartial) + " " + "WHERE ClaimPaymentNum = " + POut.long(claimPayment.ClaimPaymentNum);
        Db.nonQ(command);
    }

    /**
    * Updates one ClaimPayment in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ClaimPayment claimPayment, ClaimPayment oldClaimPayment) throws Exception {
        String command = "";
        if (claimPayment.CheckDate != oldClaimPayment.CheckDate)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CheckDate = " + POut.date(claimPayment.CheckDate) + "";
        }
         
        if (claimPayment.CheckAmt != oldClaimPayment.CheckAmt)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CheckAmt = '" + POut.Double(claimPayment.CheckAmt) + "'";
        }
         
        if (!StringSupport.equals(claimPayment.CheckNum, oldClaimPayment.CheckNum))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CheckNum = '" + POut.string(claimPayment.CheckNum) + "'";
        }
         
        if (!StringSupport.equals(claimPayment.BankBranch, oldClaimPayment.BankBranch))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "BankBranch = '" + POut.string(claimPayment.BankBranch) + "'";
        }
         
        if (!StringSupport.equals(claimPayment.Note, oldClaimPayment.Note))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.string(claimPayment.Note) + "'";
        }
         
        if (claimPayment.ClinicNum != oldClaimPayment.ClinicNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClinicNum = " + POut.long(claimPayment.ClinicNum) + "";
        }
         
        if (claimPayment.DepositNum != oldClaimPayment.DepositNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DepositNum = " + POut.long(claimPayment.DepositNum) + "";
        }
         
        if (!StringSupport.equals(claimPayment.CarrierName, oldClaimPayment.CarrierName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CarrierName = '" + POut.string(claimPayment.CarrierName) + "'";
        }
         
        if (claimPayment.DateIssued != oldClaimPayment.DateIssued)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateIssued = " + POut.date(claimPayment.DateIssued) + "";
        }
         
        if (claimPayment.IsPartial != oldClaimPayment.IsPartial)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsPartial = " + POut.bool(claimPayment.IsPartial) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE claimpayment SET " + command + " WHERE ClaimPaymentNum = " + POut.long(claimPayment.ClaimPaymentNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one ClaimPayment from the database.
    */
    public static void delete(long claimPaymentNum) throws Exception {
        String command = "DELETE FROM claimpayment " + "WHERE ClaimPaymentNum = " + POut.long(claimPaymentNum);
        Db.nonQ(command);
    }

}


