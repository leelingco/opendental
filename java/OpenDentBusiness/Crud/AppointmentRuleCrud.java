//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:57:58 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.AppointmentRule;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class AppointmentRuleCrud   
{
    /**
    * Gets one AppointmentRule object from the database using the primary key.  Returns null if not found.
    */
    public static AppointmentRule selectOne(long appointmentRuleNum) throws Exception {
        String command = "SELECT * FROM appointmentrule " + "WHERE AppointmentRuleNum = " + POut.long(appointmentRuleNum);
        List<AppointmentRule> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one AppointmentRule object from the database using a query.
    */
    public static AppointmentRule selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<AppointmentRule> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of AppointmentRule objects from the database using a query.
    */
    public static List<AppointmentRule> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<AppointmentRule> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<AppointmentRule> tableToList(DataTable table) throws Exception {
        List<AppointmentRule> retVal = new List<AppointmentRule>();
        AppointmentRule appointmentRule;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            appointmentRule = new AppointmentRule();
            appointmentRule.AppointmentRuleNum = PIn.Long(table.Rows[i]["AppointmentRuleNum"].ToString());
            appointmentRule.RuleDesc = PIn.String(table.Rows[i]["RuleDesc"].ToString());
            appointmentRule.CodeStart = PIn.String(table.Rows[i]["CodeStart"].ToString());
            appointmentRule.CodeEnd = PIn.String(table.Rows[i]["CodeEnd"].ToString());
            appointmentRule.IsEnabled = PIn.Bool(table.Rows[i]["IsEnabled"].ToString());
            retVal.Add(appointmentRule);
        }
        return retVal;
    }

    /**
    * Inserts one AppointmentRule into the database.  Returns the new priKey.
    */
    public static long insert(AppointmentRule appointmentRule) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            appointmentRule.AppointmentRuleNum = DbHelper.getNextOracleKey("appointmentrule","AppointmentRuleNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(appointmentRule, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        appointmentRule.AppointmentRuleNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(appointmentRule, false);
        } 
    }

    /**
    * Inserts one AppointmentRule into the database.  Provides option to use the existing priKey.
    */
    public static long insert(AppointmentRule appointmentRule, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            appointmentRule.AppointmentRuleNum = ReplicationServers.getKey("appointmentrule","AppointmentRuleNum");
        }
         
        String command = "INSERT INTO appointmentrule (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "AppointmentRuleNum,";
        }
         
        command += "RuleDesc,CodeStart,CodeEnd,IsEnabled) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(appointmentRule.AppointmentRuleNum) + ",";
        }
         
        command += "'" + POut.string(appointmentRule.RuleDesc) + "'," + "'" + POut.string(appointmentRule.CodeStart) + "'," + "'" + POut.string(appointmentRule.CodeEnd) + "'," + POut.bool(appointmentRule.IsEnabled) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            appointmentRule.AppointmentRuleNum = Db.nonQ(command,true);
        } 
        return appointmentRule.AppointmentRuleNum;
    }

    /**
    * Updates one AppointmentRule in the database.
    */
    public static void update(AppointmentRule appointmentRule) throws Exception {
        String command = "UPDATE appointmentrule SET " + "RuleDesc          = '" + POut.string(appointmentRule.RuleDesc) + "', " + "CodeStart         = '" + POut.string(appointmentRule.CodeStart) + "', " + "CodeEnd           = '" + POut.string(appointmentRule.CodeEnd) + "', " + "IsEnabled         =  " + POut.bool(appointmentRule.IsEnabled) + " " + "WHERE AppointmentRuleNum = " + POut.long(appointmentRule.AppointmentRuleNum);
        Db.nonQ(command);
    }

    /**
    * Updates one AppointmentRule in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(AppointmentRule appointmentRule, AppointmentRule oldAppointmentRule) throws Exception {
        String command = "";
        if (!StringSupport.equals(appointmentRule.RuleDesc, oldAppointmentRule.RuleDesc))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RuleDesc = '" + POut.string(appointmentRule.RuleDesc) + "'";
        }
         
        if (!StringSupport.equals(appointmentRule.CodeStart, oldAppointmentRule.CodeStart))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeStart = '" + POut.string(appointmentRule.CodeStart) + "'";
        }
         
        if (!StringSupport.equals(appointmentRule.CodeEnd, oldAppointmentRule.CodeEnd))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeEnd = '" + POut.string(appointmentRule.CodeEnd) + "'";
        }
         
        if (appointmentRule.IsEnabled != oldAppointmentRule.IsEnabled)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsEnabled = " + POut.bool(appointmentRule.IsEnabled) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE appointmentrule SET " + command + " WHERE AppointmentRuleNum = " + POut.long(appointmentRule.AppointmentRuleNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one AppointmentRule from the database.
    */
    public static void delete(long appointmentRuleNum) throws Exception {
        String command = "DELETE FROM appointmentrule " + "WHERE AppointmentRuleNum = " + POut.long(appointmentRuleNum);
        Db.nonQ(command);
    }

}


