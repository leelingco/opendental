//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:01 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.EhrLabClinicalInfo;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EhrLabClinicalInfoCrud   
{
    /**
    * Gets one EhrLabClinicalInfo object from the database using the primary key.  Returns null if not found.
    */
    public static EhrLabClinicalInfo selectOne(long ehrLabClinicalInfoNum) throws Exception {
        String command = "SELECT * FROM ehrlabclinicalinfo " + "WHERE EhrLabClinicalInfoNum = " + POut.long(ehrLabClinicalInfoNum);
        List<EhrLabClinicalInfo> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one EhrLabClinicalInfo object from the database using a query.
    */
    public static EhrLabClinicalInfo selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrLabClinicalInfo> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of EhrLabClinicalInfo objects from the database using a query.
    */
    public static List<EhrLabClinicalInfo> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrLabClinicalInfo> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<EhrLabClinicalInfo> tableToList(DataTable table) throws Exception {
        List<EhrLabClinicalInfo> retVal = new List<EhrLabClinicalInfo>();
        EhrLabClinicalInfo ehrLabClinicalInfo;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            ehrLabClinicalInfo = new EhrLabClinicalInfo();
            ehrLabClinicalInfo.EhrLabClinicalInfoNum = PIn.Long(table.Rows[i]["EhrLabClinicalInfoNum"].ToString());
            ehrLabClinicalInfo.EhrLabNum = PIn.Long(table.Rows[i]["EhrLabNum"].ToString());
            ehrLabClinicalInfo.ClinicalInfoID = PIn.String(table.Rows[i]["ClinicalInfoID"].ToString());
            ehrLabClinicalInfo.ClinicalInfoText = PIn.String(table.Rows[i]["ClinicalInfoText"].ToString());
            ehrLabClinicalInfo.ClinicalInfoCodeSystemName = PIn.String(table.Rows[i]["ClinicalInfoCodeSystemName"].ToString());
            ehrLabClinicalInfo.ClinicalInfoIDAlt = PIn.String(table.Rows[i]["ClinicalInfoIDAlt"].ToString());
            ehrLabClinicalInfo.ClinicalInfoTextAlt = PIn.String(table.Rows[i]["ClinicalInfoTextAlt"].ToString());
            ehrLabClinicalInfo.ClinicalInfoCodeSystemNameAlt = PIn.String(table.Rows[i]["ClinicalInfoCodeSystemNameAlt"].ToString());
            ehrLabClinicalInfo.ClinicalInfoTextOriginal = PIn.String(table.Rows[i]["ClinicalInfoTextOriginal"].ToString());
            retVal.Add(ehrLabClinicalInfo);
        }
        return retVal;
    }

    /**
    * Inserts one EhrLabClinicalInfo into the database.  Returns the new priKey.
    */
    public static long insert(EhrLabClinicalInfo ehrLabClinicalInfo) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            ehrLabClinicalInfo.EhrLabClinicalInfoNum = DbHelper.getNextOracleKey("ehrlabclinicalinfo","EhrLabClinicalInfoNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(ehrLabClinicalInfo, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        ehrLabClinicalInfo.EhrLabClinicalInfoNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(ehrLabClinicalInfo, false);
        } 
    }

    /**
    * Inserts one EhrLabClinicalInfo into the database.  Provides option to use the existing priKey.
    */
    public static long insert(EhrLabClinicalInfo ehrLabClinicalInfo, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            ehrLabClinicalInfo.EhrLabClinicalInfoNum = ReplicationServers.getKey("ehrlabclinicalinfo","EhrLabClinicalInfoNum");
        }
         
        String command = "INSERT INTO ehrlabclinicalinfo (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "EhrLabClinicalInfoNum,";
        }
         
        command += "EhrLabNum,ClinicalInfoID,ClinicalInfoText,ClinicalInfoCodeSystemName,ClinicalInfoIDAlt,ClinicalInfoTextAlt,ClinicalInfoCodeSystemNameAlt,ClinicalInfoTextOriginal) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(ehrLabClinicalInfo.EhrLabClinicalInfoNum) + ",";
        }
         
        command += POut.long(ehrLabClinicalInfo.EhrLabNum) + "," + "'" + POut.string(ehrLabClinicalInfo.ClinicalInfoID) + "'," + "'" + POut.string(ehrLabClinicalInfo.ClinicalInfoText) + "'," + "'" + POut.string(ehrLabClinicalInfo.ClinicalInfoCodeSystemName) + "'," + "'" + POut.string(ehrLabClinicalInfo.ClinicalInfoIDAlt) + "'," + "'" + POut.string(ehrLabClinicalInfo.ClinicalInfoTextAlt) + "'," + "'" + POut.string(ehrLabClinicalInfo.ClinicalInfoCodeSystemNameAlt) + "'," + "'" + POut.string(ehrLabClinicalInfo.ClinicalInfoTextOriginal) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            ehrLabClinicalInfo.EhrLabClinicalInfoNum = Db.nonQ(command,true);
        } 
        return ehrLabClinicalInfo.EhrLabClinicalInfoNum;
    }

    /**
    * Updates one EhrLabClinicalInfo in the database.
    */
    public static void update(EhrLabClinicalInfo ehrLabClinicalInfo) throws Exception {
        String command = "UPDATE ehrlabclinicalinfo SET " + "EhrLabNum                    =  " + POut.long(ehrLabClinicalInfo.EhrLabNum) + ", " + "ClinicalInfoID               = '" + POut.string(ehrLabClinicalInfo.ClinicalInfoID) + "', " + "ClinicalInfoText             = '" + POut.string(ehrLabClinicalInfo.ClinicalInfoText) + "', " + "ClinicalInfoCodeSystemName   = '" + POut.string(ehrLabClinicalInfo.ClinicalInfoCodeSystemName) + "', " + "ClinicalInfoIDAlt            = '" + POut.string(ehrLabClinicalInfo.ClinicalInfoIDAlt) + "', " + "ClinicalInfoTextAlt          = '" + POut.string(ehrLabClinicalInfo.ClinicalInfoTextAlt) + "', " + "ClinicalInfoCodeSystemNameAlt= '" + POut.string(ehrLabClinicalInfo.ClinicalInfoCodeSystemNameAlt) + "', " + "ClinicalInfoTextOriginal     = '" + POut.string(ehrLabClinicalInfo.ClinicalInfoTextOriginal) + "' " + "WHERE EhrLabClinicalInfoNum = " + POut.long(ehrLabClinicalInfo.EhrLabClinicalInfoNum);
        Db.nonQ(command);
    }

    /**
    * Updates one EhrLabClinicalInfo in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(EhrLabClinicalInfo ehrLabClinicalInfo, EhrLabClinicalInfo oldEhrLabClinicalInfo) throws Exception {
        String command = "";
        if (ehrLabClinicalInfo.EhrLabNum != oldEhrLabClinicalInfo.EhrLabNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EhrLabNum = " + POut.long(ehrLabClinicalInfo.EhrLabNum) + "";
        }
         
        if (!StringSupport.equals(ehrLabClinicalInfo.ClinicalInfoID, oldEhrLabClinicalInfo.ClinicalInfoID))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClinicalInfoID = '" + POut.string(ehrLabClinicalInfo.ClinicalInfoID) + "'";
        }
         
        if (!StringSupport.equals(ehrLabClinicalInfo.ClinicalInfoText, oldEhrLabClinicalInfo.ClinicalInfoText))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClinicalInfoText = '" + POut.string(ehrLabClinicalInfo.ClinicalInfoText) + "'";
        }
         
        if (!StringSupport.equals(ehrLabClinicalInfo.ClinicalInfoCodeSystemName, oldEhrLabClinicalInfo.ClinicalInfoCodeSystemName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClinicalInfoCodeSystemName = '" + POut.string(ehrLabClinicalInfo.ClinicalInfoCodeSystemName) + "'";
        }
         
        if (!StringSupport.equals(ehrLabClinicalInfo.ClinicalInfoIDAlt, oldEhrLabClinicalInfo.ClinicalInfoIDAlt))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClinicalInfoIDAlt = '" + POut.string(ehrLabClinicalInfo.ClinicalInfoIDAlt) + "'";
        }
         
        if (!StringSupport.equals(ehrLabClinicalInfo.ClinicalInfoTextAlt, oldEhrLabClinicalInfo.ClinicalInfoTextAlt))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClinicalInfoTextAlt = '" + POut.string(ehrLabClinicalInfo.ClinicalInfoTextAlt) + "'";
        }
         
        if (!StringSupport.equals(ehrLabClinicalInfo.ClinicalInfoCodeSystemNameAlt, oldEhrLabClinicalInfo.ClinicalInfoCodeSystemNameAlt))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClinicalInfoCodeSystemNameAlt = '" + POut.string(ehrLabClinicalInfo.ClinicalInfoCodeSystemNameAlt) + "'";
        }
         
        if (!StringSupport.equals(ehrLabClinicalInfo.ClinicalInfoTextOriginal, oldEhrLabClinicalInfo.ClinicalInfoTextOriginal))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClinicalInfoTextOriginal = '" + POut.string(ehrLabClinicalInfo.ClinicalInfoTextOriginal) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE ehrlabclinicalinfo SET " + command + " WHERE EhrLabClinicalInfoNum = " + POut.long(ehrLabClinicalInfo.EhrLabClinicalInfoNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one EhrLabClinicalInfo from the database.
    */
    public static void delete(long ehrLabClinicalInfoNum) throws Exception {
        String command = "DELETE FROM ehrlabclinicalinfo " + "WHERE EhrLabClinicalInfoNum = " + POut.long(ehrLabClinicalInfoNum);
        Db.nonQ(command);
    }

}


