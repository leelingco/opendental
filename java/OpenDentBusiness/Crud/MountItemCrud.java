//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:06 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.MountItem;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class MountItemCrud   
{
    /**
    * Gets one MountItem object from the database using the primary key.  Returns null if not found.
    */
    public static MountItem selectOne(long mountItemNum) throws Exception {
        String command = "SELECT * FROM mountitem " + "WHERE MountItemNum = " + POut.long(mountItemNum);
        List<MountItem> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one MountItem object from the database using a query.
    */
    public static MountItem selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<MountItem> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of MountItem objects from the database using a query.
    */
    public static List<MountItem> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<MountItem> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<MountItem> tableToList(DataTable table) throws Exception {
        List<MountItem> retVal = new List<MountItem>();
        MountItem mountItem;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            mountItem = new MountItem();
            mountItem.MountItemNum = PIn.Long(table.Rows[i]["MountItemNum"].ToString());
            mountItem.MountNum = PIn.Long(table.Rows[i]["MountNum"].ToString());
            mountItem.Xpos = PIn.Int(table.Rows[i]["Xpos"].ToString());
            mountItem.Ypos = PIn.Int(table.Rows[i]["Ypos"].ToString());
            mountItem.OrdinalPos = PIn.Int(table.Rows[i]["OrdinalPos"].ToString());
            mountItem.Width = PIn.Int(table.Rows[i]["Width"].ToString());
            mountItem.Height = PIn.Int(table.Rows[i]["Height"].ToString());
            retVal.Add(mountItem);
        }
        return retVal;
    }

    /**
    * Inserts one MountItem into the database.  Returns the new priKey.
    */
    public static long insert(MountItem mountItem) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            mountItem.MountItemNum = DbHelper.getNextOracleKey("mountitem","MountItemNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(mountItem, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        mountItem.MountItemNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(mountItem, false);
        } 
    }

    /**
    * Inserts one MountItem into the database.  Provides option to use the existing priKey.
    */
    public static long insert(MountItem mountItem, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            mountItem.MountItemNum = ReplicationServers.getKey("mountitem","MountItemNum");
        }
         
        String command = "INSERT INTO mountitem (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "MountItemNum,";
        }
         
        command += "MountNum,Xpos,Ypos,OrdinalPos,Width,Height) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(mountItem.MountItemNum) + ",";
        }
         
        command += POut.long(mountItem.MountNum) + "," + POut.int(mountItem.Xpos) + "," + POut.int(mountItem.Ypos) + "," + POut.int(mountItem.OrdinalPos) + "," + POut.int(mountItem.Width) + "," + POut.int(mountItem.Height) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            mountItem.MountItemNum = Db.nonQ(command,true);
        } 
        return mountItem.MountItemNum;
    }

    /**
    * Updates one MountItem in the database.
    */
    public static void update(MountItem mountItem) throws Exception {
        String command = "UPDATE mountitem SET " + "MountNum    =  " + POut.long(mountItem.MountNum) + ", " + "Xpos        =  " + POut.int(mountItem.Xpos) + ", " + "Ypos        =  " + POut.int(mountItem.Ypos) + ", " + "OrdinalPos  =  " + POut.int(mountItem.OrdinalPos) + ", " + "Width       =  " + POut.int(mountItem.Width) + ", " + "Height      =  " + POut.int(mountItem.Height) + " " + "WHERE MountItemNum = " + POut.long(mountItem.MountItemNum);
        Db.nonQ(command);
    }

    /**
    * Updates one MountItem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(MountItem mountItem, MountItem oldMountItem) throws Exception {
        String command = "";
        if (mountItem.MountNum != oldMountItem.MountNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MountNum = " + POut.long(mountItem.MountNum) + "";
        }
         
        if (mountItem.Xpos != oldMountItem.Xpos)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Xpos = " + POut.int(mountItem.Xpos) + "";
        }
         
        if (mountItem.Ypos != oldMountItem.Ypos)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Ypos = " + POut.int(mountItem.Ypos) + "";
        }
         
        if (mountItem.OrdinalPos != oldMountItem.OrdinalPos)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "OrdinalPos = " + POut.int(mountItem.OrdinalPos) + "";
        }
         
        if (mountItem.Width != oldMountItem.Width)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Width = " + POut.int(mountItem.Width) + "";
        }
         
        if (mountItem.Height != oldMountItem.Height)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Height = " + POut.int(mountItem.Height) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE mountitem SET " + command + " WHERE MountItemNum = " + POut.long(mountItem.MountItemNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one MountItem from the database.
    */
    public static void delete(long mountItemNum) throws Exception {
        String command = "DELETE FROM mountitem " + "WHERE MountItemNum = " + POut.long(mountItemNum);
        Db.nonQ(command);
    }

}


