//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:05 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.Laboratory;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class LaboratoryCrud   
{
    /**
    * Gets one Laboratory object from the database using the primary key.  Returns null if not found.
    */
    public static Laboratory selectOne(long laboratoryNum) throws Exception {
        String command = "SELECT * FROM laboratory " + "WHERE LaboratoryNum = " + POut.long(laboratoryNum);
        List<Laboratory> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Laboratory object from the database using a query.
    */
    public static Laboratory selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Laboratory> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Laboratory objects from the database using a query.
    */
    public static List<Laboratory> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Laboratory> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Laboratory> tableToList(DataTable table) throws Exception {
        List<Laboratory> retVal = new List<Laboratory>();
        Laboratory laboratory;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            laboratory = new Laboratory();
            laboratory.LaboratoryNum = PIn.Long(table.Rows[i]["LaboratoryNum"].ToString());
            laboratory.Description = PIn.String(table.Rows[i]["Description"].ToString());
            laboratory.Phone = PIn.String(table.Rows[i]["Phone"].ToString());
            laboratory.Notes = PIn.String(table.Rows[i]["Notes"].ToString());
            laboratory.Slip = PIn.Long(table.Rows[i]["Slip"].ToString());
            laboratory.Address = PIn.String(table.Rows[i]["Address"].ToString());
            laboratory.City = PIn.String(table.Rows[i]["City"].ToString());
            laboratory.State = PIn.String(table.Rows[i]["State"].ToString());
            laboratory.Zip = PIn.String(table.Rows[i]["Zip"].ToString());
            laboratory.Email = PIn.String(table.Rows[i]["Email"].ToString());
            laboratory.WirelessPhone = PIn.String(table.Rows[i]["WirelessPhone"].ToString());
            retVal.Add(laboratory);
        }
        return retVal;
    }

    /**
    * Inserts one Laboratory into the database.  Returns the new priKey.
    */
    public static long insert(Laboratory laboratory) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            laboratory.LaboratoryNum = DbHelper.getNextOracleKey("laboratory","LaboratoryNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(laboratory, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        laboratory.LaboratoryNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(laboratory, false);
        } 
    }

    /**
    * Inserts one Laboratory into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Laboratory laboratory, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            laboratory.LaboratoryNum = ReplicationServers.getKey("laboratory","LaboratoryNum");
        }
         
        String command = "INSERT INTO laboratory (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "LaboratoryNum,";
        }
         
        command += "Description,Phone,Notes,Slip,Address,City,State,Zip,Email,WirelessPhone) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(laboratory.LaboratoryNum) + ",";
        }
         
        command += "'" + POut.string(laboratory.Description) + "'," + "'" + POut.string(laboratory.Phone) + "'," + "'" + POut.string(laboratory.Notes) + "'," + POut.long(laboratory.Slip) + "," + "'" + POut.string(laboratory.Address) + "'," + "'" + POut.string(laboratory.City) + "'," + "'" + POut.string(laboratory.State) + "'," + "'" + POut.string(laboratory.Zip) + "'," + "'" + POut.string(laboratory.Email) + "'," + "'" + POut.string(laboratory.WirelessPhone) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            laboratory.LaboratoryNum = Db.nonQ(command,true);
        } 
        return laboratory.LaboratoryNum;
    }

    /**
    * Updates one Laboratory in the database.
    */
    public static void update(Laboratory laboratory) throws Exception {
        String command = "UPDATE laboratory SET " + "Description  = '" + POut.string(laboratory.Description) + "', " + "Phone        = '" + POut.string(laboratory.Phone) + "', " + "Notes        = '" + POut.string(laboratory.Notes) + "', " + "Slip         =  " + POut.long(laboratory.Slip) + ", " + "Address      = '" + POut.string(laboratory.Address) + "', " + "City         = '" + POut.string(laboratory.City) + "', " + "State        = '" + POut.string(laboratory.State) + "', " + "Zip          = '" + POut.string(laboratory.Zip) + "', " + "Email        = '" + POut.string(laboratory.Email) + "', " + "WirelessPhone= '" + POut.string(laboratory.WirelessPhone) + "' " + "WHERE LaboratoryNum = " + POut.long(laboratory.LaboratoryNum);
        Db.nonQ(command);
    }

    /**
    * Updates one Laboratory in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Laboratory laboratory, Laboratory oldLaboratory) throws Exception {
        String command = "";
        if (!StringSupport.equals(laboratory.Description, oldLaboratory.Description))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.string(laboratory.Description) + "'";
        }
         
        if (!StringSupport.equals(laboratory.Phone, oldLaboratory.Phone))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Phone = '" + POut.string(laboratory.Phone) + "'";
        }
         
        if (!StringSupport.equals(laboratory.Notes, oldLaboratory.Notes))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Notes = '" + POut.string(laboratory.Notes) + "'";
        }
         
        if (laboratory.Slip != oldLaboratory.Slip)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Slip = " + POut.long(laboratory.Slip) + "";
        }
         
        if (!StringSupport.equals(laboratory.Address, oldLaboratory.Address))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Address = '" + POut.string(laboratory.Address) + "'";
        }
         
        if (!StringSupport.equals(laboratory.City, oldLaboratory.City))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "City = '" + POut.string(laboratory.City) + "'";
        }
         
        if (!StringSupport.equals(laboratory.State, oldLaboratory.State))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "State = '" + POut.string(laboratory.State) + "'";
        }
         
        if (!StringSupport.equals(laboratory.Zip, oldLaboratory.Zip))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Zip = '" + POut.string(laboratory.Zip) + "'";
        }
         
        if (!StringSupport.equals(laboratory.Email, oldLaboratory.Email))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Email = '" + POut.string(laboratory.Email) + "'";
        }
         
        if (!StringSupport.equals(laboratory.WirelessPhone, oldLaboratory.WirelessPhone))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "WirelessPhone = '" + POut.string(laboratory.WirelessPhone) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE laboratory SET " + command + " WHERE LaboratoryNum = " + POut.long(laboratory.LaboratoryNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one Laboratory from the database.
    */
    public static void delete(long laboratoryNum) throws Exception {
        String command = "DELETE FROM laboratory " + "WHERE LaboratoryNum = " + POut.long(laboratoryNum);
        Db.nonQ(command);
    }

}


