//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:04 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.HL7MessageStatus;
import OpenDentBusiness.HL7Msg;
import OpenDentBusiness.OdDbType;
import OpenDentBusiness.OdSqlParameter;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class HL7MsgCrud   
{
    /**
    * Gets one HL7Msg object from the database using the primary key.  Returns null if not found.
    */
    public static HL7Msg selectOne(long hL7MsgNum) throws Exception {
        String command = "SELECT * FROM hl7msg " + "WHERE HL7MsgNum = " + POut.long(hL7MsgNum);
        List<HL7Msg> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one HL7Msg object from the database using a query.
    */
    public static HL7Msg selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<HL7Msg> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of HL7Msg objects from the database using a query.
    */
    public static List<HL7Msg> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<HL7Msg> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<HL7Msg> tableToList(DataTable table) throws Exception {
        List<HL7Msg> retVal = new List<HL7Msg>();
        HL7Msg hL7Msg;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            hL7Msg = new HL7Msg();
            hL7Msg.HL7MsgNum = PIn.Long(table.Rows[i]["HL7MsgNum"].ToString());
            hL7Msg.HL7Status = (HL7MessageStatus)PIn.Int(table.Rows[i]["HL7Status"].ToString());
            hL7Msg.MsgText = PIn.String(table.Rows[i]["MsgText"].ToString());
            hL7Msg.AptNum = PIn.Long(table.Rows[i]["AptNum"].ToString());
            hL7Msg.DateTStamp = PIn.DateT(table.Rows[i]["DateTStamp"].ToString());
            hL7Msg.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            hL7Msg.Note = PIn.String(table.Rows[i]["Note"].ToString());
            retVal.Add(hL7Msg);
        }
        return retVal;
    }

    /**
    * Inserts one HL7Msg into the database.  Returns the new priKey.
    */
    public static long insert(HL7Msg hL7Msg) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            hL7Msg.HL7MsgNum = DbHelper.getNextOracleKey("hl7msg","HL7MsgNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(hL7Msg, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        hL7Msg.HL7MsgNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(hL7Msg, false);
        } 
    }

    /**
    * Inserts one HL7Msg into the database.  Provides option to use the existing priKey.
    */
    public static long insert(HL7Msg hL7Msg, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            hL7Msg.HL7MsgNum = ReplicationServers.getKey("hl7msg","HL7MsgNum");
        }
         
        String command = "INSERT INTO hl7msg (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "HL7MsgNum,";
        }
         
        command += "HL7Status,MsgText,AptNum,PatNum,Note) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(hL7Msg.HL7MsgNum) + ",";
        }
         
        //DateTStamp can only be set by MySQL
        command += POut.int(((Enum)hL7Msg.HL7Status).ordinal()) + "," + DbHelper.getParamChar() + "paramMsgText," + POut.long(hL7Msg.AptNum) + "," + POut.long(hL7Msg.PatNum) + "," + "'" + POut.string(hL7Msg.Note) + "')";
        if (hL7Msg.MsgText == null)
        {
            hL7Msg.MsgText = "";
        }
         
        OdSqlParameter paramMsgText = new OdSqlParameter("paramMsgText", OdDbType.Text, hL7Msg.MsgText);
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command,paramMsgText);
        }
        else
        {
            hL7Msg.HL7MsgNum = Db.nonQ(command,true,paramMsgText);
        } 
        return hL7Msg.HL7MsgNum;
    }

    /**
    * Updates one HL7Msg in the database.
    */
    public static void update(HL7Msg hL7Msg) throws Exception {
        //DateTStamp can only be set by MySQL
        String command = "UPDATE hl7msg SET " + "HL7Status =  " + POut.int(((Enum)hL7Msg.HL7Status).ordinal()) + ", " + "MsgText   =  " + DbHelper.getParamChar() + "paramMsgText, " + "AptNum    =  " + POut.long(hL7Msg.AptNum) + ", " + "PatNum    =  " + POut.long(hL7Msg.PatNum) + ", " + "Note      = '" + POut.string(hL7Msg.Note) + "' " + "WHERE HL7MsgNum = " + POut.long(hL7Msg.HL7MsgNum);
        if (hL7Msg.MsgText == null)
        {
            hL7Msg.MsgText = "";
        }
         
        OdSqlParameter paramMsgText = new OdSqlParameter("paramMsgText", OdDbType.Text, hL7Msg.MsgText);
        Db.nonQ(command,paramMsgText);
    }

    /**
    * Updates one HL7Msg in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(HL7Msg hL7Msg, HL7Msg oldHL7Msg) throws Exception {
        String command = "";
        if (hL7Msg.HL7Status != oldHL7Msg.HL7Status)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "HL7Status = " + POut.int(((Enum)hL7Msg.HL7Status).ordinal()) + "";
        }
         
        if (!StringSupport.equals(hL7Msg.MsgText, oldHL7Msg.MsgText))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MsgText = " + DbHelper.getParamChar() + "paramMsgText";
        }
         
        if (hL7Msg.AptNum != oldHL7Msg.AptNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AptNum = " + POut.long(hL7Msg.AptNum) + "";
        }
         
        //DateTStamp can only be set by MySQL
        if (hL7Msg.PatNum != oldHL7Msg.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.long(hL7Msg.PatNum) + "";
        }
         
        if (!StringSupport.equals(hL7Msg.Note, oldHL7Msg.Note))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.string(hL7Msg.Note) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        if (hL7Msg.MsgText == null)
        {
            hL7Msg.MsgText = "";
        }
         
        OdSqlParameter paramMsgText = new OdSqlParameter("paramMsgText", OdDbType.Text, hL7Msg.MsgText);
        command = "UPDATE hl7msg SET " + command + " WHERE HL7MsgNum = " + POut.long(hL7Msg.HL7MsgNum);
        Db.nonQ(command,paramMsgText);
    }

    /**
    * Deletes one HL7Msg from the database.
    */
    public static void delete(long hL7MsgNum) throws Exception {
        String command = "DELETE FROM hl7msg " + "WHERE HL7MsgNum = " + POut.long(hL7MsgNum);
        Db.nonQ(command);
    }

}


