//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:00 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.CodeSystem;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class CodeSystemCrud   
{
    /**
    * Gets one CodeSystem object from the database using the primary key.  Returns null if not found.
    */
    public static CodeSystem selectOne(long codeSystemNum) throws Exception {
        String command = "SELECT * FROM codesystem " + "WHERE CodeSystemNum = " + POut.long(codeSystemNum);
        List<CodeSystem> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one CodeSystem object from the database using a query.
    */
    public static CodeSystem selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<CodeSystem> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of CodeSystem objects from the database using a query.
    */
    public static List<CodeSystem> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<CodeSystem> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<CodeSystem> tableToList(DataTable table) throws Exception {
        List<CodeSystem> retVal = new List<CodeSystem>();
        CodeSystem codeSystem;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            codeSystem = new CodeSystem();
            codeSystem.CodeSystemNum = PIn.Long(table.Rows[i]["CodeSystemNum"].ToString());
            codeSystem.CodeSystemName = PIn.String(table.Rows[i]["CodeSystemName"].ToString());
            codeSystem.VersionCur = PIn.String(table.Rows[i]["VersionCur"].ToString());
            codeSystem.VersionAvail = PIn.String(table.Rows[i]["VersionAvail"].ToString());
            codeSystem.HL7OID = PIn.String(table.Rows[i]["HL7OID"].ToString());
            codeSystem.Note = PIn.String(table.Rows[i]["Note"].ToString());
            retVal.Add(codeSystem);
        }
        return retVal;
    }

    /**
    * Inserts one CodeSystem into the database.  Returns the new priKey.
    */
    public static long insert(CodeSystem codeSystem) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            codeSystem.CodeSystemNum = DbHelper.getNextOracleKey("codesystem","CodeSystemNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(codeSystem, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        codeSystem.CodeSystemNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(codeSystem, false);
        } 
    }

    /**
    * Inserts one CodeSystem into the database.  Provides option to use the existing priKey.
    */
    public static long insert(CodeSystem codeSystem, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            codeSystem.CodeSystemNum = ReplicationServers.getKey("codesystem","CodeSystemNum");
        }
         
        String command = "INSERT INTO codesystem (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "CodeSystemNum,";
        }
         
        command += "CodeSystemName,VersionCur,VersionAvail,HL7OID,Note) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(codeSystem.CodeSystemNum) + ",";
        }
         
        command += "'" + POut.string(codeSystem.CodeSystemName) + "'," + "'" + POut.string(codeSystem.VersionCur) + "'," + "'" + POut.string(codeSystem.VersionAvail) + "'," + "'" + POut.string(codeSystem.HL7OID) + "'," + "'" + POut.string(codeSystem.Note) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            codeSystem.CodeSystemNum = Db.nonQ(command,true);
        } 
        return codeSystem.CodeSystemNum;
    }

    /**
    * Updates one CodeSystem in the database.
    */
    public static void update(CodeSystem codeSystem) throws Exception {
        String command = "UPDATE codesystem SET " + "CodeSystemName= '" + POut.string(codeSystem.CodeSystemName) + "', " + "VersionCur    = '" + POut.string(codeSystem.VersionCur) + "', " + "VersionAvail  = '" + POut.string(codeSystem.VersionAvail) + "', " + "HL7OID        = '" + POut.string(codeSystem.HL7OID) + "', " + "Note          = '" + POut.string(codeSystem.Note) + "' " + "WHERE CodeSystemNum = " + POut.long(codeSystem.CodeSystemNum);
        Db.nonQ(command);
    }

    /**
    * Updates one CodeSystem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(CodeSystem codeSystem, CodeSystem oldCodeSystem) throws Exception {
        String command = "";
        if (!StringSupport.equals(codeSystem.CodeSystemName, oldCodeSystem.CodeSystemName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeSystemName = '" + POut.string(codeSystem.CodeSystemName) + "'";
        }
         
        if (!StringSupport.equals(codeSystem.VersionCur, oldCodeSystem.VersionCur))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "VersionCur = '" + POut.string(codeSystem.VersionCur) + "'";
        }
         
        if (!StringSupport.equals(codeSystem.VersionAvail, oldCodeSystem.VersionAvail))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "VersionAvail = '" + POut.string(codeSystem.VersionAvail) + "'";
        }
         
        if (!StringSupport.equals(codeSystem.HL7OID, oldCodeSystem.HL7OID))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "HL7OID = '" + POut.string(codeSystem.HL7OID) + "'";
        }
         
        if (!StringSupport.equals(codeSystem.Note, oldCodeSystem.Note))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.string(codeSystem.Note) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE codesystem SET " + command + " WHERE CodeSystemNum = " + POut.long(codeSystem.CodeSystemNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one CodeSystem from the database.
    */
    public static void delete(long codeSystemNum) throws Exception {
        String command = "DELETE FROM codesystem " + "WHERE CodeSystemNum = " + POut.long(codeSystemNum);
        Db.nonQ(command);
    }

}


