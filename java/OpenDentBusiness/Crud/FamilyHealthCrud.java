//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:04 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.FamilyHealth;
import OpenDentBusiness.FamilyRelationship;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class FamilyHealthCrud   
{
    /**
    * Gets one FamilyHealth object from the database using the primary key.  Returns null if not found.
    */
    public static FamilyHealth selectOne(long familyHealthNum) throws Exception {
        String command = "SELECT * FROM familyhealth " + "WHERE FamilyHealthNum = " + POut.long(familyHealthNum);
        List<FamilyHealth> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one FamilyHealth object from the database using a query.
    */
    public static FamilyHealth selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<FamilyHealth> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of FamilyHealth objects from the database using a query.
    */
    public static List<FamilyHealth> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<FamilyHealth> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<FamilyHealth> tableToList(DataTable table) throws Exception {
        List<FamilyHealth> retVal = new List<FamilyHealth>();
        FamilyHealth familyHealth;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            familyHealth = new FamilyHealth();
            familyHealth.FamilyHealthNum = PIn.Long(table.Rows[i]["FamilyHealthNum"].ToString());
            familyHealth.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            familyHealth.Relationship = (FamilyRelationship)PIn.Int(table.Rows[i]["Relationship"].ToString());
            familyHealth.DiseaseDefNum = PIn.Long(table.Rows[i]["DiseaseDefNum"].ToString());
            familyHealth.PersonName = PIn.String(table.Rows[i]["PersonName"].ToString());
            retVal.Add(familyHealth);
        }
        return retVal;
    }

    /**
    * Inserts one FamilyHealth into the database.  Returns the new priKey.
    */
    public static long insert(FamilyHealth familyHealth) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            familyHealth.FamilyHealthNum = DbHelper.getNextOracleKey("familyhealth","FamilyHealthNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(familyHealth, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        familyHealth.FamilyHealthNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(familyHealth, false);
        } 
    }

    /**
    * Inserts one FamilyHealth into the database.  Provides option to use the existing priKey.
    */
    public static long insert(FamilyHealth familyHealth, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            familyHealth.FamilyHealthNum = ReplicationServers.getKey("familyhealth","FamilyHealthNum");
        }
         
        String command = "INSERT INTO familyhealth (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "FamilyHealthNum,";
        }
         
        command += "PatNum,Relationship,DiseaseDefNum,PersonName) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(familyHealth.FamilyHealthNum) + ",";
        }
         
        command += POut.long(familyHealth.PatNum) + "," + POut.int(((Enum)familyHealth.Relationship).ordinal()) + "," + POut.long(familyHealth.DiseaseDefNum) + "," + "'" + POut.string(familyHealth.PersonName) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            familyHealth.FamilyHealthNum = Db.nonQ(command,true);
        } 
        return familyHealth.FamilyHealthNum;
    }

    /**
    * Updates one FamilyHealth in the database.
    */
    public static void update(FamilyHealth familyHealth) throws Exception {
        String command = "UPDATE familyhealth SET " + "PatNum         =  " + POut.long(familyHealth.PatNum) + ", " + "Relationship   =  " + POut.int(((Enum)familyHealth.Relationship).ordinal()) + ", " + "DiseaseDefNum  =  " + POut.long(familyHealth.DiseaseDefNum) + ", " + "PersonName     = '" + POut.string(familyHealth.PersonName) + "' " + "WHERE FamilyHealthNum = " + POut.long(familyHealth.FamilyHealthNum);
        Db.nonQ(command);
    }

    /**
    * Updates one FamilyHealth in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(FamilyHealth familyHealth, FamilyHealth oldFamilyHealth) throws Exception {
        String command = "";
        if (familyHealth.PatNum != oldFamilyHealth.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.long(familyHealth.PatNum) + "";
        }
         
        if (familyHealth.Relationship != oldFamilyHealth.Relationship)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Relationship = " + POut.int(((Enum)familyHealth.Relationship).ordinal()) + "";
        }
         
        if (familyHealth.DiseaseDefNum != oldFamilyHealth.DiseaseDefNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DiseaseDefNum = " + POut.long(familyHealth.DiseaseDefNum) + "";
        }
         
        if (!StringSupport.equals(familyHealth.PersonName, oldFamilyHealth.PersonName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PersonName = '" + POut.string(familyHealth.PersonName) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE familyhealth SET " + command + " WHERE FamilyHealthNum = " + POut.long(familyHealth.FamilyHealthNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one FamilyHealth from the database.
    */
    public static void delete(long familyHealthNum) throws Exception {
        String command = "DELETE FROM familyhealth " + "WHERE FamilyHealthNum = " + POut.long(familyHealthNum);
        Db.nonQ(command);
    }

}


