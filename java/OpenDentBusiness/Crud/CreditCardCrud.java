//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:00 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.CreditCard;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class CreditCardCrud   
{
    /**
    * Gets one CreditCard object from the database using the primary key.  Returns null if not found.
    */
    public static CreditCard selectOne(long creditCardNum) throws Exception {
        String command = "SELECT * FROM creditcard " + "WHERE CreditCardNum = " + POut.long(creditCardNum);
        List<CreditCard> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one CreditCard object from the database using a query.
    */
    public static CreditCard selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<CreditCard> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of CreditCard objects from the database using a query.
    */
    public static List<CreditCard> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<CreditCard> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<CreditCard> tableToList(DataTable table) throws Exception {
        List<CreditCard> retVal = new List<CreditCard>();
        CreditCard creditCard;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            creditCard = new CreditCard();
            creditCard.CreditCardNum = PIn.Long(table.Rows[i]["CreditCardNum"].ToString());
            creditCard.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            creditCard.Address = PIn.String(table.Rows[i]["Address"].ToString());
            creditCard.Zip = PIn.String(table.Rows[i]["Zip"].ToString());
            creditCard.XChargeToken = PIn.String(table.Rows[i]["XChargeToken"].ToString());
            creditCard.CCNumberMasked = PIn.String(table.Rows[i]["CCNumberMasked"].ToString());
            creditCard.CCExpiration = PIn.Date(table.Rows[i]["CCExpiration"].ToString());
            creditCard.ItemOrder = PIn.Int(table.Rows[i]["ItemOrder"].ToString());
            creditCard.ChargeAmt = PIn.Double(table.Rows[i]["ChargeAmt"].ToString());
            creditCard.DateStart = PIn.Date(table.Rows[i]["DateStart"].ToString());
            creditCard.DateStop = PIn.Date(table.Rows[i]["DateStop"].ToString());
            creditCard.Note = PIn.String(table.Rows[i]["Note"].ToString());
            creditCard.PayPlanNum = PIn.Long(table.Rows[i]["PayPlanNum"].ToString());
            retVal.Add(creditCard);
        }
        return retVal;
    }

    /**
    * Inserts one CreditCard into the database.  Returns the new priKey.
    */
    public static long insert(CreditCard creditCard) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            creditCard.CreditCardNum = DbHelper.getNextOracleKey("creditcard","CreditCardNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(creditCard, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        creditCard.CreditCardNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(creditCard, false);
        } 
    }

    /**
    * Inserts one CreditCard into the database.  Provides option to use the existing priKey.
    */
    public static long insert(CreditCard creditCard, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            creditCard.CreditCardNum = ReplicationServers.getKey("creditcard","CreditCardNum");
        }
         
        String command = "INSERT INTO creditcard (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "CreditCardNum,";
        }
         
        command += "PatNum,Address,Zip,XChargeToken,CCNumberMasked,CCExpiration,ItemOrder,ChargeAmt,DateStart,DateStop,Note,PayPlanNum) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(creditCard.CreditCardNum) + ",";
        }
         
        command += POut.long(creditCard.PatNum) + "," + "'" + POut.string(creditCard.Address) + "'," + "'" + POut.string(creditCard.Zip) + "'," + "'" + POut.string(creditCard.XChargeToken) + "'," + "'" + POut.string(creditCard.CCNumberMasked) + "'," + POut.date(creditCard.CCExpiration) + "," + POut.int(creditCard.ItemOrder) + "," + "'" + POut.Double(creditCard.ChargeAmt) + "'," + POut.date(creditCard.DateStart) + "," + POut.date(creditCard.DateStop) + "," + "'" + POut.string(creditCard.Note) + "'," + POut.long(creditCard.PayPlanNum) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            creditCard.CreditCardNum = Db.nonQ(command,true);
        } 
        return creditCard.CreditCardNum;
    }

    /**
    * Updates one CreditCard in the database.
    */
    public static void update(CreditCard creditCard) throws Exception {
        String command = "UPDATE creditcard SET " + "PatNum        =  " + POut.long(creditCard.PatNum) + ", " + "Address       = '" + POut.string(creditCard.Address) + "', " + "Zip           = '" + POut.string(creditCard.Zip) + "', " + "XChargeToken  = '" + POut.string(creditCard.XChargeToken) + "', " + "CCNumberMasked= '" + POut.string(creditCard.CCNumberMasked) + "', " + "CCExpiration  =  " + POut.date(creditCard.CCExpiration) + ", " + "ItemOrder     =  " + POut.int(creditCard.ItemOrder) + ", " + "ChargeAmt     = '" + POut.Double(creditCard.ChargeAmt) + "', " + "DateStart     =  " + POut.date(creditCard.DateStart) + ", " + "DateStop      =  " + POut.date(creditCard.DateStop) + ", " + "Note          = '" + POut.string(creditCard.Note) + "', " + "PayPlanNum    =  " + POut.long(creditCard.PayPlanNum) + " " + "WHERE CreditCardNum = " + POut.long(creditCard.CreditCardNum);
        Db.nonQ(command);
    }

    /**
    * Updates one CreditCard in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(CreditCard creditCard, CreditCard oldCreditCard) throws Exception {
        String command = "";
        if (creditCard.PatNum != oldCreditCard.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.long(creditCard.PatNum) + "";
        }
         
        if (!StringSupport.equals(creditCard.Address, oldCreditCard.Address))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Address = '" + POut.string(creditCard.Address) + "'";
        }
         
        if (!StringSupport.equals(creditCard.Zip, oldCreditCard.Zip))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Zip = '" + POut.string(creditCard.Zip) + "'";
        }
         
        if (!StringSupport.equals(creditCard.XChargeToken, oldCreditCard.XChargeToken))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "XChargeToken = '" + POut.string(creditCard.XChargeToken) + "'";
        }
         
        if (!StringSupport.equals(creditCard.CCNumberMasked, oldCreditCard.CCNumberMasked))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CCNumberMasked = '" + POut.string(creditCard.CCNumberMasked) + "'";
        }
         
        if (creditCard.CCExpiration != oldCreditCard.CCExpiration)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CCExpiration = " + POut.date(creditCard.CCExpiration) + "";
        }
         
        if (creditCard.ItemOrder != oldCreditCard.ItemOrder)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ItemOrder = " + POut.int(creditCard.ItemOrder) + "";
        }
         
        if (creditCard.ChargeAmt != oldCreditCard.ChargeAmt)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ChargeAmt = '" + POut.Double(creditCard.ChargeAmt) + "'";
        }
         
        if (creditCard.DateStart != oldCreditCard.DateStart)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateStart = " + POut.date(creditCard.DateStart) + "";
        }
         
        if (creditCard.DateStop != oldCreditCard.DateStop)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateStop = " + POut.date(creditCard.DateStop) + "";
        }
         
        if (!StringSupport.equals(creditCard.Note, oldCreditCard.Note))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.string(creditCard.Note) + "'";
        }
         
        if (creditCard.PayPlanNum != oldCreditCard.PayPlanNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PayPlanNum = " + POut.long(creditCard.PayPlanNum) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE creditcard SET " + command + " WHERE CreditCardNum = " + POut.long(creditCard.CreditCardNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one CreditCard from the database.
    */
    public static void delete(long creditCardNum) throws Exception {
        String command = "DELETE FROM creditcard " + "WHERE CreditCardNum = " + POut.long(creditCardNum);
        Db.nonQ(command);
    }

}


