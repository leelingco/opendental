//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:03 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.EobAttach;
import OpenDentBusiness.OdDbType;
import OpenDentBusiness.OdSqlParameter;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EobAttachCrud   
{
    /**
    * Gets one EobAttach object from the database using the primary key.  Returns null if not found.
    */
    public static EobAttach selectOne(long eobAttachNum) throws Exception {
        String command = "SELECT * FROM eobattach " + "WHERE EobAttachNum = " + POut.long(eobAttachNum);
        List<EobAttach> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one EobAttach object from the database using a query.
    */
    public static EobAttach selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EobAttach> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of EobAttach objects from the database using a query.
    */
    public static List<EobAttach> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EobAttach> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<EobAttach> tableToList(DataTable table) throws Exception {
        List<EobAttach> retVal = new List<EobAttach>();
        EobAttach eobAttach;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            eobAttach = new EobAttach();
            eobAttach.EobAttachNum = PIn.Long(table.Rows[i]["EobAttachNum"].ToString());
            eobAttach.ClaimPaymentNum = PIn.Long(table.Rows[i]["ClaimPaymentNum"].ToString());
            eobAttach.DateTCreated = PIn.DateT(table.Rows[i]["DateTCreated"].ToString());
            eobAttach.FileName = PIn.String(table.Rows[i]["FileName"].ToString());
            eobAttach.RawBase64 = PIn.String(table.Rows[i]["RawBase64"].ToString());
            retVal.Add(eobAttach);
        }
        return retVal;
    }

    /**
    * Inserts one EobAttach into the database.  Returns the new priKey.
    */
    public static long insert(EobAttach eobAttach) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            eobAttach.EobAttachNum = DbHelper.getNextOracleKey("eobattach","EobAttachNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(eobAttach, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        eobAttach.EobAttachNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(eobAttach, false);
        } 
    }

    /**
    * Inserts one EobAttach into the database.  Provides option to use the existing priKey.
    */
    public static long insert(EobAttach eobAttach, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            eobAttach.EobAttachNum = ReplicationServers.getKey("eobattach","EobAttachNum");
        }
         
        String command = "INSERT INTO eobattach (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "EobAttachNum,";
        }
         
        command += "ClaimPaymentNum,DateTCreated,FileName,RawBase64) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(eobAttach.EobAttachNum) + ",";
        }
         
        command += POut.long(eobAttach.ClaimPaymentNum) + "," + POut.dateT(eobAttach.DateTCreated) + "," + "'" + POut.string(eobAttach.FileName) + "'," + DbHelper.getParamChar() + "paramRawBase64)";
        if (eobAttach.RawBase64 == null)
        {
            eobAttach.RawBase64 = "";
        }
         
        OdSqlParameter paramRawBase64 = new OdSqlParameter("paramRawBase64", OdDbType.Text, eobAttach.RawBase64);
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command,paramRawBase64);
        }
        else
        {
            eobAttach.EobAttachNum = Db.nonQ(command,true,paramRawBase64);
        } 
        return eobAttach.EobAttachNum;
    }

    /**
    * Updates one EobAttach in the database.
    */
    public static void update(EobAttach eobAttach) throws Exception {
        String command = "UPDATE eobattach SET " + "ClaimPaymentNum=  " + POut.long(eobAttach.ClaimPaymentNum) + ", " + "DateTCreated   =  " + POut.dateT(eobAttach.DateTCreated) + ", " + "FileName       = '" + POut.string(eobAttach.FileName) + "', " + "RawBase64      =  " + DbHelper.getParamChar() + "paramRawBase64 " + "WHERE EobAttachNum = " + POut.long(eobAttach.EobAttachNum);
        if (eobAttach.RawBase64 == null)
        {
            eobAttach.RawBase64 = "";
        }
         
        OdSqlParameter paramRawBase64 = new OdSqlParameter("paramRawBase64", OdDbType.Text, eobAttach.RawBase64);
        Db.nonQ(command,paramRawBase64);
    }

    /**
    * Updates one EobAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(EobAttach eobAttach, EobAttach oldEobAttach) throws Exception {
        String command = "";
        if (eobAttach.ClaimPaymentNum != oldEobAttach.ClaimPaymentNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClaimPaymentNum = " + POut.long(eobAttach.ClaimPaymentNum) + "";
        }
         
        if (eobAttach.DateTCreated != oldEobAttach.DateTCreated)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTCreated = " + POut.dateT(eobAttach.DateTCreated) + "";
        }
         
        if (!StringSupport.equals(eobAttach.FileName, oldEobAttach.FileName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FileName = '" + POut.string(eobAttach.FileName) + "'";
        }
         
        if (!StringSupport.equals(eobAttach.RawBase64, oldEobAttach.RawBase64))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RawBase64 = " + DbHelper.getParamChar() + "paramRawBase64";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        if (eobAttach.RawBase64 == null)
        {
            eobAttach.RawBase64 = "";
        }
         
        OdSqlParameter paramRawBase64 = new OdSqlParameter("paramRawBase64", OdDbType.Text, eobAttach.RawBase64);
        command = "UPDATE eobattach SET " + command + " WHERE EobAttachNum = " + POut.long(eobAttach.EobAttachNum);
        Db.nonQ(command,paramRawBase64);
    }

    /**
    * Deletes one EobAttach from the database.
    */
    public static void delete(long eobAttachNum) throws Exception {
        String command = "DELETE FROM eobattach " + "WHERE EobAttachNum = " + POut.long(eobAttachNum);
        Db.nonQ(command);
    }

}


