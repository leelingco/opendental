//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:05 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.LetterMerge;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class LetterMergeCrud   
{
    /**
    * Gets one LetterMerge object from the database using the primary key.  Returns null if not found.
    */
    public static LetterMerge selectOne(long letterMergeNum) throws Exception {
        String command = "SELECT * FROM lettermerge " + "WHERE LetterMergeNum = " + POut.long(letterMergeNum);
        List<LetterMerge> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one LetterMerge object from the database using a query.
    */
    public static LetterMerge selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<LetterMerge> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of LetterMerge objects from the database using a query.
    */
    public static List<LetterMerge> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<LetterMerge> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<LetterMerge> tableToList(DataTable table) throws Exception {
        List<LetterMerge> retVal = new List<LetterMerge>();
        LetterMerge letterMerge;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            letterMerge = new LetterMerge();
            letterMerge.LetterMergeNum = PIn.Long(table.Rows[i]["LetterMergeNum"].ToString());
            letterMerge.Description = PIn.String(table.Rows[i]["Description"].ToString());
            letterMerge.TemplateName = PIn.String(table.Rows[i]["TemplateName"].ToString());
            letterMerge.DataFileName = PIn.String(table.Rows[i]["DataFileName"].ToString());
            letterMerge.Category = PIn.Long(table.Rows[i]["Category"].ToString());
            retVal.Add(letterMerge);
        }
        return retVal;
    }

    /**
    * Inserts one LetterMerge into the database.  Returns the new priKey.
    */
    public static long insert(LetterMerge letterMerge) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            letterMerge.LetterMergeNum = DbHelper.getNextOracleKey("lettermerge","LetterMergeNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(letterMerge, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        letterMerge.LetterMergeNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(letterMerge, false);
        } 
    }

    /**
    * Inserts one LetterMerge into the database.  Provides option to use the existing priKey.
    */
    public static long insert(LetterMerge letterMerge, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            letterMerge.LetterMergeNum = ReplicationServers.getKey("lettermerge","LetterMergeNum");
        }
         
        String command = "INSERT INTO lettermerge (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "LetterMergeNum,";
        }
         
        command += "Description,TemplateName,DataFileName,Category) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(letterMerge.LetterMergeNum) + ",";
        }
         
        command += "'" + POut.string(letterMerge.Description) + "'," + "'" + POut.string(letterMerge.TemplateName) + "'," + "'" + POut.string(letterMerge.DataFileName) + "'," + POut.long(letterMerge.Category) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            letterMerge.LetterMergeNum = Db.nonQ(command,true);
        } 
        return letterMerge.LetterMergeNum;
    }

    /**
    * Updates one LetterMerge in the database.
    */
    public static void update(LetterMerge letterMerge) throws Exception {
        String command = "UPDATE lettermerge SET " + "Description   = '" + POut.string(letterMerge.Description) + "', " + "TemplateName  = '" + POut.string(letterMerge.TemplateName) + "', " + "DataFileName  = '" + POut.string(letterMerge.DataFileName) + "', " + "Category      =  " + POut.long(letterMerge.Category) + " " + "WHERE LetterMergeNum = " + POut.long(letterMerge.LetterMergeNum);
        Db.nonQ(command);
    }

    /**
    * Updates one LetterMerge in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(LetterMerge letterMerge, LetterMerge oldLetterMerge) throws Exception {
        String command = "";
        if (!StringSupport.equals(letterMerge.Description, oldLetterMerge.Description))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.string(letterMerge.Description) + "'";
        }
         
        if (!StringSupport.equals(letterMerge.TemplateName, oldLetterMerge.TemplateName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "TemplateName = '" + POut.string(letterMerge.TemplateName) + "'";
        }
         
        if (!StringSupport.equals(letterMerge.DataFileName, oldLetterMerge.DataFileName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DataFileName = '" + POut.string(letterMerge.DataFileName) + "'";
        }
         
        if (letterMerge.Category != oldLetterMerge.Category)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Category = " + POut.long(letterMerge.Category) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE lettermerge SET " + command + " WHERE LetterMergeNum = " + POut.long(letterMerge.LetterMergeNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one LetterMerge from the database.
    */
    public static void delete(long letterMergeNum) throws Exception {
        String command = "DELETE FROM lettermerge " + "WHERE LetterMergeNum = " + POut.long(letterMergeNum);
        Db.nonQ(command);
    }

}


