//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:57:58 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.CanSupTransTypes;
import OpenDentBusiness.Carrier;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class CarrierCrud   
{
    /**
    * Gets one Carrier object from the database using the primary key.  Returns null if not found.
    */
    public static Carrier selectOne(long carrierNum) throws Exception {
        String command = "SELECT * FROM carrier " + "WHERE CarrierNum = " + POut.long(carrierNum);
        List<Carrier> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Carrier object from the database using a query.
    */
    public static Carrier selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Carrier> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Carrier objects from the database using a query.
    */
    public static List<Carrier> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Carrier> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Carrier> tableToList(DataTable table) throws Exception {
        List<Carrier> retVal = new List<Carrier>();
        Carrier carrier;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            carrier = new Carrier();
            carrier.CarrierNum = PIn.Long(table.Rows[i]["CarrierNum"].ToString());
            carrier.CarrierName = PIn.String(table.Rows[i]["CarrierName"].ToString());
            carrier.Address = PIn.String(table.Rows[i]["Address"].ToString());
            carrier.Address2 = PIn.String(table.Rows[i]["Address2"].ToString());
            carrier.City = PIn.String(table.Rows[i]["City"].ToString());
            carrier.State = PIn.String(table.Rows[i]["State"].ToString());
            carrier.Zip = PIn.String(table.Rows[i]["Zip"].ToString());
            carrier.Phone = PIn.String(table.Rows[i]["Phone"].ToString());
            carrier.ElectID = PIn.String(table.Rows[i]["ElectID"].ToString());
            carrier.NoSendElect = PIn.Bool(table.Rows[i]["NoSendElect"].ToString());
            carrier.IsCDA = PIn.Bool(table.Rows[i]["IsCDA"].ToString());
            carrier.CDAnetVersion = PIn.String(table.Rows[i]["CDAnetVersion"].ToString());
            carrier.CanadianNetworkNum = PIn.Long(table.Rows[i]["CanadianNetworkNum"].ToString());
            carrier.IsHidden = PIn.Bool(table.Rows[i]["IsHidden"].ToString());
            carrier.CanadianEncryptionMethod = PIn.Byte(table.Rows[i]["CanadianEncryptionMethod"].ToString());
            carrier.CanadianSupportedTypes = (CanSupTransTypes)PIn.Int(table.Rows[i]["CanadianSupportedTypes"].ToString());
            retVal.Add(carrier);
        }
        return retVal;
    }

    /**
    * Inserts one Carrier into the database.  Returns the new priKey.
    */
    public static long insert(Carrier carrier) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            carrier.CarrierNum = DbHelper.getNextOracleKey("carrier","CarrierNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(carrier, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        carrier.CarrierNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(carrier, false);
        } 
    }

    /**
    * Inserts one Carrier into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Carrier carrier, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            carrier.CarrierNum = ReplicationServers.getKey("carrier","CarrierNum");
        }
         
        String command = "INSERT INTO carrier (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "CarrierNum,";
        }
         
        command += "CarrierName,Address,Address2,City,State,Zip,Phone,ElectID,NoSendElect,IsCDA,CDAnetVersion,CanadianNetworkNum,IsHidden,CanadianEncryptionMethod,CanadianSupportedTypes) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(carrier.CarrierNum) + ",";
        }
         
        command += "'" + POut.string(carrier.CarrierName) + "'," + "'" + POut.string(carrier.Address) + "'," + "'" + POut.string(carrier.Address2) + "'," + "'" + POut.string(carrier.City) + "'," + "'" + POut.string(carrier.State) + "'," + "'" + POut.string(carrier.Zip) + "'," + "'" + POut.string(carrier.Phone) + "'," + "'" + POut.string(carrier.ElectID) + "'," + POut.bool(carrier.NoSendElect) + "," + POut.bool(carrier.IsCDA) + "," + "'" + POut.string(carrier.CDAnetVersion) + "'," + POut.long(carrier.CanadianNetworkNum) + "," + POut.bool(carrier.IsHidden) + "," + POut.byte(carrier.CanadianEncryptionMethod) + "," + POut.int(((Enum)carrier.CanadianSupportedTypes).ordinal()) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            carrier.CarrierNum = Db.nonQ(command,true);
        } 
        return carrier.CarrierNum;
    }

    /**
    * Updates one Carrier in the database.
    */
    public static void update(Carrier carrier) throws Exception {
        String command = "UPDATE carrier SET " + "CarrierName             = '" + POut.string(carrier.CarrierName) + "', " + "Address                 = '" + POut.string(carrier.Address) + "', " + "Address2                = '" + POut.string(carrier.Address2) + "', " + "City                    = '" + POut.string(carrier.City) + "', " + "State                   = '" + POut.string(carrier.State) + "', " + "Zip                     = '" + POut.string(carrier.Zip) + "', " + "Phone                   = '" + POut.string(carrier.Phone) + "', " + "ElectID                 = '" + POut.string(carrier.ElectID) + "', " + "NoSendElect             =  " + POut.bool(carrier.NoSendElect) + ", " + "IsCDA                   =  " + POut.bool(carrier.IsCDA) + ", " + "CDAnetVersion           = '" + POut.string(carrier.CDAnetVersion) + "', " + "CanadianNetworkNum      =  " + POut.long(carrier.CanadianNetworkNum) + ", " + "IsHidden                =  " + POut.bool(carrier.IsHidden) + ", " + "CanadianEncryptionMethod=  " + POut.byte(carrier.CanadianEncryptionMethod) + ", " + "CanadianSupportedTypes  =  " + POut.int(((Enum)carrier.CanadianSupportedTypes).ordinal()) + " " + "WHERE CarrierNum = " + POut.long(carrier.CarrierNum);
        Db.nonQ(command);
    }

    /**
    * Updates one Carrier in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Carrier carrier, Carrier oldCarrier) throws Exception {
        String command = "";
        if (!StringSupport.equals(carrier.CarrierName, oldCarrier.CarrierName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CarrierName = '" + POut.string(carrier.CarrierName) + "'";
        }
         
        if (!StringSupport.equals(carrier.Address, oldCarrier.Address))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Address = '" + POut.string(carrier.Address) + "'";
        }
         
        if (!StringSupport.equals(carrier.Address2, oldCarrier.Address2))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Address2 = '" + POut.string(carrier.Address2) + "'";
        }
         
        if (!StringSupport.equals(carrier.City, oldCarrier.City))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "City = '" + POut.string(carrier.City) + "'";
        }
         
        if (!StringSupport.equals(carrier.State, oldCarrier.State))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "State = '" + POut.string(carrier.State) + "'";
        }
         
        if (!StringSupport.equals(carrier.Zip, oldCarrier.Zip))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Zip = '" + POut.string(carrier.Zip) + "'";
        }
         
        if (!StringSupport.equals(carrier.Phone, oldCarrier.Phone))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Phone = '" + POut.string(carrier.Phone) + "'";
        }
         
        if (!StringSupport.equals(carrier.ElectID, oldCarrier.ElectID))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ElectID = '" + POut.string(carrier.ElectID) + "'";
        }
         
        if (carrier.NoSendElect != oldCarrier.NoSendElect)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "NoSendElect = " + POut.bool(carrier.NoSendElect) + "";
        }
         
        if (carrier.IsCDA != oldCarrier.IsCDA)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsCDA = " + POut.bool(carrier.IsCDA) + "";
        }
         
        if (!StringSupport.equals(carrier.CDAnetVersion, oldCarrier.CDAnetVersion))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CDAnetVersion = '" + POut.string(carrier.CDAnetVersion) + "'";
        }
         
        if (carrier.CanadianNetworkNum != oldCarrier.CanadianNetworkNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadianNetworkNum = " + POut.long(carrier.CanadianNetworkNum) + "";
        }
         
        if (carrier.IsHidden != oldCarrier.IsHidden)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsHidden = " + POut.bool(carrier.IsHidden) + "";
        }
         
        if (carrier.CanadianEncryptionMethod != oldCarrier.CanadianEncryptionMethod)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadianEncryptionMethod = " + POut.byte(carrier.CanadianEncryptionMethod) + "";
        }
         
        if (carrier.CanadianSupportedTypes != oldCarrier.CanadianSupportedTypes)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadianSupportedTypes = " + POut.int(((Enum)carrier.CanadianSupportedTypes).ordinal()) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE carrier SET " + command + " WHERE CarrierNum = " + POut.long(carrier.CarrierNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one Carrier from the database.
    */
    public static void delete(long carrierNum) throws Exception {
        String command = "DELETE FROM carrier " + "WHERE CarrierNum = " + POut.long(carrierNum);
        Db.nonQ(command);
    }

}


