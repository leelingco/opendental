//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:05 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.LanguageForeign;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class LanguageForeignCrud   
{
    /**
    * Gets one LanguageForeign object from the database using the primary key.  Returns null if not found.
    */
    public static LanguageForeign selectOne(long languageForeignNum) throws Exception {
        String command = "SELECT * FROM languageforeign " + "WHERE LanguageForeignNum = " + POut.long(languageForeignNum);
        List<LanguageForeign> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one LanguageForeign object from the database using a query.
    */
    public static LanguageForeign selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<LanguageForeign> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of LanguageForeign objects from the database using a query.
    */
    public static List<LanguageForeign> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<LanguageForeign> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<LanguageForeign> tableToList(DataTable table) throws Exception {
        List<LanguageForeign> retVal = new List<LanguageForeign>();
        LanguageForeign languageForeign;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            languageForeign = new LanguageForeign();
            languageForeign.LanguageForeignNum = PIn.Long(table.Rows[i]["LanguageForeignNum"].ToString());
            languageForeign.ClassType = PIn.String(table.Rows[i]["ClassType"].ToString());
            languageForeign.English = PIn.String(table.Rows[i]["English"].ToString());
            languageForeign.Culture = PIn.String(table.Rows[i]["Culture"].ToString());
            languageForeign.Translation = PIn.String(table.Rows[i]["Translation"].ToString());
            languageForeign.Comments = PIn.String(table.Rows[i]["Comments"].ToString());
            retVal.Add(languageForeign);
        }
        return retVal;
    }

    /**
    * Inserts one LanguageForeign into the database.  Returns the new priKey.
    */
    public static long insert(LanguageForeign languageForeign) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            languageForeign.LanguageForeignNum = DbHelper.getNextOracleKey("languageforeign","LanguageForeignNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(languageForeign, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        languageForeign.LanguageForeignNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(languageForeign, false);
        } 
    }

    /**
    * Inserts one LanguageForeign into the database.  Provides option to use the existing priKey.
    */
    public static long insert(LanguageForeign languageForeign, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            languageForeign.LanguageForeignNum = ReplicationServers.getKey("languageforeign","LanguageForeignNum");
        }
         
        String command = "INSERT INTO languageforeign (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "LanguageForeignNum,";
        }
         
        command += "ClassType,English,Culture,Translation,Comments) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(languageForeign.LanguageForeignNum) + ",";
        }
         
        command += "'" + POut.string(languageForeign.ClassType) + "'," + "'" + POut.string(languageForeign.English) + "'," + "'" + POut.string(languageForeign.Culture) + "'," + "'" + POut.string(languageForeign.Translation) + "'," + "'" + POut.string(languageForeign.Comments) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            languageForeign.LanguageForeignNum = Db.nonQ(command,true);
        } 
        return languageForeign.LanguageForeignNum;
    }

    /**
    * Updates one LanguageForeign in the database.
    */
    public static void update(LanguageForeign languageForeign) throws Exception {
        String command = "UPDATE languageforeign SET " + "ClassType         = '" + POut.string(languageForeign.ClassType) + "', " + "English           = '" + POut.string(languageForeign.English) + "', " + "Culture           = '" + POut.string(languageForeign.Culture) + "', " + "Translation       = '" + POut.string(languageForeign.Translation) + "', " + "Comments          = '" + POut.string(languageForeign.Comments) + "' " + "WHERE LanguageForeignNum = " + POut.long(languageForeign.LanguageForeignNum);
        Db.nonQ(command);
    }

    /**
    * Updates one LanguageForeign in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(LanguageForeign languageForeign, LanguageForeign oldLanguageForeign) throws Exception {
        String command = "";
        if (!StringSupport.equals(languageForeign.ClassType, oldLanguageForeign.ClassType))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClassType = '" + POut.string(languageForeign.ClassType) + "'";
        }
         
        if (!StringSupport.equals(languageForeign.English, oldLanguageForeign.English))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "English = '" + POut.string(languageForeign.English) + "'";
        }
         
        if (!StringSupport.equals(languageForeign.Culture, oldLanguageForeign.Culture))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Culture = '" + POut.string(languageForeign.Culture) + "'";
        }
         
        if (!StringSupport.equals(languageForeign.Translation, oldLanguageForeign.Translation))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Translation = '" + POut.string(languageForeign.Translation) + "'";
        }
         
        if (!StringSupport.equals(languageForeign.Comments, oldLanguageForeign.Comments))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Comments = '" + POut.string(languageForeign.Comments) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE languageforeign SET " + command + " WHERE LanguageForeignNum = " + POut.long(languageForeign.LanguageForeignNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one LanguageForeign from the database.
    */
    public static void delete(long languageForeignNum) throws Exception {
        String command = "DELETE FROM languageforeign " + "WHERE LanguageForeignNum = " + POut.long(languageForeignNum);
        Db.nonQ(command);
    }

}


