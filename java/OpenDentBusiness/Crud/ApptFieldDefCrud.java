//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:57:58 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.ApptFieldDef;
import OpenDentBusiness.ApptFieldType;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ApptFieldDefCrud   
{
    /**
    * Gets one ApptFieldDef object from the database using the primary key.  Returns null if not found.
    */
    public static ApptFieldDef selectOne(long apptFieldDefNum) throws Exception {
        String command = "SELECT * FROM apptfielddef " + "WHERE ApptFieldDefNum = " + POut.long(apptFieldDefNum);
        List<ApptFieldDef> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ApptFieldDef object from the database using a query.
    */
    public static ApptFieldDef selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ApptFieldDef> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ApptFieldDef objects from the database using a query.
    */
    public static List<ApptFieldDef> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ApptFieldDef> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ApptFieldDef> tableToList(DataTable table) throws Exception {
        List<ApptFieldDef> retVal = new List<ApptFieldDef>();
        ApptFieldDef apptFieldDef;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            apptFieldDef = new ApptFieldDef();
            apptFieldDef.ApptFieldDefNum = PIn.Long(table.Rows[i]["ApptFieldDefNum"].ToString());
            apptFieldDef.FieldName = PIn.String(table.Rows[i]["FieldName"].ToString());
            apptFieldDef.FieldType = (ApptFieldType)PIn.Int(table.Rows[i]["FieldType"].ToString());
            apptFieldDef.PickList = PIn.String(table.Rows[i]["PickList"].ToString());
            retVal.Add(apptFieldDef);
        }
        return retVal;
    }

    /**
    * Inserts one ApptFieldDef into the database.  Returns the new priKey.
    */
    public static long insert(ApptFieldDef apptFieldDef) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            apptFieldDef.ApptFieldDefNum = DbHelper.getNextOracleKey("apptfielddef","ApptFieldDefNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(apptFieldDef, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        apptFieldDef.ApptFieldDefNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(apptFieldDef, false);
        } 
    }

    /**
    * Inserts one ApptFieldDef into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ApptFieldDef apptFieldDef, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            apptFieldDef.ApptFieldDefNum = ReplicationServers.getKey("apptfielddef","ApptFieldDefNum");
        }
         
        String command = "INSERT INTO apptfielddef (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "ApptFieldDefNum,";
        }
         
        command += "FieldName,FieldType,PickList) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(apptFieldDef.ApptFieldDefNum) + ",";
        }
         
        command += "'" + POut.string(apptFieldDef.FieldName) + "'," + POut.int(((Enum)apptFieldDef.FieldType).ordinal()) + "," + "'" + POut.string(apptFieldDef.PickList) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            apptFieldDef.ApptFieldDefNum = Db.nonQ(command,true);
        } 
        return apptFieldDef.ApptFieldDefNum;
    }

    /**
    * Updates one ApptFieldDef in the database.
    */
    public static void update(ApptFieldDef apptFieldDef) throws Exception {
        String command = "UPDATE apptfielddef SET " + "FieldName      = '" + POut.string(apptFieldDef.FieldName) + "', " + "FieldType      =  " + POut.int(((Enum)apptFieldDef.FieldType).ordinal()) + ", " + "PickList       = '" + POut.string(apptFieldDef.PickList) + "' " + "WHERE ApptFieldDefNum = " + POut.long(apptFieldDef.ApptFieldDefNum);
        Db.nonQ(command);
    }

    /**
    * Updates one ApptFieldDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ApptFieldDef apptFieldDef, ApptFieldDef oldApptFieldDef) throws Exception {
        String command = "";
        if (!StringSupport.equals(apptFieldDef.FieldName, oldApptFieldDef.FieldName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FieldName = '" + POut.string(apptFieldDef.FieldName) + "'";
        }
         
        if (apptFieldDef.FieldType != oldApptFieldDef.FieldType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FieldType = " + POut.int(((Enum)apptFieldDef.FieldType).ordinal()) + "";
        }
         
        if (!StringSupport.equals(apptFieldDef.PickList, oldApptFieldDef.PickList))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PickList = '" + POut.string(apptFieldDef.PickList) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE apptfielddef SET " + command + " WHERE ApptFieldDefNum = " + POut.long(apptFieldDef.ApptFieldDefNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one ApptFieldDef from the database.
    */
    public static void delete(long apptFieldDefNum) throws Exception {
        String command = "DELETE FROM apptfielddef " + "WHERE ApptFieldDefNum = " + POut.long(apptFieldDefNum);
        Db.nonQ(command);
    }

}


