//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:00 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.CustReference;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class CustReferenceCrud   
{
    /**
    * Gets one CustReference object from the database using the primary key.  Returns null if not found.
    */
    public static CustReference selectOne(long custReferenceNum) throws Exception {
        String command = "SELECT * FROM custreference " + "WHERE CustReferenceNum = " + POut.long(custReferenceNum);
        List<CustReference> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one CustReference object from the database using a query.
    */
    public static CustReference selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<CustReference> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of CustReference objects from the database using a query.
    */
    public static List<CustReference> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<CustReference> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<CustReference> tableToList(DataTable table) throws Exception {
        List<CustReference> retVal = new List<CustReference>();
        CustReference custReference;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            custReference = new CustReference();
            custReference.CustReferenceNum = PIn.Long(table.Rows[i]["CustReferenceNum"].ToString());
            custReference.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            custReference.DateMostRecent = PIn.Date(table.Rows[i]["DateMostRecent"].ToString());
            custReference.Note = PIn.String(table.Rows[i]["Note"].ToString());
            custReference.IsBadRef = PIn.Bool(table.Rows[i]["IsBadRef"].ToString());
            retVal.Add(custReference);
        }
        return retVal;
    }

    /**
    * Inserts one CustReference into the database.  Returns the new priKey.
    */
    public static long insert(CustReference custReference) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            custReference.CustReferenceNum = DbHelper.getNextOracleKey("custreference","CustReferenceNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(custReference, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        custReference.CustReferenceNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(custReference, false);
        } 
    }

    /**
    * Inserts one CustReference into the database.  Provides option to use the existing priKey.
    */
    public static long insert(CustReference custReference, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            custReference.CustReferenceNum = ReplicationServers.getKey("custreference","CustReferenceNum");
        }
         
        String command = "INSERT INTO custreference (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "CustReferenceNum,";
        }
         
        command += "PatNum,DateMostRecent,Note,IsBadRef) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(custReference.CustReferenceNum) + ",";
        }
         
        command += POut.long(custReference.PatNum) + "," + POut.date(custReference.DateMostRecent) + "," + "'" + POut.string(custReference.Note) + "'," + POut.bool(custReference.IsBadRef) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            custReference.CustReferenceNum = Db.nonQ(command,true);
        } 
        return custReference.CustReferenceNum;
    }

    /**
    * Updates one CustReference in the database.
    */
    public static void update(CustReference custReference) throws Exception {
        String command = "UPDATE custreference SET " + "PatNum          =  " + POut.long(custReference.PatNum) + ", " + "DateMostRecent  =  " + POut.date(custReference.DateMostRecent) + ", " + "Note            = '" + POut.string(custReference.Note) + "', " + "IsBadRef        =  " + POut.bool(custReference.IsBadRef) + " " + "WHERE CustReferenceNum = " + POut.long(custReference.CustReferenceNum);
        Db.nonQ(command);
    }

    /**
    * Updates one CustReference in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(CustReference custReference, CustReference oldCustReference) throws Exception {
        String command = "";
        if (custReference.PatNum != oldCustReference.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.long(custReference.PatNum) + "";
        }
         
        if (custReference.DateMostRecent != oldCustReference.DateMostRecent)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateMostRecent = " + POut.date(custReference.DateMostRecent) + "";
        }
         
        if (!StringSupport.equals(custReference.Note, oldCustReference.Note))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.string(custReference.Note) + "'";
        }
         
        if (custReference.IsBadRef != oldCustReference.IsBadRef)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsBadRef = " + POut.bool(custReference.IsBadRef) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE custreference SET " + command + " WHERE CustReferenceNum = " + POut.long(custReference.CustReferenceNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one CustReference from the database.
    */
    public static void delete(long custReferenceNum) throws Exception {
        String command = "DELETE FROM custreference " + "WHERE CustReferenceNum = " + POut.long(custReferenceNum);
        Db.nonQ(command);
    }

}


