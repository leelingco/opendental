//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:02 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.EhrLabNote;
import OpenDentBusiness.OdDbType;
import OpenDentBusiness.OdSqlParameter;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EhrLabNoteCrud   
{
    /**
    * Gets one EhrLabNote object from the database using the primary key.  Returns null if not found.
    */
    public static EhrLabNote selectOne(long ehrLabNoteNum) throws Exception {
        String command = "SELECT * FROM ehrlabnote " + "WHERE EhrLabNoteNum = " + POut.long(ehrLabNoteNum);
        List<EhrLabNote> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one EhrLabNote object from the database using a query.
    */
    public static EhrLabNote selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrLabNote> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of EhrLabNote objects from the database using a query.
    */
    public static List<EhrLabNote> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrLabNote> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<EhrLabNote> tableToList(DataTable table) throws Exception {
        List<EhrLabNote> retVal = new List<EhrLabNote>();
        EhrLabNote ehrLabNote;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            ehrLabNote = new EhrLabNote();
            ehrLabNote.EhrLabNoteNum = PIn.Long(table.Rows[i]["EhrLabNoteNum"].ToString());
            ehrLabNote.EhrLabNum = PIn.Long(table.Rows[i]["EhrLabNum"].ToString());
            ehrLabNote.EhrLabResultNum = PIn.Long(table.Rows[i]["EhrLabResultNum"].ToString());
            ehrLabNote.Comments = PIn.String(table.Rows[i]["Comments"].ToString());
            retVal.Add(ehrLabNote);
        }
        return retVal;
    }

    /**
    * Inserts one EhrLabNote into the database.  Returns the new priKey.
    */
    public static long insert(EhrLabNote ehrLabNote) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            ehrLabNote.EhrLabNoteNum = DbHelper.getNextOracleKey("ehrlabnote","EhrLabNoteNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(ehrLabNote, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        ehrLabNote.EhrLabNoteNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(ehrLabNote, false);
        } 
    }

    /**
    * Inserts one EhrLabNote into the database.  Provides option to use the existing priKey.
    */
    public static long insert(EhrLabNote ehrLabNote, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            ehrLabNote.EhrLabNoteNum = ReplicationServers.getKey("ehrlabnote","EhrLabNoteNum");
        }
         
        String command = "INSERT INTO ehrlabnote (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "EhrLabNoteNum,";
        }
         
        command += "EhrLabNum,EhrLabResultNum,Comments) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(ehrLabNote.EhrLabNoteNum) + ",";
        }
         
        command += POut.long(ehrLabNote.EhrLabNum) + "," + POut.long(ehrLabNote.EhrLabResultNum) + "," + DbHelper.getParamChar() + "paramComments)";
        if (ehrLabNote.Comments == null)
        {
            ehrLabNote.Comments = "";
        }
         
        OdSqlParameter paramComments = new OdSqlParameter("paramComments", OdDbType.Text, ehrLabNote.Comments);
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command,paramComments);
        }
        else
        {
            ehrLabNote.EhrLabNoteNum = Db.nonQ(command,true,paramComments);
        } 
        return ehrLabNote.EhrLabNoteNum;
    }

    /**
    * Updates one EhrLabNote in the database.
    */
    public static void update(EhrLabNote ehrLabNote) throws Exception {
        String command = "UPDATE ehrlabnote SET " + "EhrLabNum      =  " + POut.long(ehrLabNote.EhrLabNum) + ", " + "EhrLabResultNum=  " + POut.long(ehrLabNote.EhrLabResultNum) + ", " + "Comments       =  " + DbHelper.getParamChar() + "paramComments " + "WHERE EhrLabNoteNum = " + POut.long(ehrLabNote.EhrLabNoteNum);
        if (ehrLabNote.Comments == null)
        {
            ehrLabNote.Comments = "";
        }
         
        OdSqlParameter paramComments = new OdSqlParameter("paramComments", OdDbType.Text, ehrLabNote.Comments);
        Db.nonQ(command,paramComments);
    }

    /**
    * Updates one EhrLabNote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(EhrLabNote ehrLabNote, EhrLabNote oldEhrLabNote) throws Exception {
        String command = "";
        if (ehrLabNote.EhrLabNum != oldEhrLabNote.EhrLabNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EhrLabNum = " + POut.long(ehrLabNote.EhrLabNum) + "";
        }
         
        if (ehrLabNote.EhrLabResultNum != oldEhrLabNote.EhrLabResultNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EhrLabResultNum = " + POut.long(ehrLabNote.EhrLabResultNum) + "";
        }
         
        if (!StringSupport.equals(ehrLabNote.Comments, oldEhrLabNote.Comments))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Comments = " + DbHelper.getParamChar() + "paramComments";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        if (ehrLabNote.Comments == null)
        {
            ehrLabNote.Comments = "";
        }
         
        OdSqlParameter paramComments = new OdSqlParameter("paramComments", OdDbType.Text, ehrLabNote.Comments);
        command = "UPDATE ehrlabnote SET " + command + " WHERE EhrLabNoteNum = " + POut.long(ehrLabNote.EhrLabNoteNum);
        Db.nonQ(command,paramComments);
    }

    /**
    * Deletes one EhrLabNote from the database.
    */
    public static void delete(long ehrLabNoteNum) throws Exception {
        String command = "DELETE FROM ehrlabnote " + "WHERE EhrLabNoteNum = " + POut.long(ehrLabNoteNum);
        Db.nonQ(command);
    }

}


