//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:06 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.Operatory;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class OperatoryCrud   
{
    /**
    * Gets one Operatory object from the database using the primary key.  Returns null if not found.
    */
    public static Operatory selectOne(long operatoryNum) throws Exception {
        String command = "SELECT * FROM operatory " + "WHERE OperatoryNum = " + POut.long(operatoryNum);
        List<Operatory> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Operatory object from the database using a query.
    */
    public static Operatory selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Operatory> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Operatory objects from the database using a query.
    */
    public static List<Operatory> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Operatory> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Operatory> tableToList(DataTable table) throws Exception {
        List<Operatory> retVal = new List<Operatory>();
        Operatory operatory;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            operatory = new Operatory();
            operatory.OperatoryNum = PIn.Long(table.Rows[i]["OperatoryNum"].ToString());
            operatory.OpName = PIn.String(table.Rows[i]["OpName"].ToString());
            operatory.Abbrev = PIn.String(table.Rows[i]["Abbrev"].ToString());
            operatory.ItemOrder = PIn.Int(table.Rows[i]["ItemOrder"].ToString());
            operatory.IsHidden = PIn.Bool(table.Rows[i]["IsHidden"].ToString());
            operatory.ProvDentist = PIn.Long(table.Rows[i]["ProvDentist"].ToString());
            operatory.ProvHygienist = PIn.Long(table.Rows[i]["ProvHygienist"].ToString());
            operatory.IsHygiene = PIn.Bool(table.Rows[i]["IsHygiene"].ToString());
            operatory.ClinicNum = PIn.Long(table.Rows[i]["ClinicNum"].ToString());
            operatory.SetProspective = PIn.Bool(table.Rows[i]["SetProspective"].ToString());
            retVal.Add(operatory);
        }
        return retVal;
    }

    /**
    * Inserts one Operatory into the database.  Returns the new priKey.
    */
    public static long insert(Operatory operatory) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            operatory.OperatoryNum = DbHelper.getNextOracleKey("operatory","OperatoryNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(operatory, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        operatory.OperatoryNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(operatory, false);
        } 
    }

    /**
    * Inserts one Operatory into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Operatory operatory, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            operatory.OperatoryNum = ReplicationServers.getKey("operatory","OperatoryNum");
        }
         
        String command = "INSERT INTO operatory (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "OperatoryNum,";
        }
         
        command += "OpName,Abbrev,ItemOrder,IsHidden,ProvDentist,ProvHygienist,IsHygiene,ClinicNum,SetProspective) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(operatory.OperatoryNum) + ",";
        }
         
        command += "'" + POut.string(operatory.OpName) + "'," + "'" + POut.string(operatory.Abbrev) + "'," + POut.int(operatory.ItemOrder) + "," + POut.bool(operatory.IsHidden) + "," + POut.long(operatory.ProvDentist) + "," + POut.long(operatory.ProvHygienist) + "," + POut.bool(operatory.IsHygiene) + "," + POut.long(operatory.ClinicNum) + "," + POut.bool(operatory.SetProspective) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            operatory.OperatoryNum = Db.nonQ(command,true);
        } 
        return operatory.OperatoryNum;
    }

    /**
    * Updates one Operatory in the database.
    */
    public static void update(Operatory operatory) throws Exception {
        String command = "UPDATE operatory SET " + "OpName        = '" + POut.string(operatory.OpName) + "', " + "Abbrev        = '" + POut.string(operatory.Abbrev) + "', " + "ItemOrder     =  " + POut.int(operatory.ItemOrder) + ", " + "IsHidden      =  " + POut.bool(operatory.IsHidden) + ", " + "ProvDentist   =  " + POut.long(operatory.ProvDentist) + ", " + "ProvHygienist =  " + POut.long(operatory.ProvHygienist) + ", " + "IsHygiene     =  " + POut.bool(operatory.IsHygiene) + ", " + "ClinicNum     =  " + POut.long(operatory.ClinicNum) + ", " + "SetProspective=  " + POut.bool(operatory.SetProspective) + " " + "WHERE OperatoryNum = " + POut.long(operatory.OperatoryNum);
        Db.nonQ(command);
    }

    /**
    * Updates one Operatory in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Operatory operatory, Operatory oldOperatory) throws Exception {
        String command = "";
        if (!StringSupport.equals(operatory.OpName, oldOperatory.OpName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "OpName = '" + POut.string(operatory.OpName) + "'";
        }
         
        if (!StringSupport.equals(operatory.Abbrev, oldOperatory.Abbrev))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Abbrev = '" + POut.string(operatory.Abbrev) + "'";
        }
         
        if (operatory.ItemOrder != oldOperatory.ItemOrder)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ItemOrder = " + POut.int(operatory.ItemOrder) + "";
        }
         
        if (operatory.IsHidden != oldOperatory.IsHidden)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsHidden = " + POut.bool(operatory.IsHidden) + "";
        }
         
        if (operatory.ProvDentist != oldOperatory.ProvDentist)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvDentist = " + POut.long(operatory.ProvDentist) + "";
        }
         
        if (operatory.ProvHygienist != oldOperatory.ProvHygienist)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvHygienist = " + POut.long(operatory.ProvHygienist) + "";
        }
         
        if (operatory.IsHygiene != oldOperatory.IsHygiene)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsHygiene = " + POut.bool(operatory.IsHygiene) + "";
        }
         
        if (operatory.ClinicNum != oldOperatory.ClinicNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClinicNum = " + POut.long(operatory.ClinicNum) + "";
        }
         
        if (operatory.SetProspective != oldOperatory.SetProspective)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SetProspective = " + POut.bool(operatory.SetProspective) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE operatory SET " + command + " WHERE OperatoryNum = " + POut.long(operatory.OperatoryNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one Operatory from the database.
    */
    public static void delete(long operatoryNum) throws Exception {
        String command = "DELETE FROM operatory " + "WHERE OperatoryNum = " + POut.long(operatoryNum);
        Db.nonQ(command);
    }

}


