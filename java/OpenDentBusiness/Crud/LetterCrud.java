//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:05 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.Letter;
import OpenDentBusiness.OdDbType;
import OpenDentBusiness.OdSqlParameter;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class LetterCrud   
{
    /**
    * Gets one Letter object from the database using the primary key.  Returns null if not found.
    */
    public static Letter selectOne(long letterNum) throws Exception {
        String command = "SELECT * FROM letter " + "WHERE LetterNum = " + POut.long(letterNum);
        List<Letter> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Letter object from the database using a query.
    */
    public static Letter selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Letter> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Letter objects from the database using a query.
    */
    public static List<Letter> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Letter> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Letter> tableToList(DataTable table) throws Exception {
        List<Letter> retVal = new List<Letter>();
        Letter letter;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            letter = new Letter();
            letter.LetterNum = PIn.Long(table.Rows[i]["LetterNum"].ToString());
            letter.Description = PIn.String(table.Rows[i]["Description"].ToString());
            letter.BodyText = PIn.String(table.Rows[i]["BodyText"].ToString());
            retVal.Add(letter);
        }
        return retVal;
    }

    /**
    * Inserts one Letter into the database.  Returns the new priKey.
    */
    public static long insert(Letter letter) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            letter.LetterNum = DbHelper.getNextOracleKey("letter","LetterNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(letter, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        letter.LetterNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(letter, false);
        } 
    }

    /**
    * Inserts one Letter into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Letter letter, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            letter.LetterNum = ReplicationServers.getKey("letter","LetterNum");
        }
         
        String command = "INSERT INTO letter (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "LetterNum,";
        }
         
        command += "Description,BodyText) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(letter.LetterNum) + ",";
        }
         
        command += "'" + POut.string(letter.Description) + "'," + DbHelper.getParamChar() + "paramBodyText)";
        if (letter.BodyText == null)
        {
            letter.BodyText = "";
        }
         
        OdSqlParameter paramBodyText = new OdSqlParameter("paramBodyText", OdDbType.Text, letter.BodyText);
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command,paramBodyText);
        }
        else
        {
            letter.LetterNum = Db.nonQ(command,true,paramBodyText);
        } 
        return letter.LetterNum;
    }

    /**
    * Updates one Letter in the database.
    */
    public static void update(Letter letter) throws Exception {
        String command = "UPDATE letter SET " + "Description= '" + POut.string(letter.Description) + "', " + "BodyText   =  " + DbHelper.getParamChar() + "paramBodyText " + "WHERE LetterNum = " + POut.long(letter.LetterNum);
        if (letter.BodyText == null)
        {
            letter.BodyText = "";
        }
         
        OdSqlParameter paramBodyText = new OdSqlParameter("paramBodyText", OdDbType.Text, letter.BodyText);
        Db.nonQ(command,paramBodyText);
    }

    /**
    * Updates one Letter in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Letter letter, Letter oldLetter) throws Exception {
        String command = "";
        if (!StringSupport.equals(letter.Description, oldLetter.Description))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.string(letter.Description) + "'";
        }
         
        if (!StringSupport.equals(letter.BodyText, oldLetter.BodyText))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "BodyText = " + DbHelper.getParamChar() + "paramBodyText";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        if (letter.BodyText == null)
        {
            letter.BodyText = "";
        }
         
        OdSqlParameter paramBodyText = new OdSqlParameter("paramBodyText", OdDbType.Text, letter.BodyText);
        command = "UPDATE letter SET " + command + " WHERE LetterNum = " + POut.long(letter.LetterNum);
        Db.nonQ(command,paramBodyText);
    }

    /**
    * Deletes one Letter from the database.
    */
    public static void delete(long letterNum) throws Exception {
        String command = "DELETE FROM letter " + "WHERE LetterNum = " + POut.long(letterNum);
        Db.nonQ(command);
    }

}


