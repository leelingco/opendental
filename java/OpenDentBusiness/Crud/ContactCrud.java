//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:00 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Contact;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ContactCrud   
{
    /**
    * Gets one Contact object from the database using the primary key.  Returns null if not found.
    */
    public static Contact selectOne(long contactNum) throws Exception {
        String command = "SELECT * FROM contact " + "WHERE ContactNum = " + POut.long(contactNum);
        List<Contact> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Contact object from the database using a query.
    */
    public static Contact selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Contact> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Contact objects from the database using a query.
    */
    public static List<Contact> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Contact> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Contact> tableToList(DataTable table) throws Exception {
        List<Contact> retVal = new List<Contact>();
        Contact contact;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            contact = new Contact();
            contact.ContactNum = PIn.Long(table.Rows[i]["ContactNum"].ToString());
            contact.LName = PIn.String(table.Rows[i]["LName"].ToString());
            contact.FName = PIn.String(table.Rows[i]["FName"].ToString());
            contact.WkPhone = PIn.String(table.Rows[i]["WkPhone"].ToString());
            contact.Fax = PIn.String(table.Rows[i]["Fax"].ToString());
            contact.Category = PIn.Long(table.Rows[i]["Category"].ToString());
            contact.Notes = PIn.String(table.Rows[i]["Notes"].ToString());
            retVal.Add(contact);
        }
        return retVal;
    }

    /**
    * Inserts one Contact into the database.  Returns the new priKey.
    */
    public static long insert(Contact contact) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            contact.ContactNum = DbHelper.getNextOracleKey("contact","ContactNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(contact, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        contact.ContactNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(contact, false);
        } 
    }

    /**
    * Inserts one Contact into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Contact contact, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            contact.ContactNum = ReplicationServers.getKey("contact","ContactNum");
        }
         
        String command = "INSERT INTO contact (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "ContactNum,";
        }
         
        command += "LName,FName,WkPhone,Fax,Category,Notes) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(contact.ContactNum) + ",";
        }
         
        command += "'" + POut.string(contact.LName) + "'," + "'" + POut.string(contact.FName) + "'," + "'" + POut.string(contact.WkPhone) + "'," + "'" + POut.string(contact.Fax) + "'," + POut.long(contact.Category) + "," + "'" + POut.string(contact.Notes) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            contact.ContactNum = Db.nonQ(command,true);
        } 
        return contact.ContactNum;
    }

    /**
    * Updates one Contact in the database.
    */
    public static void update(Contact contact) throws Exception {
        String command = "UPDATE contact SET " + "LName     = '" + POut.string(contact.LName) + "', " + "FName     = '" + POut.string(contact.FName) + "', " + "WkPhone   = '" + POut.string(contact.WkPhone) + "', " + "Fax       = '" + POut.string(contact.Fax) + "', " + "Category  =  " + POut.long(contact.Category) + ", " + "Notes     = '" + POut.string(contact.Notes) + "' " + "WHERE ContactNum = " + POut.long(contact.ContactNum);
        Db.nonQ(command);
    }

    /**
    * Updates one Contact in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Contact contact, Contact oldContact) throws Exception {
        String command = "";
        if (!StringSupport.equals(contact.LName, oldContact.LName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "LName = '" + POut.string(contact.LName) + "'";
        }
         
        if (!StringSupport.equals(contact.FName, oldContact.FName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FName = '" + POut.string(contact.FName) + "'";
        }
         
        if (!StringSupport.equals(contact.WkPhone, oldContact.WkPhone))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "WkPhone = '" + POut.string(contact.WkPhone) + "'";
        }
         
        if (!StringSupport.equals(contact.Fax, oldContact.Fax))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Fax = '" + POut.string(contact.Fax) + "'";
        }
         
        if (contact.Category != oldContact.Category)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Category = " + POut.long(contact.Category) + "";
        }
         
        if (!StringSupport.equals(contact.Notes, oldContact.Notes))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Notes = '" + POut.string(contact.Notes) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE contact SET " + command + " WHERE ContactNum = " + POut.long(contact.ContactNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one Contact from the database.
    */
    public static void delete(long contactNum) throws Exception {
        String command = "DELETE FROM contact " + "WHERE ContactNum = " + POut.long(contactNum);
        Db.nonQ(command);
    }

}


