//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:03 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.EhrTrigger;
import OpenDentBusiness.MatchCardinality;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EhrTriggerCrud   
{
    /**
    * Gets one EhrTrigger object from the database using the primary key.  Returns null if not found.
    */
    public static EhrTrigger selectOne(long ehrTriggerNum) throws Exception {
        String command = "SELECT * FROM ehrtrigger " + "WHERE EhrTriggerNum = " + POut.long(ehrTriggerNum);
        List<EhrTrigger> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one EhrTrigger object from the database using a query.
    */
    public static EhrTrigger selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrTrigger> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of EhrTrigger objects from the database using a query.
    */
    public static List<EhrTrigger> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrTrigger> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<EhrTrigger> tableToList(DataTable table) throws Exception {
        List<EhrTrigger> retVal = new List<EhrTrigger>();
        EhrTrigger ehrTrigger;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            ehrTrigger = new EhrTrigger();
            ehrTrigger.EhrTriggerNum = PIn.Long(table.Rows[i]["EhrTriggerNum"].ToString());
            ehrTrigger.Description = PIn.String(table.Rows[i]["Description"].ToString());
            ehrTrigger.ProblemSnomedList = PIn.String(table.Rows[i]["ProblemSnomedList"].ToString());
            ehrTrigger.ProblemIcd9List = PIn.String(table.Rows[i]["ProblemIcd9List"].ToString());
            ehrTrigger.ProblemIcd10List = PIn.String(table.Rows[i]["ProblemIcd10List"].ToString());
            ehrTrigger.ProblemDefNumList = PIn.String(table.Rows[i]["ProblemDefNumList"].ToString());
            ehrTrigger.MedicationNumList = PIn.String(table.Rows[i]["MedicationNumList"].ToString());
            ehrTrigger.RxCuiList = PIn.String(table.Rows[i]["RxCuiList"].ToString());
            ehrTrigger.CvxList = PIn.String(table.Rows[i]["CvxList"].ToString());
            ehrTrigger.AllergyDefNumList = PIn.String(table.Rows[i]["AllergyDefNumList"].ToString());
            ehrTrigger.DemographicsList = PIn.String(table.Rows[i]["DemographicsList"].ToString());
            ehrTrigger.LabLoincList = PIn.String(table.Rows[i]["LabLoincList"].ToString());
            ehrTrigger.VitalLoincList = PIn.String(table.Rows[i]["VitalLoincList"].ToString());
            ehrTrigger.Instructions = PIn.String(table.Rows[i]["Instructions"].ToString());
            ehrTrigger.Bibliography = PIn.String(table.Rows[i]["Bibliography"].ToString());
            ehrTrigger.Cardinality = (MatchCardinality)PIn.Int(table.Rows[i]["Cardinality"].ToString());
            retVal.Add(ehrTrigger);
        }
        return retVal;
    }

    /**
    * Inserts one EhrTrigger into the database.  Returns the new priKey.
    */
    public static long insert(EhrTrigger ehrTrigger) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            ehrTrigger.EhrTriggerNum = DbHelper.getNextOracleKey("ehrtrigger","EhrTriggerNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(ehrTrigger, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        ehrTrigger.EhrTriggerNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(ehrTrigger, false);
        } 
    }

    /**
    * Inserts one EhrTrigger into the database.  Provides option to use the existing priKey.
    */
    public static long insert(EhrTrigger ehrTrigger, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            ehrTrigger.EhrTriggerNum = ReplicationServers.getKey("ehrtrigger","EhrTriggerNum");
        }
         
        String command = "INSERT INTO ehrtrigger (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "EhrTriggerNum,";
        }
         
        command += "Description,ProblemSnomedList,ProblemIcd9List,ProblemIcd10List,ProblemDefNumList,MedicationNumList,RxCuiList,CvxList,AllergyDefNumList,DemographicsList,LabLoincList,VitalLoincList,Instructions,Bibliography,Cardinality) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(ehrTrigger.EhrTriggerNum) + ",";
        }
         
        command += "'" + POut.string(ehrTrigger.Description) + "'," + "'" + POut.string(ehrTrigger.ProblemSnomedList) + "'," + "'" + POut.string(ehrTrigger.ProblemIcd9List) + "'," + "'" + POut.string(ehrTrigger.ProblemIcd10List) + "'," + "'" + POut.string(ehrTrigger.ProblemDefNumList) + "'," + "'" + POut.string(ehrTrigger.MedicationNumList) + "'," + "'" + POut.string(ehrTrigger.RxCuiList) + "'," + "'" + POut.string(ehrTrigger.CvxList) + "'," + "'" + POut.string(ehrTrigger.AllergyDefNumList) + "'," + "'" + POut.string(ehrTrigger.DemographicsList) + "'," + "'" + POut.string(ehrTrigger.LabLoincList) + "'," + "'" + POut.string(ehrTrigger.VitalLoincList) + "'," + "'" + POut.string(ehrTrigger.Instructions) + "'," + "'" + POut.string(ehrTrigger.Bibliography) + "'," + POut.int(((Enum)ehrTrigger.Cardinality).ordinal()) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            ehrTrigger.EhrTriggerNum = Db.nonQ(command,true);
        } 
        return ehrTrigger.EhrTriggerNum;
    }

    /**
    * Updates one EhrTrigger in the database.
    */
    public static void update(EhrTrigger ehrTrigger) throws Exception {
        String command = "UPDATE ehrtrigger SET " + "Description      = '" + POut.string(ehrTrigger.Description) + "', " + "ProblemSnomedList= '" + POut.string(ehrTrigger.ProblemSnomedList) + "', " + "ProblemIcd9List  = '" + POut.string(ehrTrigger.ProblemIcd9List) + "', " + "ProblemIcd10List = '" + POut.string(ehrTrigger.ProblemIcd10List) + "', " + "ProblemDefNumList= '" + POut.string(ehrTrigger.ProblemDefNumList) + "', " + "MedicationNumList= '" + POut.string(ehrTrigger.MedicationNumList) + "', " + "RxCuiList        = '" + POut.string(ehrTrigger.RxCuiList) + "', " + "CvxList          = '" + POut.string(ehrTrigger.CvxList) + "', " + "AllergyDefNumList= '" + POut.string(ehrTrigger.AllergyDefNumList) + "', " + "DemographicsList = '" + POut.string(ehrTrigger.DemographicsList) + "', " + "LabLoincList     = '" + POut.string(ehrTrigger.LabLoincList) + "', " + "VitalLoincList   = '" + POut.string(ehrTrigger.VitalLoincList) + "', " + "Instructions     = '" + POut.string(ehrTrigger.Instructions) + "', " + "Bibliography     = '" + POut.string(ehrTrigger.Bibliography) + "', " + "Cardinality      =  " + POut.int(((Enum)ehrTrigger.Cardinality).ordinal()) + " " + "WHERE EhrTriggerNum = " + POut.long(ehrTrigger.EhrTriggerNum);
        Db.nonQ(command);
    }

    /**
    * Updates one EhrTrigger in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(EhrTrigger ehrTrigger, EhrTrigger oldEhrTrigger) throws Exception {
        String command = "";
        if (!StringSupport.equals(ehrTrigger.Description, oldEhrTrigger.Description))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.string(ehrTrigger.Description) + "'";
        }
         
        if (!StringSupport.equals(ehrTrigger.ProblemSnomedList, oldEhrTrigger.ProblemSnomedList))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProblemSnomedList = '" + POut.string(ehrTrigger.ProblemSnomedList) + "'";
        }
         
        if (!StringSupport.equals(ehrTrigger.ProblemIcd9List, oldEhrTrigger.ProblemIcd9List))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProblemIcd9List = '" + POut.string(ehrTrigger.ProblemIcd9List) + "'";
        }
         
        if (!StringSupport.equals(ehrTrigger.ProblemIcd10List, oldEhrTrigger.ProblemIcd10List))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProblemIcd10List = '" + POut.string(ehrTrigger.ProblemIcd10List) + "'";
        }
         
        if (!StringSupport.equals(ehrTrigger.ProblemDefNumList, oldEhrTrigger.ProblemDefNumList))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProblemDefNumList = '" + POut.string(ehrTrigger.ProblemDefNumList) + "'";
        }
         
        if (!StringSupport.equals(ehrTrigger.MedicationNumList, oldEhrTrigger.MedicationNumList))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MedicationNumList = '" + POut.string(ehrTrigger.MedicationNumList) + "'";
        }
         
        if (!StringSupport.equals(ehrTrigger.RxCuiList, oldEhrTrigger.RxCuiList))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RxCuiList = '" + POut.string(ehrTrigger.RxCuiList) + "'";
        }
         
        if (!StringSupport.equals(ehrTrigger.CvxList, oldEhrTrigger.CvxList))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CvxList = '" + POut.string(ehrTrigger.CvxList) + "'";
        }
         
        if (!StringSupport.equals(ehrTrigger.AllergyDefNumList, oldEhrTrigger.AllergyDefNumList))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AllergyDefNumList = '" + POut.string(ehrTrigger.AllergyDefNumList) + "'";
        }
         
        if (!StringSupport.equals(ehrTrigger.DemographicsList, oldEhrTrigger.DemographicsList))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DemographicsList = '" + POut.string(ehrTrigger.DemographicsList) + "'";
        }
         
        if (!StringSupport.equals(ehrTrigger.LabLoincList, oldEhrTrigger.LabLoincList))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "LabLoincList = '" + POut.string(ehrTrigger.LabLoincList) + "'";
        }
         
        if (!StringSupport.equals(ehrTrigger.VitalLoincList, oldEhrTrigger.VitalLoincList))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "VitalLoincList = '" + POut.string(ehrTrigger.VitalLoincList) + "'";
        }
         
        if (!StringSupport.equals(ehrTrigger.Instructions, oldEhrTrigger.Instructions))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Instructions = '" + POut.string(ehrTrigger.Instructions) + "'";
        }
         
        if (!StringSupport.equals(ehrTrigger.Bibliography, oldEhrTrigger.Bibliography))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Bibliography = '" + POut.string(ehrTrigger.Bibliography) + "'";
        }
         
        if (ehrTrigger.Cardinality != oldEhrTrigger.Cardinality)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Cardinality = " + POut.int(((Enum)ehrTrigger.Cardinality).ordinal()) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE ehrtrigger SET " + command + " WHERE EhrTriggerNum = " + POut.long(ehrTrigger.EhrTriggerNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one EhrTrigger from the database.
    */
    public static void delete(long ehrTriggerNum) throws Exception {
        String command = "DELETE FROM ehrtrigger " + "WHERE EhrTriggerNum = " + POut.long(ehrTriggerNum);
        Db.nonQ(command);
    }

}


