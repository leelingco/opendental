//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:01 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.DisplayField;
import OpenDentBusiness.DisplayFieldCategory;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class DisplayFieldCrud   
{
    /**
    * Gets one DisplayField object from the database using the primary key.  Returns null if not found.
    */
    public static DisplayField selectOne(long displayFieldNum) throws Exception {
        String command = "SELECT * FROM displayfield " + "WHERE DisplayFieldNum = " + POut.long(displayFieldNum);
        List<DisplayField> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one DisplayField object from the database using a query.
    */
    public static DisplayField selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<DisplayField> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of DisplayField objects from the database using a query.
    */
    public static List<DisplayField> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<DisplayField> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<DisplayField> tableToList(DataTable table) throws Exception {
        List<DisplayField> retVal = new List<DisplayField>();
        DisplayField displayField;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            displayField = new DisplayField();
            displayField.DisplayFieldNum = PIn.Long(table.Rows[i]["DisplayFieldNum"].ToString());
            displayField.InternalName = PIn.String(table.Rows[i]["InternalName"].ToString());
            displayField.ItemOrder = PIn.Int(table.Rows[i]["ItemOrder"].ToString());
            displayField.Description = PIn.String(table.Rows[i]["Description"].ToString());
            displayField.ColumnWidth = PIn.Int(table.Rows[i]["ColumnWidth"].ToString());
            displayField.Category = (DisplayFieldCategory)PIn.Int(table.Rows[i]["Category"].ToString());
            displayField.ChartViewNum = PIn.Long(table.Rows[i]["ChartViewNum"].ToString());
            retVal.Add(displayField);
        }
        return retVal;
    }

    /**
    * Inserts one DisplayField into the database.  Returns the new priKey.
    */
    public static long insert(DisplayField displayField) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            displayField.DisplayFieldNum = DbHelper.getNextOracleKey("displayfield","DisplayFieldNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(displayField, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        displayField.DisplayFieldNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(displayField, false);
        } 
    }

    /**
    * Inserts one DisplayField into the database.  Provides option to use the existing priKey.
    */
    public static long insert(DisplayField displayField, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            displayField.DisplayFieldNum = ReplicationServers.getKey("displayfield","DisplayFieldNum");
        }
         
        String command = "INSERT INTO displayfield (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "DisplayFieldNum,";
        }
         
        command += "InternalName,ItemOrder,Description,ColumnWidth,Category,ChartViewNum) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(displayField.DisplayFieldNum) + ",";
        }
         
        command += "'" + POut.string(displayField.InternalName) + "'," + POut.int(displayField.ItemOrder) + "," + "'" + POut.string(displayField.Description) + "'," + POut.int(displayField.ColumnWidth) + "," + POut.int(((Enum)displayField.Category).ordinal()) + "," + POut.long(displayField.ChartViewNum) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            displayField.DisplayFieldNum = Db.nonQ(command,true);
        } 
        return displayField.DisplayFieldNum;
    }

    /**
    * Updates one DisplayField in the database.
    */
    public static void update(DisplayField displayField) throws Exception {
        String command = "UPDATE displayfield SET " + "InternalName   = '" + POut.string(displayField.InternalName) + "', " + "ItemOrder      =  " + POut.int(displayField.ItemOrder) + ", " + "Description    = '" + POut.string(displayField.Description) + "', " + "ColumnWidth    =  " + POut.int(displayField.ColumnWidth) + ", " + "Category       =  " + POut.int(((Enum)displayField.Category).ordinal()) + ", " + "ChartViewNum   =  " + POut.long(displayField.ChartViewNum) + " " + "WHERE DisplayFieldNum = " + POut.long(displayField.DisplayFieldNum);
        Db.nonQ(command);
    }

    /**
    * Updates one DisplayField in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(DisplayField displayField, DisplayField oldDisplayField) throws Exception {
        String command = "";
        if (!StringSupport.equals(displayField.InternalName, oldDisplayField.InternalName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "InternalName = '" + POut.string(displayField.InternalName) + "'";
        }
         
        if (displayField.ItemOrder != oldDisplayField.ItemOrder)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ItemOrder = " + POut.int(displayField.ItemOrder) + "";
        }
         
        if (!StringSupport.equals(displayField.Description, oldDisplayField.Description))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.string(displayField.Description) + "'";
        }
         
        if (displayField.ColumnWidth != oldDisplayField.ColumnWidth)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ColumnWidth = " + POut.int(displayField.ColumnWidth) + "";
        }
         
        if (displayField.Category != oldDisplayField.Category)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Category = " + POut.int(((Enum)displayField.Category).ordinal()) + "";
        }
         
        if (displayField.ChartViewNum != oldDisplayField.ChartViewNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ChartViewNum = " + POut.long(displayField.ChartViewNum) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE displayfield SET " + command + " WHERE DisplayFieldNum = " + POut.long(displayField.DisplayFieldNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one DisplayField from the database.
    */
    public static void delete(long displayFieldNum) throws Exception {
        String command = "DELETE FROM displayfield " + "WHERE DisplayFieldNum = " + POut.long(displayFieldNum);
        Db.nonQ(command);
    }

}


