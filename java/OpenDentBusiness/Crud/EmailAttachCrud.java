//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:03 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.EmailAttach;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EmailAttachCrud   
{
    /**
    * Gets one EmailAttach object from the database using the primary key.  Returns null if not found.
    */
    public static EmailAttach selectOne(long emailAttachNum) throws Exception {
        String command = "SELECT * FROM emailattach " + "WHERE EmailAttachNum = " + POut.long(emailAttachNum);
        List<EmailAttach> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one EmailAttach object from the database using a query.
    */
    public static EmailAttach selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EmailAttach> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of EmailAttach objects from the database using a query.
    */
    public static List<EmailAttach> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EmailAttach> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<EmailAttach> tableToList(DataTable table) throws Exception {
        List<EmailAttach> retVal = new List<EmailAttach>();
        EmailAttach emailAttach;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            emailAttach = new EmailAttach();
            emailAttach.EmailAttachNum = PIn.Long(table.Rows[i]["EmailAttachNum"].ToString());
            emailAttach.EmailMessageNum = PIn.Long(table.Rows[i]["EmailMessageNum"].ToString());
            emailAttach.DisplayedFileName = PIn.String(table.Rows[i]["DisplayedFileName"].ToString());
            emailAttach.ActualFileName = PIn.String(table.Rows[i]["ActualFileName"].ToString());
            retVal.Add(emailAttach);
        }
        return retVal;
    }

    /**
    * Inserts one EmailAttach into the database.  Returns the new priKey.
    */
    public static long insert(EmailAttach emailAttach) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            emailAttach.EmailAttachNum = DbHelper.getNextOracleKey("emailattach","EmailAttachNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(emailAttach, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        emailAttach.EmailAttachNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(emailAttach, false);
        } 
    }

    /**
    * Inserts one EmailAttach into the database.  Provides option to use the existing priKey.
    */
    public static long insert(EmailAttach emailAttach, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            emailAttach.EmailAttachNum = ReplicationServers.getKey("emailattach","EmailAttachNum");
        }
         
        String command = "INSERT INTO emailattach (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "EmailAttachNum,";
        }
         
        command += "EmailMessageNum,DisplayedFileName,ActualFileName) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(emailAttach.EmailAttachNum) + ",";
        }
         
        command += POut.long(emailAttach.EmailMessageNum) + "," + "'" + POut.string(emailAttach.DisplayedFileName) + "'," + "'" + POut.string(emailAttach.ActualFileName) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            emailAttach.EmailAttachNum = Db.nonQ(command,true);
        } 
        return emailAttach.EmailAttachNum;
    }

    /**
    * Updates one EmailAttach in the database.
    */
    public static void update(EmailAttach emailAttach) throws Exception {
        String command = "UPDATE emailattach SET " + "EmailMessageNum  =  " + POut.long(emailAttach.EmailMessageNum) + ", " + "DisplayedFileName= '" + POut.string(emailAttach.DisplayedFileName) + "', " + "ActualFileName   = '" + POut.string(emailAttach.ActualFileName) + "' " + "WHERE EmailAttachNum = " + POut.long(emailAttach.EmailAttachNum);
        Db.nonQ(command);
    }

    /**
    * Updates one EmailAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(EmailAttach emailAttach, EmailAttach oldEmailAttach) throws Exception {
        String command = "";
        if (emailAttach.EmailMessageNum != oldEmailAttach.EmailMessageNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EmailMessageNum = " + POut.long(emailAttach.EmailMessageNum) + "";
        }
         
        if (!StringSupport.equals(emailAttach.DisplayedFileName, oldEmailAttach.DisplayedFileName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DisplayedFileName = '" + POut.string(emailAttach.DisplayedFileName) + "'";
        }
         
        if (!StringSupport.equals(emailAttach.ActualFileName, oldEmailAttach.ActualFileName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ActualFileName = '" + POut.string(emailAttach.ActualFileName) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE emailattach SET " + command + " WHERE EmailAttachNum = " + POut.long(emailAttach.EmailAttachNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one EmailAttach from the database.
    */
    public static void delete(long emailAttachNum) throws Exception {
        String command = "DELETE FROM emailattach " + "WHERE EmailAttachNum = " + POut.long(emailAttachNum);
        Db.nonQ(command);
    }

}


