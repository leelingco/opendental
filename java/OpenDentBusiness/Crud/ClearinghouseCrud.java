//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:00 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Clearinghouse;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.EclaimsCommBridge;
import OpenDentBusiness.ElectronicClaimFormat;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ClearinghouseCrud   
{
    /**
    * Gets one Clearinghouse object from the database using the primary key.  Returns null if not found.
    */
    public static Clearinghouse selectOne(long clearinghouseNum) throws Exception {
        String command = "SELECT * FROM clearinghouse " + "WHERE ClearinghouseNum = " + POut.long(clearinghouseNum);
        List<Clearinghouse> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Clearinghouse object from the database using a query.
    */
    public static Clearinghouse selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Clearinghouse> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Clearinghouse objects from the database using a query.
    */
    public static List<Clearinghouse> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Clearinghouse> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Clearinghouse> tableToList(DataTable table) throws Exception {
        List<Clearinghouse> retVal = new List<Clearinghouse>();
        Clearinghouse clearinghouse;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            clearinghouse = new Clearinghouse();
            clearinghouse.ClearinghouseNum = PIn.Long(table.Rows[i]["ClearinghouseNum"].ToString());
            clearinghouse.Description = PIn.String(table.Rows[i]["Description"].ToString());
            clearinghouse.ExportPath = PIn.String(table.Rows[i]["ExportPath"].ToString());
            clearinghouse.Payors = PIn.String(table.Rows[i]["Payors"].ToString());
            clearinghouse.Eformat = (ElectronicClaimFormat)PIn.Int(table.Rows[i]["Eformat"].ToString());
            clearinghouse.ISA05 = PIn.String(table.Rows[i]["ISA05"].ToString());
            clearinghouse.SenderTIN = PIn.String(table.Rows[i]["SenderTIN"].ToString());
            clearinghouse.ISA07 = PIn.String(table.Rows[i]["ISA07"].ToString());
            clearinghouse.ISA08 = PIn.String(table.Rows[i]["ISA08"].ToString());
            clearinghouse.ISA15 = PIn.String(table.Rows[i]["ISA15"].ToString());
            clearinghouse.Password = PIn.String(table.Rows[i]["Password"].ToString());
            clearinghouse.ResponsePath = PIn.String(table.Rows[i]["ResponsePath"].ToString());
            clearinghouse.CommBridge = (EclaimsCommBridge)PIn.Int(table.Rows[i]["CommBridge"].ToString());
            clearinghouse.ClientProgram = PIn.String(table.Rows[i]["ClientProgram"].ToString());
            clearinghouse.LastBatchNumber = PIn.Int(table.Rows[i]["LastBatchNumber"].ToString());
            clearinghouse.ModemPort = PIn.Byte(table.Rows[i]["ModemPort"].ToString());
            clearinghouse.LoginID = PIn.String(table.Rows[i]["LoginID"].ToString());
            clearinghouse.SenderName = PIn.String(table.Rows[i]["SenderName"].ToString());
            clearinghouse.SenderTelephone = PIn.String(table.Rows[i]["SenderTelephone"].ToString());
            clearinghouse.GS03 = PIn.String(table.Rows[i]["GS03"].ToString());
            clearinghouse.ISA02 = PIn.String(table.Rows[i]["ISA02"].ToString());
            clearinghouse.ISA04 = PIn.String(table.Rows[i]["ISA04"].ToString());
            clearinghouse.ISA16 = PIn.String(table.Rows[i]["ISA16"].ToString());
            clearinghouse.SeparatorData = PIn.String(table.Rows[i]["SeparatorData"].ToString());
            clearinghouse.SeparatorSegment = PIn.String(table.Rows[i]["SeparatorSegment"].ToString());
            retVal.Add(clearinghouse);
        }
        return retVal;
    }

    /**
    * Inserts one Clearinghouse into the database.  Returns the new priKey.
    */
    public static long insert(Clearinghouse clearinghouse) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            clearinghouse.ClearinghouseNum = DbHelper.getNextOracleKey("clearinghouse","ClearinghouseNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(clearinghouse, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        clearinghouse.ClearinghouseNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(clearinghouse, false);
        } 
    }

    /**
    * Inserts one Clearinghouse into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Clearinghouse clearinghouse, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            clearinghouse.ClearinghouseNum = ReplicationServers.getKey("clearinghouse","ClearinghouseNum");
        }
         
        String command = "INSERT INTO clearinghouse (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "ClearinghouseNum,";
        }
         
        command += "Description,ExportPath,Payors,Eformat,ISA05,SenderTIN,ISA07,ISA08,ISA15,Password,ResponsePath,CommBridge,ClientProgram,LastBatchNumber,ModemPort,LoginID,SenderName,SenderTelephone,GS03,ISA02,ISA04,ISA16,SeparatorData,SeparatorSegment) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(clearinghouse.ClearinghouseNum) + ",";
        }
         
        command += "'" + POut.string(clearinghouse.Description) + "'," + "'" + POut.string(clearinghouse.ExportPath) + "'," + "'" + POut.string(clearinghouse.Payors) + "'," + POut.int(((Enum)clearinghouse.Eformat).ordinal()) + "," + "'" + POut.string(clearinghouse.ISA05) + "'," + "'" + POut.string(clearinghouse.SenderTIN) + "'," + "'" + POut.string(clearinghouse.ISA07) + "'," + "'" + POut.string(clearinghouse.ISA08) + "'," + "'" + POut.string(clearinghouse.ISA15) + "'," + "'" + POut.string(clearinghouse.Password) + "'," + "'" + POut.string(clearinghouse.ResponsePath) + "'," + POut.int(((Enum)clearinghouse.CommBridge).ordinal()) + "," + "'" + POut.string(clearinghouse.ClientProgram) + "'," + POut.int(clearinghouse.LastBatchNumber) + "," + POut.byte(clearinghouse.ModemPort) + "," + "'" + POut.string(clearinghouse.LoginID) + "'," + "'" + POut.string(clearinghouse.SenderName) + "'," + "'" + POut.string(clearinghouse.SenderTelephone) + "'," + "'" + POut.string(clearinghouse.GS03) + "'," + "'" + POut.string(clearinghouse.ISA02) + "'," + "'" + POut.string(clearinghouse.ISA04) + "'," + "'" + POut.string(clearinghouse.ISA16) + "'," + "'" + POut.string(clearinghouse.SeparatorData) + "'," + "'" + POut.string(clearinghouse.SeparatorSegment) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            clearinghouse.ClearinghouseNum = Db.nonQ(command,true);
        } 
        return clearinghouse.ClearinghouseNum;
    }

    /**
    * Updates one Clearinghouse in the database.
    */
    public static void update(Clearinghouse clearinghouse) throws Exception {
        //LastBatchNumber excluded from update
        String command = "UPDATE clearinghouse SET " + "Description     = '" + POut.string(clearinghouse.Description) + "', " + "ExportPath      = '" + POut.string(clearinghouse.ExportPath) + "', " + "Payors          = '" + POut.string(clearinghouse.Payors) + "', " + "Eformat         =  " + POut.int(((Enum)clearinghouse.Eformat).ordinal()) + ", " + "ISA05           = '" + POut.string(clearinghouse.ISA05) + "', " + "SenderTIN       = '" + POut.string(clearinghouse.SenderTIN) + "', " + "ISA07           = '" + POut.string(clearinghouse.ISA07) + "', " + "ISA08           = '" + POut.string(clearinghouse.ISA08) + "', " + "ISA15           = '" + POut.string(clearinghouse.ISA15) + "', " + "Password        = '" + POut.string(clearinghouse.Password) + "', " + "ResponsePath    = '" + POut.string(clearinghouse.ResponsePath) + "', " + "CommBridge      =  " + POut.int(((Enum)clearinghouse.CommBridge).ordinal()) + ", " + "ClientProgram   = '" + POut.string(clearinghouse.ClientProgram) + "', " + "ModemPort       =  " + POut.byte(clearinghouse.ModemPort) + ", " + "LoginID         = '" + POut.string(clearinghouse.LoginID) + "', " + "SenderName      = '" + POut.string(clearinghouse.SenderName) + "', " + "SenderTelephone = '" + POut.string(clearinghouse.SenderTelephone) + "', " + "GS03            = '" + POut.string(clearinghouse.GS03) + "', " + "ISA02           = '" + POut.string(clearinghouse.ISA02) + "', " + "ISA04           = '" + POut.string(clearinghouse.ISA04) + "', " + "ISA16           = '" + POut.string(clearinghouse.ISA16) + "', " + "SeparatorData   = '" + POut.string(clearinghouse.SeparatorData) + "', " + "SeparatorSegment= '" + POut.string(clearinghouse.SeparatorSegment) + "' " + "WHERE ClearinghouseNum = " + POut.long(clearinghouse.ClearinghouseNum);
        Db.nonQ(command);
    }

    /**
    * Updates one Clearinghouse in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Clearinghouse clearinghouse, Clearinghouse oldClearinghouse) throws Exception {
        String command = "";
        if (!StringSupport.equals(clearinghouse.Description, oldClearinghouse.Description))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.string(clearinghouse.Description) + "'";
        }
         
        if (!StringSupport.equals(clearinghouse.ExportPath, oldClearinghouse.ExportPath))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ExportPath = '" + POut.string(clearinghouse.ExportPath) + "'";
        }
         
        if (!StringSupport.equals(clearinghouse.Payors, oldClearinghouse.Payors))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Payors = '" + POut.string(clearinghouse.Payors) + "'";
        }
         
        if (clearinghouse.Eformat != oldClearinghouse.Eformat)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Eformat = " + POut.int(((Enum)clearinghouse.Eformat).ordinal()) + "";
        }
         
        if (!StringSupport.equals(clearinghouse.ISA05, oldClearinghouse.ISA05))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ISA05 = '" + POut.string(clearinghouse.ISA05) + "'";
        }
         
        if (!StringSupport.equals(clearinghouse.SenderTIN, oldClearinghouse.SenderTIN))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SenderTIN = '" + POut.string(clearinghouse.SenderTIN) + "'";
        }
         
        if (!StringSupport.equals(clearinghouse.ISA07, oldClearinghouse.ISA07))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ISA07 = '" + POut.string(clearinghouse.ISA07) + "'";
        }
         
        if (!StringSupport.equals(clearinghouse.ISA08, oldClearinghouse.ISA08))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ISA08 = '" + POut.string(clearinghouse.ISA08) + "'";
        }
         
        if (!StringSupport.equals(clearinghouse.ISA15, oldClearinghouse.ISA15))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ISA15 = '" + POut.string(clearinghouse.ISA15) + "'";
        }
         
        if (!StringSupport.equals(clearinghouse.Password, oldClearinghouse.Password))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Password = '" + POut.string(clearinghouse.Password) + "'";
        }
         
        if (!StringSupport.equals(clearinghouse.ResponsePath, oldClearinghouse.ResponsePath))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ResponsePath = '" + POut.string(clearinghouse.ResponsePath) + "'";
        }
         
        if (clearinghouse.CommBridge != oldClearinghouse.CommBridge)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CommBridge = " + POut.int(((Enum)clearinghouse.CommBridge).ordinal()) + "";
        }
         
        if (!StringSupport.equals(clearinghouse.ClientProgram, oldClearinghouse.ClientProgram))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClientProgram = '" + POut.string(clearinghouse.ClientProgram) + "'";
        }
         
        //LastBatchNumber excluded from update
        if (clearinghouse.ModemPort != oldClearinghouse.ModemPort)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ModemPort = " + POut.byte(clearinghouse.ModemPort) + "";
        }
         
        if (!StringSupport.equals(clearinghouse.LoginID, oldClearinghouse.LoginID))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "LoginID = '" + POut.string(clearinghouse.LoginID) + "'";
        }
         
        if (!StringSupport.equals(clearinghouse.SenderName, oldClearinghouse.SenderName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SenderName = '" + POut.string(clearinghouse.SenderName) + "'";
        }
         
        if (!StringSupport.equals(clearinghouse.SenderTelephone, oldClearinghouse.SenderTelephone))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SenderTelephone = '" + POut.string(clearinghouse.SenderTelephone) + "'";
        }
         
        if (!StringSupport.equals(clearinghouse.GS03, oldClearinghouse.GS03))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "GS03 = '" + POut.string(clearinghouse.GS03) + "'";
        }
         
        if (!StringSupport.equals(clearinghouse.ISA02, oldClearinghouse.ISA02))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ISA02 = '" + POut.string(clearinghouse.ISA02) + "'";
        }
         
        if (!StringSupport.equals(clearinghouse.ISA04, oldClearinghouse.ISA04))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ISA04 = '" + POut.string(clearinghouse.ISA04) + "'";
        }
         
        if (!StringSupport.equals(clearinghouse.ISA16, oldClearinghouse.ISA16))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ISA16 = '" + POut.string(clearinghouse.ISA16) + "'";
        }
         
        if (!StringSupport.equals(clearinghouse.SeparatorData, oldClearinghouse.SeparatorData))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SeparatorData = '" + POut.string(clearinghouse.SeparatorData) + "'";
        }
         
        if (!StringSupport.equals(clearinghouse.SeparatorSegment, oldClearinghouse.SeparatorSegment))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SeparatorSegment = '" + POut.string(clearinghouse.SeparatorSegment) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE clearinghouse SET " + command + " WHERE ClearinghouseNum = " + POut.long(clearinghouse.ClearinghouseNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one Clearinghouse from the database.
    */
    public static void delete(long clearinghouseNum) throws Exception {
        String command = "DELETE FROM clearinghouse " + "WHERE ClearinghouseNum = " + POut.long(clearinghouseNum);
        Db.nonQ(command);
    }

}


