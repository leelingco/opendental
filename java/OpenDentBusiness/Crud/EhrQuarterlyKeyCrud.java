//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:02 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.EhrQuarterlyKey;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EhrQuarterlyKeyCrud   
{
    /**
    * Gets one EhrQuarterlyKey object from the database using the primary key.  Returns null if not found.
    */
    public static EhrQuarterlyKey selectOne(long ehrQuarterlyKeyNum) throws Exception {
        String command = "SELECT * FROM ehrquarterlykey " + "WHERE EhrQuarterlyKeyNum = " + POut.long(ehrQuarterlyKeyNum);
        List<EhrQuarterlyKey> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one EhrQuarterlyKey object from the database using a query.
    */
    public static EhrQuarterlyKey selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrQuarterlyKey> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of EhrQuarterlyKey objects from the database using a query.
    */
    public static List<EhrQuarterlyKey> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrQuarterlyKey> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<EhrQuarterlyKey> tableToList(DataTable table) throws Exception {
        List<EhrQuarterlyKey> retVal = new List<EhrQuarterlyKey>();
        EhrQuarterlyKey ehrQuarterlyKey;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            ehrQuarterlyKey = new EhrQuarterlyKey();
            ehrQuarterlyKey.EhrQuarterlyKeyNum = PIn.Long(table.Rows[i]["EhrQuarterlyKeyNum"].ToString());
            ehrQuarterlyKey.YearValue = PIn.Int(table.Rows[i]["YearValue"].ToString());
            ehrQuarterlyKey.QuarterValue = PIn.Int(table.Rows[i]["QuarterValue"].ToString());
            ehrQuarterlyKey.PracticeName = PIn.String(table.Rows[i]["PracticeName"].ToString());
            ehrQuarterlyKey.KeyValue = PIn.String(table.Rows[i]["KeyValue"].ToString());
            ehrQuarterlyKey.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            ehrQuarterlyKey.Notes = PIn.String(table.Rows[i]["Notes"].ToString());
            retVal.Add(ehrQuarterlyKey);
        }
        return retVal;
    }

    /**
    * Inserts one EhrQuarterlyKey into the database.  Returns the new priKey.
    */
    public static long insert(EhrQuarterlyKey ehrQuarterlyKey) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            ehrQuarterlyKey.EhrQuarterlyKeyNum = DbHelper.getNextOracleKey("ehrquarterlykey","EhrQuarterlyKeyNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(ehrQuarterlyKey, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        ehrQuarterlyKey.EhrQuarterlyKeyNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(ehrQuarterlyKey, false);
        } 
    }

    /**
    * Inserts one EhrQuarterlyKey into the database.  Provides option to use the existing priKey.
    */
    public static long insert(EhrQuarterlyKey ehrQuarterlyKey, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            ehrQuarterlyKey.EhrQuarterlyKeyNum = ReplicationServers.getKey("ehrquarterlykey","EhrQuarterlyKeyNum");
        }
         
        String command = "INSERT INTO ehrquarterlykey (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "EhrQuarterlyKeyNum,";
        }
         
        command += "YearValue,QuarterValue,PracticeName,KeyValue,PatNum,Notes) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(ehrQuarterlyKey.EhrQuarterlyKeyNum) + ",";
        }
         
        command += POut.int(ehrQuarterlyKey.YearValue) + "," + POut.int(ehrQuarterlyKey.QuarterValue) + "," + "'" + POut.string(ehrQuarterlyKey.PracticeName) + "'," + "'" + POut.string(ehrQuarterlyKey.KeyValue) + "'," + POut.long(ehrQuarterlyKey.PatNum) + "," + "'" + POut.string(ehrQuarterlyKey.Notes) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            ehrQuarterlyKey.EhrQuarterlyKeyNum = Db.nonQ(command,true);
        } 
        return ehrQuarterlyKey.EhrQuarterlyKeyNum;
    }

    /**
    * Updates one EhrQuarterlyKey in the database.
    */
    public static void update(EhrQuarterlyKey ehrQuarterlyKey) throws Exception {
        String command = "UPDATE ehrquarterlykey SET " + "YearValue         =  " + POut.int(ehrQuarterlyKey.YearValue) + ", " + "QuarterValue      =  " + POut.int(ehrQuarterlyKey.QuarterValue) + ", " + "PracticeName      = '" + POut.string(ehrQuarterlyKey.PracticeName) + "', " + "KeyValue          = '" + POut.string(ehrQuarterlyKey.KeyValue) + "', " + "PatNum            =  " + POut.long(ehrQuarterlyKey.PatNum) + ", " + "Notes             = '" + POut.string(ehrQuarterlyKey.Notes) + "' " + "WHERE EhrQuarterlyKeyNum = " + POut.long(ehrQuarterlyKey.EhrQuarterlyKeyNum);
        Db.nonQ(command);
    }

    /**
    * Updates one EhrQuarterlyKey in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(EhrQuarterlyKey ehrQuarterlyKey, EhrQuarterlyKey oldEhrQuarterlyKey) throws Exception {
        String command = "";
        if (ehrQuarterlyKey.YearValue != oldEhrQuarterlyKey.YearValue)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "YearValue = " + POut.int(ehrQuarterlyKey.YearValue) + "";
        }
         
        if (ehrQuarterlyKey.QuarterValue != oldEhrQuarterlyKey.QuarterValue)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "QuarterValue = " + POut.int(ehrQuarterlyKey.QuarterValue) + "";
        }
         
        if (!StringSupport.equals(ehrQuarterlyKey.PracticeName, oldEhrQuarterlyKey.PracticeName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PracticeName = '" + POut.string(ehrQuarterlyKey.PracticeName) + "'";
        }
         
        if (!StringSupport.equals(ehrQuarterlyKey.KeyValue, oldEhrQuarterlyKey.KeyValue))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "KeyValue = '" + POut.string(ehrQuarterlyKey.KeyValue) + "'";
        }
         
        if (ehrQuarterlyKey.PatNum != oldEhrQuarterlyKey.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.long(ehrQuarterlyKey.PatNum) + "";
        }
         
        if (!StringSupport.equals(ehrQuarterlyKey.Notes, oldEhrQuarterlyKey.Notes))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Notes = '" + POut.string(ehrQuarterlyKey.Notes) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE ehrquarterlykey SET " + command + " WHERE EhrQuarterlyKeyNum = " + POut.long(ehrQuarterlyKey.EhrQuarterlyKeyNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one EhrQuarterlyKey from the database.
    */
    public static void delete(long ehrQuarterlyKeyNum) throws Exception {
        String command = "DELETE FROM ehrquarterlykey " + "WHERE EhrQuarterlyKeyNum = " + POut.long(ehrQuarterlyKeyNum);
        Db.nonQ(command);
    }

}


