//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:06 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.OrionDPC;
import OpenDentBusiness.OrionProc;
import OpenDentBusiness.OrionStatus;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class OrionProcCrud   
{
    /**
    * Gets one OrionProc object from the database using the primary key.  Returns null if not found.
    */
    public static OrionProc selectOne(long orionProcNum) throws Exception {
        String command = "SELECT * FROM orionproc " + "WHERE OrionProcNum = " + POut.long(orionProcNum);
        List<OrionProc> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one OrionProc object from the database using a query.
    */
    public static OrionProc selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<OrionProc> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of OrionProc objects from the database using a query.
    */
    public static List<OrionProc> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<OrionProc> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<OrionProc> tableToList(DataTable table) throws Exception {
        List<OrionProc> retVal = new List<OrionProc>();
        OrionProc orionProc;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            orionProc = new OrionProc();
            orionProc.OrionProcNum = PIn.Long(table.Rows[i]["OrionProcNum"].ToString());
            orionProc.ProcNum = PIn.Long(table.Rows[i]["ProcNum"].ToString());
            orionProc.DPC = (OrionDPC)PIn.Int(table.Rows[i]["DPC"].ToString());
            orionProc.DPCpost = (OrionDPC)PIn.Int(table.Rows[i]["DPCpost"].ToString());
            orionProc.DateScheduleBy = PIn.Date(table.Rows[i]["DateScheduleBy"].ToString());
            orionProc.DateStopClock = PIn.Date(table.Rows[i]["DateStopClock"].ToString());
            orionProc.Status2 = (OrionStatus)PIn.Int(table.Rows[i]["Status2"].ToString());
            orionProc.IsOnCall = PIn.Bool(table.Rows[i]["IsOnCall"].ToString());
            orionProc.IsEffectiveComm = PIn.Bool(table.Rows[i]["IsEffectiveComm"].ToString());
            orionProc.IsRepair = PIn.Bool(table.Rows[i]["IsRepair"].ToString());
            retVal.Add(orionProc);
        }
        return retVal;
    }

    /**
    * Inserts one OrionProc into the database.  Returns the new priKey.
    */
    public static long insert(OrionProc orionProc) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            orionProc.OrionProcNum = DbHelper.getNextOracleKey("orionproc","OrionProcNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(orionProc, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        orionProc.OrionProcNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(orionProc, false);
        } 
    }

    /**
    * Inserts one OrionProc into the database.  Provides option to use the existing priKey.
    */
    public static long insert(OrionProc orionProc, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            orionProc.OrionProcNum = ReplicationServers.getKey("orionproc","OrionProcNum");
        }
         
        String command = "INSERT INTO orionproc (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "OrionProcNum,";
        }
         
        command += "ProcNum,DPC,DPCpost,DateScheduleBy,DateStopClock,Status2,IsOnCall,IsEffectiveComm,IsRepair) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(orionProc.OrionProcNum) + ",";
        }
         
        command += POut.long(orionProc.ProcNum) + "," + POut.int(((Enum)orionProc.DPC).ordinal()) + "," + POut.int(((Enum)orionProc.DPCpost).ordinal()) + "," + POut.date(orionProc.DateScheduleBy) + "," + POut.date(orionProc.DateStopClock) + "," + POut.int(((Enum)orionProc.Status2).ordinal()) + "," + POut.bool(orionProc.IsOnCall) + "," + POut.bool(orionProc.IsEffectiveComm) + "," + POut.bool(orionProc.IsRepair) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            orionProc.OrionProcNum = Db.nonQ(command,true);
        } 
        return orionProc.OrionProcNum;
    }

    /**
    * Updates one OrionProc in the database.
    */
    public static void update(OrionProc orionProc) throws Exception {
        String command = "UPDATE orionproc SET " + "ProcNum        =  " + POut.long(orionProc.ProcNum) + ", " + "DPC            =  " + POut.int(((Enum)orionProc.DPC).ordinal()) + ", " + "DPCpost        =  " + POut.int(((Enum)orionProc.DPCpost).ordinal()) + ", " + "DateScheduleBy =  " + POut.date(orionProc.DateScheduleBy) + ", " + "DateStopClock  =  " + POut.date(orionProc.DateStopClock) + ", " + "Status2        =  " + POut.int(((Enum)orionProc.Status2).ordinal()) + ", " + "IsOnCall       =  " + POut.bool(orionProc.IsOnCall) + ", " + "IsEffectiveComm=  " + POut.bool(orionProc.IsEffectiveComm) + ", " + "IsRepair       =  " + POut.bool(orionProc.IsRepair) + " " + "WHERE OrionProcNum = " + POut.long(orionProc.OrionProcNum);
        Db.nonQ(command);
    }

    /**
    * Updates one OrionProc in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(OrionProc orionProc, OrionProc oldOrionProc) throws Exception {
        String command = "";
        if (orionProc.ProcNum != oldOrionProc.ProcNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProcNum = " + POut.long(orionProc.ProcNum) + "";
        }
         
        if (orionProc.DPC != oldOrionProc.DPC)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DPC = " + POut.int(((Enum)orionProc.DPC).ordinal()) + "";
        }
         
        if (orionProc.DPCpost != oldOrionProc.DPCpost)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DPCpost = " + POut.int(((Enum)orionProc.DPCpost).ordinal()) + "";
        }
         
        if (orionProc.DateScheduleBy != oldOrionProc.DateScheduleBy)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateScheduleBy = " + POut.date(orionProc.DateScheduleBy) + "";
        }
         
        if (orionProc.DateStopClock != oldOrionProc.DateStopClock)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateStopClock = " + POut.date(orionProc.DateStopClock) + "";
        }
         
        if (orionProc.Status2 != oldOrionProc.Status2)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Status2 = " + POut.int(((Enum)orionProc.Status2).ordinal()) + "";
        }
         
        if (orionProc.IsOnCall != oldOrionProc.IsOnCall)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsOnCall = " + POut.bool(orionProc.IsOnCall) + "";
        }
         
        if (orionProc.IsEffectiveComm != oldOrionProc.IsEffectiveComm)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsEffectiveComm = " + POut.bool(orionProc.IsEffectiveComm) + "";
        }
         
        if (orionProc.IsRepair != oldOrionProc.IsRepair)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsRepair = " + POut.bool(orionProc.IsRepair) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE orionproc SET " + command + " WHERE OrionProcNum = " + POut.long(orionProc.OrionProcNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one OrionProc from the database.
    */
    public static void delete(long orionProcNum) throws Exception {
        String command = "DELETE FROM orionproc " + "WHERE OrionProcNum = " + POut.long(orionProcNum);
        Db.nonQ(command);
    }

}


