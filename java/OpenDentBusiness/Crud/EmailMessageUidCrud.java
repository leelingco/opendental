//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:03 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.EmailMessageUid;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EmailMessageUidCrud   
{
    /**
    * Gets one EmailMessageUid object from the database using the primary key.  Returns null if not found.
    */
    public static EmailMessageUid selectOne(long emailMessageUidNum) throws Exception {
        String command = "SELECT * FROM emailmessageuid " + "WHERE EmailMessageUidNum = " + POut.long(emailMessageUidNum);
        List<EmailMessageUid> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one EmailMessageUid object from the database using a query.
    */
    public static EmailMessageUid selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EmailMessageUid> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of EmailMessageUid objects from the database using a query.
    */
    public static List<EmailMessageUid> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EmailMessageUid> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<EmailMessageUid> tableToList(DataTable table) throws Exception {
        List<EmailMessageUid> retVal = new List<EmailMessageUid>();
        EmailMessageUid emailMessageUid;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            emailMessageUid = new EmailMessageUid();
            emailMessageUid.EmailMessageUidNum = PIn.Long(table.Rows[i]["EmailMessageUidNum"].ToString());
            emailMessageUid.MsgId = PIn.String(table.Rows[i]["MsgId"].ToString());
            emailMessageUid.RecipientAddress = PIn.String(table.Rows[i]["RecipientAddress"].ToString());
            retVal.Add(emailMessageUid);
        }
        return retVal;
    }

    /**
    * Inserts one EmailMessageUid into the database.  Returns the new priKey.
    */
    public static long insert(EmailMessageUid emailMessageUid) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            emailMessageUid.EmailMessageUidNum = DbHelper.getNextOracleKey("emailmessageuid","EmailMessageUidNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(emailMessageUid, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        emailMessageUid.EmailMessageUidNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(emailMessageUid, false);
        } 
    }

    /**
    * Inserts one EmailMessageUid into the database.  Provides option to use the existing priKey.
    */
    public static long insert(EmailMessageUid emailMessageUid, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            emailMessageUid.EmailMessageUidNum = ReplicationServers.getKey("emailmessageuid","EmailMessageUidNum");
        }
         
        String command = "INSERT INTO emailmessageuid (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "EmailMessageUidNum,";
        }
         
        command += "MsgId,RecipientAddress) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(emailMessageUid.EmailMessageUidNum) + ",";
        }
         
        command += "'" + POut.string(emailMessageUid.MsgId) + "'," + "'" + POut.string(emailMessageUid.RecipientAddress) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            emailMessageUid.EmailMessageUidNum = Db.nonQ(command,true);
        } 
        return emailMessageUid.EmailMessageUidNum;
    }

    /**
    * Updates one EmailMessageUid in the database.
    */
    public static void update(EmailMessageUid emailMessageUid) throws Exception {
        String command = "UPDATE emailmessageuid SET " + "MsgId             = '" + POut.string(emailMessageUid.MsgId) + "', " + "RecipientAddress  = '" + POut.string(emailMessageUid.RecipientAddress) + "' " + "WHERE EmailMessageUidNum = " + POut.long(emailMessageUid.EmailMessageUidNum);
        Db.nonQ(command);
    }

    /**
    * Updates one EmailMessageUid in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(EmailMessageUid emailMessageUid, EmailMessageUid oldEmailMessageUid) throws Exception {
        String command = "";
        if (!StringSupport.equals(emailMessageUid.MsgId, oldEmailMessageUid.MsgId))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MsgId = '" + POut.string(emailMessageUid.MsgId) + "'";
        }
         
        if (!StringSupport.equals(emailMessageUid.RecipientAddress, oldEmailMessageUid.RecipientAddress))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RecipientAddress = '" + POut.string(emailMessageUid.RecipientAddress) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE emailmessageuid SET " + command + " WHERE EmailMessageUidNum = " + POut.long(emailMessageUid.EmailMessageUidNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one EmailMessageUid from the database.
    */
    public static void delete(long emailMessageUidNum) throws Exception {
        String command = "DELETE FROM emailmessageuid " + "WHERE EmailMessageUidNum = " + POut.long(emailMessageUidNum);
        Db.nonQ(command);
    }

}


