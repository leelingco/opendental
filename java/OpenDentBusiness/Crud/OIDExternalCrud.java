//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:06 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.IdentifierType;
import OpenDentBusiness.OIDExternal;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class OIDExternalCrud   
{
    /**
    * Gets one OIDExternal object from the database using the primary key.  Returns null if not found.
    */
    public static OIDExternal selectOne(long oIDExternalNum) throws Exception {
        String command = "SELECT * FROM oidexternal " + "WHERE OIDExternalNum = " + POut.long(oIDExternalNum);
        List<OIDExternal> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one OIDExternal object from the database using a query.
    */
    public static OIDExternal selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<OIDExternal> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of OIDExternal objects from the database using a query.
    */
    public static List<OIDExternal> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<OIDExternal> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<OIDExternal> tableToList(DataTable table) throws Exception {
        List<OIDExternal> retVal = new List<OIDExternal>();
        OIDExternal oIDExternal;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            oIDExternal = new OIDExternal();
            oIDExternal.OIDExternalNum = PIn.Long(table.Rows[i]["OIDExternalNum"].ToString());
            String iDType = table.Rows[i]["IDType"].ToString();
            if (StringSupport.equals(iDType, ""))
            {
                oIDExternal.IDType = IdentifierType.values()[0];
            }
            else
                try
                {
                    oIDExternal.IDType = (IdentifierType)Enum.Parse(IdentifierType.class, iDType);
                }
                catch (Exception __dummyCatchVar0)
                {
                    oIDExternal.IDType = IdentifierType.values()[0];
                }
             
            oIDExternal.IDInternal = PIn.Long(table.Rows[i]["IDInternal"].ToString());
            oIDExternal.IDExternal = PIn.String(table.Rows[i]["IDExternal"].ToString());
            oIDExternal.rootExternal = PIn.String(table.Rows[i]["rootExternal"].ToString());
            retVal.Add(oIDExternal);
        }
        return retVal;
    }

    /**
    * Inserts one OIDExternal into the database.  Returns the new priKey.
    */
    public static long insert(OIDExternal oIDExternal) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            oIDExternal.OIDExternalNum = DbHelper.getNextOracleKey("oidexternal","OIDExternalNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(oIDExternal, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        oIDExternal.OIDExternalNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(oIDExternal, false);
        } 
    }

    /**
    * Inserts one OIDExternal into the database.  Provides option to use the existing priKey.
    */
    public static long insert(OIDExternal oIDExternal, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            oIDExternal.OIDExternalNum = ReplicationServers.getKey("oidexternal","OIDExternalNum");
        }
         
        String command = "INSERT INTO oidexternal (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "OIDExternalNum,";
        }
         
        command += "IDType,IDInternal,IDExternal,rootExternal) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(oIDExternal.OIDExternalNum) + ",";
        }
         
        command += "'" + POut.String(oIDExternal.IDType.ToString()) + "'," + POut.long(oIDExternal.IDInternal) + "," + "'" + POut.string(oIDExternal.IDExternal) + "'," + "'" + POut.string(oIDExternal.rootExternal) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            oIDExternal.OIDExternalNum = Db.nonQ(command,true);
        } 
        return oIDExternal.OIDExternalNum;
    }

    /**
    * Updates one OIDExternal in the database.
    */
    public static void update(OIDExternal oIDExternal) throws Exception {
        String command = "UPDATE oidexternal SET " + "IDType        = '" + POut.String(oIDExternal.IDType.ToString()) + "', " + "IDInternal    =  " + POut.long(oIDExternal.IDInternal) + ", " + "IDExternal    = '" + POut.string(oIDExternal.IDExternal) + "', " + "rootExternal  = '" + POut.string(oIDExternal.rootExternal) + "' " + "WHERE OIDExternalNum = " + POut.long(oIDExternal.OIDExternalNum);
        Db.nonQ(command);
    }

    /**
    * Updates one OIDExternal in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(OIDExternal oIDExternal, OIDExternal oldOIDExternal) throws Exception {
        String command = "";
        if (oIDExternal.IDType != oldOIDExternal.IDType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IDType = '" + POut.String(oIDExternal.IDType.ToString()) + "'";
        }
         
        if (oIDExternal.IDInternal != oldOIDExternal.IDInternal)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IDInternal = " + POut.long(oIDExternal.IDInternal) + "";
        }
         
        if (!StringSupport.equals(oIDExternal.IDExternal, oldOIDExternal.IDExternal))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IDExternal = '" + POut.string(oIDExternal.IDExternal) + "'";
        }
         
        if (!StringSupport.equals(oIDExternal.rootExternal, oldOIDExternal.rootExternal))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "rootExternal = '" + POut.string(oIDExternal.rootExternal) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE oidexternal SET " + command + " WHERE OIDExternalNum = " + POut.long(oIDExternal.OIDExternalNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one OIDExternal from the database.
    */
    public static void delete(long oIDExternalNum) throws Exception {
        String command = "DELETE FROM oidexternal " + "WHERE OIDExternalNum = " + POut.long(oIDExternalNum);
        Db.nonQ(command);
    }

}


