//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:57:58 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.AutoNoteControl;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class AutoNoteControlCrud   
{
    /**
    * Gets one AutoNoteControl object from the database using the primary key.  Returns null if not found.
    */
    public static AutoNoteControl selectOne(long autoNoteControlNum) throws Exception {
        String command = "SELECT * FROM autonotecontrol " + "WHERE AutoNoteControlNum = " + POut.long(autoNoteControlNum);
        List<AutoNoteControl> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one AutoNoteControl object from the database using a query.
    */
    public static AutoNoteControl selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<AutoNoteControl> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of AutoNoteControl objects from the database using a query.
    */
    public static List<AutoNoteControl> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<AutoNoteControl> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<AutoNoteControl> tableToList(DataTable table) throws Exception {
        List<AutoNoteControl> retVal = new List<AutoNoteControl>();
        AutoNoteControl autoNoteControl;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            autoNoteControl = new AutoNoteControl();
            autoNoteControl.AutoNoteControlNum = PIn.Long(table.Rows[i]["AutoNoteControlNum"].ToString());
            autoNoteControl.Descript = PIn.String(table.Rows[i]["Descript"].ToString());
            autoNoteControl.ControlType = PIn.String(table.Rows[i]["ControlType"].ToString());
            autoNoteControl.ControlLabel = PIn.String(table.Rows[i]["ControlLabel"].ToString());
            autoNoteControl.ControlOptions = PIn.String(table.Rows[i]["ControlOptions"].ToString());
            retVal.Add(autoNoteControl);
        }
        return retVal;
    }

    /**
    * Inserts one AutoNoteControl into the database.  Returns the new priKey.
    */
    public static long insert(AutoNoteControl autoNoteControl) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            autoNoteControl.AutoNoteControlNum = DbHelper.getNextOracleKey("autonotecontrol","AutoNoteControlNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(autoNoteControl, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        autoNoteControl.AutoNoteControlNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(autoNoteControl, false);
        } 
    }

    /**
    * Inserts one AutoNoteControl into the database.  Provides option to use the existing priKey.
    */
    public static long insert(AutoNoteControl autoNoteControl, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            autoNoteControl.AutoNoteControlNum = ReplicationServers.getKey("autonotecontrol","AutoNoteControlNum");
        }
         
        String command = "INSERT INTO autonotecontrol (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "AutoNoteControlNum,";
        }
         
        command += "Descript,ControlType,ControlLabel,ControlOptions) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(autoNoteControl.AutoNoteControlNum) + ",";
        }
         
        command += "'" + POut.string(autoNoteControl.Descript) + "'," + "'" + POut.string(autoNoteControl.ControlType) + "'," + "'" + POut.string(autoNoteControl.ControlLabel) + "'," + "'" + POut.string(autoNoteControl.ControlOptions) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            autoNoteControl.AutoNoteControlNum = Db.nonQ(command,true);
        } 
        return autoNoteControl.AutoNoteControlNum;
    }

    /**
    * Updates one AutoNoteControl in the database.
    */
    public static void update(AutoNoteControl autoNoteControl) throws Exception {
        String command = "UPDATE autonotecontrol SET " + "Descript          = '" + POut.string(autoNoteControl.Descript) + "', " + "ControlType       = '" + POut.string(autoNoteControl.ControlType) + "', " + "ControlLabel      = '" + POut.string(autoNoteControl.ControlLabel) + "', " + "ControlOptions    = '" + POut.string(autoNoteControl.ControlOptions) + "' " + "WHERE AutoNoteControlNum = " + POut.long(autoNoteControl.AutoNoteControlNum);
        Db.nonQ(command);
    }

    /**
    * Updates one AutoNoteControl in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(AutoNoteControl autoNoteControl, AutoNoteControl oldAutoNoteControl) throws Exception {
        String command = "";
        if (!StringSupport.equals(autoNoteControl.Descript, oldAutoNoteControl.Descript))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Descript = '" + POut.string(autoNoteControl.Descript) + "'";
        }
         
        if (!StringSupport.equals(autoNoteControl.ControlType, oldAutoNoteControl.ControlType))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ControlType = '" + POut.string(autoNoteControl.ControlType) + "'";
        }
         
        if (!StringSupport.equals(autoNoteControl.ControlLabel, oldAutoNoteControl.ControlLabel))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ControlLabel = '" + POut.string(autoNoteControl.ControlLabel) + "'";
        }
         
        if (!StringSupport.equals(autoNoteControl.ControlOptions, oldAutoNoteControl.ControlOptions))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ControlOptions = '" + POut.string(autoNoteControl.ControlOptions) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE autonotecontrol SET " + command + " WHERE AutoNoteControlNum = " + POut.long(autoNoteControl.AutoNoteControlNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one AutoNoteControl from the database.
    */
    public static void delete(long autoNoteControlNum) throws Exception {
        String command = "DELETE FROM autonotecontrol " + "WHERE AutoNoteControlNum = " + POut.long(autoNoteControlNum);
        Db.nonQ(command);
    }

}


