//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:02 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.EhrMeasureEvent;
import OpenDentBusiness.EhrMeasureEventType;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EhrMeasureEventCrud   
{
    /**
    * Gets one EhrMeasureEvent object from the database using the primary key.  Returns null if not found.
    */
    public static EhrMeasureEvent selectOne(long ehrMeasureEventNum) throws Exception {
        String command = "SELECT * FROM ehrmeasureevent " + "WHERE EhrMeasureEventNum = " + POut.long(ehrMeasureEventNum);
        List<EhrMeasureEvent> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one EhrMeasureEvent object from the database using a query.
    */
    public static EhrMeasureEvent selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrMeasureEvent> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of EhrMeasureEvent objects from the database using a query.
    */
    public static List<EhrMeasureEvent> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrMeasureEvent> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<EhrMeasureEvent> tableToList(DataTable table) throws Exception {
        List<EhrMeasureEvent> retVal = new List<EhrMeasureEvent>();
        EhrMeasureEvent ehrMeasureEvent;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            ehrMeasureEvent = new EhrMeasureEvent();
            ehrMeasureEvent.EhrMeasureEventNum = PIn.Long(table.Rows[i]["EhrMeasureEventNum"].ToString());
            ehrMeasureEvent.DateTEvent = PIn.DateT(table.Rows[i]["DateTEvent"].ToString());
            ehrMeasureEvent.EventType = (EhrMeasureEventType)PIn.Int(table.Rows[i]["EventType"].ToString());
            ehrMeasureEvent.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            ehrMeasureEvent.MoreInfo = PIn.String(table.Rows[i]["MoreInfo"].ToString());
            ehrMeasureEvent.CodeValueEvent = PIn.String(table.Rows[i]["CodeValueEvent"].ToString());
            ehrMeasureEvent.CodeSystemEvent = PIn.String(table.Rows[i]["CodeSystemEvent"].ToString());
            ehrMeasureEvent.CodeValueResult = PIn.String(table.Rows[i]["CodeValueResult"].ToString());
            ehrMeasureEvent.CodeSystemResult = PIn.String(table.Rows[i]["CodeSystemResult"].ToString());
            ehrMeasureEvent.FKey = PIn.Long(table.Rows[i]["FKey"].ToString());
            retVal.Add(ehrMeasureEvent);
        }
        return retVal;
    }

    /**
    * Inserts one EhrMeasureEvent into the database.  Returns the new priKey.
    */
    public static long insert(EhrMeasureEvent ehrMeasureEvent) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            ehrMeasureEvent.EhrMeasureEventNum = DbHelper.getNextOracleKey("ehrmeasureevent","EhrMeasureEventNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(ehrMeasureEvent, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        ehrMeasureEvent.EhrMeasureEventNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(ehrMeasureEvent, false);
        } 
    }

    /**
    * Inserts one EhrMeasureEvent into the database.  Provides option to use the existing priKey.
    */
    public static long insert(EhrMeasureEvent ehrMeasureEvent, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            ehrMeasureEvent.EhrMeasureEventNum = ReplicationServers.getKey("ehrmeasureevent","EhrMeasureEventNum");
        }
         
        String command = "INSERT INTO ehrmeasureevent (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "EhrMeasureEventNum,";
        }
         
        command += "DateTEvent,EventType,PatNum,MoreInfo,CodeValueEvent,CodeSystemEvent,CodeValueResult,CodeSystemResult,FKey) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(ehrMeasureEvent.EhrMeasureEventNum) + ",";
        }
         
        command += POut.dateT(ehrMeasureEvent.DateTEvent) + "," + POut.int(((Enum)ehrMeasureEvent.EventType).ordinal()) + "," + POut.long(ehrMeasureEvent.PatNum) + "," + "'" + POut.string(ehrMeasureEvent.MoreInfo) + "'," + "'" + POut.string(ehrMeasureEvent.CodeValueEvent) + "'," + "'" + POut.string(ehrMeasureEvent.CodeSystemEvent) + "'," + "'" + POut.string(ehrMeasureEvent.CodeValueResult) + "'," + "'" + POut.string(ehrMeasureEvent.CodeSystemResult) + "'," + POut.long(ehrMeasureEvent.FKey) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            ehrMeasureEvent.EhrMeasureEventNum = Db.nonQ(command,true);
        } 
        return ehrMeasureEvent.EhrMeasureEventNum;
    }

    /**
    * Updates one EhrMeasureEvent in the database.
    */
    public static void update(EhrMeasureEvent ehrMeasureEvent) throws Exception {
        String command = "UPDATE ehrmeasureevent SET " + "DateTEvent        =  " + POut.dateT(ehrMeasureEvent.DateTEvent) + ", " + "EventType         =  " + POut.int(((Enum)ehrMeasureEvent.EventType).ordinal()) + ", " + "PatNum            =  " + POut.long(ehrMeasureEvent.PatNum) + ", " + "MoreInfo          = '" + POut.string(ehrMeasureEvent.MoreInfo) + "', " + "CodeValueEvent    = '" + POut.string(ehrMeasureEvent.CodeValueEvent) + "', " + "CodeSystemEvent   = '" + POut.string(ehrMeasureEvent.CodeSystemEvent) + "', " + "CodeValueResult   = '" + POut.string(ehrMeasureEvent.CodeValueResult) + "', " + "CodeSystemResult  = '" + POut.string(ehrMeasureEvent.CodeSystemResult) + "', " + "FKey              =  " + POut.long(ehrMeasureEvent.FKey) + " " + "WHERE EhrMeasureEventNum = " + POut.long(ehrMeasureEvent.EhrMeasureEventNum);
        Db.nonQ(command);
    }

    /**
    * Updates one EhrMeasureEvent in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(EhrMeasureEvent ehrMeasureEvent, EhrMeasureEvent oldEhrMeasureEvent) throws Exception {
        String command = "";
        if (ehrMeasureEvent.DateTEvent != oldEhrMeasureEvent.DateTEvent)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTEvent = " + POut.dateT(ehrMeasureEvent.DateTEvent) + "";
        }
         
        if (ehrMeasureEvent.EventType != oldEhrMeasureEvent.EventType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EventType = " + POut.int(((Enum)ehrMeasureEvent.EventType).ordinal()) + "";
        }
         
        if (ehrMeasureEvent.PatNum != oldEhrMeasureEvent.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.long(ehrMeasureEvent.PatNum) + "";
        }
         
        if (!StringSupport.equals(ehrMeasureEvent.MoreInfo, oldEhrMeasureEvent.MoreInfo))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MoreInfo = '" + POut.string(ehrMeasureEvent.MoreInfo) + "'";
        }
         
        if (!StringSupport.equals(ehrMeasureEvent.CodeValueEvent, oldEhrMeasureEvent.CodeValueEvent))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeValueEvent = '" + POut.string(ehrMeasureEvent.CodeValueEvent) + "'";
        }
         
        if (!StringSupport.equals(ehrMeasureEvent.CodeSystemEvent, oldEhrMeasureEvent.CodeSystemEvent))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeSystemEvent = '" + POut.string(ehrMeasureEvent.CodeSystemEvent) + "'";
        }
         
        if (!StringSupport.equals(ehrMeasureEvent.CodeValueResult, oldEhrMeasureEvent.CodeValueResult))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeValueResult = '" + POut.string(ehrMeasureEvent.CodeValueResult) + "'";
        }
         
        if (!StringSupport.equals(ehrMeasureEvent.CodeSystemResult, oldEhrMeasureEvent.CodeSystemResult))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeSystemResult = '" + POut.string(ehrMeasureEvent.CodeSystemResult) + "'";
        }
         
        if (ehrMeasureEvent.FKey != oldEhrMeasureEvent.FKey)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FKey = " + POut.long(ehrMeasureEvent.FKey) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE ehrmeasureevent SET " + command + " WHERE EhrMeasureEventNum = " + POut.long(ehrMeasureEvent.EhrMeasureEventNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one EhrMeasureEvent from the database.
    */
    public static void delete(long ehrMeasureEventNum) throws Exception {
        String command = "DELETE FROM ehrmeasureevent " + "WHERE EhrMeasureEventNum = " + POut.long(ehrMeasureEventNum);
        Db.nonQ(command);
    }

}


