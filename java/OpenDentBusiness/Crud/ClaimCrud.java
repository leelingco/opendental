//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:57:59 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Claim;
import OpenDentBusiness.ClaimCorrectionType;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.EnumClaimMedType;
import OpenDentBusiness.EnumClaimSpecialProgram;
import OpenDentBusiness.PIn;
import OpenDentBusiness.PlaceOfService;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.Relat;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;
import OpenDentBusiness.YN;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ClaimCrud   
{
    /**
    * Gets one Claim object from the database using the primary key.  Returns null if not found.
    */
    public static Claim selectOne(long claimNum) throws Exception {
        String command = "SELECT * FROM claim " + "WHERE ClaimNum = " + POut.long(claimNum);
        List<Claim> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Claim object from the database using a query.
    */
    public static Claim selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Claim> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Claim objects from the database using a query.
    */
    public static List<Claim> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Claim> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Claim> tableToList(DataTable table) throws Exception {
        List<Claim> retVal = new List<Claim>();
        Claim claim;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            claim = new Claim();
            claim.ClaimNum = PIn.Long(table.Rows[i]["ClaimNum"].ToString());
            claim.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            claim.DateService = PIn.Date(table.Rows[i]["DateService"].ToString());
            claim.DateSent = PIn.Date(table.Rows[i]["DateSent"].ToString());
            claim.ClaimStatus = PIn.String(table.Rows[i]["ClaimStatus"].ToString());
            claim.DateReceived = PIn.Date(table.Rows[i]["DateReceived"].ToString());
            claim.PlanNum = PIn.Long(table.Rows[i]["PlanNum"].ToString());
            claim.ProvTreat = PIn.Long(table.Rows[i]["ProvTreat"].ToString());
            claim.ClaimFee = PIn.Double(table.Rows[i]["ClaimFee"].ToString());
            claim.InsPayEst = PIn.Double(table.Rows[i]["InsPayEst"].ToString());
            claim.InsPayAmt = PIn.Double(table.Rows[i]["InsPayAmt"].ToString());
            claim.DedApplied = PIn.Double(table.Rows[i]["DedApplied"].ToString());
            claim.PreAuthString = PIn.String(table.Rows[i]["PreAuthString"].ToString());
            claim.IsProsthesis = PIn.String(table.Rows[i]["IsProsthesis"].ToString());
            claim.PriorDate = PIn.Date(table.Rows[i]["PriorDate"].ToString());
            claim.ReasonUnderPaid = PIn.String(table.Rows[i]["ReasonUnderPaid"].ToString());
            claim.ClaimNote = PIn.String(table.Rows[i]["ClaimNote"].ToString());
            claim.ClaimType = PIn.String(table.Rows[i]["ClaimType"].ToString());
            claim.ProvBill = PIn.Long(table.Rows[i]["ProvBill"].ToString());
            claim.ReferringProv = PIn.Long(table.Rows[i]["ReferringProv"].ToString());
            claim.RefNumString = PIn.String(table.Rows[i]["RefNumString"].ToString());
            claim.PlaceService = (PlaceOfService)PIn.Int(table.Rows[i]["PlaceService"].ToString());
            claim.AccidentRelated = PIn.String(table.Rows[i]["AccidentRelated"].ToString());
            claim.AccidentDate = PIn.Date(table.Rows[i]["AccidentDate"].ToString());
            claim.AccidentST = PIn.String(table.Rows[i]["AccidentST"].ToString());
            claim.EmployRelated = (YN)PIn.Int(table.Rows[i]["EmployRelated"].ToString());
            claim.IsOrtho = PIn.Bool(table.Rows[i]["IsOrtho"].ToString());
            claim.OrthoRemainM = PIn.Byte(table.Rows[i]["OrthoRemainM"].ToString());
            claim.OrthoDate = PIn.Date(table.Rows[i]["OrthoDate"].ToString());
            claim.PatRelat = (Relat)PIn.Int(table.Rows[i]["PatRelat"].ToString());
            claim.PlanNum2 = PIn.Long(table.Rows[i]["PlanNum2"].ToString());
            claim.PatRelat2 = (Relat)PIn.Int(table.Rows[i]["PatRelat2"].ToString());
            claim.WriteOff = PIn.Double(table.Rows[i]["WriteOff"].ToString());
            claim.Radiographs = PIn.Byte(table.Rows[i]["Radiographs"].ToString());
            claim.ClinicNum = PIn.Long(table.Rows[i]["ClinicNum"].ToString());
            claim.ClaimForm = PIn.Long(table.Rows[i]["ClaimForm"].ToString());
            claim.AttachedImages = PIn.Int(table.Rows[i]["AttachedImages"].ToString());
            claim.AttachedModels = PIn.Int(table.Rows[i]["AttachedModels"].ToString());
            claim.AttachedFlags = PIn.String(table.Rows[i]["AttachedFlags"].ToString());
            claim.AttachmentID = PIn.String(table.Rows[i]["AttachmentID"].ToString());
            claim.CanadianMaterialsForwarded = PIn.String(table.Rows[i]["CanadianMaterialsForwarded"].ToString());
            claim.CanadianReferralProviderNum = PIn.String(table.Rows[i]["CanadianReferralProviderNum"].ToString());
            claim.CanadianReferralReason = PIn.Byte(table.Rows[i]["CanadianReferralReason"].ToString());
            claim.CanadianIsInitialLower = PIn.String(table.Rows[i]["CanadianIsInitialLower"].ToString());
            claim.CanadianDateInitialLower = PIn.Date(table.Rows[i]["CanadianDateInitialLower"].ToString());
            claim.CanadianMandProsthMaterial = PIn.Byte(table.Rows[i]["CanadianMandProsthMaterial"].ToString());
            claim.CanadianIsInitialUpper = PIn.String(table.Rows[i]["CanadianIsInitialUpper"].ToString());
            claim.CanadianDateInitialUpper = PIn.Date(table.Rows[i]["CanadianDateInitialUpper"].ToString());
            claim.CanadianMaxProsthMaterial = PIn.Byte(table.Rows[i]["CanadianMaxProsthMaterial"].ToString());
            claim.InsSubNum = PIn.Long(table.Rows[i]["InsSubNum"].ToString());
            claim.InsSubNum2 = PIn.Long(table.Rows[i]["InsSubNum2"].ToString());
            claim.CanadaTransRefNum = PIn.String(table.Rows[i]["CanadaTransRefNum"].ToString());
            claim.CanadaEstTreatStartDate = PIn.Date(table.Rows[i]["CanadaEstTreatStartDate"].ToString());
            claim.CanadaInitialPayment = PIn.Double(table.Rows[i]["CanadaInitialPayment"].ToString());
            claim.CanadaPaymentMode = PIn.Byte(table.Rows[i]["CanadaPaymentMode"].ToString());
            claim.CanadaTreatDuration = PIn.Byte(table.Rows[i]["CanadaTreatDuration"].ToString());
            claim.CanadaNumAnticipatedPayments = PIn.Byte(table.Rows[i]["CanadaNumAnticipatedPayments"].ToString());
            claim.CanadaAnticipatedPayAmount = PIn.Double(table.Rows[i]["CanadaAnticipatedPayAmount"].ToString());
            claim.PriorAuthorizationNumber = PIn.String(table.Rows[i]["PriorAuthorizationNumber"].ToString());
            claim.SpecialProgramCode = (EnumClaimSpecialProgram)PIn.Int(table.Rows[i]["SpecialProgramCode"].ToString());
            claim.UniformBillType = PIn.String(table.Rows[i]["UniformBillType"].ToString());
            claim.MedType = (EnumClaimMedType)PIn.Int(table.Rows[i]["MedType"].ToString());
            claim.AdmissionTypeCode = PIn.String(table.Rows[i]["AdmissionTypeCode"].ToString());
            claim.AdmissionSourceCode = PIn.String(table.Rows[i]["AdmissionSourceCode"].ToString());
            claim.PatientStatusCode = PIn.String(table.Rows[i]["PatientStatusCode"].ToString());
            claim.CustomTracking = PIn.Long(table.Rows[i]["CustomTracking"].ToString());
            claim.DateResent = PIn.Date(table.Rows[i]["DateResent"].ToString());
            claim.CorrectionType = (ClaimCorrectionType)PIn.Int(table.Rows[i]["CorrectionType"].ToString());
            claim.ClaimIdentifier = PIn.String(table.Rows[i]["ClaimIdentifier"].ToString());
            claim.OrigRefNum = PIn.String(table.Rows[i]["OrigRefNum"].ToString());
            retVal.Add(claim);
        }
        return retVal;
    }

    /**
    * Inserts one Claim into the database.  Returns the new priKey.
    */
    public static long insert(Claim claim) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            claim.ClaimNum = DbHelper.getNextOracleKey("claim","ClaimNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(claim, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        claim.ClaimNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(claim, false);
        } 
    }

    /**
    * Inserts one Claim into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Claim claim, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            claim.ClaimNum = ReplicationServers.getKey("claim","ClaimNum");
        }
         
        String command = "INSERT INTO claim (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "ClaimNum,";
        }
         
        command += "PatNum,DateService,DateSent,ClaimStatus,DateReceived,PlanNum,ProvTreat,ClaimFee,InsPayEst,InsPayAmt,DedApplied,PreAuthString,IsProsthesis,PriorDate,ReasonUnderPaid,ClaimNote,ClaimType,ProvBill,ReferringProv,RefNumString,PlaceService,AccidentRelated,AccidentDate,AccidentST,EmployRelated,IsOrtho,OrthoRemainM,OrthoDate,PatRelat,PlanNum2,PatRelat2,WriteOff,Radiographs,ClinicNum,ClaimForm,AttachedImages,AttachedModels,AttachedFlags,AttachmentID,CanadianMaterialsForwarded,CanadianReferralProviderNum,CanadianReferralReason,CanadianIsInitialLower,CanadianDateInitialLower,CanadianMandProsthMaterial,CanadianIsInitialUpper,CanadianDateInitialUpper,CanadianMaxProsthMaterial,InsSubNum,InsSubNum2,CanadaTransRefNum,CanadaEstTreatStartDate,CanadaInitialPayment,CanadaPaymentMode,CanadaTreatDuration,CanadaNumAnticipatedPayments,CanadaAnticipatedPayAmount,PriorAuthorizationNumber,SpecialProgramCode,UniformBillType,MedType,AdmissionTypeCode,AdmissionSourceCode,PatientStatusCode,CustomTracking,DateResent,CorrectionType,ClaimIdentifier,OrigRefNum) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(claim.ClaimNum) + ",";
        }
         
        command += POut.long(claim.PatNum) + "," + POut.date(claim.DateService) + "," + POut.date(claim.DateSent) + "," + "'" + POut.string(claim.ClaimStatus) + "'," + POut.date(claim.DateReceived) + "," + POut.long(claim.PlanNum) + "," + POut.long(claim.ProvTreat) + "," + "'" + POut.double(claim.ClaimFee) + "'," + "'" + POut.double(claim.InsPayEst) + "'," + "'" + POut.double(claim.InsPayAmt) + "'," + "'" + POut.double(claim.DedApplied) + "'," + "'" + POut.string(claim.PreAuthString) + "'," + "'" + POut.string(claim.IsProsthesis) + "'," + POut.date(claim.PriorDate) + "," + "'" + POut.string(claim.ReasonUnderPaid) + "'," + "'" + POut.string(claim.ClaimNote) + "'," + "'" + POut.string(claim.ClaimType) + "'," + POut.long(claim.ProvBill) + "," + POut.long(claim.ReferringProv) + "," + "'" + POut.string(claim.RefNumString) + "'," + POut.int(((Enum)claim.PlaceService).ordinal()) + "," + "'" + POut.string(claim.AccidentRelated) + "'," + POut.date(claim.AccidentDate) + "," + "'" + POut.string(claim.AccidentST) + "'," + POut.int(((Enum)claim.EmployRelated).ordinal()) + "," + POut.bool(claim.IsOrtho) + "," + POut.byte(claim.OrthoRemainM) + "," + POut.date(claim.OrthoDate) + "," + POut.int(((Enum)claim.PatRelat).ordinal()) + "," + POut.long(claim.PlanNum2) + "," + POut.int(((Enum)claim.PatRelat2).ordinal()) + "," + "'" + POut.double(claim.WriteOff) + "'," + POut.byte(claim.Radiographs) + "," + POut.long(claim.ClinicNum) + "," + POut.long(claim.ClaimForm) + "," + POut.int(claim.AttachedImages) + "," + POut.int(claim.AttachedModels) + "," + "'" + POut.string(claim.AttachedFlags) + "'," + "'" + POut.string(claim.AttachmentID) + "'," + "'" + POut.string(claim.CanadianMaterialsForwarded) + "'," + "'" + POut.string(claim.CanadianReferralProviderNum) + "'," + POut.byte(claim.CanadianReferralReason) + "," + "'" + POut.string(claim.CanadianIsInitialLower) + "'," + POut.date(claim.CanadianDateInitialLower) + "," + POut.byte(claim.CanadianMandProsthMaterial) + "," + "'" + POut.string(claim.CanadianIsInitialUpper) + "'," + POut.date(claim.CanadianDateInitialUpper) + "," + POut.byte(claim.CanadianMaxProsthMaterial) + "," + POut.long(claim.InsSubNum) + "," + POut.long(claim.InsSubNum2) + "," + "'" + POut.string(claim.CanadaTransRefNum) + "'," + POut.date(claim.CanadaEstTreatStartDate) + "," + "'" + POut.double(claim.CanadaInitialPayment) + "'," + POut.byte(claim.CanadaPaymentMode) + "," + POut.byte(claim.CanadaTreatDuration) + "," + POut.byte(claim.CanadaNumAnticipatedPayments) + "," + "'" + POut.double(claim.CanadaAnticipatedPayAmount) + "'," + "'" + POut.string(claim.PriorAuthorizationNumber) + "'," + POut.int(((Enum)claim.SpecialProgramCode).ordinal()) + "," + "'" + POut.string(claim.UniformBillType) + "'," + POut.int(((Enum)claim.MedType).ordinal()) + "," + "'" + POut.string(claim.AdmissionTypeCode) + "'," + "'" + POut.string(claim.AdmissionSourceCode) + "'," + "'" + POut.string(claim.PatientStatusCode) + "'," + POut.long(claim.CustomTracking) + "," + POut.date(claim.DateResent) + "," + POut.int(((Enum)claim.CorrectionType).ordinal()) + "," + "'" + POut.string(claim.ClaimIdentifier) + "'," + "'" + POut.string(claim.OrigRefNum) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            claim.ClaimNum = Db.nonQ(command,true);
        } 
        return claim.ClaimNum;
    }

    /**
    * Updates one Claim in the database.
    */
    public static void update(Claim claim) throws Exception {
        String command = "UPDATE claim SET " + "PatNum                      =  " + POut.long(claim.PatNum) + ", " + "DateService                 =  " + POut.date(claim.DateService) + ", " + "DateSent                    =  " + POut.date(claim.DateSent) + ", " + "ClaimStatus                 = '" + POut.string(claim.ClaimStatus) + "', " + "DateReceived                =  " + POut.date(claim.DateReceived) + ", " + "PlanNum                     =  " + POut.long(claim.PlanNum) + ", " + "ProvTreat                   =  " + POut.long(claim.ProvTreat) + ", " + "ClaimFee                    = '" + POut.double(claim.ClaimFee) + "', " + "InsPayEst                   = '" + POut.double(claim.InsPayEst) + "', " + "InsPayAmt                   = '" + POut.double(claim.InsPayAmt) + "', " + "DedApplied                  = '" + POut.double(claim.DedApplied) + "', " + "PreAuthString               = '" + POut.string(claim.PreAuthString) + "', " + "IsProsthesis                = '" + POut.string(claim.IsProsthesis) + "', " + "PriorDate                   =  " + POut.date(claim.PriorDate) + ", " + "ReasonUnderPaid             = '" + POut.string(claim.ReasonUnderPaid) + "', " + "ClaimNote                   = '" + POut.string(claim.ClaimNote) + "', " + "ClaimType                   = '" + POut.string(claim.ClaimType) + "', " + "ProvBill                    =  " + POut.long(claim.ProvBill) + ", " + "ReferringProv               =  " + POut.long(claim.ReferringProv) + ", " + "RefNumString                = '" + POut.string(claim.RefNumString) + "', " + "PlaceService                =  " + POut.int(((Enum)claim.PlaceService).ordinal()) + ", " + "AccidentRelated             = '" + POut.string(claim.AccidentRelated) + "', " + "AccidentDate                =  " + POut.date(claim.AccidentDate) + ", " + "AccidentST                  = '" + POut.string(claim.AccidentST) + "', " + "EmployRelated               =  " + POut.int(((Enum)claim.EmployRelated).ordinal()) + ", " + "IsOrtho                     =  " + POut.bool(claim.IsOrtho) + ", " + "OrthoRemainM                =  " + POut.byte(claim.OrthoRemainM) + ", " + "OrthoDate                   =  " + POut.date(claim.OrthoDate) + ", " + "PatRelat                    =  " + POut.int(((Enum)claim.PatRelat).ordinal()) + ", " + "PlanNum2                    =  " + POut.long(claim.PlanNum2) + ", " + "PatRelat2                   =  " + POut.int(((Enum)claim.PatRelat2).ordinal()) + ", " + "WriteOff                    = '" + POut.double(claim.WriteOff) + "', " + "Radiographs                 =  " + POut.byte(claim.Radiographs) + ", " + "ClinicNum                   =  " + POut.long(claim.ClinicNum) + ", " + "ClaimForm                   =  " + POut.long(claim.ClaimForm) + ", " + "AttachedImages              =  " + POut.int(claim.AttachedImages) + ", " + "AttachedModels              =  " + POut.int(claim.AttachedModels) + ", " + "AttachedFlags               = '" + POut.string(claim.AttachedFlags) + "', " + "AttachmentID                = '" + POut.string(claim.AttachmentID) + "', " + "CanadianMaterialsForwarded  = '" + POut.string(claim.CanadianMaterialsForwarded) + "', " + "CanadianReferralProviderNum = '" + POut.string(claim.CanadianReferralProviderNum) + "', " + "CanadianReferralReason      =  " + POut.byte(claim.CanadianReferralReason) + ", " + "CanadianIsInitialLower      = '" + POut.string(claim.CanadianIsInitialLower) + "', " + "CanadianDateInitialLower    =  " + POut.date(claim.CanadianDateInitialLower) + ", " + "CanadianMandProsthMaterial  =  " + POut.byte(claim.CanadianMandProsthMaterial) + ", " + "CanadianIsInitialUpper      = '" + POut.string(claim.CanadianIsInitialUpper) + "', " + "CanadianDateInitialUpper    =  " + POut.date(claim.CanadianDateInitialUpper) + ", " + "CanadianMaxProsthMaterial   =  " + POut.byte(claim.CanadianMaxProsthMaterial) + ", " + "InsSubNum                   =  " + POut.long(claim.InsSubNum) + ", " + "InsSubNum2                  =  " + POut.long(claim.InsSubNum2) + ", " + "CanadaTransRefNum           = '" + POut.string(claim.CanadaTransRefNum) + "', " + "CanadaEstTreatStartDate     =  " + POut.date(claim.CanadaEstTreatStartDate) + ", " + "CanadaInitialPayment        = '" + POut.double(claim.CanadaInitialPayment) + "', " + "CanadaPaymentMode           =  " + POut.byte(claim.CanadaPaymentMode) + ", " + "CanadaTreatDuration         =  " + POut.byte(claim.CanadaTreatDuration) + ", " + "CanadaNumAnticipatedPayments=  " + POut.byte(claim.CanadaNumAnticipatedPayments) + ", " + "CanadaAnticipatedPayAmount  = '" + POut.double(claim.CanadaAnticipatedPayAmount) + "', " + "PriorAuthorizationNumber    = '" + POut.string(claim.PriorAuthorizationNumber) + "', " + "SpecialProgramCode          =  " + POut.int(((Enum)claim.SpecialProgramCode).ordinal()) + ", " + "UniformBillType             = '" + POut.string(claim.UniformBillType) + "', " + "MedType                     =  " + POut.int(((Enum)claim.MedType).ordinal()) + ", " + "AdmissionTypeCode           = '" + POut.string(claim.AdmissionTypeCode) + "', " + "AdmissionSourceCode         = '" + POut.string(claim.AdmissionSourceCode) + "', " + "PatientStatusCode           = '" + POut.string(claim.PatientStatusCode) + "', " + "CustomTracking              =  " + POut.long(claim.CustomTracking) + ", " + "DateResent                  =  " + POut.date(claim.DateResent) + ", " + "CorrectionType              =  " + POut.int(((Enum)claim.CorrectionType).ordinal()) + ", " + "ClaimIdentifier             = '" + POut.string(claim.ClaimIdentifier) + "', " + "OrigRefNum                  = '" + POut.string(claim.OrigRefNum) + "' " + "WHERE ClaimNum = " + POut.long(claim.ClaimNum);
        Db.nonQ(command);
    }

    /**
    * Updates one Claim in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Claim claim, Claim oldClaim) throws Exception {
        String command = "";
        if (claim.PatNum != oldClaim.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.long(claim.PatNum) + "";
        }
         
        if (claim.DateService != oldClaim.DateService)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateService = " + POut.date(claim.DateService) + "";
        }
         
        if (claim.DateSent != oldClaim.DateSent)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateSent = " + POut.date(claim.DateSent) + "";
        }
         
        if (!StringSupport.equals(claim.ClaimStatus, oldClaim.ClaimStatus))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClaimStatus = '" + POut.string(claim.ClaimStatus) + "'";
        }
         
        if (claim.DateReceived != oldClaim.DateReceived)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateReceived = " + POut.date(claim.DateReceived) + "";
        }
         
        if (claim.PlanNum != oldClaim.PlanNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PlanNum = " + POut.long(claim.PlanNum) + "";
        }
         
        if (claim.ProvTreat != oldClaim.ProvTreat)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvTreat = " + POut.long(claim.ProvTreat) + "";
        }
         
        if (claim.ClaimFee != oldClaim.ClaimFee)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClaimFee = '" + POut.double(claim.ClaimFee) + "'";
        }
         
        if (claim.InsPayEst != oldClaim.InsPayEst)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "InsPayEst = '" + POut.double(claim.InsPayEst) + "'";
        }
         
        if (claim.InsPayAmt != oldClaim.InsPayAmt)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "InsPayAmt = '" + POut.double(claim.InsPayAmt) + "'";
        }
         
        if (claim.DedApplied != oldClaim.DedApplied)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DedApplied = '" + POut.double(claim.DedApplied) + "'";
        }
         
        if (!StringSupport.equals(claim.PreAuthString, oldClaim.PreAuthString))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PreAuthString = '" + POut.string(claim.PreAuthString) + "'";
        }
         
        if (!StringSupport.equals(claim.IsProsthesis, oldClaim.IsProsthesis))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsProsthesis = '" + POut.string(claim.IsProsthesis) + "'";
        }
         
        if (claim.PriorDate != oldClaim.PriorDate)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PriorDate = " + POut.date(claim.PriorDate) + "";
        }
         
        if (!StringSupport.equals(claim.ReasonUnderPaid, oldClaim.ReasonUnderPaid))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ReasonUnderPaid = '" + POut.string(claim.ReasonUnderPaid) + "'";
        }
         
        if (!StringSupport.equals(claim.ClaimNote, oldClaim.ClaimNote))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClaimNote = '" + POut.string(claim.ClaimNote) + "'";
        }
         
        if (!StringSupport.equals(claim.ClaimType, oldClaim.ClaimType))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClaimType = '" + POut.string(claim.ClaimType) + "'";
        }
         
        if (claim.ProvBill != oldClaim.ProvBill)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvBill = " + POut.long(claim.ProvBill) + "";
        }
         
        if (claim.ReferringProv != oldClaim.ReferringProv)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ReferringProv = " + POut.long(claim.ReferringProv) + "";
        }
         
        if (!StringSupport.equals(claim.RefNumString, oldClaim.RefNumString))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RefNumString = '" + POut.string(claim.RefNumString) + "'";
        }
         
        if (claim.PlaceService != oldClaim.PlaceService)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PlaceService = " + POut.int(((Enum)claim.PlaceService).ordinal()) + "";
        }
         
        if (!StringSupport.equals(claim.AccidentRelated, oldClaim.AccidentRelated))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AccidentRelated = '" + POut.string(claim.AccidentRelated) + "'";
        }
         
        if (claim.AccidentDate != oldClaim.AccidentDate)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AccidentDate = " + POut.date(claim.AccidentDate) + "";
        }
         
        if (!StringSupport.equals(claim.AccidentST, oldClaim.AccidentST))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AccidentST = '" + POut.string(claim.AccidentST) + "'";
        }
         
        if (claim.EmployRelated != oldClaim.EmployRelated)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EmployRelated = " + POut.int(((Enum)claim.EmployRelated).ordinal()) + "";
        }
         
        if (claim.IsOrtho != oldClaim.IsOrtho)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsOrtho = " + POut.bool(claim.IsOrtho) + "";
        }
         
        if (claim.OrthoRemainM != oldClaim.OrthoRemainM)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "OrthoRemainM = " + POut.byte(claim.OrthoRemainM) + "";
        }
         
        if (claim.OrthoDate != oldClaim.OrthoDate)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "OrthoDate = " + POut.date(claim.OrthoDate) + "";
        }
         
        if (claim.PatRelat != oldClaim.PatRelat)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatRelat = " + POut.int(((Enum)claim.PatRelat).ordinal()) + "";
        }
         
        if (claim.PlanNum2 != oldClaim.PlanNum2)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PlanNum2 = " + POut.long(claim.PlanNum2) + "";
        }
         
        if (claim.PatRelat2 != oldClaim.PatRelat2)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatRelat2 = " + POut.int(((Enum)claim.PatRelat2).ordinal()) + "";
        }
         
        if (claim.WriteOff != oldClaim.WriteOff)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "WriteOff = '" + POut.double(claim.WriteOff) + "'";
        }
         
        if (claim.Radiographs != oldClaim.Radiographs)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Radiographs = " + POut.byte(claim.Radiographs) + "";
        }
         
        if (claim.ClinicNum != oldClaim.ClinicNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClinicNum = " + POut.long(claim.ClinicNum) + "";
        }
         
        if (claim.ClaimForm != oldClaim.ClaimForm)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClaimForm = " + POut.long(claim.ClaimForm) + "";
        }
         
        if (claim.AttachedImages != oldClaim.AttachedImages)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AttachedImages = " + POut.int(claim.AttachedImages) + "";
        }
         
        if (claim.AttachedModels != oldClaim.AttachedModels)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AttachedModels = " + POut.int(claim.AttachedModels) + "";
        }
         
        if (!StringSupport.equals(claim.AttachedFlags, oldClaim.AttachedFlags))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AttachedFlags = '" + POut.string(claim.AttachedFlags) + "'";
        }
         
        if (!StringSupport.equals(claim.AttachmentID, oldClaim.AttachmentID))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AttachmentID = '" + POut.string(claim.AttachmentID) + "'";
        }
         
        if (!StringSupport.equals(claim.CanadianMaterialsForwarded, oldClaim.CanadianMaterialsForwarded))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadianMaterialsForwarded = '" + POut.string(claim.CanadianMaterialsForwarded) + "'";
        }
         
        if (!StringSupport.equals(claim.CanadianReferralProviderNum, oldClaim.CanadianReferralProviderNum))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadianReferralProviderNum = '" + POut.string(claim.CanadianReferralProviderNum) + "'";
        }
         
        if (claim.CanadianReferralReason != oldClaim.CanadianReferralReason)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadianReferralReason = " + POut.byte(claim.CanadianReferralReason) + "";
        }
         
        if (!StringSupport.equals(claim.CanadianIsInitialLower, oldClaim.CanadianIsInitialLower))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadianIsInitialLower = '" + POut.string(claim.CanadianIsInitialLower) + "'";
        }
         
        if (claim.CanadianDateInitialLower != oldClaim.CanadianDateInitialLower)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadianDateInitialLower = " + POut.date(claim.CanadianDateInitialLower) + "";
        }
         
        if (claim.CanadianMandProsthMaterial != oldClaim.CanadianMandProsthMaterial)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadianMandProsthMaterial = " + POut.byte(claim.CanadianMandProsthMaterial) + "";
        }
         
        if (!StringSupport.equals(claim.CanadianIsInitialUpper, oldClaim.CanadianIsInitialUpper))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadianIsInitialUpper = '" + POut.string(claim.CanadianIsInitialUpper) + "'";
        }
         
        if (claim.CanadianDateInitialUpper != oldClaim.CanadianDateInitialUpper)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadianDateInitialUpper = " + POut.date(claim.CanadianDateInitialUpper) + "";
        }
         
        if (claim.CanadianMaxProsthMaterial != oldClaim.CanadianMaxProsthMaterial)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadianMaxProsthMaterial = " + POut.byte(claim.CanadianMaxProsthMaterial) + "";
        }
         
        if (claim.InsSubNum != oldClaim.InsSubNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "InsSubNum = " + POut.long(claim.InsSubNum) + "";
        }
         
        if (claim.InsSubNum2 != oldClaim.InsSubNum2)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "InsSubNum2 = " + POut.long(claim.InsSubNum2) + "";
        }
         
        if (!StringSupport.equals(claim.CanadaTransRefNum, oldClaim.CanadaTransRefNum))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadaTransRefNum = '" + POut.string(claim.CanadaTransRefNum) + "'";
        }
         
        if (claim.CanadaEstTreatStartDate != oldClaim.CanadaEstTreatStartDate)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadaEstTreatStartDate = " + POut.date(claim.CanadaEstTreatStartDate) + "";
        }
         
        if (claim.CanadaInitialPayment != oldClaim.CanadaInitialPayment)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadaInitialPayment = '" + POut.double(claim.CanadaInitialPayment) + "'";
        }
         
        if (claim.CanadaPaymentMode != oldClaim.CanadaPaymentMode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadaPaymentMode = " + POut.byte(claim.CanadaPaymentMode) + "";
        }
         
        if (claim.CanadaTreatDuration != oldClaim.CanadaTreatDuration)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadaTreatDuration = " + POut.byte(claim.CanadaTreatDuration) + "";
        }
         
        if (claim.CanadaNumAnticipatedPayments != oldClaim.CanadaNumAnticipatedPayments)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadaNumAnticipatedPayments = " + POut.byte(claim.CanadaNumAnticipatedPayments) + "";
        }
         
        if (claim.CanadaAnticipatedPayAmount != oldClaim.CanadaAnticipatedPayAmount)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadaAnticipatedPayAmount = '" + POut.double(claim.CanadaAnticipatedPayAmount) + "'";
        }
         
        if (!StringSupport.equals(claim.PriorAuthorizationNumber, oldClaim.PriorAuthorizationNumber))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PriorAuthorizationNumber = '" + POut.string(claim.PriorAuthorizationNumber) + "'";
        }
         
        if (claim.SpecialProgramCode != oldClaim.SpecialProgramCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SpecialProgramCode = " + POut.int(((Enum)claim.SpecialProgramCode).ordinal()) + "";
        }
         
        if (!StringSupport.equals(claim.UniformBillType, oldClaim.UniformBillType))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UniformBillType = '" + POut.string(claim.UniformBillType) + "'";
        }
         
        if (claim.MedType != oldClaim.MedType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MedType = " + POut.int(((Enum)claim.MedType).ordinal()) + "";
        }
         
        if (!StringSupport.equals(claim.AdmissionTypeCode, oldClaim.AdmissionTypeCode))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AdmissionTypeCode = '" + POut.string(claim.AdmissionTypeCode) + "'";
        }
         
        if (!StringSupport.equals(claim.AdmissionSourceCode, oldClaim.AdmissionSourceCode))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AdmissionSourceCode = '" + POut.string(claim.AdmissionSourceCode) + "'";
        }
         
        if (!StringSupport.equals(claim.PatientStatusCode, oldClaim.PatientStatusCode))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatientStatusCode = '" + POut.string(claim.PatientStatusCode) + "'";
        }
         
        if (claim.CustomTracking != oldClaim.CustomTracking)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CustomTracking = " + POut.long(claim.CustomTracking) + "";
        }
         
        if (claim.DateResent != oldClaim.DateResent)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateResent = " + POut.date(claim.DateResent) + "";
        }
         
        if (claim.CorrectionType != oldClaim.CorrectionType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CorrectionType = " + POut.int(((Enum)claim.CorrectionType).ordinal()) + "";
        }
         
        if (!StringSupport.equals(claim.ClaimIdentifier, oldClaim.ClaimIdentifier))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClaimIdentifier = '" + POut.string(claim.ClaimIdentifier) + "'";
        }
         
        if (!StringSupport.equals(claim.OrigRefNum, oldClaim.OrigRefNum))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "OrigRefNum = '" + POut.string(claim.OrigRefNum) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE claim SET " + command + " WHERE ClaimNum = " + POut.long(claim.ClaimNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one Claim from the database.
    */
    public static void delete(long claimNum) throws Exception {
        String command = "DELETE FROM claim " + "WHERE ClaimNum = " + POut.long(claimNum);
        Db.nonQ(command);
    }

}


