//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:06 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.IdentifierType;
import OpenDentBusiness.OIDInternal;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class OIDInternalCrud   
{
    /**
    * Gets one OIDInternal object from the database using the primary key.  Returns null if not found.
    */
    public static OIDInternal selectOne(long oIDInternalNum) throws Exception {
        String command = "SELECT * FROM oidinternal " + "WHERE OIDInternalNum = " + POut.long(oIDInternalNum);
        List<OIDInternal> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one OIDInternal object from the database using a query.
    */
    public static OIDInternal selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<OIDInternal> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of OIDInternal objects from the database using a query.
    */
    public static List<OIDInternal> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<OIDInternal> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<OIDInternal> tableToList(DataTable table) throws Exception {
        List<OIDInternal> retVal = new List<OIDInternal>();
        OIDInternal oIDInternal;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            oIDInternal = new OIDInternal();
            oIDInternal.OIDInternalNum = PIn.Long(table.Rows[i]["OIDInternalNum"].ToString());
            String iDType = table.Rows[i]["IDType"].ToString();
            if (StringSupport.equals(iDType, ""))
            {
                oIDInternal.IDType = IdentifierType.values()[0];
            }
            else
                try
                {
                    oIDInternal.IDType = (IdentifierType)Enum.Parse(IdentifierType.class, iDType);
                }
                catch (Exception __dummyCatchVar0)
                {
                    oIDInternal.IDType = IdentifierType.values()[0];
                }
             
            oIDInternal.IDRoot = PIn.String(table.Rows[i]["IDRoot"].ToString());
            retVal.Add(oIDInternal);
        }
        return retVal;
    }

    /**
    * Inserts one OIDInternal into the database.  Returns the new priKey.
    */
    public static long insert(OIDInternal oIDInternal) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            oIDInternal.OIDInternalNum = DbHelper.getNextOracleKey("oidinternal","OIDInternalNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(oIDInternal, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        oIDInternal.OIDInternalNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(oIDInternal, false);
        } 
    }

    /**
    * Inserts one OIDInternal into the database.  Provides option to use the existing priKey.
    */
    public static long insert(OIDInternal oIDInternal, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            oIDInternal.OIDInternalNum = ReplicationServers.getKey("oidinternal","OIDInternalNum");
        }
         
        String command = "INSERT INTO oidinternal (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "OIDInternalNum,";
        }
         
        command += "IDType,IDRoot) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(oIDInternal.OIDInternalNum) + ",";
        }
         
        command += "'" + POut.String(oIDInternal.IDType.ToString()) + "'," + "'" + POut.string(oIDInternal.IDRoot) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            oIDInternal.OIDInternalNum = Db.nonQ(command,true);
        } 
        return oIDInternal.OIDInternalNum;
    }

    /**
    * Updates one OIDInternal in the database.
    */
    public static void update(OIDInternal oIDInternal) throws Exception {
        String command = "UPDATE oidinternal SET " + "IDType        = '" + POut.String(oIDInternal.IDType.ToString()) + "', " + "IDRoot        = '" + POut.string(oIDInternal.IDRoot) + "' " + "WHERE OIDInternalNum = " + POut.long(oIDInternal.OIDInternalNum);
        Db.nonQ(command);
    }

    /**
    * Updates one OIDInternal in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(OIDInternal oIDInternal, OIDInternal oldOIDInternal) throws Exception {
        String command = "";
        if (oIDInternal.IDType != oldOIDInternal.IDType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IDType = '" + POut.String(oIDInternal.IDType.ToString()) + "'";
        }
         
        if (!StringSupport.equals(oIDInternal.IDRoot, oldOIDInternal.IDRoot))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IDRoot = '" + POut.string(oIDInternal.IDRoot) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE oidinternal SET " + command + " WHERE OIDInternalNum = " + POut.long(oIDInternal.OIDInternalNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one OIDInternal from the database.
    */
    public static void delete(long oIDInternalNum) throws Exception {
        String command = "DELETE FROM oidinternal " + "WHERE OIDInternalNum = " + POut.long(oIDInternalNum);
        Db.nonQ(command);
    }

}


