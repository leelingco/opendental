//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:00 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.DashboardAR;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class DashboardARCrud   
{
    /**
    * Gets one DashboardAR object from the database using the primary key.  Returns null if not found.
    */
    public static DashboardAR selectOne(long dashboardARNum) throws Exception {
        String command = "SELECT * FROM dashboardar " + "WHERE DashboardARNum = " + POut.long(dashboardARNum);
        List<DashboardAR> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one DashboardAR object from the database using a query.
    */
    public static DashboardAR selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<DashboardAR> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of DashboardAR objects from the database using a query.
    */
    public static List<DashboardAR> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<DashboardAR> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<DashboardAR> tableToList(DataTable table) throws Exception {
        List<DashboardAR> retVal = new List<DashboardAR>();
        DashboardAR dashboardAR;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            dashboardAR = new DashboardAR();
            dashboardAR.DashboardARNum = PIn.Long(table.Rows[i]["DashboardARNum"].ToString());
            dashboardAR.DateCalc = PIn.Date(table.Rows[i]["DateCalc"].ToString());
            dashboardAR.BalTotal = PIn.Double(table.Rows[i]["BalTotal"].ToString());
            dashboardAR.InsEst = PIn.Double(table.Rows[i]["InsEst"].ToString());
            retVal.Add(dashboardAR);
        }
        return retVal;
    }

    /**
    * Inserts one DashboardAR into the database.  Returns the new priKey.
    */
    public static long insert(DashboardAR dashboardAR) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            dashboardAR.DashboardARNum = DbHelper.getNextOracleKey("dashboardar","DashboardARNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(dashboardAR, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        dashboardAR.DashboardARNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(dashboardAR, false);
        } 
    }

    /**
    * Inserts one DashboardAR into the database.  Provides option to use the existing priKey.
    */
    public static long insert(DashboardAR dashboardAR, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            dashboardAR.DashboardARNum = ReplicationServers.getKey("dashboardar","DashboardARNum");
        }
         
        String command = "INSERT INTO dashboardar (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "DashboardARNum,";
        }
         
        command += "DateCalc,BalTotal,InsEst) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(dashboardAR.DashboardARNum) + ",";
        }
         
        command += POut.date(dashboardAR.DateCalc) + "," + "'" + POut.double(dashboardAR.BalTotal) + "'," + "'" + POut.double(dashboardAR.InsEst) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            dashboardAR.DashboardARNum = Db.nonQ(command,true);
        } 
        return dashboardAR.DashboardARNum;
    }

    /**
    * Updates one DashboardAR in the database.
    */
    public static void update(DashboardAR dashboardAR) throws Exception {
        String command = "UPDATE dashboardar SET " + "DateCalc      =  " + POut.date(dashboardAR.DateCalc) + ", " + "BalTotal      = '" + POut.double(dashboardAR.BalTotal) + "', " + "InsEst        = '" + POut.double(dashboardAR.InsEst) + "' " + "WHERE DashboardARNum = " + POut.long(dashboardAR.DashboardARNum);
        Db.nonQ(command);
    }

    /**
    * Updates one DashboardAR in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(DashboardAR dashboardAR, DashboardAR oldDashboardAR) throws Exception {
        String command = "";
        if (dashboardAR.DateCalc != oldDashboardAR.DateCalc)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateCalc = " + POut.date(dashboardAR.DateCalc) + "";
        }
         
        if (dashboardAR.BalTotal != oldDashboardAR.BalTotal)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "BalTotal = '" + POut.double(dashboardAR.BalTotal) + "'";
        }
         
        if (dashboardAR.InsEst != oldDashboardAR.InsEst)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "InsEst = '" + POut.double(dashboardAR.InsEst) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE dashboardar SET " + command + " WHERE DashboardARNum = " + POut.long(dashboardAR.DashboardARNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one DashboardAR from the database.
    */
    public static void delete(long dashboardARNum) throws Exception {
        String command = "DELETE FROM dashboardar " + "WHERE DashboardARNum = " + POut.long(dashboardARNum);
        Db.nonQ(command);
    }

}


