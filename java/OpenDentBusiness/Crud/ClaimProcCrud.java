//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:57:59 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.ClaimProc;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ClaimProcCrud   
{
    /**
    * Gets one ClaimProc object from the database using the primary key.  Returns null if not found.
    */
    public static ClaimProc selectOne(long claimProcNum) throws Exception {
        String command = "SELECT * FROM claimproc " + "WHERE ClaimProcNum = " + POut.long(claimProcNum);
        List<ClaimProc> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ClaimProc object from the database using a query.
    */
    public static ClaimProc selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ClaimProc> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ClaimProc objects from the database using a query.
    */
    public static List<ClaimProc> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ClaimProc> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ClaimProc> tableToList(DataTable table) throws Exception {
        List<ClaimProc> retVal = new List<ClaimProc>();
        ClaimProc claimProc;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            claimProc = new ClaimProc();
            claimProc.ClaimProcNum = PIn.Long(table.Rows[i]["ClaimProcNum"].ToString());
            claimProc.ProcNum = PIn.Long(table.Rows[i]["ProcNum"].ToString());
            claimProc.ClaimNum = PIn.Long(table.Rows[i]["ClaimNum"].ToString());
            claimProc.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            claimProc.ProvNum = PIn.Long(table.Rows[i]["ProvNum"].ToString());
            claimProc.FeeBilled = PIn.Double(table.Rows[i]["FeeBilled"].ToString());
            claimProc.InsPayEst = PIn.Double(table.Rows[i]["InsPayEst"].ToString());
            claimProc.DedApplied = PIn.Double(table.Rows[i]["DedApplied"].ToString());
            claimProc.Status = (OpenDentBusiness.ClaimProcStatus)PIn.Int(table.Rows[i]["Status"].ToString());
            claimProc.InsPayAmt = PIn.Double(table.Rows[i]["InsPayAmt"].ToString());
            claimProc.Remarks = PIn.String(table.Rows[i]["Remarks"].ToString());
            claimProc.ClaimPaymentNum = PIn.Long(table.Rows[i]["ClaimPaymentNum"].ToString());
            claimProc.PlanNum = PIn.Long(table.Rows[i]["PlanNum"].ToString());
            claimProc.DateCP = PIn.Date(table.Rows[i]["DateCP"].ToString());
            claimProc.WriteOff = PIn.Double(table.Rows[i]["WriteOff"].ToString());
            claimProc.CodeSent = PIn.String(table.Rows[i]["CodeSent"].ToString());
            claimProc.AllowedOverride = PIn.Double(table.Rows[i]["AllowedOverride"].ToString());
            claimProc.Percentage = PIn.Int(table.Rows[i]["Percentage"].ToString());
            claimProc.PercentOverride = PIn.Int(table.Rows[i]["PercentOverride"].ToString());
            claimProc.CopayAmt = PIn.Double(table.Rows[i]["CopayAmt"].ToString());
            claimProc.NoBillIns = PIn.Bool(table.Rows[i]["NoBillIns"].ToString());
            claimProc.PaidOtherIns = PIn.Double(table.Rows[i]["PaidOtherIns"].ToString());
            claimProc.BaseEst = PIn.Double(table.Rows[i]["BaseEst"].ToString());
            claimProc.CopayOverride = PIn.Double(table.Rows[i]["CopayOverride"].ToString());
            claimProc.ProcDate = PIn.Date(table.Rows[i]["ProcDate"].ToString());
            claimProc.DateEntry = PIn.Date(table.Rows[i]["DateEntry"].ToString());
            claimProc.LineNumber = PIn.Byte(table.Rows[i]["LineNumber"].ToString());
            claimProc.DedEst = PIn.Double(table.Rows[i]["DedEst"].ToString());
            claimProc.DedEstOverride = PIn.Double(table.Rows[i]["DedEstOverride"].ToString());
            claimProc.InsEstTotal = PIn.Double(table.Rows[i]["InsEstTotal"].ToString());
            claimProc.InsEstTotalOverride = PIn.Double(table.Rows[i]["InsEstTotalOverride"].ToString());
            claimProc.PaidOtherInsOverride = PIn.Double(table.Rows[i]["PaidOtherInsOverride"].ToString());
            claimProc.EstimateNote = PIn.String(table.Rows[i]["EstimateNote"].ToString());
            claimProc.WriteOffEst = PIn.Double(table.Rows[i]["WriteOffEst"].ToString());
            claimProc.WriteOffEstOverride = PIn.Double(table.Rows[i]["WriteOffEstOverride"].ToString());
            claimProc.ClinicNum = PIn.Long(table.Rows[i]["ClinicNum"].ToString());
            claimProc.InsSubNum = PIn.Long(table.Rows[i]["InsSubNum"].ToString());
            claimProc.PaymentRow = PIn.Int(table.Rows[i]["PaymentRow"].ToString());
            retVal.Add(claimProc);
        }
        return retVal;
    }

    /**
    * Inserts one ClaimProc into the database.  Returns the new priKey.
    */
    public static long insert(ClaimProc claimProc) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            claimProc.ClaimProcNum = DbHelper.getNextOracleKey("claimproc","ClaimProcNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(claimProc, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        claimProc.ClaimProcNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(claimProc, false);
        } 
    }

    /**
    * Inserts one ClaimProc into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ClaimProc claimProc, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            claimProc.ClaimProcNum = ReplicationServers.getKey("claimproc","ClaimProcNum");
        }
         
        String command = "INSERT INTO claimproc (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "ClaimProcNum,";
        }
         
        command += "ProcNum,ClaimNum,PatNum,ProvNum,FeeBilled,InsPayEst,DedApplied,Status,InsPayAmt,Remarks,ClaimPaymentNum,PlanNum,DateCP,WriteOff,CodeSent,AllowedOverride,Percentage,PercentOverride,CopayAmt,NoBillIns,PaidOtherIns,BaseEst,CopayOverride,ProcDate,DateEntry,LineNumber,DedEst,DedEstOverride,InsEstTotal,InsEstTotalOverride,PaidOtherInsOverride,EstimateNote,WriteOffEst,WriteOffEstOverride,ClinicNum,InsSubNum,PaymentRow) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(claimProc.ClaimProcNum) + ",";
        }
         
        command += POut.long(claimProc.ProcNum) + "," + POut.long(claimProc.ClaimNum) + "," + POut.long(claimProc.PatNum) + "," + POut.long(claimProc.ProvNum) + "," + "'" + POut.double(claimProc.FeeBilled) + "'," + "'" + POut.double(claimProc.InsPayEst) + "'," + "'" + POut.double(claimProc.DedApplied) + "'," + POut.int(((Enum)claimProc.Status).ordinal()) + "," + "'" + POut.double(claimProc.InsPayAmt) + "'," + "'" + POut.string(claimProc.Remarks) + "'," + POut.long(claimProc.ClaimPaymentNum) + "," + POut.long(claimProc.PlanNum) + "," + POut.date(claimProc.DateCP) + "," + "'" + POut.double(claimProc.WriteOff) + "'," + "'" + POut.string(claimProc.CodeSent) + "'," + "'" + POut.double(claimProc.AllowedOverride) + "'," + POut.int(claimProc.Percentage) + "," + POut.int(claimProc.PercentOverride) + "," + "'" + POut.double(claimProc.CopayAmt) + "'," + POut.bool(claimProc.NoBillIns) + "," + "'" + POut.double(claimProc.PaidOtherIns) + "'," + "'" + POut.double(claimProc.BaseEst) + "'," + "'" + POut.double(claimProc.CopayOverride) + "'," + POut.date(claimProc.ProcDate) + "," + POut.date(claimProc.DateEntry) + "," + POut.byte(claimProc.LineNumber) + "," + "'" + POut.double(claimProc.DedEst) + "'," + "'" + POut.double(claimProc.DedEstOverride) + "'," + "'" + POut.double(claimProc.InsEstTotal) + "'," + "'" + POut.double(claimProc.InsEstTotalOverride) + "'," + "'" + POut.double(claimProc.PaidOtherInsOverride) + "'," + "'" + POut.string(claimProc.EstimateNote) + "'," + "'" + POut.double(claimProc.WriteOffEst) + "'," + "'" + POut.double(claimProc.WriteOffEstOverride) + "'," + POut.long(claimProc.ClinicNum) + "," + POut.long(claimProc.InsSubNum) + "," + POut.int(claimProc.PaymentRow) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            claimProc.ClaimProcNum = Db.nonQ(command,true);
        } 
        return claimProc.ClaimProcNum;
    }

    /**
    * Updates one ClaimProc in the database.
    */
    public static void update(ClaimProc claimProc) throws Exception {
        String command = "UPDATE claimproc SET " + "ProcNum             =  " + POut.long(claimProc.ProcNum) + ", " + "ClaimNum            =  " + POut.long(claimProc.ClaimNum) + ", " + "PatNum              =  " + POut.long(claimProc.PatNum) + ", " + "ProvNum             =  " + POut.long(claimProc.ProvNum) + ", " + "FeeBilled           = '" + POut.double(claimProc.FeeBilled) + "', " + "InsPayEst           = '" + POut.double(claimProc.InsPayEst) + "', " + "DedApplied          = '" + POut.double(claimProc.DedApplied) + "', " + "Status              =  " + POut.int(((Enum)claimProc.Status).ordinal()) + ", " + "InsPayAmt           = '" + POut.double(claimProc.InsPayAmt) + "', " + "Remarks             = '" + POut.string(claimProc.Remarks) + "', " + "ClaimPaymentNum     =  " + POut.long(claimProc.ClaimPaymentNum) + ", " + "PlanNum             =  " + POut.long(claimProc.PlanNum) + ", " + "DateCP              =  " + POut.date(claimProc.DateCP) + ", " + "WriteOff            = '" + POut.double(claimProc.WriteOff) + "', " + "CodeSent            = '" + POut.string(claimProc.CodeSent) + "', " + "AllowedOverride     = '" + POut.double(claimProc.AllowedOverride) + "', " + "Percentage          =  " + POut.int(claimProc.Percentage) + ", " + "PercentOverride     =  " + POut.int(claimProc.PercentOverride) + ", " + "CopayAmt            = '" + POut.double(claimProc.CopayAmt) + "', " + "NoBillIns           =  " + POut.bool(claimProc.NoBillIns) + ", " + "PaidOtherIns        = '" + POut.double(claimProc.PaidOtherIns) + "', " + "BaseEst             = '" + POut.double(claimProc.BaseEst) + "', " + "CopayOverride       = '" + POut.double(claimProc.CopayOverride) + "', " + "ProcDate            =  " + POut.date(claimProc.ProcDate) + ", " + "DateEntry           =  " + POut.date(claimProc.DateEntry) + ", " + "LineNumber          =  " + POut.byte(claimProc.LineNumber) + ", " + "DedEst              = '" + POut.double(claimProc.DedEst) + "', " + "DedEstOverride      = '" + POut.double(claimProc.DedEstOverride) + "', " + "InsEstTotal         = '" + POut.double(claimProc.InsEstTotal) + "', " + "InsEstTotalOverride = '" + POut.double(claimProc.InsEstTotalOverride) + "', " + "PaidOtherInsOverride= '" + POut.double(claimProc.PaidOtherInsOverride) + "', " + "EstimateNote        = '" + POut.string(claimProc.EstimateNote) + "', " + "WriteOffEst         = '" + POut.double(claimProc.WriteOffEst) + "', " + "WriteOffEstOverride = '" + POut.double(claimProc.WriteOffEstOverride) + "', " + "ClinicNum           =  " + POut.long(claimProc.ClinicNum) + ", " + "InsSubNum           =  " + POut.long(claimProc.InsSubNum) + ", " + "PaymentRow          =  " + POut.int(claimProc.PaymentRow) + " " + "WHERE ClaimProcNum = " + POut.long(claimProc.ClaimProcNum);
        Db.nonQ(command);
    }

    /**
    * Updates one ClaimProc in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ClaimProc claimProc, ClaimProc oldClaimProc) throws Exception {
        String command = "";
        if (claimProc.ProcNum != oldClaimProc.ProcNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProcNum = " + POut.long(claimProc.ProcNum) + "";
        }
         
        if (claimProc.ClaimNum != oldClaimProc.ClaimNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClaimNum = " + POut.long(claimProc.ClaimNum) + "";
        }
         
        if (claimProc.PatNum != oldClaimProc.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.long(claimProc.PatNum) + "";
        }
         
        if (claimProc.ProvNum != oldClaimProc.ProvNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvNum = " + POut.long(claimProc.ProvNum) + "";
        }
         
        if (claimProc.FeeBilled != oldClaimProc.FeeBilled)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FeeBilled = '" + POut.double(claimProc.FeeBilled) + "'";
        }
         
        if (claimProc.InsPayEst != oldClaimProc.InsPayEst)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "InsPayEst = '" + POut.double(claimProc.InsPayEst) + "'";
        }
         
        if (claimProc.DedApplied != oldClaimProc.DedApplied)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DedApplied = '" + POut.double(claimProc.DedApplied) + "'";
        }
         
        if (claimProc.Status != oldClaimProc.Status)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Status = " + POut.int(((Enum)claimProc.Status).ordinal()) + "";
        }
         
        if (claimProc.InsPayAmt != oldClaimProc.InsPayAmt)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "InsPayAmt = '" + POut.double(claimProc.InsPayAmt) + "'";
        }
         
        if (!StringSupport.equals(claimProc.Remarks, oldClaimProc.Remarks))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Remarks = '" + POut.string(claimProc.Remarks) + "'";
        }
         
        if (claimProc.ClaimPaymentNum != oldClaimProc.ClaimPaymentNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClaimPaymentNum = " + POut.long(claimProc.ClaimPaymentNum) + "";
        }
         
        if (claimProc.PlanNum != oldClaimProc.PlanNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PlanNum = " + POut.long(claimProc.PlanNum) + "";
        }
         
        if (claimProc.DateCP != oldClaimProc.DateCP)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateCP = " + POut.date(claimProc.DateCP) + "";
        }
         
        if (claimProc.WriteOff != oldClaimProc.WriteOff)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "WriteOff = '" + POut.double(claimProc.WriteOff) + "'";
        }
         
        if (!StringSupport.equals(claimProc.CodeSent, oldClaimProc.CodeSent))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeSent = '" + POut.string(claimProc.CodeSent) + "'";
        }
         
        if (claimProc.AllowedOverride != oldClaimProc.AllowedOverride)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AllowedOverride = '" + POut.double(claimProc.AllowedOverride) + "'";
        }
         
        if (claimProc.Percentage != oldClaimProc.Percentage)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Percentage = " + POut.int(claimProc.Percentage) + "";
        }
         
        if (claimProc.PercentOverride != oldClaimProc.PercentOverride)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PercentOverride = " + POut.int(claimProc.PercentOverride) + "";
        }
         
        if (claimProc.CopayAmt != oldClaimProc.CopayAmt)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CopayAmt = '" + POut.double(claimProc.CopayAmt) + "'";
        }
         
        if (claimProc.NoBillIns != oldClaimProc.NoBillIns)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "NoBillIns = " + POut.bool(claimProc.NoBillIns) + "";
        }
         
        if (claimProc.PaidOtherIns != oldClaimProc.PaidOtherIns)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PaidOtherIns = '" + POut.double(claimProc.PaidOtherIns) + "'";
        }
         
        if (claimProc.BaseEst != oldClaimProc.BaseEst)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "BaseEst = '" + POut.double(claimProc.BaseEst) + "'";
        }
         
        if (claimProc.CopayOverride != oldClaimProc.CopayOverride)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CopayOverride = '" + POut.double(claimProc.CopayOverride) + "'";
        }
         
        if (claimProc.ProcDate != oldClaimProc.ProcDate)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProcDate = " + POut.date(claimProc.ProcDate) + "";
        }
         
        if (claimProc.DateEntry != oldClaimProc.DateEntry)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateEntry = " + POut.date(claimProc.DateEntry) + "";
        }
         
        if (claimProc.LineNumber != oldClaimProc.LineNumber)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "LineNumber = " + POut.byte(claimProc.LineNumber) + "";
        }
         
        if (claimProc.DedEst != oldClaimProc.DedEst)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DedEst = '" + POut.double(claimProc.DedEst) + "'";
        }
         
        if (claimProc.DedEstOverride != oldClaimProc.DedEstOverride)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DedEstOverride = '" + POut.double(claimProc.DedEstOverride) + "'";
        }
         
        if (claimProc.InsEstTotal != oldClaimProc.InsEstTotal)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "InsEstTotal = '" + POut.double(claimProc.InsEstTotal) + "'";
        }
         
        if (claimProc.InsEstTotalOverride != oldClaimProc.InsEstTotalOverride)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "InsEstTotalOverride = '" + POut.double(claimProc.InsEstTotalOverride) + "'";
        }
         
        if (claimProc.PaidOtherInsOverride != oldClaimProc.PaidOtherInsOverride)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PaidOtherInsOverride = '" + POut.double(claimProc.PaidOtherInsOverride) + "'";
        }
         
        if (!StringSupport.equals(claimProc.EstimateNote, oldClaimProc.EstimateNote))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EstimateNote = '" + POut.string(claimProc.EstimateNote) + "'";
        }
         
        if (claimProc.WriteOffEst != oldClaimProc.WriteOffEst)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "WriteOffEst = '" + POut.double(claimProc.WriteOffEst) + "'";
        }
         
        if (claimProc.WriteOffEstOverride != oldClaimProc.WriteOffEstOverride)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "WriteOffEstOverride = '" + POut.double(claimProc.WriteOffEstOverride) + "'";
        }
         
        if (claimProc.ClinicNum != oldClaimProc.ClinicNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClinicNum = " + POut.long(claimProc.ClinicNum) + "";
        }
         
        if (claimProc.InsSubNum != oldClaimProc.InsSubNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "InsSubNum = " + POut.long(claimProc.InsSubNum) + "";
        }
         
        if (claimProc.PaymentRow != oldClaimProc.PaymentRow)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PaymentRow = " + POut.int(claimProc.PaymentRow) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE claimproc SET " + command + " WHERE ClaimProcNum = " + POut.long(claimProc.ClaimProcNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one ClaimProc from the database.
    */
    public static void delete(long claimProcNum) throws Exception {
        String command = "DELETE FROM claimproc " + "WHERE ClaimProcNum = " + POut.long(claimProcNum);
        Db.nonQ(command);
    }

}


