//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:06 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.OrthoChart;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class OrthoChartCrud   
{
    /**
    * Gets one OrthoChart object from the database using the primary key.  Returns null if not found.
    */
    public static OrthoChart selectOne(long orthoChartNum) throws Exception {
        String command = "SELECT * FROM orthochart " + "WHERE OrthoChartNum = " + POut.long(orthoChartNum);
        List<OrthoChart> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one OrthoChart object from the database using a query.
    */
    public static OrthoChart selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<OrthoChart> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of OrthoChart objects from the database using a query.
    */
    public static List<OrthoChart> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<OrthoChart> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<OrthoChart> tableToList(DataTable table) throws Exception {
        List<OrthoChart> retVal = new List<OrthoChart>();
        OrthoChart orthoChart;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            orthoChart = new OrthoChart();
            orthoChart.OrthoChartNum = PIn.Long(table.Rows[i]["OrthoChartNum"].ToString());
            orthoChart.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            orthoChart.DateService = PIn.Date(table.Rows[i]["DateService"].ToString());
            orthoChart.FieldName = PIn.String(table.Rows[i]["FieldName"].ToString());
            orthoChart.FieldValue = PIn.String(table.Rows[i]["FieldValue"].ToString());
            retVal.Add(orthoChart);
        }
        return retVal;
    }

    /**
    * Inserts one OrthoChart into the database.  Returns the new priKey.
    */
    public static long insert(OrthoChart orthoChart) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            orthoChart.OrthoChartNum = DbHelper.getNextOracleKey("orthochart","OrthoChartNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(orthoChart, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        orthoChart.OrthoChartNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(orthoChart, false);
        } 
    }

    /**
    * Inserts one OrthoChart into the database.  Provides option to use the existing priKey.
    */
    public static long insert(OrthoChart orthoChart, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            orthoChart.OrthoChartNum = ReplicationServers.getKey("orthochart","OrthoChartNum");
        }
         
        String command = "INSERT INTO orthochart (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "OrthoChartNum,";
        }
         
        command += "PatNum,DateService,FieldName,FieldValue) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(orthoChart.OrthoChartNum) + ",";
        }
         
        command += POut.long(orthoChart.PatNum) + "," + POut.date(orthoChart.DateService) + "," + "'" + POut.string(orthoChart.FieldName) + "'," + "'" + POut.string(orthoChart.FieldValue) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            orthoChart.OrthoChartNum = Db.nonQ(command,true);
        } 
        return orthoChart.OrthoChartNum;
    }

    /**
    * Updates one OrthoChart in the database.
    */
    public static void update(OrthoChart orthoChart) throws Exception {
        String command = "UPDATE orthochart SET " + "PatNum       =  " + POut.long(orthoChart.PatNum) + ", " + "DateService  =  " + POut.date(orthoChart.DateService) + ", " + "FieldName    = '" + POut.string(orthoChart.FieldName) + "', " + "FieldValue   = '" + POut.string(orthoChart.FieldValue) + "' " + "WHERE OrthoChartNum = " + POut.long(orthoChart.OrthoChartNum);
        Db.nonQ(command);
    }

    /**
    * Updates one OrthoChart in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(OrthoChart orthoChart, OrthoChart oldOrthoChart) throws Exception {
        String command = "";
        if (orthoChart.PatNum != oldOrthoChart.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.long(orthoChart.PatNum) + "";
        }
         
        if (orthoChart.DateService != oldOrthoChart.DateService)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateService = " + POut.date(orthoChart.DateService) + "";
        }
         
        if (!StringSupport.equals(orthoChart.FieldName, oldOrthoChart.FieldName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FieldName = '" + POut.string(orthoChart.FieldName) + "'";
        }
         
        if (!StringSupport.equals(orthoChart.FieldValue, oldOrthoChart.FieldValue))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FieldValue = '" + POut.string(orthoChart.FieldValue) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE orthochart SET " + command + " WHERE OrthoChartNum = " + POut.long(orthoChart.OrthoChartNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one OrthoChart from the database.
    */
    public static void delete(long orthoChartNum) throws Exception {
        String command = "DELETE FROM orthochart " + "WHERE OrthoChartNum = " + POut.long(orthoChartNum);
        Db.nonQ(command);
    }

}


