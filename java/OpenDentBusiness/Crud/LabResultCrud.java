//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:05 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.LabAbnormalFlag;
import OpenDentBusiness.LabResult;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class LabResultCrud   
{
    /**
    * Gets one LabResult object from the database using the primary key.  Returns null if not found.
    */
    public static LabResult selectOne(long labResultNum) throws Exception {
        String command = "SELECT * FROM labresult " + "WHERE LabResultNum = " + POut.long(labResultNum);
        List<LabResult> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one LabResult object from the database using a query.
    */
    public static LabResult selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<LabResult> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of LabResult objects from the database using a query.
    */
    public static List<LabResult> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<LabResult> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<LabResult> tableToList(DataTable table) throws Exception {
        List<LabResult> retVal = new List<LabResult>();
        LabResult labResult;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            labResult = new LabResult();
            labResult.LabResultNum = PIn.Long(table.Rows[i]["LabResultNum"].ToString());
            labResult.LabPanelNum = PIn.Long(table.Rows[i]["LabPanelNum"].ToString());
            labResult.DateTimeTest = PIn.DateT(table.Rows[i]["DateTimeTest"].ToString());
            labResult.TestName = PIn.String(table.Rows[i]["TestName"].ToString());
            labResult.DateTStamp = PIn.DateT(table.Rows[i]["DateTStamp"].ToString());
            labResult.TestID = PIn.String(table.Rows[i]["TestID"].ToString());
            labResult.ObsValue = PIn.String(table.Rows[i]["ObsValue"].ToString());
            labResult.ObsUnits = PIn.String(table.Rows[i]["ObsUnits"].ToString());
            labResult.ObsRange = PIn.String(table.Rows[i]["ObsRange"].ToString());
            labResult.AbnormalFlag = (LabAbnormalFlag)PIn.Int(table.Rows[i]["AbnormalFlag"].ToString());
            retVal.Add(labResult);
        }
        return retVal;
    }

    /**
    * Inserts one LabResult into the database.  Returns the new priKey.
    */
    public static long insert(LabResult labResult) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            labResult.LabResultNum = DbHelper.getNextOracleKey("labresult","LabResultNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(labResult, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        labResult.LabResultNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(labResult, false);
        } 
    }

    /**
    * Inserts one LabResult into the database.  Provides option to use the existing priKey.
    */
    public static long insert(LabResult labResult, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            labResult.LabResultNum = ReplicationServers.getKey("labresult","LabResultNum");
        }
         
        String command = "INSERT INTO labresult (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "LabResultNum,";
        }
         
        command += "LabPanelNum,DateTimeTest,TestName,TestID,ObsValue,ObsUnits,ObsRange,AbnormalFlag) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(labResult.LabResultNum) + ",";
        }
         
        //DateTStamp can only be set by MySQL
        command += POut.long(labResult.LabPanelNum) + "," + POut.dateT(labResult.DateTimeTest) + "," + "'" + POut.string(labResult.TestName) + "'," + "'" + POut.string(labResult.TestID) + "'," + "'" + POut.string(labResult.ObsValue) + "'," + "'" + POut.string(labResult.ObsUnits) + "'," + "'" + POut.string(labResult.ObsRange) + "'," + POut.int(((Enum)labResult.AbnormalFlag).ordinal()) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            labResult.LabResultNum = Db.nonQ(command,true);
        } 
        return labResult.LabResultNum;
    }

    /**
    * Updates one LabResult in the database.
    */
    public static void update(LabResult labResult) throws Exception {
        //DateTStamp can only be set by MySQL
        String command = "UPDATE labresult SET " + "LabPanelNum =  " + POut.long(labResult.LabPanelNum) + ", " + "DateTimeTest=  " + POut.dateT(labResult.DateTimeTest) + ", " + "TestName    = '" + POut.string(labResult.TestName) + "', " + "TestID      = '" + POut.string(labResult.TestID) + "', " + "ObsValue    = '" + POut.string(labResult.ObsValue) + "', " + "ObsUnits    = '" + POut.string(labResult.ObsUnits) + "', " + "ObsRange    = '" + POut.string(labResult.ObsRange) + "', " + "AbnormalFlag=  " + POut.int(((Enum)labResult.AbnormalFlag).ordinal()) + " " + "WHERE LabResultNum = " + POut.long(labResult.LabResultNum);
        Db.nonQ(command);
    }

    /**
    * Updates one LabResult in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(LabResult labResult, LabResult oldLabResult) throws Exception {
        String command = "";
        if (labResult.LabPanelNum != oldLabResult.LabPanelNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "LabPanelNum = " + POut.long(labResult.LabPanelNum) + "";
        }
         
        if (labResult.DateTimeTest != oldLabResult.DateTimeTest)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTimeTest = " + POut.dateT(labResult.DateTimeTest) + "";
        }
         
        if (!StringSupport.equals(labResult.TestName, oldLabResult.TestName))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "TestName = '" + POut.string(labResult.TestName) + "'";
        }
         
        //DateTStamp can only be set by MySQL
        if (!StringSupport.equals(labResult.TestID, oldLabResult.TestID))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "TestID = '" + POut.string(labResult.TestID) + "'";
        }
         
        if (!StringSupport.equals(labResult.ObsValue, oldLabResult.ObsValue))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ObsValue = '" + POut.string(labResult.ObsValue) + "'";
        }
         
        if (!StringSupport.equals(labResult.ObsUnits, oldLabResult.ObsUnits))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ObsUnits = '" + POut.string(labResult.ObsUnits) + "'";
        }
         
        if (!StringSupport.equals(labResult.ObsRange, oldLabResult.ObsRange))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ObsRange = '" + POut.string(labResult.ObsRange) + "'";
        }
         
        if (labResult.AbnormalFlag != oldLabResult.AbnormalFlag)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AbnormalFlag = " + POut.int(((Enum)labResult.AbnormalFlag).ordinal()) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE labresult SET " + command + " WHERE LabResultNum = " + POut.long(labResult.LabResultNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one LabResult from the database.
    */
    public static void delete(long labResultNum) throws Exception {
        String command = "DELETE FROM labresult " + "WHERE LabResultNum = " + POut.long(labResultNum);
        Db.nonQ(command);
    }

}


