//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:01 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class FeeSchedCrud   
{
    /**
    * Gets one FeeSched object from the database using the primary key.  Returns null if not found.
    */
    public static FeeSched selectOne(long feeSchedNum) throws Exception {
        String command = "SELECT * FROM feesched " + "WHERE FeeSchedNum = " + POut.Long(feeSchedNum);
        List<FeeSched> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one FeeSched object from the database using a query.
    */
    public static FeeSched selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<FeeSched> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of FeeSched objects from the database using a query.
    */
    public static List<FeeSched> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<FeeSched> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<FeeSched> tableToList(DataTable table) throws Exception {
        List<FeeSched> retVal = new List<FeeSched>();
        FeeSched feeSched = new FeeSched();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            feeSched = new FeeSched();
            feeSched.FeeSchedNum = PIn.Long(table.Rows[i]["FeeSchedNum"].ToString());
            feeSched.Description = PIn.String(table.Rows[i]["Description"].ToString());
            feeSched.FeeSchedType = (FeeScheduleType)PIn.Int(table.Rows[i]["FeeSchedType"].ToString());
            feeSched.ItemOrder = PIn.Int(table.Rows[i]["ItemOrder"].ToString());
            feeSched.IsHidden = PIn.Bool(table.Rows[i]["IsHidden"].ToString());
            retVal.Add(feeSched);
        }
        return retVal;
    }

    /**
    * Inserts one FeeSched into the database.  Returns the new priKey.
    */
    public static long insert(FeeSched feeSched) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            feeSched.FeeSchedNum = DbHelper.GetNextOracleKey("feesched", "FeeSchedNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(feeSched,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        feeSched.FeeSchedNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(feeSched,false);
        } 
    }

    /**
    * Inserts one FeeSched into the database.  Provides option to use the existing priKey.
    */
    public static long insert(FeeSched feeSched, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            feeSched.FeeSchedNum = ReplicationServers.GetKey("feesched", "FeeSchedNum");
        }
         
        String command = "INSERT INTO feesched (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "FeeSchedNum,";
        }
         
        command += "Description,FeeSchedType,ItemOrder,IsHidden) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(feeSched.FeeSchedNum) + ",";
        }
         
        command += "'" + POut.String(feeSched.Description) + "'," + POut.Int((int)feeSched.FeeSchedType) + "," + POut.Int(feeSched.ItemOrder) + "," + POut.Bool(feeSched.IsHidden) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            feeSched.FeeSchedNum = Db.NonQ(command, true);
        } 
        return feeSched.FeeSchedNum;
    }

    /**
    * Updates one FeeSched in the database.
    */
    public static void update(FeeSched feeSched) throws Exception {
        String command = "UPDATE feesched SET " + "Description = '" + POut.String(feeSched.Description) + "', " + "FeeSchedType=  " + POut.Int((int)feeSched.FeeSchedType) + ", " + "ItemOrder   =  " + POut.Int(feeSched.ItemOrder) + ", " + "IsHidden    =  " + POut.Bool(feeSched.IsHidden) + " " + "WHERE FeeSchedNum = " + POut.Long(feeSched.FeeSchedNum);
        Db.NonQ(command);
    }

    /**
    * Updates one FeeSched in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(FeeSched feeSched, FeeSched oldFeeSched) throws Exception {
        String command = "";
        if (feeSched.Description != oldFeeSched.Description)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.String(feeSched.Description) + "'";
        }
         
        if (feeSched.FeeSchedType != oldFeeSched.FeeSchedType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FeeSchedType = " + POut.Int((int)feeSched.FeeSchedType) + "";
        }
         
        if (feeSched.ItemOrder != oldFeeSched.ItemOrder)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ItemOrder = " + POut.Int(feeSched.ItemOrder) + "";
        }
         
        if (feeSched.IsHidden != oldFeeSched.IsHidden)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsHidden = " + POut.Bool(feeSched.IsHidden) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE feesched SET " + command + " WHERE FeeSchedNum = " + POut.Long(feeSched.FeeSchedNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one FeeSched from the database.
    */
    public static void delete(long feeSchedNum) throws Exception {
        String command = "DELETE FROM feesched " + "WHERE FeeSchedNum = " + POut.Long(feeSchedNum);
        Db.NonQ(command);
    }

}


