//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:08 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ToolButItemCrud   
{
    /**
    * Gets one ToolButItem object from the database using the primary key.  Returns null if not found.
    */
    public static ToolButItem selectOne(long toolButItemNum) throws Exception {
        String command = "SELECT * FROM toolbutitem " + "WHERE ToolButItemNum = " + POut.Long(toolButItemNum);
        List<ToolButItem> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ToolButItem object from the database using a query.
    */
    public static ToolButItem selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ToolButItem> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ToolButItem objects from the database using a query.
    */
    public static List<ToolButItem> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ToolButItem> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ToolButItem> tableToList(DataTable table) throws Exception {
        List<ToolButItem> retVal = new List<ToolButItem>();
        ToolButItem toolButItem = new ToolButItem();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            toolButItem = new ToolButItem();
            toolButItem.ToolButItemNum = PIn.Long(table.Rows[i]["ToolButItemNum"].ToString());
            toolButItem.ProgramNum = PIn.Long(table.Rows[i]["ProgramNum"].ToString());
            toolButItem.ToolBar = (ToolBarsAvail)PIn.Int(table.Rows[i]["ToolBar"].ToString());
            toolButItem.ButtonText = PIn.String(table.Rows[i]["ButtonText"].ToString());
            retVal.Add(toolButItem);
        }
        return retVal;
    }

    /**
    * Inserts one ToolButItem into the database.  Returns the new priKey.
    */
    public static long insert(ToolButItem toolButItem) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            toolButItem.ToolButItemNum = DbHelper.GetNextOracleKey("toolbutitem", "ToolButItemNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(toolButItem,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        toolButItem.ToolButItemNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(toolButItem,false);
        } 
    }

    /**
    * Inserts one ToolButItem into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ToolButItem toolButItem, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            toolButItem.ToolButItemNum = ReplicationServers.GetKey("toolbutitem", "ToolButItemNum");
        }
         
        String command = "INSERT INTO toolbutitem (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ToolButItemNum,";
        }
         
        command += "ProgramNum,ToolBar,ButtonText) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(toolButItem.ToolButItemNum) + ",";
        }
         
        command += POut.Long(toolButItem.ProgramNum) + "," + POut.Int((int)toolButItem.ToolBar) + "," + "'" + POut.String(toolButItem.ButtonText) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            toolButItem.ToolButItemNum = Db.NonQ(command, true);
        } 
        return toolButItem.ToolButItemNum;
    }

    /**
    * Updates one ToolButItem in the database.
    */
    public static void update(ToolButItem toolButItem) throws Exception {
        String command = "UPDATE toolbutitem SET " + "ProgramNum    =  " + POut.Long(toolButItem.ProgramNum) + ", " + "ToolBar       =  " + POut.Int((int)toolButItem.ToolBar) + ", " + "ButtonText    = '" + POut.String(toolButItem.ButtonText) + "' " + "WHERE ToolButItemNum = " + POut.Long(toolButItem.ToolButItemNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ToolButItem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ToolButItem toolButItem, ToolButItem oldToolButItem) throws Exception {
        String command = "";
        if (toolButItem.ProgramNum != oldToolButItem.ProgramNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProgramNum = " + POut.Long(toolButItem.ProgramNum) + "";
        }
         
        if (toolButItem.ToolBar != oldToolButItem.ToolBar)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ToolBar = " + POut.Int((int)toolButItem.ToolBar) + "";
        }
         
        if (toolButItem.ButtonText != oldToolButItem.ButtonText)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ButtonText = '" + POut.String(toolButItem.ButtonText) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE toolbutitem SET " + command + " WHERE ToolButItemNum = " + POut.Long(toolButItem.ToolButItemNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ToolButItem from the database.
    */
    public static void delete(long toolButItemNum) throws Exception {
        String command = "DELETE FROM toolbutitem " + "WHERE ToolButItemNum = " + POut.Long(toolButItemNum);
        Db.NonQ(command);
    }

}


