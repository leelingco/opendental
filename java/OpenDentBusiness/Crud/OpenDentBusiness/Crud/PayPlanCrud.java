//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:03 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class PayPlanCrud   
{
    /**
    * Gets one PayPlan object from the database using the primary key.  Returns null if not found.
    */
    public static PayPlan selectOne(long payPlanNum) throws Exception {
        String command = "SELECT * FROM payplan " + "WHERE PayPlanNum = " + POut.Long(payPlanNum);
        List<PayPlan> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one PayPlan object from the database using a query.
    */
    public static PayPlan selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PayPlan> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of PayPlan objects from the database using a query.
    */
    public static List<PayPlan> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PayPlan> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<PayPlan> tableToList(DataTable table) throws Exception {
        List<PayPlan> retVal = new List<PayPlan>();
        PayPlan payPlan = new PayPlan();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            payPlan = new PayPlan();
            payPlan.PayPlanNum = PIn.Long(table.Rows[i]["PayPlanNum"].ToString());
            payPlan.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            payPlan.Guarantor = PIn.Long(table.Rows[i]["Guarantor"].ToString());
            payPlan.PayPlanDate = PIn.Date(table.Rows[i]["PayPlanDate"].ToString());
            payPlan.APR = PIn.Double(table.Rows[i]["APR"].ToString());
            payPlan.Note = PIn.String(table.Rows[i]["Note"].ToString());
            payPlan.PlanNum = PIn.Long(table.Rows[i]["PlanNum"].ToString());
            payPlan.CompletedAmt = PIn.Double(table.Rows[i]["CompletedAmt"].ToString());
            payPlan.InsSubNum = PIn.Long(table.Rows[i]["InsSubNum"].ToString());
            retVal.Add(payPlan);
        }
        return retVal;
    }

    /**
    * Inserts one PayPlan into the database.  Returns the new priKey.
    */
    public static long insert(PayPlan payPlan) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            payPlan.PayPlanNum = DbHelper.GetNextOracleKey("payplan", "PayPlanNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(payPlan,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        payPlan.PayPlanNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(payPlan,false);
        } 
    }

    /**
    * Inserts one PayPlan into the database.  Provides option to use the existing priKey.
    */
    public static long insert(PayPlan payPlan, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            payPlan.PayPlanNum = ReplicationServers.GetKey("payplan", "PayPlanNum");
        }
         
        String command = "INSERT INTO payplan (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "PayPlanNum,";
        }
         
        command += "PatNum,Guarantor,PayPlanDate,APR,Note,PlanNum,CompletedAmt,InsSubNum) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(payPlan.PayPlanNum) + ",";
        }
         
        command += POut.Long(payPlan.PatNum) + "," + POut.Long(payPlan.Guarantor) + "," + POut.Date(payPlan.PayPlanDate) + "," + "'" + POut.Double(payPlan.APR) + "'," + "'" + POut.String(payPlan.Note) + "'," + POut.Long(payPlan.PlanNum) + "," + "'" + POut.Double(payPlan.CompletedAmt) + "'," + POut.Long(payPlan.InsSubNum) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            payPlan.PayPlanNum = Db.NonQ(command, true);
        } 
        return payPlan.PayPlanNum;
    }

    /**
    * Updates one PayPlan in the database.
    */
    public static void update(PayPlan payPlan) throws Exception {
        String command = "UPDATE payplan SET " + "PatNum      =  " + POut.Long(payPlan.PatNum) + ", " + "Guarantor   =  " + POut.Long(payPlan.Guarantor) + ", " + "PayPlanDate =  " + POut.Date(payPlan.PayPlanDate) + ", " + "APR         = '" + POut.Double(payPlan.APR) + "', " + "Note        = '" + POut.String(payPlan.Note) + "', " + "PlanNum     =  " + POut.Long(payPlan.PlanNum) + ", " + "CompletedAmt= '" + POut.Double(payPlan.CompletedAmt) + "', " + "InsSubNum   =  " + POut.Long(payPlan.InsSubNum) + " " + "WHERE PayPlanNum = " + POut.Long(payPlan.PayPlanNum);
        Db.NonQ(command);
    }

    /**
    * Updates one PayPlan in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(PayPlan payPlan, PayPlan oldPayPlan) throws Exception {
        String command = "";
        if (payPlan.PatNum != oldPayPlan.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(payPlan.PatNum) + "";
        }
         
        if (payPlan.Guarantor != oldPayPlan.Guarantor)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Guarantor = " + POut.Long(payPlan.Guarantor) + "";
        }
         
        if (payPlan.PayPlanDate != oldPayPlan.PayPlanDate)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PayPlanDate = " + POut.Date(payPlan.PayPlanDate) + "";
        }
         
        if (payPlan.APR != oldPayPlan.APR)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "APR = '" + POut.Double(payPlan.APR) + "'";
        }
         
        if (payPlan.Note != oldPayPlan.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(payPlan.Note) + "'";
        }
         
        if (payPlan.PlanNum != oldPayPlan.PlanNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PlanNum = " + POut.Long(payPlan.PlanNum) + "";
        }
         
        if (payPlan.CompletedAmt != oldPayPlan.CompletedAmt)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CompletedAmt = '" + POut.Double(payPlan.CompletedAmt) + "'";
        }
         
        if (payPlan.InsSubNum != oldPayPlan.InsSubNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "InsSubNum = " + POut.Long(payPlan.InsSubNum) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE payplan SET " + command + " WHERE PayPlanNum = " + POut.Long(payPlan.PayPlanNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one PayPlan from the database.
    */
    public static void delete(long payPlanNum) throws Exception {
        String command = "DELETE FROM payplan " + "WHERE PayPlanNum = " + POut.Long(payPlanNum);
        Db.NonQ(command);
    }

}


