//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:58 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EhrAptObsCrud   
{
    /**
    * Gets one EhrAptObs object from the database using the primary key.  Returns null if not found.
    */
    public static EhrAptObs selectOne(long ehrAptObsNum) throws Exception {
        String command = "SELECT * FROM ehraptobs " + "WHERE EhrAptObsNum = " + POut.Long(ehrAptObsNum);
        List<EhrAptObs> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one EhrAptObs object from the database using a query.
    */
    public static EhrAptObs selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrAptObs> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of EhrAptObs objects from the database using a query.
    */
    public static List<EhrAptObs> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrAptObs> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<EhrAptObs> tableToList(DataTable table) throws Exception {
        List<EhrAptObs> retVal = new List<EhrAptObs>();
        EhrAptObs ehrAptObs = new EhrAptObs();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            ehrAptObs = new EhrAptObs();
            ehrAptObs.EhrAptObsNum = PIn.Long(table.Rows[i]["EhrAptObsNum"].ToString());
            ehrAptObs.AptNum = PIn.Long(table.Rows[i]["AptNum"].ToString());
            ehrAptObs.IdentifyingCode = (EhrAptObsIdentifier)PIn.Int(table.Rows[i]["IdentifyingCode"].ToString());
            ehrAptObs.ValType = (EhrAptObsType)PIn.Int(table.Rows[i]["ValType"].ToString());
            ehrAptObs.ValReported = PIn.String(table.Rows[i]["ValReported"].ToString());
            ehrAptObs.UcumCode = PIn.String(table.Rows[i]["UcumCode"].ToString());
            ehrAptObs.ValCodeSystem = PIn.String(table.Rows[i]["ValCodeSystem"].ToString());
            retVal.Add(ehrAptObs);
        }
        return retVal;
    }

    /**
    * Inserts one EhrAptObs into the database.  Returns the new priKey.
    */
    public static long insert(EhrAptObs ehrAptObs) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            ehrAptObs.EhrAptObsNum = DbHelper.GetNextOracleKey("ehraptobs", "EhrAptObsNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(ehrAptObs,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        ehrAptObs.EhrAptObsNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(ehrAptObs,false);
        } 
    }

    /**
    * Inserts one EhrAptObs into the database.  Provides option to use the existing priKey.
    */
    public static long insert(EhrAptObs ehrAptObs, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            ehrAptObs.EhrAptObsNum = ReplicationServers.GetKey("ehraptobs", "EhrAptObsNum");
        }
         
        String command = "INSERT INTO ehraptobs (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "EhrAptObsNum,";
        }
         
        command += "AptNum,IdentifyingCode,ValType,ValReported,UcumCode,ValCodeSystem) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(ehrAptObs.EhrAptObsNum) + ",";
        }
         
        command += POut.Long(ehrAptObs.AptNum) + "," + POut.Int((int)ehrAptObs.IdentifyingCode) + "," + POut.Int((int)ehrAptObs.ValType) + "," + "'" + POut.String(ehrAptObs.ValReported) + "'," + "'" + POut.String(ehrAptObs.UcumCode) + "'," + "'" + POut.String(ehrAptObs.ValCodeSystem) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            ehrAptObs.EhrAptObsNum = Db.NonQ(command, true);
        } 
        return ehrAptObs.EhrAptObsNum;
    }

    /**
    * Updates one EhrAptObs in the database.
    */
    public static void update(EhrAptObs ehrAptObs) throws Exception {
        String command = "UPDATE ehraptobs SET " + "AptNum         =  " + POut.Long(ehrAptObs.AptNum) + ", " + "IdentifyingCode=  " + POut.Int((int)ehrAptObs.IdentifyingCode) + ", " + "ValType        =  " + POut.Int((int)ehrAptObs.ValType) + ", " + "ValReported    = '" + POut.String(ehrAptObs.ValReported) + "', " + "UcumCode       = '" + POut.String(ehrAptObs.UcumCode) + "', " + "ValCodeSystem  = '" + POut.String(ehrAptObs.ValCodeSystem) + "' " + "WHERE EhrAptObsNum = " + POut.Long(ehrAptObs.EhrAptObsNum);
        Db.NonQ(command);
    }

    /**
    * Updates one EhrAptObs in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(EhrAptObs ehrAptObs, EhrAptObs oldEhrAptObs) throws Exception {
        String command = "";
        if (ehrAptObs.AptNum != oldEhrAptObs.AptNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AptNum = " + POut.Long(ehrAptObs.AptNum) + "";
        }
         
        if (ehrAptObs.IdentifyingCode != oldEhrAptObs.IdentifyingCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IdentifyingCode = " + POut.Int((int)ehrAptObs.IdentifyingCode) + "";
        }
         
        if (ehrAptObs.ValType != oldEhrAptObs.ValType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ValType = " + POut.Int((int)ehrAptObs.ValType) + "";
        }
         
        if (ehrAptObs.ValReported != oldEhrAptObs.ValReported)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ValReported = '" + POut.String(ehrAptObs.ValReported) + "'";
        }
         
        if (ehrAptObs.UcumCode != oldEhrAptObs.UcumCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UcumCode = '" + POut.String(ehrAptObs.UcumCode) + "'";
        }
         
        if (ehrAptObs.ValCodeSystem != oldEhrAptObs.ValCodeSystem)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ValCodeSystem = '" + POut.String(ehrAptObs.ValCodeSystem) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE ehraptobs SET " + command + " WHERE EhrAptObsNum = " + POut.Long(ehrAptObs.EhrAptObsNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one EhrAptObs from the database.
    */
    public static void delete(long ehrAptObsNum) throws Exception {
        String command = "DELETE FROM ehraptobs " + "WHERE EhrAptObsNum = " + POut.Long(ehrAptObsNum);
        Db.NonQ(command);
    }

}


