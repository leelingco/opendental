//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:00 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EmailMessageCrud   
{
    /**
    * Gets one EmailMessage object from the database using the primary key.  Returns null if not found.
    */
    public static EmailMessage selectOne(long emailMessageNum) throws Exception {
        String command = "SELECT * FROM emailmessage " + "WHERE EmailMessageNum = " + POut.Long(emailMessageNum);
        List<EmailMessage> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one EmailMessage object from the database using a query.
    */
    public static EmailMessage selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EmailMessage> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of EmailMessage objects from the database using a query.
    */
    public static List<EmailMessage> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EmailMessage> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<EmailMessage> tableToList(DataTable table) throws Exception {
        List<EmailMessage> retVal = new List<EmailMessage>();
        EmailMessage emailMessage = new EmailMessage();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            emailMessage = new EmailMessage();
            emailMessage.EmailMessageNum = PIn.Long(table.Rows[i]["EmailMessageNum"].ToString());
            emailMessage.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            emailMessage.ToAddress = PIn.String(table.Rows[i]["ToAddress"].ToString());
            emailMessage.FromAddress = PIn.String(table.Rows[i]["FromAddress"].ToString());
            emailMessage.Subject = PIn.String(table.Rows[i]["Subject"].ToString());
            emailMessage.BodyText = PIn.String(table.Rows[i]["BodyText"].ToString());
            emailMessage.MsgDateTime = PIn.DateT(table.Rows[i]["MsgDateTime"].ToString());
            emailMessage.SentOrReceived = (EmailSentOrReceived)PIn.Int(table.Rows[i]["SentOrReceived"].ToString());
            emailMessage.RecipientAddress = PIn.String(table.Rows[i]["RecipientAddress"].ToString());
            emailMessage.RawEmailIn = PIn.String(table.Rows[i]["RawEmailIn"].ToString());
            emailMessage.ProvNumWebMail = PIn.Long(table.Rows[i]["ProvNumWebMail"].ToString());
            emailMessage.PatNumSubj = PIn.Long(table.Rows[i]["PatNumSubj"].ToString());
            retVal.Add(emailMessage);
        }
        return retVal;
    }

    /**
    * Inserts one EmailMessage into the database.  Returns the new priKey.
    */
    public static long insert(EmailMessage emailMessage) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            emailMessage.EmailMessageNum = DbHelper.GetNextOracleKey("emailmessage", "EmailMessageNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(emailMessage,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        emailMessage.EmailMessageNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(emailMessage,false);
        } 
    }

    /**
    * Inserts one EmailMessage into the database.  Provides option to use the existing priKey.
    */
    public static long insert(EmailMessage emailMessage, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            emailMessage.EmailMessageNum = ReplicationServers.GetKey("emailmessage", "EmailMessageNum");
        }
         
        String command = "INSERT INTO emailmessage (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "EmailMessageNum,";
        }
         
        command += "PatNum,ToAddress,FromAddress,Subject,BodyText,MsgDateTime,SentOrReceived,RecipientAddress,RawEmailIn,ProvNumWebMail,PatNumSubj) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(emailMessage.EmailMessageNum) + ",";
        }
         
        command += POut.Long(emailMessage.PatNum) + "," + "'" + POut.String(emailMessage.ToAddress) + "'," + "'" + POut.String(emailMessage.FromAddress) + "'," + "'" + POut.String(emailMessage.Subject) + "'," + DbHelper.ParamChar + "paramBodyText," + POut.DateT(emailMessage.MsgDateTime) + "," + POut.Int((int)emailMessage.SentOrReceived) + "," + "'" + POut.String(emailMessage.RecipientAddress) + "'," + "'" + POut.String(emailMessage.RawEmailIn) + "'," + POut.Long(emailMessage.ProvNumWebMail) + "," + POut.Long(emailMessage.PatNumSubj) + ")";
        if (emailMessage.BodyText == null)
        {
            emailMessage.BodyText = "";
        }
         
        OdSqlParameter paramBodyText = new OdSqlParameter("paramBodyText", OdDbType.Text, emailMessage.BodyText);
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command, paramBodyText);
        }
        else
        {
            emailMessage.EmailMessageNum = Db.NonQ(command, true, paramBodyText);
        } 
        return emailMessage.EmailMessageNum;
    }

    /**
    * Updates one EmailMessage in the database.
    */
    public static void update(EmailMessage emailMessage) throws Exception {
        String command = "UPDATE emailmessage SET " + "PatNum          =  " + POut.Long(emailMessage.PatNum) + ", " + "ToAddress       = '" + POut.String(emailMessage.ToAddress) + "', " + "FromAddress     = '" + POut.String(emailMessage.FromAddress) + "', " + "Subject         = '" + POut.String(emailMessage.Subject) + "', " + "BodyText        =  " + DbHelper.ParamChar + "paramBodyText, " + "MsgDateTime     =  " + POut.DateT(emailMessage.MsgDateTime) + ", " + "SentOrReceived  =  " + POut.Int((int)emailMessage.SentOrReceived) + ", " + "RecipientAddress= '" + POut.String(emailMessage.RecipientAddress) + "', " + "RawEmailIn      = '" + POut.String(emailMessage.RawEmailIn) + "', " + "ProvNumWebMail  =  " + POut.Long(emailMessage.ProvNumWebMail) + ", " + "PatNumSubj      =  " + POut.Long(emailMessage.PatNumSubj) + " " + "WHERE EmailMessageNum = " + POut.Long(emailMessage.EmailMessageNum);
        if (emailMessage.BodyText == null)
        {
            emailMessage.BodyText = "";
        }
         
        OdSqlParameter paramBodyText = new OdSqlParameter("paramBodyText", OdDbType.Text, emailMessage.BodyText);
        Db.NonQ(command, paramBodyText);
    }

    /**
    * Updates one EmailMessage in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(EmailMessage emailMessage, EmailMessage oldEmailMessage) throws Exception {
        String command = "";
        if (emailMessage.PatNum != oldEmailMessage.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(emailMessage.PatNum) + "";
        }
         
        if (emailMessage.ToAddress != oldEmailMessage.ToAddress)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ToAddress = '" + POut.String(emailMessage.ToAddress) + "'";
        }
         
        if (emailMessage.FromAddress != oldEmailMessage.FromAddress)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FromAddress = '" + POut.String(emailMessage.FromAddress) + "'";
        }
         
        if (emailMessage.Subject != oldEmailMessage.Subject)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Subject = '" + POut.String(emailMessage.Subject) + "'";
        }
         
        if (emailMessage.BodyText != oldEmailMessage.BodyText)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "BodyText = " + DbHelper.ParamChar + "paramBodyText";
        }
         
        if (emailMessage.MsgDateTime != oldEmailMessage.MsgDateTime)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MsgDateTime = " + POut.DateT(emailMessage.MsgDateTime) + "";
        }
         
        if (emailMessage.SentOrReceived != oldEmailMessage.SentOrReceived)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SentOrReceived = " + POut.Int((int)emailMessage.SentOrReceived) + "";
        }
         
        if (emailMessage.RecipientAddress != oldEmailMessage.RecipientAddress)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RecipientAddress = '" + POut.String(emailMessage.RecipientAddress) + "'";
        }
         
        if (emailMessage.RawEmailIn != oldEmailMessage.RawEmailIn)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RawEmailIn = '" + POut.String(emailMessage.RawEmailIn) + "'";
        }
         
        if (emailMessage.ProvNumWebMail != oldEmailMessage.ProvNumWebMail)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvNumWebMail = " + POut.Long(emailMessage.ProvNumWebMail) + "";
        }
         
        if (emailMessage.PatNumSubj != oldEmailMessage.PatNumSubj)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNumSubj = " + POut.Long(emailMessage.PatNumSubj) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        if (emailMessage.BodyText == null)
        {
            emailMessage.BodyText = "";
        }
         
        OdSqlParameter paramBodyText = new OdSqlParameter("paramBodyText", OdDbType.Text, emailMessage.BodyText);
        command = "UPDATE emailmessage SET " + command + " WHERE EmailMessageNum = " + POut.Long(emailMessage.EmailMessageNum);
        Db.NonQ(command, paramBodyText);
    }

    /**
    * Deletes one EmailMessage from the database.
    */
    public static void delete(long emailMessageNum) throws Exception {
        String command = "DELETE FROM emailmessage " + "WHERE EmailMessageNum = " + POut.Long(emailMessageNum);
        Db.NonQ(command);
    }

}


