//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:03 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class PayorTypeCrud   
{
    /**
    * Gets one PayorType object from the database using the primary key.  Returns null if not found.
    */
    public static PayorType selectOne(long payorTypeNum) throws Exception {
        String command = "SELECT * FROM payortype " + "WHERE PayorTypeNum = " + POut.Long(payorTypeNum);
        List<PayorType> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one PayorType object from the database using a query.
    */
    public static PayorType selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PayorType> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of PayorType objects from the database using a query.
    */
    public static List<PayorType> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PayorType> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<PayorType> tableToList(DataTable table) throws Exception {
        List<PayorType> retVal = new List<PayorType>();
        PayorType payorType = new PayorType();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            payorType = new PayorType();
            payorType.PayorTypeNum = PIn.Long(table.Rows[i]["PayorTypeNum"].ToString());
            payorType.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            payorType.DateStart = PIn.Date(table.Rows[i]["DateStart"].ToString());
            payorType.SopCode = PIn.String(table.Rows[i]["SopCode"].ToString());
            payorType.Note = PIn.String(table.Rows[i]["Note"].ToString());
            retVal.Add(payorType);
        }
        return retVal;
    }

    /**
    * Inserts one PayorType into the database.  Returns the new priKey.
    */
    public static long insert(PayorType payorType) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            payorType.PayorTypeNum = DbHelper.GetNextOracleKey("payortype", "PayorTypeNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(payorType,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        payorType.PayorTypeNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(payorType,false);
        } 
    }

    /**
    * Inserts one PayorType into the database.  Provides option to use the existing priKey.
    */
    public static long insert(PayorType payorType, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            payorType.PayorTypeNum = ReplicationServers.GetKey("payortype", "PayorTypeNum");
        }
         
        String command = "INSERT INTO payortype (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "PayorTypeNum,";
        }
         
        command += "PatNum,DateStart,SopCode,Note) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(payorType.PayorTypeNum) + ",";
        }
         
        command += POut.Long(payorType.PatNum) + "," + POut.Date(payorType.DateStart) + "," + "'" + POut.String(payorType.SopCode) + "'," + "'" + POut.String(payorType.Note) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            payorType.PayorTypeNum = Db.NonQ(command, true);
        } 
        return payorType.PayorTypeNum;
    }

    /**
    * Updates one PayorType in the database.
    */
    public static void update(PayorType payorType) throws Exception {
        String command = "UPDATE payortype SET " + "PatNum      =  " + POut.Long(payorType.PatNum) + ", " + "DateStart   =  " + POut.Date(payorType.DateStart) + ", " + "SopCode     = '" + POut.String(payorType.SopCode) + "', " + "Note        = '" + POut.String(payorType.Note) + "' " + "WHERE PayorTypeNum = " + POut.Long(payorType.PayorTypeNum);
        Db.NonQ(command);
    }

    /**
    * Updates one PayorType in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(PayorType payorType, PayorType oldPayorType) throws Exception {
        String command = "";
        if (payorType.PatNum != oldPayorType.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(payorType.PatNum) + "";
        }
         
        if (payorType.DateStart != oldPayorType.DateStart)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateStart = " + POut.Date(payorType.DateStart) + "";
        }
         
        if (payorType.SopCode != oldPayorType.SopCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SopCode = '" + POut.String(payorType.SopCode) + "'";
        }
         
        if (payorType.Note != oldPayorType.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(payorType.Note) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE payortype SET " + command + " WHERE PayorTypeNum = " + POut.Long(payorType.PayorTypeNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one PayorType from the database.
    */
    public static void delete(long payorTypeNum) throws Exception {
        String command = "DELETE FROM payortype " + "WHERE PayorTypeNum = " + POut.Long(payorTypeNum);
        Db.NonQ(command);
    }

}


