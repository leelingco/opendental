//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:09 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class WikiPageHistCrud   
{
    /**
    * Gets one WikiPageHist object from the database using the primary key.  Returns null if not found.
    */
    public static WikiPageHist selectOne(long wikiPageNum) throws Exception {
        String command = "SELECT * FROM wikipagehist " + "WHERE WikiPageNum = " + POut.Long(wikiPageNum);
        List<WikiPageHist> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one WikiPageHist object from the database using a query.
    */
    public static WikiPageHist selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<WikiPageHist> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of WikiPageHist objects from the database using a query.
    */
    public static List<WikiPageHist> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<WikiPageHist> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<WikiPageHist> tableToList(DataTable table) throws Exception {
        List<WikiPageHist> retVal = new List<WikiPageHist>();
        WikiPageHist wikiPageHist = new WikiPageHist();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            wikiPageHist = new WikiPageHist();
            wikiPageHist.WikiPageNum = PIn.Long(table.Rows[i]["WikiPageNum"].ToString());
            wikiPageHist.UserNum = PIn.Long(table.Rows[i]["UserNum"].ToString());
            wikiPageHist.PageTitle = PIn.String(table.Rows[i]["PageTitle"].ToString());
            wikiPageHist.PageContent = PIn.String(table.Rows[i]["PageContent"].ToString());
            wikiPageHist.DateTimeSaved = PIn.DateT(table.Rows[i]["DateTimeSaved"].ToString());
            wikiPageHist.IsDeleted = PIn.Bool(table.Rows[i]["IsDeleted"].ToString());
            retVal.Add(wikiPageHist);
        }
        return retVal;
    }

    /**
    * Inserts one WikiPageHist into the database.  Returns the new priKey.
    */
    public static long insert(WikiPageHist wikiPageHist) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            wikiPageHist.WikiPageNum = DbHelper.GetNextOracleKey("wikipagehist", "WikiPageNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(wikiPageHist,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        wikiPageHist.WikiPageNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(wikiPageHist,false);
        } 
    }

    /**
    * Inserts one WikiPageHist into the database.  Provides option to use the existing priKey.
    */
    public static long insert(WikiPageHist wikiPageHist, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            wikiPageHist.WikiPageNum = ReplicationServers.GetKey("wikipagehist", "WikiPageNum");
        }
         
        String command = "INSERT INTO wikipagehist (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "WikiPageNum,";
        }
         
        command += "UserNum,PageTitle,PageContent,DateTimeSaved,IsDeleted) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(wikiPageHist.WikiPageNum) + ",";
        }
         
        command += POut.Long(wikiPageHist.UserNum) + "," + "'" + POut.String(wikiPageHist.PageTitle) + "'," + "'" + POut.String(wikiPageHist.PageContent) + "'," + POut.DateT(wikiPageHist.DateTimeSaved) + "," + POut.Bool(wikiPageHist.IsDeleted) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            wikiPageHist.WikiPageNum = Db.NonQ(command, true);
        } 
        return wikiPageHist.WikiPageNum;
    }

    /**
    * Updates one WikiPageHist in the database.
    */
    public static void update(WikiPageHist wikiPageHist) throws Exception {
        String command = "UPDATE wikipagehist SET " + "UserNum      =  " + POut.Long(wikiPageHist.UserNum) + ", " + "PageTitle    = '" + POut.String(wikiPageHist.PageTitle) + "', " + "PageContent  = '" + POut.String(wikiPageHist.PageContent) + "', " + "DateTimeSaved=  " + POut.DateT(wikiPageHist.DateTimeSaved) + ", " + "IsDeleted    =  " + POut.Bool(wikiPageHist.IsDeleted) + " " + "WHERE WikiPageNum = " + POut.Long(wikiPageHist.WikiPageNum);
        Db.NonQ(command);
    }

    /**
    * Updates one WikiPageHist in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(WikiPageHist wikiPageHist, WikiPageHist oldWikiPageHist) throws Exception {
        String command = "";
        if (wikiPageHist.UserNum != oldWikiPageHist.UserNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UserNum = " + POut.Long(wikiPageHist.UserNum) + "";
        }
         
        if (wikiPageHist.PageTitle != oldWikiPageHist.PageTitle)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PageTitle = '" + POut.String(wikiPageHist.PageTitle) + "'";
        }
         
        if (wikiPageHist.PageContent != oldWikiPageHist.PageContent)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PageContent = '" + POut.String(wikiPageHist.PageContent) + "'";
        }
         
        if (wikiPageHist.DateTimeSaved != oldWikiPageHist.DateTimeSaved)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTimeSaved = " + POut.DateT(wikiPageHist.DateTimeSaved) + "";
        }
         
        if (wikiPageHist.IsDeleted != oldWikiPageHist.IsDeleted)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsDeleted = " + POut.Bool(wikiPageHist.IsDeleted) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE wikipagehist SET " + command + " WHERE WikiPageNum = " + POut.Long(wikiPageHist.WikiPageNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one WikiPageHist from the database.
    */
    public static void delete(long wikiPageNum) throws Exception {
        String command = "DELETE FROM wikipagehist " + "WHERE WikiPageNum = " + POut.Long(wikiPageNum);
        Db.NonQ(command);
    }

}


