//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:55 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ApptFieldCrud   
{
    /**
    * Gets one ApptField object from the database using the primary key.  Returns null if not found.
    */
    public static ApptField selectOne(long apptFieldNum) throws Exception {
        String command = "SELECT * FROM apptfield " + "WHERE ApptFieldNum = " + POut.Long(apptFieldNum);
        List<ApptField> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ApptField object from the database using a query.
    */
    public static ApptField selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ApptField> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ApptField objects from the database using a query.
    */
    public static List<ApptField> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ApptField> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ApptField> tableToList(DataTable table) throws Exception {
        List<ApptField> retVal = new List<ApptField>();
        ApptField apptField = new ApptField();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            apptField = new ApptField();
            apptField.ApptFieldNum = PIn.Long(table.Rows[i]["ApptFieldNum"].ToString());
            apptField.AptNum = PIn.Long(table.Rows[i]["AptNum"].ToString());
            apptField.FieldName = PIn.String(table.Rows[i]["FieldName"].ToString());
            apptField.FieldValue = PIn.String(table.Rows[i]["FieldValue"].ToString());
            retVal.Add(apptField);
        }
        return retVal;
    }

    /**
    * Inserts one ApptField into the database.  Returns the new priKey.
    */
    public static long insert(ApptField apptField) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            apptField.ApptFieldNum = DbHelper.GetNextOracleKey("apptfield", "ApptFieldNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(apptField,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        apptField.ApptFieldNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(apptField,false);
        } 
    }

    /**
    * Inserts one ApptField into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ApptField apptField, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            apptField.ApptFieldNum = ReplicationServers.GetKey("apptfield", "ApptFieldNum");
        }
         
        String command = "INSERT INTO apptfield (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ApptFieldNum,";
        }
         
        command += "AptNum,FieldName,FieldValue) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(apptField.ApptFieldNum) + ",";
        }
         
        command += POut.Long(apptField.AptNum) + "," + "'" + POut.String(apptField.FieldName) + "'," + "'" + POut.String(apptField.FieldValue) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            apptField.ApptFieldNum = Db.NonQ(command, true);
        } 
        return apptField.ApptFieldNum;
    }

    /**
    * Updates one ApptField in the database.
    */
    public static void update(ApptField apptField) throws Exception {
        String command = "UPDATE apptfield SET " + "AptNum      =  " + POut.Long(apptField.AptNum) + ", " + "FieldName   = '" + POut.String(apptField.FieldName) + "', " + "FieldValue  = '" + POut.String(apptField.FieldValue) + "' " + "WHERE ApptFieldNum = " + POut.Long(apptField.ApptFieldNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ApptField in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ApptField apptField, ApptField oldApptField) throws Exception {
        String command = "";
        if (apptField.AptNum != oldApptField.AptNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AptNum = " + POut.Long(apptField.AptNum) + "";
        }
         
        if (apptField.FieldName != oldApptField.FieldName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FieldName = '" + POut.String(apptField.FieldName) + "'";
        }
         
        if (apptField.FieldValue != oldApptField.FieldValue)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FieldValue = '" + POut.String(apptField.FieldValue) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE apptfield SET " + command + " WHERE ApptFieldNum = " + POut.Long(apptField.ApptFieldNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ApptField from the database.
    */
    public static void delete(long apptFieldNum) throws Exception {
        String command = "DELETE FROM apptfield " + "WHERE ApptFieldNum = " + POut.Long(apptFieldNum);
        Db.NonQ(command);
    }

}


