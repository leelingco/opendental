//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:02 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class LoincCrud   
{
    /**
    * Gets one Loinc object from the database using the primary key.  Returns null if not found.
    */
    public static Loinc selectOne(long loincNum) throws Exception {
        String command = "SELECT * FROM loinc " + "WHERE LoincNum = " + POut.Long(loincNum);
        List<Loinc> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Loinc object from the database using a query.
    */
    public static Loinc selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Loinc> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Loinc objects from the database using a query.
    */
    public static List<Loinc> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Loinc> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Loinc> tableToList(DataTable table) throws Exception {
        List<Loinc> retVal = new List<Loinc>();
        Loinc loinc = new Loinc();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            loinc = new Loinc();
            loinc.LoincNum = PIn.Long(table.Rows[i]["LoincNum"].ToString());
            loinc.LoincCode = PIn.String(table.Rows[i]["LoincCode"].ToString());
            loinc.Component = PIn.String(table.Rows[i]["Component"].ToString());
            loinc.PropertyObserved = PIn.String(table.Rows[i]["PropertyObserved"].ToString());
            loinc.TimeAspct = PIn.String(table.Rows[i]["TimeAspct"].ToString());
            loinc.SystemMeasured = PIn.String(table.Rows[i]["SystemMeasured"].ToString());
            loinc.ScaleType = PIn.String(table.Rows[i]["ScaleType"].ToString());
            loinc.MethodType = PIn.String(table.Rows[i]["MethodType"].ToString());
            loinc.StatusOfCode = PIn.String(table.Rows[i]["StatusOfCode"].ToString());
            loinc.NameShort = PIn.String(table.Rows[i]["NameShort"].ToString());
            loinc.ClassType = PIn.String(table.Rows[i]["ClassType"].ToString());
            loinc.UnitsRequired = PIn.Bool(table.Rows[i]["UnitsRequired"].ToString());
            loinc.OrderObs = PIn.String(table.Rows[i]["OrderObs"].ToString());
            loinc.HL7FieldSubfieldID = PIn.String(table.Rows[i]["HL7FieldSubfieldID"].ToString());
            loinc.ExternalCopyrightNotice = PIn.String(table.Rows[i]["ExternalCopyrightNotice"].ToString());
            loinc.NameLongCommon = PIn.String(table.Rows[i]["NameLongCommon"].ToString());
            loinc.UnitsUCUM = PIn.String(table.Rows[i]["UnitsUCUM"].ToString());
            loinc.RankCommonTests = PIn.Int(table.Rows[i]["RankCommonTests"].ToString());
            loinc.RankCommonOrders = PIn.Int(table.Rows[i]["RankCommonOrders"].ToString());
            retVal.Add(loinc);
        }
        return retVal;
    }

    /**
    * Inserts one Loinc into the database.  Returns the new priKey.
    */
    public static long insert(Loinc loinc) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            loinc.LoincNum = DbHelper.GetNextOracleKey("loinc", "LoincNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(loinc,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        loinc.LoincNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(loinc,false);
        } 
    }

    /**
    * Inserts one Loinc into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Loinc loinc, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            loinc.LoincNum = ReplicationServers.GetKey("loinc", "LoincNum");
        }
         
        String command = "INSERT INTO loinc (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "LoincNum,";
        }
         
        command += "LoincCode,Component,PropertyObserved,TimeAspct,SystemMeasured,ScaleType,MethodType,StatusOfCode,NameShort,ClassType,UnitsRequired,OrderObs,HL7FieldSubfieldID,ExternalCopyrightNotice,NameLongCommon,UnitsUCUM,RankCommonTests,RankCommonOrders) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(loinc.LoincNum) + ",";
        }
         
        command += "'" + POut.String(loinc.LoincCode) + "'," + "'" + POut.String(loinc.Component) + "'," + "'" + POut.String(loinc.PropertyObserved) + "'," + "'" + POut.String(loinc.TimeAspct) + "'," + "'" + POut.String(loinc.SystemMeasured) + "'," + "'" + POut.String(loinc.ScaleType) + "'," + "'" + POut.String(loinc.MethodType) + "'," + "'" + POut.String(loinc.StatusOfCode) + "'," + "'" + POut.String(loinc.NameShort) + "'," + "'" + POut.String(loinc.ClassType) + "'," + POut.Bool(loinc.UnitsRequired) + "," + "'" + POut.String(loinc.OrderObs) + "'," + "'" + POut.String(loinc.HL7FieldSubfieldID) + "'," + "'" + POut.String(loinc.ExternalCopyrightNotice) + "'," + "'" + POut.String(loinc.NameLongCommon) + "'," + "'" + POut.String(loinc.UnitsUCUM) + "'," + POut.Int(loinc.RankCommonTests) + "," + POut.Int(loinc.RankCommonOrders) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            loinc.LoincNum = Db.NonQ(command, true);
        } 
        return loinc.LoincNum;
    }

    /**
    * Updates one Loinc in the database.
    */
    public static void update(Loinc loinc) throws Exception {
        String command = "UPDATE loinc SET " + "LoincCode              = '" + POut.String(loinc.LoincCode) + "', " + "Component              = '" + POut.String(loinc.Component) + "', " + "PropertyObserved       = '" + POut.String(loinc.PropertyObserved) + "', " + "TimeAspct              = '" + POut.String(loinc.TimeAspct) + "', " + "SystemMeasured         = '" + POut.String(loinc.SystemMeasured) + "', " + "ScaleType              = '" + POut.String(loinc.ScaleType) + "', " + "MethodType             = '" + POut.String(loinc.MethodType) + "', " + "StatusOfCode           = '" + POut.String(loinc.StatusOfCode) + "', " + "NameShort              = '" + POut.String(loinc.NameShort) + "', " + "ClassType              = '" + POut.String(loinc.ClassType) + "', " + "UnitsRequired          =  " + POut.Bool(loinc.UnitsRequired) + ", " + "OrderObs               = '" + POut.String(loinc.OrderObs) + "', " + "HL7FieldSubfieldID     = '" + POut.String(loinc.HL7FieldSubfieldID) + "', " + "ExternalCopyrightNotice= '" + POut.String(loinc.ExternalCopyrightNotice) + "', " + "NameLongCommon         = '" + POut.String(loinc.NameLongCommon) + "', " + "UnitsUCUM              = '" + POut.String(loinc.UnitsUCUM) + "', " + "RankCommonTests        =  " + POut.Int(loinc.RankCommonTests) + ", " + "RankCommonOrders       =  " + POut.Int(loinc.RankCommonOrders) + " " + "WHERE LoincNum = " + POut.Long(loinc.LoincNum);
        Db.NonQ(command);
    }

    /**
    * Updates one Loinc in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Loinc loinc, Loinc oldLoinc) throws Exception {
        String command = "";
        if (loinc.LoincCode != oldLoinc.LoincCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "LoincCode = '" + POut.String(loinc.LoincCode) + "'";
        }
         
        if (loinc.Component != oldLoinc.Component)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Component = '" + POut.String(loinc.Component) + "'";
        }
         
        if (loinc.PropertyObserved != oldLoinc.PropertyObserved)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PropertyObserved = '" + POut.String(loinc.PropertyObserved) + "'";
        }
         
        if (loinc.TimeAspct != oldLoinc.TimeAspct)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "TimeAspct = '" + POut.String(loinc.TimeAspct) + "'";
        }
         
        if (loinc.SystemMeasured != oldLoinc.SystemMeasured)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SystemMeasured = '" + POut.String(loinc.SystemMeasured) + "'";
        }
         
        if (loinc.ScaleType != oldLoinc.ScaleType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ScaleType = '" + POut.String(loinc.ScaleType) + "'";
        }
         
        if (loinc.MethodType != oldLoinc.MethodType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MethodType = '" + POut.String(loinc.MethodType) + "'";
        }
         
        if (loinc.StatusOfCode != oldLoinc.StatusOfCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "StatusOfCode = '" + POut.String(loinc.StatusOfCode) + "'";
        }
         
        if (loinc.NameShort != oldLoinc.NameShort)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "NameShort = '" + POut.String(loinc.NameShort) + "'";
        }
         
        if (loinc.ClassType != oldLoinc.ClassType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClassType = '" + POut.String(loinc.ClassType) + "'";
        }
         
        if (loinc.UnitsRequired != oldLoinc.UnitsRequired)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UnitsRequired = " + POut.Bool(loinc.UnitsRequired) + "";
        }
         
        if (loinc.OrderObs != oldLoinc.OrderObs)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "OrderObs = '" + POut.String(loinc.OrderObs) + "'";
        }
         
        if (loinc.HL7FieldSubfieldID != oldLoinc.HL7FieldSubfieldID)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "HL7FieldSubfieldID = '" + POut.String(loinc.HL7FieldSubfieldID) + "'";
        }
         
        if (loinc.ExternalCopyrightNotice != oldLoinc.ExternalCopyrightNotice)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ExternalCopyrightNotice = '" + POut.String(loinc.ExternalCopyrightNotice) + "'";
        }
         
        if (loinc.NameLongCommon != oldLoinc.NameLongCommon)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "NameLongCommon = '" + POut.String(loinc.NameLongCommon) + "'";
        }
         
        if (loinc.UnitsUCUM != oldLoinc.UnitsUCUM)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UnitsUCUM = '" + POut.String(loinc.UnitsUCUM) + "'";
        }
         
        if (loinc.RankCommonTests != oldLoinc.RankCommonTests)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RankCommonTests = " + POut.Int(loinc.RankCommonTests) + "";
        }
         
        if (loinc.RankCommonOrders != oldLoinc.RankCommonOrders)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RankCommonOrders = " + POut.Int(loinc.RankCommonOrders) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE loinc SET " + command + " WHERE LoincNum = " + POut.Long(loinc.LoincNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one Loinc from the database.
    */
    public static void delete(long loincNum) throws Exception {
        String command = "DELETE FROM loinc " + "WHERE LoincNum = " + POut.Long(loincNum);
        Db.NonQ(command);
    }

}


