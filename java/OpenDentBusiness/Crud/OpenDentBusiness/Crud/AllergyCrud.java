//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:55 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class AllergyCrud   
{
    /**
    * Gets one Allergy object from the database using the primary key.  Returns null if not found.
    */
    public static Allergy selectOne(long allergyNum) throws Exception {
        String command = "SELECT * FROM allergy " + "WHERE AllergyNum = " + POut.Long(allergyNum);
        List<Allergy> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Allergy object from the database using a query.
    */
    public static Allergy selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Allergy> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Allergy objects from the database using a query.
    */
    public static List<Allergy> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Allergy> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Allergy> tableToList(DataTable table) throws Exception {
        List<Allergy> retVal = new List<Allergy>();
        Allergy allergy = new Allergy();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            allergy = new Allergy();
            allergy.AllergyNum = PIn.Long(table.Rows[i]["AllergyNum"].ToString());
            allergy.AllergyDefNum = PIn.Long(table.Rows[i]["AllergyDefNum"].ToString());
            allergy.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            allergy.Reaction = PIn.String(table.Rows[i]["Reaction"].ToString());
            allergy.StatusIsActive = PIn.Bool(table.Rows[i]["StatusIsActive"].ToString());
            allergy.DateTStamp = PIn.DateT(table.Rows[i]["DateTStamp"].ToString());
            allergy.DateAdverseReaction = PIn.Date(table.Rows[i]["DateAdverseReaction"].ToString());
            allergy.SnomedReaction = PIn.String(table.Rows[i]["SnomedReaction"].ToString());
            retVal.Add(allergy);
        }
        return retVal;
    }

    /**
    * Inserts one Allergy into the database.  Returns the new priKey.
    */
    public static long insert(Allergy allergy) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            allergy.AllergyNum = DbHelper.GetNextOracleKey("allergy", "AllergyNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(allergy,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        allergy.AllergyNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(allergy,false);
        } 
    }

    /**
    * Inserts one Allergy into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Allergy allergy, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            allergy.AllergyNum = ReplicationServers.GetKey("allergy", "AllergyNum");
        }
         
        String command = "INSERT INTO allergy (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "AllergyNum,";
        }
         
        command += "AllergyDefNum,PatNum,Reaction,StatusIsActive,DateAdverseReaction,SnomedReaction) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(allergy.AllergyNum) + ",";
        }
         
        //DateTStamp can only be set by MySQL
        command += POut.Long(allergy.AllergyDefNum) + "," + POut.Long(allergy.PatNum) + "," + "'" + POut.String(allergy.Reaction) + "'," + POut.Bool(allergy.StatusIsActive) + "," + POut.Date(allergy.DateAdverseReaction) + "," + "'" + POut.String(allergy.SnomedReaction) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            allergy.AllergyNum = Db.NonQ(command, true);
        } 
        return allergy.AllergyNum;
    }

    /**
    * Updates one Allergy in the database.
    */
    public static void update(Allergy allergy) throws Exception {
        //DateTStamp can only be set by MySQL
        String command = "UPDATE allergy SET " + "AllergyDefNum      =  " + POut.Long(allergy.AllergyDefNum) + ", " + "PatNum             =  " + POut.Long(allergy.PatNum) + ", " + "Reaction           = '" + POut.String(allergy.Reaction) + "', " + "StatusIsActive     =  " + POut.Bool(allergy.StatusIsActive) + ", " + "DateAdverseReaction=  " + POut.Date(allergy.DateAdverseReaction) + ", " + "SnomedReaction     = '" + POut.String(allergy.SnomedReaction) + "' " + "WHERE AllergyNum = " + POut.Long(allergy.AllergyNum);
        Db.NonQ(command);
    }

    /**
    * Updates one Allergy in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Allergy allergy, Allergy oldAllergy) throws Exception {
        String command = "";
        if (allergy.AllergyDefNum != oldAllergy.AllergyDefNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AllergyDefNum = " + POut.Long(allergy.AllergyDefNum) + "";
        }
         
        if (allergy.PatNum != oldAllergy.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(allergy.PatNum) + "";
        }
         
        if (allergy.Reaction != oldAllergy.Reaction)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Reaction = '" + POut.String(allergy.Reaction) + "'";
        }
         
        if (allergy.StatusIsActive != oldAllergy.StatusIsActive)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "StatusIsActive = " + POut.Bool(allergy.StatusIsActive) + "";
        }
         
        //DateTStamp can only be set by MySQL
        if (allergy.DateAdverseReaction != oldAllergy.DateAdverseReaction)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateAdverseReaction = " + POut.Date(allergy.DateAdverseReaction) + "";
        }
         
        if (allergy.SnomedReaction != oldAllergy.SnomedReaction)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SnomedReaction = '" + POut.String(allergy.SnomedReaction) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE allergy SET " + command + " WHERE AllergyNum = " + POut.Long(allergy.AllergyNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one Allergy from the database.
    */
    public static void delete(long allergyNum) throws Exception {
        String command = "DELETE FROM allergy " + "WHERE AllergyNum = " + POut.Long(allergyNum);
        Db.NonQ(command);
    }

}


