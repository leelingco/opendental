//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:09 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class VaccineDefCrud   
{
    /**
    * Gets one VaccineDef object from the database using the primary key.  Returns null if not found.
    */
    public static VaccineDef selectOne(long vaccineDefNum) throws Exception {
        String command = "SELECT * FROM vaccinedef " + "WHERE VaccineDefNum = " + POut.Long(vaccineDefNum);
        List<VaccineDef> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one VaccineDef object from the database using a query.
    */
    public static VaccineDef selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<VaccineDef> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of VaccineDef objects from the database using a query.
    */
    public static List<VaccineDef> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<VaccineDef> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<VaccineDef> tableToList(DataTable table) throws Exception {
        List<VaccineDef> retVal = new List<VaccineDef>();
        VaccineDef vaccineDef = new VaccineDef();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            vaccineDef = new VaccineDef();
            vaccineDef.VaccineDefNum = PIn.Long(table.Rows[i]["VaccineDefNum"].ToString());
            vaccineDef.CVXCode = PIn.String(table.Rows[i]["CVXCode"].ToString());
            vaccineDef.VaccineName = PIn.String(table.Rows[i]["VaccineName"].ToString());
            vaccineDef.DrugManufacturerNum = PIn.Long(table.Rows[i]["DrugManufacturerNum"].ToString());
            retVal.Add(vaccineDef);
        }
        return retVal;
    }

    /**
    * Inserts one VaccineDef into the database.  Returns the new priKey.
    */
    public static long insert(VaccineDef vaccineDef) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            vaccineDef.VaccineDefNum = DbHelper.GetNextOracleKey("vaccinedef", "VaccineDefNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(vaccineDef,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        vaccineDef.VaccineDefNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(vaccineDef,false);
        } 
    }

    /**
    * Inserts one VaccineDef into the database.  Provides option to use the existing priKey.
    */
    public static long insert(VaccineDef vaccineDef, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            vaccineDef.VaccineDefNum = ReplicationServers.GetKey("vaccinedef", "VaccineDefNum");
        }
         
        String command = "INSERT INTO vaccinedef (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "VaccineDefNum,";
        }
         
        command += "CVXCode,VaccineName,DrugManufacturerNum) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(vaccineDef.VaccineDefNum) + ",";
        }
         
        command += "'" + POut.String(vaccineDef.CVXCode) + "'," + "'" + POut.String(vaccineDef.VaccineName) + "'," + POut.Long(vaccineDef.DrugManufacturerNum) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            vaccineDef.VaccineDefNum = Db.NonQ(command, true);
        } 
        return vaccineDef.VaccineDefNum;
    }

    /**
    * Updates one VaccineDef in the database.
    */
    public static void update(VaccineDef vaccineDef) throws Exception {
        String command = "UPDATE vaccinedef SET " + "CVXCode            = '" + POut.String(vaccineDef.CVXCode) + "', " + "VaccineName        = '" + POut.String(vaccineDef.VaccineName) + "', " + "DrugManufacturerNum=  " + POut.Long(vaccineDef.DrugManufacturerNum) + " " + "WHERE VaccineDefNum = " + POut.Long(vaccineDef.VaccineDefNum);
        Db.NonQ(command);
    }

    /**
    * Updates one VaccineDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(VaccineDef vaccineDef, VaccineDef oldVaccineDef) throws Exception {
        String command = "";
        if (vaccineDef.CVXCode != oldVaccineDef.CVXCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CVXCode = '" + POut.String(vaccineDef.CVXCode) + "'";
        }
         
        if (vaccineDef.VaccineName != oldVaccineDef.VaccineName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "VaccineName = '" + POut.String(vaccineDef.VaccineName) + "'";
        }
         
        if (vaccineDef.DrugManufacturerNum != oldVaccineDef.DrugManufacturerNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DrugManufacturerNum = " + POut.Long(vaccineDef.DrugManufacturerNum) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE vaccinedef SET " + command + " WHERE VaccineDefNum = " + POut.Long(vaccineDef.VaccineDefNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one VaccineDef from the database.
    */
    public static void delete(long vaccineDefNum) throws Exception {
        String command = "DELETE FROM vaccinedef " + "WHERE VaccineDefNum = " + POut.Long(vaccineDefNum);
        Db.NonQ(command);
    }

}


