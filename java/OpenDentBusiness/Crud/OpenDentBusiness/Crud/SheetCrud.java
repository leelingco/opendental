//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:07 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class SheetCrud   
{
    /**
    * Gets one Sheet object from the database using the primary key.  Returns null if not found.
    */
    public static Sheet selectOne(long sheetNum) throws Exception {
        String command = "SELECT * FROM sheet " + "WHERE SheetNum = " + POut.Long(sheetNum);
        List<Sheet> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Sheet object from the database using a query.
    */
    public static Sheet selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Sheet> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Sheet objects from the database using a query.
    */
    public static List<Sheet> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Sheet> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Sheet> tableToList(DataTable table) throws Exception {
        List<Sheet> retVal = new List<Sheet>();
        Sheet sheet = new Sheet();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            sheet = new Sheet();
            sheet.SheetNum = PIn.Long(table.Rows[i]["SheetNum"].ToString());
            sheet.SheetType = (SheetTypeEnum)PIn.Int(table.Rows[i]["SheetType"].ToString());
            sheet.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            sheet.DateTimeSheet = PIn.DateT(table.Rows[i]["DateTimeSheet"].ToString());
            sheet.FontSize = PIn.Float(table.Rows[i]["FontSize"].ToString());
            sheet.FontName = PIn.String(table.Rows[i]["FontName"].ToString());
            sheet.Width = PIn.Int(table.Rows[i]["Width"].ToString());
            sheet.Height = PIn.Int(table.Rows[i]["Height"].ToString());
            sheet.IsLandscape = PIn.Bool(table.Rows[i]["IsLandscape"].ToString());
            sheet.InternalNote = PIn.String(table.Rows[i]["InternalNote"].ToString());
            sheet.Description = PIn.String(table.Rows[i]["Description"].ToString());
            sheet.ShowInTerminal = PIn.Byte(table.Rows[i]["ShowInTerminal"].ToString());
            sheet.IsWebForm = PIn.Bool(table.Rows[i]["IsWebForm"].ToString());
            retVal.Add(sheet);
        }
        return retVal;
    }

    /**
    * Inserts one Sheet into the database.  Returns the new priKey.
    */
    public static long insert(Sheet sheet) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            sheet.SheetNum = DbHelper.GetNextOracleKey("sheet", "SheetNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(sheet,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        sheet.SheetNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(sheet,false);
        } 
    }

    /**
    * Inserts one Sheet into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Sheet sheet, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            sheet.SheetNum = ReplicationServers.GetKey("sheet", "SheetNum");
        }
         
        String command = "INSERT INTO sheet (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "SheetNum,";
        }
         
        command += "SheetType,PatNum,DateTimeSheet,FontSize,FontName,Width,Height,IsLandscape,InternalNote,Description,ShowInTerminal,IsWebForm) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(sheet.SheetNum) + ",";
        }
         
        command += POut.Int((int)sheet.SheetType) + "," + POut.Long(sheet.PatNum) + "," + POut.DateT(sheet.DateTimeSheet) + "," + POut.Float(sheet.FontSize) + "," + "'" + POut.String(sheet.FontName) + "'," + POut.Int(sheet.Width) + "," + POut.Int(sheet.Height) + "," + POut.Bool(sheet.IsLandscape) + "," + "'" + POut.String(sheet.InternalNote) + "'," + "'" + POut.String(sheet.Description) + "'," + POut.Byte(sheet.ShowInTerminal) + "," + POut.Bool(sheet.IsWebForm) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            sheet.SheetNum = Db.NonQ(command, true);
        } 
        return sheet.SheetNum;
    }

    /**
    * Updates one Sheet in the database.
    */
    public static void update(Sheet sheet) throws Exception {
        String command = "UPDATE sheet SET " + "SheetType     =  " + POut.Int((int)sheet.SheetType) + ", " + "PatNum        =  " + POut.Long(sheet.PatNum) + ", " + "DateTimeSheet =  " + POut.DateT(sheet.DateTimeSheet) + ", " + "FontSize      =  " + POut.Float(sheet.FontSize) + ", " + "FontName      = '" + POut.String(sheet.FontName) + "', " + "Width         =  " + POut.Int(sheet.Width) + ", " + "Height        =  " + POut.Int(sheet.Height) + ", " + "IsLandscape   =  " + POut.Bool(sheet.IsLandscape) + ", " + "InternalNote  = '" + POut.String(sheet.InternalNote) + "', " + "Description   = '" + POut.String(sheet.Description) + "', " + "ShowInTerminal=  " + POut.Byte(sheet.ShowInTerminal) + ", " + "IsWebForm     =  " + POut.Bool(sheet.IsWebForm) + " " + "WHERE SheetNum = " + POut.Long(sheet.SheetNum);
        Db.NonQ(command);
    }

    /**
    * Updates one Sheet in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Sheet sheet, Sheet oldSheet) throws Exception {
        String command = "";
        if (sheet.SheetType != oldSheet.SheetType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SheetType = " + POut.Int((int)sheet.SheetType) + "";
        }
         
        if (sheet.PatNum != oldSheet.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(sheet.PatNum) + "";
        }
         
        if (sheet.DateTimeSheet != oldSheet.DateTimeSheet)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTimeSheet = " + POut.DateT(sheet.DateTimeSheet) + "";
        }
         
        if (sheet.FontSize != oldSheet.FontSize)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FontSize = " + POut.Float(sheet.FontSize) + "";
        }
         
        if (sheet.FontName != oldSheet.FontName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FontName = '" + POut.String(sheet.FontName) + "'";
        }
         
        if (sheet.Width != oldSheet.Width)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Width = " + POut.Int(sheet.Width) + "";
        }
         
        if (sheet.Height != oldSheet.Height)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Height = " + POut.Int(sheet.Height) + "";
        }
         
        if (sheet.IsLandscape != oldSheet.IsLandscape)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsLandscape = " + POut.Bool(sheet.IsLandscape) + "";
        }
         
        if (sheet.InternalNote != oldSheet.InternalNote)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "InternalNote = '" + POut.String(sheet.InternalNote) + "'";
        }
         
        if (sheet.Description != oldSheet.Description)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.String(sheet.Description) + "'";
        }
         
        if (sheet.ShowInTerminal != oldSheet.ShowInTerminal)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ShowInTerminal = " + POut.Byte(sheet.ShowInTerminal) + "";
        }
         
        if (sheet.IsWebForm != oldSheet.IsWebForm)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsWebForm = " + POut.Bool(sheet.IsWebForm) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE sheet SET " + command + " WHERE SheetNum = " + POut.Long(sheet.SheetNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one Sheet from the database.
    */
    public static void delete(long sheetNum) throws Exception {
        String command = "DELETE FROM sheet " + "WHERE SheetNum = " + POut.Long(sheetNum);
        Db.NonQ(command);
    }

}


