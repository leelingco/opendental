//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:03 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class PatientRaceCrud   
{
    /**
    * Gets one PatientRace object from the database using the primary key.  Returns null if not found.
    */
    public static PatientRace selectOne(long patientRaceNum) throws Exception {
        String command = "SELECT * FROM patientrace " + "WHERE PatientRaceNum = " + POut.Long(patientRaceNum);
        List<PatientRace> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one PatientRace object from the database using a query.
    */
    public static PatientRace selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PatientRace> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of PatientRace objects from the database using a query.
    */
    public static List<PatientRace> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PatientRace> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<PatientRace> tableToList(DataTable table) throws Exception {
        List<PatientRace> retVal = new List<PatientRace>();
        PatientRace patientRace = new PatientRace();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            patientRace = new PatientRace();
            patientRace.PatientRaceNum = PIn.Long(table.Rows[i]["PatientRaceNum"].ToString());
            patientRace.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            patientRace.Race = (PatRace)PIn.Int(table.Rows[i]["Race"].ToString());
            patientRace.CdcrecCode = PIn.String(table.Rows[i]["CdcrecCode"].ToString());
            retVal.Add(patientRace);
        }
        return retVal;
    }

    /**
    * Inserts one PatientRace into the database.  Returns the new priKey.
    */
    public static long insert(PatientRace patientRace) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            patientRace.PatientRaceNum = DbHelper.GetNextOracleKey("patientrace", "PatientRaceNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(patientRace,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        patientRace.PatientRaceNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(patientRace,false);
        } 
    }

    /**
    * Inserts one PatientRace into the database.  Provides option to use the existing priKey.
    */
    public static long insert(PatientRace patientRace, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            patientRace.PatientRaceNum = ReplicationServers.GetKey("patientrace", "PatientRaceNum");
        }
         
        String command = "INSERT INTO patientrace (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "PatientRaceNum,";
        }
         
        command += "PatNum,Race,CdcrecCode) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(patientRace.PatientRaceNum) + ",";
        }
         
        command += POut.Long(patientRace.PatNum) + "," + POut.Int((int)patientRace.Race) + "," + "'" + POut.String(patientRace.CdcrecCode) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            patientRace.PatientRaceNum = Db.NonQ(command, true);
        } 
        return patientRace.PatientRaceNum;
    }

    /**
    * Updates one PatientRace in the database.
    */
    public static void update(PatientRace patientRace) throws Exception {
        String command = "UPDATE patientrace SET " + "PatNum        =  " + POut.Long(patientRace.PatNum) + ", " + "Race          =  " + POut.Int((int)patientRace.Race) + ", " + "CdcrecCode    = '" + POut.String(patientRace.CdcrecCode) + "' " + "WHERE PatientRaceNum = " + POut.Long(patientRace.PatientRaceNum);
        Db.NonQ(command);
    }

    /**
    * Updates one PatientRace in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(PatientRace patientRace, PatientRace oldPatientRace) throws Exception {
        String command = "";
        if (patientRace.PatNum != oldPatientRace.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(patientRace.PatNum) + "";
        }
         
        if (patientRace.Race != oldPatientRace.Race)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Race = " + POut.Int((int)patientRace.Race) + "";
        }
         
        if (patientRace.CdcrecCode != oldPatientRace.CdcrecCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CdcrecCode = '" + POut.String(patientRace.CdcrecCode) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE patientrace SET " + command + " WHERE PatientRaceNum = " + POut.Long(patientRace.PatientRaceNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one PatientRace from the database.
    */
    public static void delete(long patientRaceNum) throws Exception {
        String command = "DELETE FROM patientrace " + "WHERE PatientRaceNum = " + POut.Long(patientRaceNum);
        Db.NonQ(command);
    }

}


