//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:07 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ScreenPatCrud   
{
    /**
    * Gets one ScreenPat object from the database using the primary key.  Returns null if not found.
    */
    public static ScreenPat selectOne(long screenPatNum) throws Exception {
        String command = "SELECT * FROM screenpat " + "WHERE ScreenPatNum = " + POut.Long(screenPatNum);
        List<ScreenPat> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ScreenPat object from the database using a query.
    */
    public static ScreenPat selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ScreenPat> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ScreenPat objects from the database using a query.
    */
    public static List<ScreenPat> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ScreenPat> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ScreenPat> tableToList(DataTable table) throws Exception {
        List<ScreenPat> retVal = new List<ScreenPat>();
        ScreenPat screenPat = new ScreenPat();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            screenPat = new ScreenPat();
            screenPat.ScreenPatNum = PIn.Long(table.Rows[i]["ScreenPatNum"].ToString());
            screenPat.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            screenPat.ScreenGroupNum = PIn.Long(table.Rows[i]["ScreenGroupNum"].ToString());
            screenPat.SheetNum = PIn.Long(table.Rows[i]["SheetNum"].ToString());
            retVal.Add(screenPat);
        }
        return retVal;
    }

    /**
    * Inserts one ScreenPat into the database.  Returns the new priKey.
    */
    public static long insert(ScreenPat screenPat) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            screenPat.ScreenPatNum = DbHelper.GetNextOracleKey("screenpat", "ScreenPatNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(screenPat,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        screenPat.ScreenPatNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(screenPat,false);
        } 
    }

    /**
    * Inserts one ScreenPat into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ScreenPat screenPat, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            screenPat.ScreenPatNum = ReplicationServers.GetKey("screenpat", "ScreenPatNum");
        }
         
        String command = "INSERT INTO screenpat (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ScreenPatNum,";
        }
         
        command += "PatNum,ScreenGroupNum,SheetNum) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(screenPat.ScreenPatNum) + ",";
        }
         
        command += POut.Long(screenPat.PatNum) + "," + POut.Long(screenPat.ScreenGroupNum) + "," + POut.Long(screenPat.SheetNum) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            screenPat.ScreenPatNum = Db.NonQ(command, true);
        } 
        return screenPat.ScreenPatNum;
    }

    /**
    * Updates one ScreenPat in the database.
    */
    public static void update(ScreenPat screenPat) throws Exception {
        String command = "UPDATE screenpat SET " + "PatNum        =  " + POut.Long(screenPat.PatNum) + ", " + "ScreenGroupNum=  " + POut.Long(screenPat.ScreenGroupNum) + ", " + "SheetNum      =  " + POut.Long(screenPat.SheetNum) + " " + "WHERE ScreenPatNum = " + POut.Long(screenPat.ScreenPatNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ScreenPat in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ScreenPat screenPat, ScreenPat oldScreenPat) throws Exception {
        String command = "";
        if (screenPat.PatNum != oldScreenPat.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(screenPat.PatNum) + "";
        }
         
        if (screenPat.ScreenGroupNum != oldScreenPat.ScreenGroupNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ScreenGroupNum = " + POut.Long(screenPat.ScreenGroupNum) + "";
        }
         
        if (screenPat.SheetNum != oldScreenPat.SheetNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SheetNum = " + POut.Long(screenPat.SheetNum) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE screenpat SET " + command + " WHERE ScreenPatNum = " + POut.Long(screenPat.ScreenPatNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ScreenPat from the database.
    */
    public static void delete(long screenPatNum) throws Exception {
        String command = "DELETE FROM screenpat " + "WHERE ScreenPatNum = " + POut.Long(screenPatNum);
        Db.NonQ(command);
    }

}


