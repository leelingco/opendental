//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:56 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ClaimFormItemCrud   
{
    /**
    * Gets one ClaimFormItem object from the database using the primary key.  Returns null if not found.
    */
    public static ClaimFormItem selectOne(long claimFormItemNum) throws Exception {
        String command = "SELECT * FROM claimformitem " + "WHERE ClaimFormItemNum = " + POut.Long(claimFormItemNum);
        List<ClaimFormItem> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ClaimFormItem object from the database using a query.
    */
    public static ClaimFormItem selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ClaimFormItem> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ClaimFormItem objects from the database using a query.
    */
    public static List<ClaimFormItem> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ClaimFormItem> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ClaimFormItem> tableToList(DataTable table) throws Exception {
        List<ClaimFormItem> retVal = new List<ClaimFormItem>();
        ClaimFormItem claimFormItem = new ClaimFormItem();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            claimFormItem = new ClaimFormItem();
            claimFormItem.ClaimFormItemNum = PIn.Long(table.Rows[i]["ClaimFormItemNum"].ToString());
            claimFormItem.ClaimFormNum = PIn.Long(table.Rows[i]["ClaimFormNum"].ToString());
            claimFormItem.ImageFileName = PIn.String(table.Rows[i]["ImageFileName"].ToString());
            claimFormItem.FieldName = PIn.String(table.Rows[i]["FieldName"].ToString());
            claimFormItem.FormatString = PIn.String(table.Rows[i]["FormatString"].ToString());
            claimFormItem.XPos = PIn.Float(table.Rows[i]["XPos"].ToString());
            claimFormItem.YPos = PIn.Float(table.Rows[i]["YPos"].ToString());
            claimFormItem.Width = PIn.Float(table.Rows[i]["Width"].ToString());
            claimFormItem.Height = PIn.Float(table.Rows[i]["Height"].ToString());
            retVal.Add(claimFormItem);
        }
        return retVal;
    }

    /**
    * Inserts one ClaimFormItem into the database.  Returns the new priKey.
    */
    public static long insert(ClaimFormItem claimFormItem) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            claimFormItem.ClaimFormItemNum = DbHelper.GetNextOracleKey("claimformitem", "ClaimFormItemNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(claimFormItem,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        claimFormItem.ClaimFormItemNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(claimFormItem,false);
        } 
    }

    /**
    * Inserts one ClaimFormItem into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ClaimFormItem claimFormItem, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            claimFormItem.ClaimFormItemNum = ReplicationServers.GetKey("claimformitem", "ClaimFormItemNum");
        }
         
        String command = "INSERT INTO claimformitem (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ClaimFormItemNum,";
        }
         
        command += "ClaimFormNum,ImageFileName,FieldName,FormatString,XPos,YPos,Width,Height) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(claimFormItem.ClaimFormItemNum) + ",";
        }
         
        command += POut.Long(claimFormItem.ClaimFormNum) + "," + "'" + POut.String(claimFormItem.ImageFileName) + "'," + "'" + POut.String(claimFormItem.FieldName) + "'," + "'" + POut.String(claimFormItem.FormatString) + "'," + POut.Float(claimFormItem.XPos) + "," + POut.Float(claimFormItem.YPos) + "," + POut.Float(claimFormItem.Width) + "," + POut.Float(claimFormItem.Height) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            claimFormItem.ClaimFormItemNum = Db.NonQ(command, true);
        } 
        return claimFormItem.ClaimFormItemNum;
    }

    /**
    * Updates one ClaimFormItem in the database.
    */
    public static void update(ClaimFormItem claimFormItem) throws Exception {
        String command = "UPDATE claimformitem SET " + "ClaimFormNum    =  " + POut.Long(claimFormItem.ClaimFormNum) + ", " + "ImageFileName   = '" + POut.String(claimFormItem.ImageFileName) + "', " + "FieldName       = '" + POut.String(claimFormItem.FieldName) + "', " + "FormatString    = '" + POut.String(claimFormItem.FormatString) + "', " + "XPos            =  " + POut.Float(claimFormItem.XPos) + ", " + "YPos            =  " + POut.Float(claimFormItem.YPos) + ", " + "Width           =  " + POut.Float(claimFormItem.Width) + ", " + "Height          =  " + POut.Float(claimFormItem.Height) + " " + "WHERE ClaimFormItemNum = " + POut.Long(claimFormItem.ClaimFormItemNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ClaimFormItem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ClaimFormItem claimFormItem, ClaimFormItem oldClaimFormItem) throws Exception {
        String command = "";
        if (claimFormItem.ClaimFormNum != oldClaimFormItem.ClaimFormNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClaimFormNum = " + POut.Long(claimFormItem.ClaimFormNum) + "";
        }
         
        if (claimFormItem.ImageFileName != oldClaimFormItem.ImageFileName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ImageFileName = '" + POut.String(claimFormItem.ImageFileName) + "'";
        }
         
        if (claimFormItem.FieldName != oldClaimFormItem.FieldName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FieldName = '" + POut.String(claimFormItem.FieldName) + "'";
        }
         
        if (claimFormItem.FormatString != oldClaimFormItem.FormatString)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FormatString = '" + POut.String(claimFormItem.FormatString) + "'";
        }
         
        if (claimFormItem.XPos != oldClaimFormItem.XPos)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "XPos = " + POut.Float(claimFormItem.XPos) + "";
        }
         
        if (claimFormItem.YPos != oldClaimFormItem.YPos)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "YPos = " + POut.Float(claimFormItem.YPos) + "";
        }
         
        if (claimFormItem.Width != oldClaimFormItem.Width)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Width = " + POut.Float(claimFormItem.Width) + "";
        }
         
        if (claimFormItem.Height != oldClaimFormItem.Height)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Height = " + POut.Float(claimFormItem.Height) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE claimformitem SET " + command + " WHERE ClaimFormItemNum = " + POut.Long(claimFormItem.ClaimFormItemNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ClaimFormItem from the database.
    */
    public static void delete(long claimFormItemNum) throws Exception {
        String command = "DELETE FROM claimformitem " + "WHERE ClaimFormItemNum = " + POut.Long(claimFormItemNum);
        Db.NonQ(command);
    }

}


