//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:57 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class CovCatCrud   
{
    /**
    * Gets one CovCat object from the database using the primary key.  Returns null if not found.
    */
    public static CovCat selectOne(long covCatNum) throws Exception {
        String command = "SELECT * FROM covcat " + "WHERE CovCatNum = " + POut.Long(covCatNum);
        List<CovCat> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one CovCat object from the database using a query.
    */
    public static CovCat selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<CovCat> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of CovCat objects from the database using a query.
    */
    public static List<CovCat> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<CovCat> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<CovCat> tableToList(DataTable table) throws Exception {
        List<CovCat> retVal = new List<CovCat>();
        CovCat covCat = new CovCat();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            covCat = new CovCat();
            covCat.CovCatNum = PIn.Long(table.Rows[i]["CovCatNum"].ToString());
            covCat.Description = PIn.String(table.Rows[i]["Description"].ToString());
            covCat.DefaultPercent = PIn.Int(table.Rows[i]["DefaultPercent"].ToString());
            covCat.CovOrder = PIn.Byte(table.Rows[i]["CovOrder"].ToString());
            covCat.IsHidden = PIn.Bool(table.Rows[i]["IsHidden"].ToString());
            covCat.EbenefitCat = (EbenefitCategory)PIn.Int(table.Rows[i]["EbenefitCat"].ToString());
            retVal.Add(covCat);
        }
        return retVal;
    }

    /**
    * Inserts one CovCat into the database.  Returns the new priKey.
    */
    public static long insert(CovCat covCat) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            covCat.CovCatNum = DbHelper.GetNextOracleKey("covcat", "CovCatNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(covCat,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        covCat.CovCatNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(covCat,false);
        } 
    }

    /**
    * Inserts one CovCat into the database.  Provides option to use the existing priKey.
    */
    public static long insert(CovCat covCat, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            covCat.CovCatNum = ReplicationServers.GetKey("covcat", "CovCatNum");
        }
         
        String command = "INSERT INTO covcat (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "CovCatNum,";
        }
         
        command += "Description,DefaultPercent,CovOrder,IsHidden,EbenefitCat) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(covCat.CovCatNum) + ",";
        }
         
        command += "'" + POut.String(covCat.Description) + "'," + POut.Int(covCat.DefaultPercent) + "," + POut.Byte(covCat.CovOrder) + "," + POut.Bool(covCat.IsHidden) + "," + POut.Int((int)covCat.EbenefitCat) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            covCat.CovCatNum = Db.NonQ(command, true);
        } 
        return covCat.CovCatNum;
    }

    /**
    * Updates one CovCat in the database.
    */
    public static void update(CovCat covCat) throws Exception {
        String command = "UPDATE covcat SET " + "Description   = '" + POut.String(covCat.Description) + "', " + "DefaultPercent=  " + POut.Int(covCat.DefaultPercent) + ", " + "CovOrder      =  " + POut.Byte(covCat.CovOrder) + ", " + "IsHidden      =  " + POut.Bool(covCat.IsHidden) + ", " + "EbenefitCat   =  " + POut.Int((int)covCat.EbenefitCat) + " " + "WHERE CovCatNum = " + POut.Long(covCat.CovCatNum);
        Db.NonQ(command);
    }

    /**
    * Updates one CovCat in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(CovCat covCat, CovCat oldCovCat) throws Exception {
        String command = "";
        if (covCat.Description != oldCovCat.Description)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.String(covCat.Description) + "'";
        }
         
        if (covCat.DefaultPercent != oldCovCat.DefaultPercent)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DefaultPercent = " + POut.Int(covCat.DefaultPercent) + "";
        }
         
        if (covCat.CovOrder != oldCovCat.CovOrder)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CovOrder = " + POut.Byte(covCat.CovOrder) + "";
        }
         
        if (covCat.IsHidden != oldCovCat.IsHidden)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsHidden = " + POut.Bool(covCat.IsHidden) + "";
        }
         
        if (covCat.EbenefitCat != oldCovCat.EbenefitCat)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EbenefitCat = " + POut.Int((int)covCat.EbenefitCat) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE covcat SET " + command + " WHERE CovCatNum = " + POut.Long(covCat.CovCatNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one CovCat from the database.
    */
    public static void delete(long covCatNum) throws Exception {
        String command = "DELETE FROM covcat " + "WHERE CovCatNum = " + POut.Long(covCatNum);
        Db.NonQ(command);
    }

}


