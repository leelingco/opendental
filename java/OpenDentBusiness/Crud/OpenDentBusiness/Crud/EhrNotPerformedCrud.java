//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:00 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EhrNotPerformedCrud   
{
    /**
    * Gets one EhrNotPerformed object from the database using the primary key.  Returns null if not found.
    */
    public static EhrNotPerformed selectOne(long ehrNotPerformedNum) throws Exception {
        String command = "SELECT * FROM ehrnotperformed " + "WHERE EhrNotPerformedNum = " + POut.Long(ehrNotPerformedNum);
        List<EhrNotPerformed> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one EhrNotPerformed object from the database using a query.
    */
    public static EhrNotPerformed selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrNotPerformed> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of EhrNotPerformed objects from the database using a query.
    */
    public static List<EhrNotPerformed> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrNotPerformed> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<EhrNotPerformed> tableToList(DataTable table) throws Exception {
        List<EhrNotPerformed> retVal = new List<EhrNotPerformed>();
        EhrNotPerformed ehrNotPerformed = new EhrNotPerformed();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            ehrNotPerformed = new EhrNotPerformed();
            ehrNotPerformed.EhrNotPerformedNum = PIn.Long(table.Rows[i]["EhrNotPerformedNum"].ToString());
            ehrNotPerformed.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            ehrNotPerformed.ProvNum = PIn.Long(table.Rows[i]["ProvNum"].ToString());
            ehrNotPerformed.CodeValue = PIn.String(table.Rows[i]["CodeValue"].ToString());
            ehrNotPerformed.CodeSystem = PIn.String(table.Rows[i]["CodeSystem"].ToString());
            ehrNotPerformed.CodeValueReason = PIn.String(table.Rows[i]["CodeValueReason"].ToString());
            ehrNotPerformed.CodeSystemReason = PIn.String(table.Rows[i]["CodeSystemReason"].ToString());
            ehrNotPerformed.Note = PIn.String(table.Rows[i]["Note"].ToString());
            ehrNotPerformed.DateEntry = PIn.Date(table.Rows[i]["DateEntry"].ToString());
            retVal.Add(ehrNotPerformed);
        }
        return retVal;
    }

    /**
    * Inserts one EhrNotPerformed into the database.  Returns the new priKey.
    */
    public static long insert(EhrNotPerformed ehrNotPerformed) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            ehrNotPerformed.EhrNotPerformedNum = DbHelper.GetNextOracleKey("ehrnotperformed", "EhrNotPerformedNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(ehrNotPerformed,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        ehrNotPerformed.EhrNotPerformedNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(ehrNotPerformed,false);
        } 
    }

    /**
    * Inserts one EhrNotPerformed into the database.  Provides option to use the existing priKey.
    */
    public static long insert(EhrNotPerformed ehrNotPerformed, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            ehrNotPerformed.EhrNotPerformedNum = ReplicationServers.GetKey("ehrnotperformed", "EhrNotPerformedNum");
        }
         
        String command = "INSERT INTO ehrnotperformed (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "EhrNotPerformedNum,";
        }
         
        command += "PatNum,ProvNum,CodeValue,CodeSystem,CodeValueReason,CodeSystemReason,Note,DateEntry) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(ehrNotPerformed.EhrNotPerformedNum) + ",";
        }
         
        command += POut.Long(ehrNotPerformed.PatNum) + "," + POut.Long(ehrNotPerformed.ProvNum) + "," + "'" + POut.String(ehrNotPerformed.CodeValue) + "'," + "'" + POut.String(ehrNotPerformed.CodeSystem) + "'," + "'" + POut.String(ehrNotPerformed.CodeValueReason) + "'," + "'" + POut.String(ehrNotPerformed.CodeSystemReason) + "'," + "'" + POut.String(ehrNotPerformed.Note) + "'," + POut.Date(ehrNotPerformed.DateEntry) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            ehrNotPerformed.EhrNotPerformedNum = Db.NonQ(command, true);
        } 
        return ehrNotPerformed.EhrNotPerformedNum;
    }

    /**
    * Updates one EhrNotPerformed in the database.
    */
    public static void update(EhrNotPerformed ehrNotPerformed) throws Exception {
        String command = "UPDATE ehrnotperformed SET " + "PatNum            =  " + POut.Long(ehrNotPerformed.PatNum) + ", " + "ProvNum           =  " + POut.Long(ehrNotPerformed.ProvNum) + ", " + "CodeValue         = '" + POut.String(ehrNotPerformed.CodeValue) + "', " + "CodeSystem        = '" + POut.String(ehrNotPerformed.CodeSystem) + "', " + "CodeValueReason   = '" + POut.String(ehrNotPerformed.CodeValueReason) + "', " + "CodeSystemReason  = '" + POut.String(ehrNotPerformed.CodeSystemReason) + "', " + "Note              = '" + POut.String(ehrNotPerformed.Note) + "', " + "DateEntry         =  " + POut.Date(ehrNotPerformed.DateEntry) + " " + "WHERE EhrNotPerformedNum = " + POut.Long(ehrNotPerformed.EhrNotPerformedNum);
        Db.NonQ(command);
    }

    /**
    * Updates one EhrNotPerformed in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(EhrNotPerformed ehrNotPerformed, EhrNotPerformed oldEhrNotPerformed) throws Exception {
        String command = "";
        if (ehrNotPerformed.PatNum != oldEhrNotPerformed.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(ehrNotPerformed.PatNum) + "";
        }
         
        if (ehrNotPerformed.ProvNum != oldEhrNotPerformed.ProvNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvNum = " + POut.Long(ehrNotPerformed.ProvNum) + "";
        }
         
        if (ehrNotPerformed.CodeValue != oldEhrNotPerformed.CodeValue)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeValue = '" + POut.String(ehrNotPerformed.CodeValue) + "'";
        }
         
        if (ehrNotPerformed.CodeSystem != oldEhrNotPerformed.CodeSystem)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeSystem = '" + POut.String(ehrNotPerformed.CodeSystem) + "'";
        }
         
        if (ehrNotPerformed.CodeValueReason != oldEhrNotPerformed.CodeValueReason)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeValueReason = '" + POut.String(ehrNotPerformed.CodeValueReason) + "'";
        }
         
        if (ehrNotPerformed.CodeSystemReason != oldEhrNotPerformed.CodeSystemReason)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeSystemReason = '" + POut.String(ehrNotPerformed.CodeSystemReason) + "'";
        }
         
        if (ehrNotPerformed.Note != oldEhrNotPerformed.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(ehrNotPerformed.Note) + "'";
        }
         
        if (ehrNotPerformed.DateEntry != oldEhrNotPerformed.DateEntry)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateEntry = " + POut.Date(ehrNotPerformed.DateEntry) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE ehrnotperformed SET " + command + " WHERE EhrNotPerformedNum = " + POut.Long(ehrNotPerformed.EhrNotPerformedNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one EhrNotPerformed from the database.
    */
    public static void delete(long ehrNotPerformedNum) throws Exception {
        String command = "DELETE FROM ehrnotperformed " + "WHERE EhrNotPerformedNum = " + POut.Long(ehrNotPerformedNum);
        Db.NonQ(command);
    }

}


