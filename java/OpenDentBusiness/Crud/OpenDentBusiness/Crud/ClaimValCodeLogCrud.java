//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:57 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ClaimValCodeLogCrud   
{
    /**
    * Gets one ClaimValCodeLog object from the database using the primary key.  Returns null if not found.
    */
    public static ClaimValCodeLog selectOne(long claimValCodeLogNum) throws Exception {
        String command = "SELECT * FROM claimvalcodelog " + "WHERE ClaimValCodeLogNum = " + POut.Long(claimValCodeLogNum);
        List<ClaimValCodeLog> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ClaimValCodeLog object from the database using a query.
    */
    public static ClaimValCodeLog selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ClaimValCodeLog> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ClaimValCodeLog objects from the database using a query.
    */
    public static List<ClaimValCodeLog> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ClaimValCodeLog> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ClaimValCodeLog> tableToList(DataTable table) throws Exception {
        List<ClaimValCodeLog> retVal = new List<ClaimValCodeLog>();
        ClaimValCodeLog claimValCodeLog = new ClaimValCodeLog();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            claimValCodeLog = new ClaimValCodeLog();
            claimValCodeLog.ClaimValCodeLogNum = PIn.Long(table.Rows[i]["ClaimValCodeLogNum"].ToString());
            claimValCodeLog.ClaimNum = PIn.Long(table.Rows[i]["ClaimNum"].ToString());
            claimValCodeLog.ClaimField = PIn.String(table.Rows[i]["ClaimField"].ToString());
            claimValCodeLog.ValCode = PIn.String(table.Rows[i]["ValCode"].ToString());
            claimValCodeLog.ValAmount = PIn.Double(table.Rows[i]["ValAmount"].ToString());
            claimValCodeLog.Ordinal = PIn.Int(table.Rows[i]["Ordinal"].ToString());
            retVal.Add(claimValCodeLog);
        }
        return retVal;
    }

    /**
    * Inserts one ClaimValCodeLog into the database.  Returns the new priKey.
    */
    public static long insert(ClaimValCodeLog claimValCodeLog) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            claimValCodeLog.ClaimValCodeLogNum = DbHelper.GetNextOracleKey("claimvalcodelog", "ClaimValCodeLogNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(claimValCodeLog,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        claimValCodeLog.ClaimValCodeLogNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(claimValCodeLog,false);
        } 
    }

    /**
    * Inserts one ClaimValCodeLog into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ClaimValCodeLog claimValCodeLog, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            claimValCodeLog.ClaimValCodeLogNum = ReplicationServers.GetKey("claimvalcodelog", "ClaimValCodeLogNum");
        }
         
        String command = "INSERT INTO claimvalcodelog (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ClaimValCodeLogNum,";
        }
         
        command += "ClaimNum,ClaimField,ValCode,ValAmount,Ordinal) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(claimValCodeLog.ClaimValCodeLogNum) + ",";
        }
         
        command += POut.Long(claimValCodeLog.ClaimNum) + "," + "'" + POut.String(claimValCodeLog.ClaimField) + "'," + "'" + POut.String(claimValCodeLog.ValCode) + "'," + "'" + POut.Double(claimValCodeLog.ValAmount) + "'," + POut.Int(claimValCodeLog.Ordinal) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            claimValCodeLog.ClaimValCodeLogNum = Db.NonQ(command, true);
        } 
        return claimValCodeLog.ClaimValCodeLogNum;
    }

    /**
    * Updates one ClaimValCodeLog in the database.
    */
    public static void update(ClaimValCodeLog claimValCodeLog) throws Exception {
        String command = "UPDATE claimvalcodelog SET " + "ClaimNum          =  " + POut.Long(claimValCodeLog.ClaimNum) + ", " + "ClaimField        = '" + POut.String(claimValCodeLog.ClaimField) + "', " + "ValCode           = '" + POut.String(claimValCodeLog.ValCode) + "', " + "ValAmount         = '" + POut.Double(claimValCodeLog.ValAmount) + "', " + "Ordinal           =  " + POut.Int(claimValCodeLog.Ordinal) + " " + "WHERE ClaimValCodeLogNum = " + POut.Long(claimValCodeLog.ClaimValCodeLogNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ClaimValCodeLog in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ClaimValCodeLog claimValCodeLog, ClaimValCodeLog oldClaimValCodeLog) throws Exception {
        String command = "";
        if (claimValCodeLog.ClaimNum != oldClaimValCodeLog.ClaimNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClaimNum = " + POut.Long(claimValCodeLog.ClaimNum) + "";
        }
         
        if (claimValCodeLog.ClaimField != oldClaimValCodeLog.ClaimField)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClaimField = '" + POut.String(claimValCodeLog.ClaimField) + "'";
        }
         
        if (claimValCodeLog.ValCode != oldClaimValCodeLog.ValCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ValCode = '" + POut.String(claimValCodeLog.ValCode) + "'";
        }
         
        if (claimValCodeLog.ValAmount != oldClaimValCodeLog.ValAmount)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ValAmount = '" + POut.Double(claimValCodeLog.ValAmount) + "'";
        }
         
        if (claimValCodeLog.Ordinal != oldClaimValCodeLog.Ordinal)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Ordinal = " + POut.Int(claimValCodeLog.Ordinal) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE claimvalcodelog SET " + command + " WHERE ClaimValCodeLogNum = " + POut.Long(claimValCodeLog.ClaimValCodeLogNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ClaimValCodeLog from the database.
    */
    public static void delete(long claimValCodeLogNum) throws Exception {
        String command = "DELETE FROM claimvalcodelog " + "WHERE ClaimValCodeLogNum = " + POut.Long(claimValCodeLogNum);
        Db.NonQ(command);
    }

}


