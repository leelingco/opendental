//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:05 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class QuickPasteNoteCrud   
{
    /**
    * Gets one QuickPasteNote object from the database using the primary key.  Returns null if not found.
    */
    public static QuickPasteNote selectOne(long quickPasteNoteNum) throws Exception {
        String command = "SELECT * FROM quickpastenote " + "WHERE QuickPasteNoteNum = " + POut.Long(quickPasteNoteNum);
        List<QuickPasteNote> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one QuickPasteNote object from the database using a query.
    */
    public static QuickPasteNote selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<QuickPasteNote> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of QuickPasteNote objects from the database using a query.
    */
    public static List<QuickPasteNote> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<QuickPasteNote> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<QuickPasteNote> tableToList(DataTable table) throws Exception {
        List<QuickPasteNote> retVal = new List<QuickPasteNote>();
        QuickPasteNote quickPasteNote = new QuickPasteNote();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            quickPasteNote = new QuickPasteNote();
            quickPasteNote.QuickPasteNoteNum = PIn.Long(table.Rows[i]["QuickPasteNoteNum"].ToString());
            quickPasteNote.QuickPasteCatNum = PIn.Long(table.Rows[i]["QuickPasteCatNum"].ToString());
            quickPasteNote.ItemOrder = PIn.Int(table.Rows[i]["ItemOrder"].ToString());
            quickPasteNote.Note = PIn.String(table.Rows[i]["Note"].ToString());
            quickPasteNote.Abbreviation = PIn.String(table.Rows[i]["Abbreviation"].ToString());
            retVal.Add(quickPasteNote);
        }
        return retVal;
    }

    /**
    * Inserts one QuickPasteNote into the database.  Returns the new priKey.
    */
    public static long insert(QuickPasteNote quickPasteNote) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            quickPasteNote.QuickPasteNoteNum = DbHelper.GetNextOracleKey("quickpastenote", "QuickPasteNoteNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(quickPasteNote,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        quickPasteNote.QuickPasteNoteNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(quickPasteNote,false);
        } 
    }

    /**
    * Inserts one QuickPasteNote into the database.  Provides option to use the existing priKey.
    */
    public static long insert(QuickPasteNote quickPasteNote, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            quickPasteNote.QuickPasteNoteNum = ReplicationServers.GetKey("quickpastenote", "QuickPasteNoteNum");
        }
         
        String command = "INSERT INTO quickpastenote (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "QuickPasteNoteNum,";
        }
         
        command += "QuickPasteCatNum,ItemOrder,Note,Abbreviation) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(quickPasteNote.QuickPasteNoteNum) + ",";
        }
         
        command += POut.Long(quickPasteNote.QuickPasteCatNum) + "," + POut.Int(quickPasteNote.ItemOrder) + "," + "'" + POut.String(quickPasteNote.Note) + "'," + "'" + POut.String(quickPasteNote.Abbreviation) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            quickPasteNote.QuickPasteNoteNum = Db.NonQ(command, true);
        } 
        return quickPasteNote.QuickPasteNoteNum;
    }

    /**
    * Updates one QuickPasteNote in the database.
    */
    public static void update(QuickPasteNote quickPasteNote) throws Exception {
        String command = "UPDATE quickpastenote SET " + "QuickPasteCatNum =  " + POut.Long(quickPasteNote.QuickPasteCatNum) + ", " + "ItemOrder        =  " + POut.Int(quickPasteNote.ItemOrder) + ", " + "Note             = '" + POut.String(quickPasteNote.Note) + "', " + "Abbreviation     = '" + POut.String(quickPasteNote.Abbreviation) + "' " + "WHERE QuickPasteNoteNum = " + POut.Long(quickPasteNote.QuickPasteNoteNum);
        Db.NonQ(command);
    }

    /**
    * Updates one QuickPasteNote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(QuickPasteNote quickPasteNote, QuickPasteNote oldQuickPasteNote) throws Exception {
        String command = "";
        if (quickPasteNote.QuickPasteCatNum != oldQuickPasteNote.QuickPasteCatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "QuickPasteCatNum = " + POut.Long(quickPasteNote.QuickPasteCatNum) + "";
        }
         
        if (quickPasteNote.ItemOrder != oldQuickPasteNote.ItemOrder)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ItemOrder = " + POut.Int(quickPasteNote.ItemOrder) + "";
        }
         
        if (quickPasteNote.Note != oldQuickPasteNote.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(quickPasteNote.Note) + "'";
        }
         
        if (quickPasteNote.Abbreviation != oldQuickPasteNote.Abbreviation)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Abbreviation = '" + POut.String(quickPasteNote.Abbreviation) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE quickpastenote SET " + command + " WHERE QuickPasteNoteNum = " + POut.Long(quickPasteNote.QuickPasteNoteNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one QuickPasteNote from the database.
    */
    public static void delete(long quickPasteNoteNum) throws Exception {
        String command = "DELETE FROM quickpastenote " + "WHERE QuickPasteNoteNum = " + POut.Long(quickPasteNoteNum);
        Db.NonQ(command);
    }

}


