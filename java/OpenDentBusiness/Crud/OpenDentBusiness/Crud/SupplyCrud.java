//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:08 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class SupplyCrud   
{
    /**
    * Gets one Supply object from the database using the primary key.  Returns null if not found.
    */
    public static Supply selectOne(long supplyNum) throws Exception {
        String command = "SELECT * FROM supply " + "WHERE SupplyNum = " + POut.Long(supplyNum);
        List<Supply> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Supply object from the database using a query.
    */
    public static Supply selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Supply> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Supply objects from the database using a query.
    */
    public static List<Supply> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Supply> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Supply> tableToList(DataTable table) throws Exception {
        List<Supply> retVal = new List<Supply>();
        Supply supply = new Supply();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            supply = new Supply();
            supply.SupplyNum = PIn.Long(table.Rows[i]["SupplyNum"].ToString());
            supply.SupplierNum = PIn.Long(table.Rows[i]["SupplierNum"].ToString());
            supply.CatalogNumber = PIn.String(table.Rows[i]["CatalogNumber"].ToString());
            supply.Descript = PIn.String(table.Rows[i]["Descript"].ToString());
            supply.Category = PIn.Long(table.Rows[i]["Category"].ToString());
            supply.ItemOrder = PIn.Int(table.Rows[i]["ItemOrder"].ToString());
            supply.LevelDesired = PIn.Float(table.Rows[i]["LevelDesired"].ToString());
            supply.IsHidden = PIn.Bool(table.Rows[i]["IsHidden"].ToString());
            supply.Price = PIn.Double(table.Rows[i]["Price"].ToString());
            retVal.Add(supply);
        }
        return retVal;
    }

    /**
    * Inserts one Supply into the database.  Returns the new priKey.
    */
    public static long insert(Supply supply) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            supply.SupplyNum = DbHelper.GetNextOracleKey("supply", "SupplyNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(supply,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        supply.SupplyNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(supply,false);
        } 
    }

    /**
    * Inserts one Supply into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Supply supply, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            supply.SupplyNum = ReplicationServers.GetKey("supply", "SupplyNum");
        }
         
        String command = "INSERT INTO supply (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "SupplyNum,";
        }
         
        command += "SupplierNum,CatalogNumber,Descript,Category,ItemOrder,LevelDesired,IsHidden,Price) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(supply.SupplyNum) + ",";
        }
         
        command += POut.Long(supply.SupplierNum) + "," + "'" + POut.String(supply.CatalogNumber) + "'," + "'" + POut.String(supply.Descript) + "'," + POut.Long(supply.Category) + "," + POut.Int(supply.ItemOrder) + "," + POut.Float(supply.LevelDesired) + "," + POut.Bool(supply.IsHidden) + "," + "'" + POut.Double(supply.Price) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            supply.SupplyNum = Db.NonQ(command, true);
        } 
        return supply.SupplyNum;
    }

    /**
    * Updates one Supply in the database.
    */
    public static void update(Supply supply) throws Exception {
        String command = "UPDATE supply SET " + "SupplierNum  =  " + POut.Long(supply.SupplierNum) + ", " + "CatalogNumber= '" + POut.String(supply.CatalogNumber) + "', " + "Descript     = '" + POut.String(supply.Descript) + "', " + "Category     =  " + POut.Long(supply.Category) + ", " + "ItemOrder    =  " + POut.Int(supply.ItemOrder) + ", " + "LevelDesired =  " + POut.Float(supply.LevelDesired) + ", " + "IsHidden     =  " + POut.Bool(supply.IsHidden) + ", " + "Price        = '" + POut.Double(supply.Price) + "' " + "WHERE SupplyNum = " + POut.Long(supply.SupplyNum);
        Db.NonQ(command);
    }

    /**
    * Updates one Supply in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Supply supply, Supply oldSupply) throws Exception {
        String command = "";
        if (supply.SupplierNum != oldSupply.SupplierNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SupplierNum = " + POut.Long(supply.SupplierNum) + "";
        }
         
        if (supply.CatalogNumber != oldSupply.CatalogNumber)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CatalogNumber = '" + POut.String(supply.CatalogNumber) + "'";
        }
         
        if (supply.Descript != oldSupply.Descript)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Descript = '" + POut.String(supply.Descript) + "'";
        }
         
        if (supply.Category != oldSupply.Category)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Category = " + POut.Long(supply.Category) + "";
        }
         
        if (supply.ItemOrder != oldSupply.ItemOrder)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ItemOrder = " + POut.Int(supply.ItemOrder) + "";
        }
         
        if (supply.LevelDesired != oldSupply.LevelDesired)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "LevelDesired = " + POut.Float(supply.LevelDesired) + "";
        }
         
        if (supply.IsHidden != oldSupply.IsHidden)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsHidden = " + POut.Bool(supply.IsHidden) + "";
        }
         
        if (supply.Price != oldSupply.Price)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Price = '" + POut.Double(supply.Price) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE supply SET " + command + " WHERE SupplyNum = " + POut.Long(supply.SupplyNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one Supply from the database.
    */
    public static void delete(long supplyNum) throws Exception {
        String command = "DELETE FROM supply " + "WHERE SupplyNum = " + POut.Long(supplyNum);
        Db.NonQ(command);
    }

}


