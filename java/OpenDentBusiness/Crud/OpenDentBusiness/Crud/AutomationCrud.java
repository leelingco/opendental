//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:55 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class AutomationCrud   
{
    /**
    * Gets one Automation object from the database using the primary key.  Returns null if not found.
    */
    public static Automation selectOne(long automationNum) throws Exception {
        String command = "SELECT * FROM automation " + "WHERE AutomationNum = " + POut.Long(automationNum);
        List<Automation> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Automation object from the database using a query.
    */
    public static Automation selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Automation> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Automation objects from the database using a query.
    */
    public static List<Automation> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Automation> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Automation> tableToList(DataTable table) throws Exception {
        List<Automation> retVal = new List<Automation>();
        Automation automation = new Automation();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            automation = new Automation();
            automation.AutomationNum = PIn.Long(table.Rows[i]["AutomationNum"].ToString());
            automation.Description = PIn.String(table.Rows[i]["Description"].ToString());
            automation.Autotrigger = (AutomationTrigger)PIn.Int(table.Rows[i]["Autotrigger"].ToString());
            automation.ProcCodes = PIn.String(table.Rows[i]["ProcCodes"].ToString());
            automation.AutoAction = (AutomationAction)PIn.Int(table.Rows[i]["AutoAction"].ToString());
            automation.SheetDefNum = PIn.Long(table.Rows[i]["SheetDefNum"].ToString());
            automation.CommType = PIn.Long(table.Rows[i]["CommType"].ToString());
            automation.MessageContent = PIn.String(table.Rows[i]["MessageContent"].ToString());
            retVal.Add(automation);
        }
        return retVal;
    }

    /**
    * Inserts one Automation into the database.  Returns the new priKey.
    */
    public static long insert(Automation automation) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            automation.AutomationNum = DbHelper.GetNextOracleKey("automation", "AutomationNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(automation,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        automation.AutomationNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(automation,false);
        } 
    }

    /**
    * Inserts one Automation into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Automation automation, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            automation.AutomationNum = ReplicationServers.GetKey("automation", "AutomationNum");
        }
         
        String command = "INSERT INTO automation (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "AutomationNum,";
        }
         
        command += "Description,Autotrigger,ProcCodes,AutoAction,SheetDefNum,CommType,MessageContent) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(automation.AutomationNum) + ",";
        }
         
        command += "'" + POut.String(automation.Description) + "'," + POut.Int((int)automation.Autotrigger) + "," + "'" + POut.String(automation.ProcCodes) + "'," + POut.Int((int)automation.AutoAction) + "," + POut.Long(automation.SheetDefNum) + "," + POut.Long(automation.CommType) + "," + "'" + POut.String(automation.MessageContent) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            automation.AutomationNum = Db.NonQ(command, true);
        } 
        return automation.AutomationNum;
    }

    /**
    * Updates one Automation in the database.
    */
    public static void update(Automation automation) throws Exception {
        String command = "UPDATE automation SET " + "Description   = '" + POut.String(automation.Description) + "', " + "Autotrigger   =  " + POut.Int((int)automation.Autotrigger) + ", " + "ProcCodes     = '" + POut.String(automation.ProcCodes) + "', " + "AutoAction    =  " + POut.Int((int)automation.AutoAction) + ", " + "SheetDefNum   =  " + POut.Long(automation.SheetDefNum) + ", " + "CommType      =  " + POut.Long(automation.CommType) + ", " + "MessageContent= '" + POut.String(automation.MessageContent) + "' " + "WHERE AutomationNum = " + POut.Long(automation.AutomationNum);
        Db.NonQ(command);
    }

    /**
    * Updates one Automation in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Automation automation, Automation oldAutomation) throws Exception {
        String command = "";
        if (automation.Description != oldAutomation.Description)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.String(automation.Description) + "'";
        }
         
        if (automation.Autotrigger != oldAutomation.Autotrigger)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Autotrigger = " + POut.Int((int)automation.Autotrigger) + "";
        }
         
        if (automation.ProcCodes != oldAutomation.ProcCodes)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProcCodes = '" + POut.String(automation.ProcCodes) + "'";
        }
         
        if (automation.AutoAction != oldAutomation.AutoAction)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AutoAction = " + POut.Int((int)automation.AutoAction) + "";
        }
         
        if (automation.SheetDefNum != oldAutomation.SheetDefNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SheetDefNum = " + POut.Long(automation.SheetDefNum) + "";
        }
         
        if (automation.CommType != oldAutomation.CommType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CommType = " + POut.Long(automation.CommType) + "";
        }
         
        if (automation.MessageContent != oldAutomation.MessageContent)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MessageContent = '" + POut.String(automation.MessageContent) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE automation SET " + command + " WHERE AutomationNum = " + POut.Long(automation.AutomationNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one Automation from the database.
    */
    public static void delete(long automationNum) throws Exception {
        String command = "DELETE FROM automation " + "WHERE AutomationNum = " + POut.Long(automationNum);
        Db.NonQ(command);
    }

}


