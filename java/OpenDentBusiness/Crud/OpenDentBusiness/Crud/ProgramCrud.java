//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:05 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ProgramCrud   
{
    /**
    * Gets one Program object from the database using the primary key.  Returns null if not found.
    */
    public static Program selectOne(long programNum) throws Exception {
        String command = "SELECT * FROM program " + "WHERE ProgramNum = " + POut.Long(programNum);
        List<Program> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Program object from the database using a query.
    */
    public static Program selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Program> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Program objects from the database using a query.
    */
    public static List<Program> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Program> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Program> tableToList(DataTable table) throws Exception {
        List<Program> retVal = new List<Program>();
        Program program = new Program();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            program = new Program();
            program.ProgramNum = PIn.Long(table.Rows[i]["ProgramNum"].ToString());
            program.ProgName = PIn.String(table.Rows[i]["ProgName"].ToString());
            program.ProgDesc = PIn.String(table.Rows[i]["ProgDesc"].ToString());
            program.Enabled = PIn.Bool(table.Rows[i]["Enabled"].ToString());
            program.Path = PIn.String(table.Rows[i]["Path"].ToString());
            program.CommandLine = PIn.String(table.Rows[i]["CommandLine"].ToString());
            program.Note = PIn.String(table.Rows[i]["Note"].ToString());
            program.PluginDllName = PIn.String(table.Rows[i]["PluginDllName"].ToString());
            retVal.Add(program);
        }
        return retVal;
    }

    /**
    * Inserts one Program into the database.  Returns the new priKey.
    */
    public static long insert(Program program) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            program.ProgramNum = DbHelper.GetNextOracleKey("program", "ProgramNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(program,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        program.ProgramNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(program,false);
        } 
    }

    /**
    * Inserts one Program into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Program program, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            program.ProgramNum = ReplicationServers.GetKey("program", "ProgramNum");
        }
         
        String command = "INSERT INTO program (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ProgramNum,";
        }
         
        command += "ProgName,ProgDesc,Enabled,Path,CommandLine,Note,PluginDllName) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(program.ProgramNum) + ",";
        }
         
        command += "'" + POut.String(program.ProgName) + "'," + "'" + POut.String(program.ProgDesc) + "'," + POut.Bool(program.Enabled) + "," + "'" + POut.String(program.Path) + "'," + "'" + POut.String(program.CommandLine) + "'," + "'" + POut.String(program.Note) + "'," + "'" + POut.String(program.PluginDllName) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            program.ProgramNum = Db.NonQ(command, true);
        } 
        return program.ProgramNum;
    }

    /**
    * Updates one Program in the database.
    */
    public static void update(Program program) throws Exception {
        String command = "UPDATE program SET " + "ProgName     = '" + POut.String(program.ProgName) + "', " + "ProgDesc     = '" + POut.String(program.ProgDesc) + "', " + "Enabled      =  " + POut.Bool(program.Enabled) + ", " + "Path         = '" + POut.String(program.Path) + "', " + "CommandLine  = '" + POut.String(program.CommandLine) + "', " + "Note         = '" + POut.String(program.Note) + "', " + "PluginDllName= '" + POut.String(program.PluginDllName) + "' " + "WHERE ProgramNum = " + POut.Long(program.ProgramNum);
        Db.NonQ(command);
    }

    /**
    * Updates one Program in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Program program, Program oldProgram) throws Exception {
        String command = "";
        if (program.ProgName != oldProgram.ProgName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProgName = '" + POut.String(program.ProgName) + "'";
        }
         
        if (program.ProgDesc != oldProgram.ProgDesc)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProgDesc = '" + POut.String(program.ProgDesc) + "'";
        }
         
        if (program.Enabled != oldProgram.Enabled)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Enabled = " + POut.Bool(program.Enabled) + "";
        }
         
        if (program.Path != oldProgram.Path)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Path = '" + POut.String(program.Path) + "'";
        }
         
        if (program.CommandLine != oldProgram.CommandLine)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CommandLine = '" + POut.String(program.CommandLine) + "'";
        }
         
        if (program.Note != oldProgram.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(program.Note) + "'";
        }
         
        if (program.PluginDllName != oldProgram.PluginDllName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PluginDllName = '" + POut.String(program.PluginDllName) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE program SET " + command + " WHERE ProgramNum = " + POut.Long(program.ProgramNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one Program from the database.
    */
    public static void delete(long programNum) throws Exception {
        String command = "DELETE FROM program " + "WHERE ProgramNum = " + POut.Long(programNum);
        Db.NonQ(command);
    }

}


