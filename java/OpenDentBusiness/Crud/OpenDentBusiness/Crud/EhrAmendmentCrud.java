//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:58 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EhrAmendmentCrud   
{
    /**
    * Gets one EhrAmendment object from the database using the primary key.  Returns null if not found.
    */
    public static EhrAmendment selectOne(long ehrAmendmentNum) throws Exception {
        String command = "SELECT * FROM ehramendment " + "WHERE EhrAmendmentNum = " + POut.Long(ehrAmendmentNum);
        List<EhrAmendment> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one EhrAmendment object from the database using a query.
    */
    public static EhrAmendment selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrAmendment> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of EhrAmendment objects from the database using a query.
    */
    public static List<EhrAmendment> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrAmendment> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<EhrAmendment> tableToList(DataTable table) throws Exception {
        List<EhrAmendment> retVal = new List<EhrAmendment>();
        EhrAmendment ehrAmendment = new EhrAmendment();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            ehrAmendment = new EhrAmendment();
            ehrAmendment.EhrAmendmentNum = PIn.Long(table.Rows[i]["EhrAmendmentNum"].ToString());
            ehrAmendment.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            ehrAmendment.IsAccepted = (YN)PIn.Int(table.Rows[i]["IsAccepted"].ToString());
            ehrAmendment.Description = PIn.String(table.Rows[i]["Description"].ToString());
            ehrAmendment.Source = (AmendmentSource)PIn.Int(table.Rows[i]["Source"].ToString());
            ehrAmendment.SourceName = PIn.String(table.Rows[i]["SourceName"].ToString());
            ehrAmendment.FileName = PIn.String(table.Rows[i]["FileName"].ToString());
            ehrAmendment.RawBase64 = PIn.String(table.Rows[i]["RawBase64"].ToString());
            ehrAmendment.DateTRequest = PIn.DateT(table.Rows[i]["DateTRequest"].ToString());
            ehrAmendment.DateTAcceptDeny = PIn.DateT(table.Rows[i]["DateTAcceptDeny"].ToString());
            ehrAmendment.DateTAppend = PIn.DateT(table.Rows[i]["DateTAppend"].ToString());
            retVal.Add(ehrAmendment);
        }
        return retVal;
    }

    /**
    * Inserts one EhrAmendment into the database.  Returns the new priKey.
    */
    public static long insert(EhrAmendment ehrAmendment) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            ehrAmendment.EhrAmendmentNum = DbHelper.GetNextOracleKey("ehramendment", "EhrAmendmentNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(ehrAmendment,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        ehrAmendment.EhrAmendmentNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(ehrAmendment,false);
        } 
    }

    /**
    * Inserts one EhrAmendment into the database.  Provides option to use the existing priKey.
    */
    public static long insert(EhrAmendment ehrAmendment, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            ehrAmendment.EhrAmendmentNum = ReplicationServers.GetKey("ehramendment", "EhrAmendmentNum");
        }
         
        String command = "INSERT INTO ehramendment (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "EhrAmendmentNum,";
        }
         
        command += "PatNum,IsAccepted,Description,Source,SourceName,FileName,RawBase64,DateTRequest,DateTAcceptDeny,DateTAppend) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(ehrAmendment.EhrAmendmentNum) + ",";
        }
         
        command += POut.Long(ehrAmendment.PatNum) + "," + POut.Int((int)ehrAmendment.IsAccepted) + "," + "'" + POut.String(ehrAmendment.Description) + "'," + POut.Int((int)ehrAmendment.Source) + "," + "'" + POut.String(ehrAmendment.SourceName) + "'," + "'" + POut.String(ehrAmendment.FileName) + "'," + DbHelper.ParamChar + "paramRawBase64," + POut.DateT(ehrAmendment.DateTRequest) + "," + POut.DateT(ehrAmendment.DateTAcceptDeny) + "," + POut.DateT(ehrAmendment.DateTAppend) + ")";
        if (ehrAmendment.RawBase64 == null)
        {
            ehrAmendment.RawBase64 = "";
        }
         
        OdSqlParameter paramRawBase64 = new OdSqlParameter("paramRawBase64", OdDbType.Text, ehrAmendment.RawBase64);
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command, paramRawBase64);
        }
        else
        {
            ehrAmendment.EhrAmendmentNum = Db.NonQ(command, true, paramRawBase64);
        } 
        return ehrAmendment.EhrAmendmentNum;
    }

    /**
    * Updates one EhrAmendment in the database.
    */
    public static void update(EhrAmendment ehrAmendment) throws Exception {
        String command = "UPDATE ehramendment SET " + "PatNum         =  " + POut.Long(ehrAmendment.PatNum) + ", " + "IsAccepted     =  " + POut.Int((int)ehrAmendment.IsAccepted) + ", " + "Description    = '" + POut.String(ehrAmendment.Description) + "', " + "Source         =  " + POut.Int((int)ehrAmendment.Source) + ", " + "SourceName     = '" + POut.String(ehrAmendment.SourceName) + "', " + "FileName       = '" + POut.String(ehrAmendment.FileName) + "', " + "RawBase64      =  " + DbHelper.ParamChar + "paramRawBase64, " + "DateTRequest   =  " + POut.DateT(ehrAmendment.DateTRequest) + ", " + "DateTAcceptDeny=  " + POut.DateT(ehrAmendment.DateTAcceptDeny) + ", " + "DateTAppend    =  " + POut.DateT(ehrAmendment.DateTAppend) + " " + "WHERE EhrAmendmentNum = " + POut.Long(ehrAmendment.EhrAmendmentNum);
        if (ehrAmendment.RawBase64 == null)
        {
            ehrAmendment.RawBase64 = "";
        }
         
        OdSqlParameter paramRawBase64 = new OdSqlParameter("paramRawBase64", OdDbType.Text, ehrAmendment.RawBase64);
        Db.NonQ(command, paramRawBase64);
    }

    /**
    * Updates one EhrAmendment in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(EhrAmendment ehrAmendment, EhrAmendment oldEhrAmendment) throws Exception {
        String command = "";
        if (ehrAmendment.PatNum != oldEhrAmendment.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(ehrAmendment.PatNum) + "";
        }
         
        if (ehrAmendment.IsAccepted != oldEhrAmendment.IsAccepted)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsAccepted = " + POut.Int((int)ehrAmendment.IsAccepted) + "";
        }
         
        if (ehrAmendment.Description != oldEhrAmendment.Description)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.String(ehrAmendment.Description) + "'";
        }
         
        if (ehrAmendment.Source != oldEhrAmendment.Source)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Source = " + POut.Int((int)ehrAmendment.Source) + "";
        }
         
        if (ehrAmendment.SourceName != oldEhrAmendment.SourceName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SourceName = '" + POut.String(ehrAmendment.SourceName) + "'";
        }
         
        if (ehrAmendment.FileName != oldEhrAmendment.FileName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FileName = '" + POut.String(ehrAmendment.FileName) + "'";
        }
         
        if (ehrAmendment.RawBase64 != oldEhrAmendment.RawBase64)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RawBase64 = " + DbHelper.ParamChar + "paramRawBase64";
        }
         
        if (ehrAmendment.DateTRequest != oldEhrAmendment.DateTRequest)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTRequest = " + POut.DateT(ehrAmendment.DateTRequest) + "";
        }
         
        if (ehrAmendment.DateTAcceptDeny != oldEhrAmendment.DateTAcceptDeny)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTAcceptDeny = " + POut.DateT(ehrAmendment.DateTAcceptDeny) + "";
        }
         
        if (ehrAmendment.DateTAppend != oldEhrAmendment.DateTAppend)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTAppend = " + POut.DateT(ehrAmendment.DateTAppend) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        if (ehrAmendment.RawBase64 == null)
        {
            ehrAmendment.RawBase64 = "";
        }
         
        OdSqlParameter paramRawBase64 = new OdSqlParameter("paramRawBase64", OdDbType.Text, ehrAmendment.RawBase64);
        command = "UPDATE ehramendment SET " + command + " WHERE EhrAmendmentNum = " + POut.Long(ehrAmendment.EhrAmendmentNum);
        Db.NonQ(command, paramRawBase64);
    }

    /**
    * Deletes one EhrAmendment from the database.
    */
    public static void delete(long ehrAmendmentNum) throws Exception {
        String command = "DELETE FROM ehramendment " + "WHERE EhrAmendmentNum = " + POut.Long(ehrAmendmentNum);
        Db.NonQ(command);
    }

}


