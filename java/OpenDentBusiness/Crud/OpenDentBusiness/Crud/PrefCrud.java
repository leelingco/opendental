//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:04 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class PrefCrud   
{
    /**
    * Gets one Pref object from the database using the primary key.  Returns null if not found.
    */
    public static Pref selectOne(long prefNum) throws Exception {
        String command = "SELECT * FROM preference " + "WHERE PrefNum = " + POut.Long(prefNum);
        List<Pref> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Pref object from the database using a query.
    */
    public static Pref selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Pref> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Pref objects from the database using a query.
    */
    public static List<Pref> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Pref> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Pref> tableToList(DataTable table) throws Exception {
        List<Pref> retVal = new List<Pref>();
        Pref pref = new Pref();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            pref = new Pref();
            pref.PrefNum = PIn.Long(table.Rows[i]["PrefNum"].ToString());
            pref.PrefName = PIn.String(table.Rows[i]["PrefName"].ToString());
            pref.ValueString = PIn.String(table.Rows[i]["ValueString"].ToString());
            pref.Comments = PIn.String(table.Rows[i]["Comments"].ToString());
            retVal.Add(pref);
        }
        return retVal;
    }

    /**
    * Inserts one Pref into the database.  Returns the new priKey.
    */
    public static long insert(Pref pref) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            pref.PrefNum = DbHelper.GetNextOracleKey("preference", "PrefNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(pref,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        pref.PrefNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(pref,false);
        } 
    }

    /**
    * Inserts one Pref into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Pref pref, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            pref.PrefNum = ReplicationServers.GetKey("preference", "PrefNum");
        }
         
        String command = "INSERT INTO preference (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "PrefNum,";
        }
         
        command += "PrefName,ValueString,Comments) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(pref.PrefNum) + ",";
        }
         
        command += "'" + POut.String(pref.PrefName) + "'," + "'" + POut.String(pref.ValueString) + "'," + "'" + POut.String(pref.Comments) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            pref.PrefNum = Db.NonQ(command, true);
        } 
        return pref.PrefNum;
    }

    /**
    * Updates one Pref in the database.
    */
    public static void update(Pref pref) throws Exception {
        String command = "UPDATE preference SET " + "PrefName   = '" + POut.String(pref.PrefName) + "', " + "ValueString= '" + POut.String(pref.ValueString) + "', " + "Comments   = '" + POut.String(pref.Comments) + "' " + "WHERE PrefNum = " + POut.Long(pref.PrefNum);
        Db.NonQ(command);
    }

    /**
    * Updates one Pref in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Pref pref, Pref oldPref) throws Exception {
        String command = "";
        if (pref.PrefName != oldPref.PrefName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PrefName = '" + POut.String(pref.PrefName) + "'";
        }
         
        if (pref.ValueString != oldPref.ValueString)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ValueString = '" + POut.String(pref.ValueString) + "'";
        }
         
        if (pref.Comments != oldPref.Comments)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Comments = '" + POut.String(pref.Comments) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE preference SET " + command + " WHERE PrefNum = " + POut.Long(pref.PrefNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one Pref from the database.
    */
    public static void delete(long prefNum) throws Exception {
        String command = "DELETE FROM preference " + "WHERE PrefNum = " + POut.Long(prefNum);
        Db.NonQ(command);
    }

}


