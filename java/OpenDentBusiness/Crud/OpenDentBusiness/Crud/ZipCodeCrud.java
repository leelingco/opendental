//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:09 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ZipCodeCrud   
{
    /**
    * Gets one ZipCode object from the database using the primary key.  Returns null if not found.
    */
    public static ZipCode selectOne(long zipCodeNum) throws Exception {
        String command = "SELECT * FROM zipcode " + "WHERE ZipCodeNum = " + POut.Long(zipCodeNum);
        List<ZipCode> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ZipCode object from the database using a query.
    */
    public static ZipCode selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ZipCode> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ZipCode objects from the database using a query.
    */
    public static List<ZipCode> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ZipCode> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ZipCode> tableToList(DataTable table) throws Exception {
        List<ZipCode> retVal = new List<ZipCode>();
        ZipCode zipCode = new ZipCode();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            zipCode = new ZipCode();
            zipCode.ZipCodeNum = PIn.Long(table.Rows[i]["ZipCodeNum"].ToString());
            zipCode.ZipCodeDigits = PIn.String(table.Rows[i]["ZipCodeDigits"].ToString());
            zipCode.City = PIn.String(table.Rows[i]["City"].ToString());
            zipCode.State = PIn.String(table.Rows[i]["State"].ToString());
            zipCode.IsFrequent = PIn.Bool(table.Rows[i]["IsFrequent"].ToString());
            retVal.Add(zipCode);
        }
        return retVal;
    }

    /**
    * Inserts one ZipCode into the database.  Returns the new priKey.
    */
    public static long insert(ZipCode zipCode) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            zipCode.ZipCodeNum = DbHelper.GetNextOracleKey("zipcode", "ZipCodeNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(zipCode,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        zipCode.ZipCodeNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(zipCode,false);
        } 
    }

    /**
    * Inserts one ZipCode into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ZipCode zipCode, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            zipCode.ZipCodeNum = ReplicationServers.GetKey("zipcode", "ZipCodeNum");
        }
         
        String command = "INSERT INTO zipcode (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ZipCodeNum,";
        }
         
        command += "ZipCodeDigits,City,State,IsFrequent) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(zipCode.ZipCodeNum) + ",";
        }
         
        command += "'" + POut.String(zipCode.ZipCodeDigits) + "'," + "'" + POut.String(zipCode.City) + "'," + "'" + POut.String(zipCode.State) + "'," + POut.Bool(zipCode.IsFrequent) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            zipCode.ZipCodeNum = Db.NonQ(command, true);
        } 
        return zipCode.ZipCodeNum;
    }

    /**
    * Updates one ZipCode in the database.
    */
    public static void update(ZipCode zipCode) throws Exception {
        String command = "UPDATE zipcode SET " + "ZipCodeDigits= '" + POut.String(zipCode.ZipCodeDigits) + "', " + "City         = '" + POut.String(zipCode.City) + "', " + "State        = '" + POut.String(zipCode.State) + "', " + "IsFrequent   =  " + POut.Bool(zipCode.IsFrequent) + " " + "WHERE ZipCodeNum = " + POut.Long(zipCode.ZipCodeNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ZipCode in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ZipCode zipCode, ZipCode oldZipCode) throws Exception {
        String command = "";
        if (zipCode.ZipCodeDigits != oldZipCode.ZipCodeDigits)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ZipCodeDigits = '" + POut.String(zipCode.ZipCodeDigits) + "'";
        }
         
        if (zipCode.City != oldZipCode.City)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "City = '" + POut.String(zipCode.City) + "'";
        }
         
        if (zipCode.State != oldZipCode.State)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "State = '" + POut.String(zipCode.State) + "'";
        }
         
        if (zipCode.IsFrequent != oldZipCode.IsFrequent)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsFrequent = " + POut.Bool(zipCode.IsFrequent) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE zipcode SET " + command + " WHERE ZipCodeNum = " + POut.Long(zipCode.ZipCodeNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ZipCode from the database.
    */
    public static void delete(long zipCodeNum) throws Exception {
        String command = "DELETE FROM zipcode " + "WHERE ZipCodeNum = " + POut.Long(zipCodeNum);
        Db.NonQ(command);
    }

}


