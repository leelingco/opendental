//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:05 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ProgramPropertyCrud   
{
    /**
    * Gets one ProgramProperty object from the database using the primary key.  Returns null if not found.
    */
    public static ProgramProperty selectOne(long programPropertyNum) throws Exception {
        String command = "SELECT * FROM programproperty " + "WHERE ProgramPropertyNum = " + POut.Long(programPropertyNum);
        List<ProgramProperty> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ProgramProperty object from the database using a query.
    */
    public static ProgramProperty selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ProgramProperty> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ProgramProperty objects from the database using a query.
    */
    public static List<ProgramProperty> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ProgramProperty> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ProgramProperty> tableToList(DataTable table) throws Exception {
        List<ProgramProperty> retVal = new List<ProgramProperty>();
        ProgramProperty programProperty = new ProgramProperty();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            programProperty = new ProgramProperty();
            programProperty.ProgramPropertyNum = PIn.Long(table.Rows[i]["ProgramPropertyNum"].ToString());
            programProperty.ProgramNum = PIn.Long(table.Rows[i]["ProgramNum"].ToString());
            programProperty.PropertyDesc = PIn.String(table.Rows[i]["PropertyDesc"].ToString());
            programProperty.PropertyValue = PIn.String(table.Rows[i]["PropertyValue"].ToString());
            programProperty.ComputerName = PIn.String(table.Rows[i]["ComputerName"].ToString());
            retVal.Add(programProperty);
        }
        return retVal;
    }

    /**
    * Inserts one ProgramProperty into the database.  Returns the new priKey.
    */
    public static long insert(ProgramProperty programProperty) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            programProperty.ProgramPropertyNum = DbHelper.GetNextOracleKey("programproperty", "ProgramPropertyNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(programProperty,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        programProperty.ProgramPropertyNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(programProperty,false);
        } 
    }

    /**
    * Inserts one ProgramProperty into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ProgramProperty programProperty, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            programProperty.ProgramPropertyNum = ReplicationServers.GetKey("programproperty", "ProgramPropertyNum");
        }
         
        String command = "INSERT INTO programproperty (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ProgramPropertyNum,";
        }
         
        command += "ProgramNum,PropertyDesc,PropertyValue,ComputerName) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(programProperty.ProgramPropertyNum) + ",";
        }
         
        command += POut.Long(programProperty.ProgramNum) + "," + "'" + POut.String(programProperty.PropertyDesc) + "'," + "'" + POut.String(programProperty.PropertyValue) + "'," + "'" + POut.String(programProperty.ComputerName) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            programProperty.ProgramPropertyNum = Db.NonQ(command, true);
        } 
        return programProperty.ProgramPropertyNum;
    }

    /**
    * Updates one ProgramProperty in the database.
    */
    public static void update(ProgramProperty programProperty) throws Exception {
        String command = "UPDATE programproperty SET " + "ProgramNum        =  " + POut.Long(programProperty.ProgramNum) + ", " + "PropertyDesc      = '" + POut.String(programProperty.PropertyDesc) + "', " + "PropertyValue     = '" + POut.String(programProperty.PropertyValue) + "', " + "ComputerName      = '" + POut.String(programProperty.ComputerName) + "' " + "WHERE ProgramPropertyNum = " + POut.Long(programProperty.ProgramPropertyNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ProgramProperty in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ProgramProperty programProperty, ProgramProperty oldProgramProperty) throws Exception {
        String command = "";
        if (programProperty.ProgramNum != oldProgramProperty.ProgramNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProgramNum = " + POut.Long(programProperty.ProgramNum) + "";
        }
         
        if (programProperty.PropertyDesc != oldProgramProperty.PropertyDesc)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PropertyDesc = '" + POut.String(programProperty.PropertyDesc) + "'";
        }
         
        if (programProperty.PropertyValue != oldProgramProperty.PropertyValue)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PropertyValue = '" + POut.String(programProperty.PropertyValue) + "'";
        }
         
        if (programProperty.ComputerName != oldProgramProperty.ComputerName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ComputerName = '" + POut.String(programProperty.ComputerName) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE programproperty SET " + command + " WHERE ProgramPropertyNum = " + POut.Long(programProperty.ProgramPropertyNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ProgramProperty from the database.
    */
    public static void delete(long programPropertyNum) throws Exception {
        String command = "DELETE FROM programproperty " + "WHERE ProgramPropertyNum = " + POut.Long(programPropertyNum);
        Db.NonQ(command);
    }

}


