//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:02 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class MedicationPatCrud   
{
    /**
    * Gets one MedicationPat object from the database using the primary key.  Returns null if not found.
    */
    public static MedicationPat selectOne(long medicationPatNum) throws Exception {
        String command = "SELECT * FROM medicationpat " + "WHERE MedicationPatNum = " + POut.Long(medicationPatNum);
        List<MedicationPat> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one MedicationPat object from the database using a query.
    */
    public static MedicationPat selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<MedicationPat> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of MedicationPat objects from the database using a query.
    */
    public static List<MedicationPat> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<MedicationPat> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<MedicationPat> tableToList(DataTable table) throws Exception {
        List<MedicationPat> retVal = new List<MedicationPat>();
        MedicationPat medicationPat = new MedicationPat();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            medicationPat = new MedicationPat();
            medicationPat.MedicationPatNum = PIn.Long(table.Rows[i]["MedicationPatNum"].ToString());
            medicationPat.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            medicationPat.MedicationNum = PIn.Long(table.Rows[i]["MedicationNum"].ToString());
            medicationPat.PatNote = PIn.String(table.Rows[i]["PatNote"].ToString());
            medicationPat.DateTStamp = PIn.DateT(table.Rows[i]["DateTStamp"].ToString());
            medicationPat.DateStart = PIn.Date(table.Rows[i]["DateStart"].ToString());
            medicationPat.DateStop = PIn.Date(table.Rows[i]["DateStop"].ToString());
            medicationPat.ProvNum = PIn.Long(table.Rows[i]["ProvNum"].ToString());
            medicationPat.MedDescript = PIn.String(table.Rows[i]["MedDescript"].ToString());
            medicationPat.RxCui = PIn.Long(table.Rows[i]["RxCui"].ToString());
            medicationPat.NewCropGuid = PIn.String(table.Rows[i]["NewCropGuid"].ToString());
            medicationPat.IsCpoe = PIn.Bool(table.Rows[i]["IsCpoe"].ToString());
            retVal.Add(medicationPat);
        }
        return retVal;
    }

    /**
    * Inserts one MedicationPat into the database.  Returns the new priKey.
    */
    public static long insert(MedicationPat medicationPat) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            medicationPat.MedicationPatNum = DbHelper.GetNextOracleKey("medicationpat", "MedicationPatNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(medicationPat,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        medicationPat.MedicationPatNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(medicationPat,false);
        } 
    }

    /**
    * Inserts one MedicationPat into the database.  Provides option to use the existing priKey.
    */
    public static long insert(MedicationPat medicationPat, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            medicationPat.MedicationPatNum = ReplicationServers.GetKey("medicationpat", "MedicationPatNum");
        }
         
        String command = "INSERT INTO medicationpat (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "MedicationPatNum,";
        }
         
        command += "PatNum,MedicationNum,PatNote,DateStart,DateStop,ProvNum,MedDescript,RxCui,NewCropGuid,IsCpoe) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(medicationPat.MedicationPatNum) + ",";
        }
         
        //DateTStamp can only be set by MySQL
        command += POut.Long(medicationPat.PatNum) + "," + POut.Long(medicationPat.MedicationNum) + "," + "'" + POut.String(medicationPat.PatNote) + "'," + POut.Date(medicationPat.DateStart) + "," + POut.Date(medicationPat.DateStop) + "," + POut.Long(medicationPat.ProvNum) + "," + "'" + POut.String(medicationPat.MedDescript) + "'," + POut.Long(medicationPat.RxCui) + "," + "'" + POut.String(medicationPat.NewCropGuid) + "'," + POut.Bool(medicationPat.IsCpoe) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            medicationPat.MedicationPatNum = Db.NonQ(command, true);
        } 
        return medicationPat.MedicationPatNum;
    }

    /**
    * Updates one MedicationPat in the database.
    */
    public static void update(MedicationPat medicationPat) throws Exception {
        //DateTStamp can only be set by MySQL
        String command = "UPDATE medicationpat SET " + "PatNum          =  " + POut.Long(medicationPat.PatNum) + ", " + "MedicationNum   =  " + POut.Long(medicationPat.MedicationNum) + ", " + "PatNote         = '" + POut.String(medicationPat.PatNote) + "', " + "DateStart       =  " + POut.Date(medicationPat.DateStart) + ", " + "DateStop        =  " + POut.Date(medicationPat.DateStop) + ", " + "ProvNum         =  " + POut.Long(medicationPat.ProvNum) + ", " + "MedDescript     = '" + POut.String(medicationPat.MedDescript) + "', " + "RxCui           =  " + POut.Long(medicationPat.RxCui) + ", " + "NewCropGuid     = '" + POut.String(medicationPat.NewCropGuid) + "', " + "IsCpoe          =  " + POut.Bool(medicationPat.IsCpoe) + " " + "WHERE MedicationPatNum = " + POut.Long(medicationPat.MedicationPatNum);
        Db.NonQ(command);
    }

    /**
    * Updates one MedicationPat in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(MedicationPat medicationPat, MedicationPat oldMedicationPat) throws Exception {
        String command = "";
        if (medicationPat.PatNum != oldMedicationPat.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(medicationPat.PatNum) + "";
        }
         
        if (medicationPat.MedicationNum != oldMedicationPat.MedicationNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MedicationNum = " + POut.Long(medicationPat.MedicationNum) + "";
        }
         
        if (medicationPat.PatNote != oldMedicationPat.PatNote)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNote = '" + POut.String(medicationPat.PatNote) + "'";
        }
         
        //DateTStamp can only be set by MySQL
        if (medicationPat.DateStart != oldMedicationPat.DateStart)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateStart = " + POut.Date(medicationPat.DateStart) + "";
        }
         
        if (medicationPat.DateStop != oldMedicationPat.DateStop)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateStop = " + POut.Date(medicationPat.DateStop) + "";
        }
         
        if (medicationPat.ProvNum != oldMedicationPat.ProvNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvNum = " + POut.Long(medicationPat.ProvNum) + "";
        }
         
        if (medicationPat.MedDescript != oldMedicationPat.MedDescript)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MedDescript = '" + POut.String(medicationPat.MedDescript) + "'";
        }
         
        if (medicationPat.RxCui != oldMedicationPat.RxCui)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RxCui = " + POut.Long(medicationPat.RxCui) + "";
        }
         
        if (medicationPat.NewCropGuid != oldMedicationPat.NewCropGuid)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "NewCropGuid = '" + POut.String(medicationPat.NewCropGuid) + "'";
        }
         
        if (medicationPat.IsCpoe != oldMedicationPat.IsCpoe)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsCpoe = " + POut.Bool(medicationPat.IsCpoe) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE medicationpat SET " + command + " WHERE MedicationPatNum = " + POut.Long(medicationPat.MedicationPatNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one MedicationPat from the database.
    */
    public static void delete(long medicationPatNum) throws Exception {
        String command = "DELETE FROM medicationpat " + "WHERE MedicationPatNum = " + POut.Long(medicationPatNum);
        Db.NonQ(command);
    }

}


