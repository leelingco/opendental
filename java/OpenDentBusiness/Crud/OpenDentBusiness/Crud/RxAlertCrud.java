//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:06 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class RxAlertCrud   
{
    /**
    * Gets one RxAlert object from the database using the primary key.  Returns null if not found.
    */
    public static RxAlert selectOne(long rxAlertNum) throws Exception {
        String command = "SELECT * FROM rxalert " + "WHERE RxAlertNum = " + POut.Long(rxAlertNum);
        List<RxAlert> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one RxAlert object from the database using a query.
    */
    public static RxAlert selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<RxAlert> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of RxAlert objects from the database using a query.
    */
    public static List<RxAlert> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<RxAlert> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<RxAlert> tableToList(DataTable table) throws Exception {
        List<RxAlert> retVal = new List<RxAlert>();
        RxAlert rxAlert = new RxAlert();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            rxAlert = new RxAlert();
            rxAlert.RxAlertNum = PIn.Long(table.Rows[i]["RxAlertNum"].ToString());
            rxAlert.RxDefNum = PIn.Long(table.Rows[i]["RxDefNum"].ToString());
            rxAlert.DiseaseDefNum = PIn.Long(table.Rows[i]["DiseaseDefNum"].ToString());
            rxAlert.AllergyDefNum = PIn.Long(table.Rows[i]["AllergyDefNum"].ToString());
            rxAlert.MedicationNum = PIn.Long(table.Rows[i]["MedicationNum"].ToString());
            rxAlert.NotificationMsg = PIn.String(table.Rows[i]["NotificationMsg"].ToString());
            rxAlert.IsHighSignificance = PIn.Bool(table.Rows[i]["IsHighSignificance"].ToString());
            retVal.Add(rxAlert);
        }
        return retVal;
    }

    /**
    * Inserts one RxAlert into the database.  Returns the new priKey.
    */
    public static long insert(RxAlert rxAlert) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            rxAlert.RxAlertNum = DbHelper.GetNextOracleKey("rxalert", "RxAlertNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(rxAlert,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        rxAlert.RxAlertNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(rxAlert,false);
        } 
    }

    /**
    * Inserts one RxAlert into the database.  Provides option to use the existing priKey.
    */
    public static long insert(RxAlert rxAlert, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            rxAlert.RxAlertNum = ReplicationServers.GetKey("rxalert", "RxAlertNum");
        }
         
        String command = "INSERT INTO rxalert (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "RxAlertNum,";
        }
         
        command += "RxDefNum,DiseaseDefNum,AllergyDefNum,MedicationNum,NotificationMsg,IsHighSignificance) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(rxAlert.RxAlertNum) + ",";
        }
         
        command += POut.Long(rxAlert.RxDefNum) + "," + POut.Long(rxAlert.DiseaseDefNum) + "," + POut.Long(rxAlert.AllergyDefNum) + "," + POut.Long(rxAlert.MedicationNum) + "," + "'" + POut.String(rxAlert.NotificationMsg) + "'," + POut.Bool(rxAlert.IsHighSignificance) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            rxAlert.RxAlertNum = Db.NonQ(command, true);
        } 
        return rxAlert.RxAlertNum;
    }

    /**
    * Updates one RxAlert in the database.
    */
    public static void update(RxAlert rxAlert) throws Exception {
        String command = "UPDATE rxalert SET " + "RxDefNum          =  " + POut.Long(rxAlert.RxDefNum) + ", " + "DiseaseDefNum     =  " + POut.Long(rxAlert.DiseaseDefNum) + ", " + "AllergyDefNum     =  " + POut.Long(rxAlert.AllergyDefNum) + ", " + "MedicationNum     =  " + POut.Long(rxAlert.MedicationNum) + ", " + "NotificationMsg   = '" + POut.String(rxAlert.NotificationMsg) + "', " + "IsHighSignificance=  " + POut.Bool(rxAlert.IsHighSignificance) + " " + "WHERE RxAlertNum = " + POut.Long(rxAlert.RxAlertNum);
        Db.NonQ(command);
    }

    /**
    * Updates one RxAlert in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(RxAlert rxAlert, RxAlert oldRxAlert) throws Exception {
        String command = "";
        if (rxAlert.RxDefNum != oldRxAlert.RxDefNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RxDefNum = " + POut.Long(rxAlert.RxDefNum) + "";
        }
         
        if (rxAlert.DiseaseDefNum != oldRxAlert.DiseaseDefNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DiseaseDefNum = " + POut.Long(rxAlert.DiseaseDefNum) + "";
        }
         
        if (rxAlert.AllergyDefNum != oldRxAlert.AllergyDefNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AllergyDefNum = " + POut.Long(rxAlert.AllergyDefNum) + "";
        }
         
        if (rxAlert.MedicationNum != oldRxAlert.MedicationNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MedicationNum = " + POut.Long(rxAlert.MedicationNum) + "";
        }
         
        if (rxAlert.NotificationMsg != oldRxAlert.NotificationMsg)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "NotificationMsg = '" + POut.String(rxAlert.NotificationMsg) + "'";
        }
         
        if (rxAlert.IsHighSignificance != oldRxAlert.IsHighSignificance)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsHighSignificance = " + POut.Bool(rxAlert.IsHighSignificance) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE rxalert SET " + command + " WHERE RxAlertNum = " + POut.Long(rxAlert.RxAlertNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one RxAlert from the database.
    */
    public static void delete(long rxAlertNum) throws Exception {
        String command = "DELETE FROM rxalert " + "WHERE RxAlertNum = " + POut.Long(rxAlertNum);
        Db.NonQ(command);
    }

}


