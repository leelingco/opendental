//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:07 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ScreenGroupCrud   
{
    /**
    * Gets one ScreenGroup object from the database using the primary key.  Returns null if not found.
    */
    public static ScreenGroup selectOne(long screenGroupNum) throws Exception {
        String command = "SELECT * FROM screengroup " + "WHERE ScreenGroupNum = " + POut.Long(screenGroupNum);
        List<ScreenGroup> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ScreenGroup object from the database using a query.
    */
    public static ScreenGroup selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ScreenGroup> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ScreenGroup objects from the database using a query.
    */
    public static List<ScreenGroup> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ScreenGroup> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ScreenGroup> tableToList(DataTable table) throws Exception {
        List<ScreenGroup> retVal = new List<ScreenGroup>();
        ScreenGroup screenGroup = new ScreenGroup();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            screenGroup = new ScreenGroup();
            screenGroup.ScreenGroupNum = PIn.Long(table.Rows[i]["ScreenGroupNum"].ToString());
            screenGroup.Description = PIn.String(table.Rows[i]["Description"].ToString());
            screenGroup.SGDate = PIn.Date(table.Rows[i]["SGDate"].ToString());
            retVal.Add(screenGroup);
        }
        return retVal;
    }

    /**
    * Inserts one ScreenGroup into the database.  Returns the new priKey.
    */
    public static long insert(ScreenGroup screenGroup) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            screenGroup.ScreenGroupNum = DbHelper.GetNextOracleKey("screengroup", "ScreenGroupNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(screenGroup,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        screenGroup.ScreenGroupNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(screenGroup,false);
        } 
    }

    /**
    * Inserts one ScreenGroup into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ScreenGroup screenGroup, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            screenGroup.ScreenGroupNum = ReplicationServers.GetKey("screengroup", "ScreenGroupNum");
        }
         
        String command = "INSERT INTO screengroup (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ScreenGroupNum,";
        }
         
        command += "Description,SGDate) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(screenGroup.ScreenGroupNum) + ",";
        }
         
        command += "'" + POut.String(screenGroup.Description) + "'," + POut.Date(screenGroup.SGDate) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            screenGroup.ScreenGroupNum = Db.NonQ(command, true);
        } 
        return screenGroup.ScreenGroupNum;
    }

    /**
    * Updates one ScreenGroup in the database.
    */
    public static void update(ScreenGroup screenGroup) throws Exception {
        String command = "UPDATE screengroup SET " + "Description   = '" + POut.String(screenGroup.Description) + "', " + "SGDate        =  " + POut.Date(screenGroup.SGDate) + " " + "WHERE ScreenGroupNum = " + POut.Long(screenGroup.ScreenGroupNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ScreenGroup in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ScreenGroup screenGroup, ScreenGroup oldScreenGroup) throws Exception {
        String command = "";
        if (screenGroup.Description != oldScreenGroup.Description)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.String(screenGroup.Description) + "'";
        }
         
        if (screenGroup.SGDate != oldScreenGroup.SGDate)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SGDate = " + POut.Date(screenGroup.SGDate) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE screengroup SET " + command + " WHERE ScreenGroupNum = " + POut.Long(screenGroup.ScreenGroupNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ScreenGroup from the database.
    */
    public static void delete(long screenGroupNum) throws Exception {
        String command = "DELETE FROM screengroup " + "WHERE ScreenGroupNum = " + POut.Long(screenGroupNum);
        Db.NonQ(command);
    }

}


