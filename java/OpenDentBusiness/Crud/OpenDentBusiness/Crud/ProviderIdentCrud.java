//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:05 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ProviderIdentCrud   
{
    /**
    * Gets one ProviderIdent object from the database using the primary key.  Returns null if not found.
    */
    public static ProviderIdent selectOne(long providerIdentNum) throws Exception {
        String command = "SELECT * FROM providerident " + "WHERE ProviderIdentNum = " + POut.Long(providerIdentNum);
        List<ProviderIdent> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ProviderIdent object from the database using a query.
    */
    public static ProviderIdent selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ProviderIdent> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ProviderIdent objects from the database using a query.
    */
    public static List<ProviderIdent> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ProviderIdent> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ProviderIdent> tableToList(DataTable table) throws Exception {
        List<ProviderIdent> retVal = new List<ProviderIdent>();
        ProviderIdent providerIdent = new ProviderIdent();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            providerIdent = new ProviderIdent();
            providerIdent.ProviderIdentNum = PIn.Long(table.Rows[i]["ProviderIdentNum"].ToString());
            providerIdent.ProvNum = PIn.Long(table.Rows[i]["ProvNum"].ToString());
            providerIdent.PayorID = PIn.String(table.Rows[i]["PayorID"].ToString());
            providerIdent.SuppIDType = (ProviderSupplementalID)PIn.Int(table.Rows[i]["SuppIDType"].ToString());
            providerIdent.IDNumber = PIn.String(table.Rows[i]["IDNumber"].ToString());
            retVal.Add(providerIdent);
        }
        return retVal;
    }

    /**
    * Inserts one ProviderIdent into the database.  Returns the new priKey.
    */
    public static long insert(ProviderIdent providerIdent) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            providerIdent.ProviderIdentNum = DbHelper.GetNextOracleKey("providerident", "ProviderIdentNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(providerIdent,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        providerIdent.ProviderIdentNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(providerIdent,false);
        } 
    }

    /**
    * Inserts one ProviderIdent into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ProviderIdent providerIdent, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            providerIdent.ProviderIdentNum = ReplicationServers.GetKey("providerident", "ProviderIdentNum");
        }
         
        String command = "INSERT INTO providerident (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ProviderIdentNum,";
        }
         
        command += "ProvNum,PayorID,SuppIDType,IDNumber) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(providerIdent.ProviderIdentNum) + ",";
        }
         
        command += POut.Long(providerIdent.ProvNum) + "," + "'" + POut.String(providerIdent.PayorID) + "'," + POut.Int((int)providerIdent.SuppIDType) + "," + "'" + POut.String(providerIdent.IDNumber) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            providerIdent.ProviderIdentNum = Db.NonQ(command, true);
        } 
        return providerIdent.ProviderIdentNum;
    }

    /**
    * Updates one ProviderIdent in the database.
    */
    public static void update(ProviderIdent providerIdent) throws Exception {
        String command = "UPDATE providerident SET " + "ProvNum         =  " + POut.Long(providerIdent.ProvNum) + ", " + "PayorID         = '" + POut.String(providerIdent.PayorID) + "', " + "SuppIDType      =  " + POut.Int((int)providerIdent.SuppIDType) + ", " + "IDNumber        = '" + POut.String(providerIdent.IDNumber) + "' " + "WHERE ProviderIdentNum = " + POut.Long(providerIdent.ProviderIdentNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ProviderIdent in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ProviderIdent providerIdent, ProviderIdent oldProviderIdent) throws Exception {
        String command = "";
        if (providerIdent.ProvNum != oldProviderIdent.ProvNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvNum = " + POut.Long(providerIdent.ProvNum) + "";
        }
         
        if (providerIdent.PayorID != oldProviderIdent.PayorID)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PayorID = '" + POut.String(providerIdent.PayorID) + "'";
        }
         
        if (providerIdent.SuppIDType != oldProviderIdent.SuppIDType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SuppIDType = " + POut.Int((int)providerIdent.SuppIDType) + "";
        }
         
        if (providerIdent.IDNumber != oldProviderIdent.IDNumber)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IDNumber = '" + POut.String(providerIdent.IDNumber) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE providerident SET " + command + " WHERE ProviderIdentNum = " + POut.Long(providerIdent.ProviderIdentNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ProviderIdent from the database.
    */
    public static void delete(long providerIdentNum) throws Exception {
        String command = "DELETE FROM providerident " + "WHERE ProviderIdentNum = " + POut.Long(providerIdentNum);
        Db.NonQ(command);
    }

}


