//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:59 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EhrCodeCrud   
{
    /**
    * Gets one EhrCode object from the database using the primary key.  Returns null if not found.
    */
    public static EhrCode selectOne(long ehrCodeNum) throws Exception {
        String command = "SELECT * FROM ehrcode " + "WHERE EhrCodeNum = " + POut.Long(ehrCodeNum);
        List<EhrCode> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one EhrCode object from the database using a query.
    */
    public static EhrCode selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrCode> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of EhrCode objects from the database using a query.
    */
    public static List<EhrCode> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrCode> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<EhrCode> tableToList(DataTable table) throws Exception {
        List<EhrCode> retVal = new List<EhrCode>();
        EhrCode ehrCode = new EhrCode();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            ehrCode = new EhrCode();
            ehrCode.EhrCodeNum = PIn.Long(table.Rows[i]["EhrCodeNum"].ToString());
            ehrCode.MeasureIds = PIn.String(table.Rows[i]["MeasureIds"].ToString());
            ehrCode.ValueSetName = PIn.String(table.Rows[i]["ValueSetName"].ToString());
            ehrCode.ValueSetOID = PIn.String(table.Rows[i]["ValueSetOID"].ToString());
            ehrCode.QDMCategory = PIn.String(table.Rows[i]["QDMCategory"].ToString());
            ehrCode.CodeValue = PIn.String(table.Rows[i]["CodeValue"].ToString());
            ehrCode.Description = PIn.String(table.Rows[i]["Description"].ToString());
            ehrCode.CodeSystem = PIn.String(table.Rows[i]["CodeSystem"].ToString());
            ehrCode.CodeSystemOID = PIn.String(table.Rows[i]["CodeSystemOID"].ToString());
            ehrCode.IsInDb = PIn.Bool(table.Rows[i]["IsInDb"].ToString());
            retVal.Add(ehrCode);
        }
        return retVal;
    }

    /**
    * Inserts one EhrCode into the database.  Returns the new priKey.
    */
    public static long insert(EhrCode ehrCode) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            ehrCode.EhrCodeNum = DbHelper.GetNextOracleKey("ehrcode", "EhrCodeNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(ehrCode,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        ehrCode.EhrCodeNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(ehrCode,false);
        } 
    }

    /**
    * Inserts one EhrCode into the database.  Provides option to use the existing priKey.
    */
    public static long insert(EhrCode ehrCode, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            ehrCode.EhrCodeNum = ReplicationServers.GetKey("ehrcode", "EhrCodeNum");
        }
         
        String command = "INSERT INTO ehrcode (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "EhrCodeNum,";
        }
         
        command += "MeasureIds,ValueSetName,ValueSetOID,QDMCategory,CodeValue,Description,CodeSystem,CodeSystemOID,IsInDb) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(ehrCode.EhrCodeNum) + ",";
        }
         
        command += "'" + POut.String(ehrCode.MeasureIds) + "'," + "'" + POut.String(ehrCode.ValueSetName) + "'," + "'" + POut.String(ehrCode.ValueSetOID) + "'," + "'" + POut.String(ehrCode.QDMCategory) + "'," + "'" + POut.String(ehrCode.CodeValue) + "'," + "'" + POut.String(ehrCode.Description) + "'," + "'" + POut.String(ehrCode.CodeSystem) + "'," + "'" + POut.String(ehrCode.CodeSystemOID) + "'," + POut.Bool(ehrCode.IsInDb) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            ehrCode.EhrCodeNum = Db.NonQ(command, true);
        } 
        return ehrCode.EhrCodeNum;
    }

    /**
    * Updates one EhrCode in the database.
    */
    public static void update(EhrCode ehrCode) throws Exception {
        String command = "UPDATE ehrcode SET " + "MeasureIds   = '" + POut.String(ehrCode.MeasureIds) + "', " + "ValueSetName = '" + POut.String(ehrCode.ValueSetName) + "', " + "ValueSetOID  = '" + POut.String(ehrCode.ValueSetOID) + "', " + "QDMCategory  = '" + POut.String(ehrCode.QDMCategory) + "', " + "CodeValue    = '" + POut.String(ehrCode.CodeValue) + "', " + "Description  = '" + POut.String(ehrCode.Description) + "', " + "CodeSystem   = '" + POut.String(ehrCode.CodeSystem) + "', " + "CodeSystemOID= '" + POut.String(ehrCode.CodeSystemOID) + "', " + "IsInDb       =  " + POut.Bool(ehrCode.IsInDb) + " " + "WHERE EhrCodeNum = " + POut.Long(ehrCode.EhrCodeNum);
        Db.NonQ(command);
    }

    /**
    * Updates one EhrCode in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(EhrCode ehrCode, EhrCode oldEhrCode) throws Exception {
        String command = "";
        if (ehrCode.MeasureIds != oldEhrCode.MeasureIds)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MeasureIds = '" + POut.String(ehrCode.MeasureIds) + "'";
        }
         
        if (ehrCode.ValueSetName != oldEhrCode.ValueSetName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ValueSetName = '" + POut.String(ehrCode.ValueSetName) + "'";
        }
         
        if (ehrCode.ValueSetOID != oldEhrCode.ValueSetOID)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ValueSetOID = '" + POut.String(ehrCode.ValueSetOID) + "'";
        }
         
        if (ehrCode.QDMCategory != oldEhrCode.QDMCategory)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "QDMCategory = '" + POut.String(ehrCode.QDMCategory) + "'";
        }
         
        if (ehrCode.CodeValue != oldEhrCode.CodeValue)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeValue = '" + POut.String(ehrCode.CodeValue) + "'";
        }
         
        if (ehrCode.Description != oldEhrCode.Description)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.String(ehrCode.Description) + "'";
        }
         
        if (ehrCode.CodeSystem != oldEhrCode.CodeSystem)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeSystem = '" + POut.String(ehrCode.CodeSystem) + "'";
        }
         
        if (ehrCode.CodeSystemOID != oldEhrCode.CodeSystemOID)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeSystemOID = '" + POut.String(ehrCode.CodeSystemOID) + "'";
        }
         
        if (ehrCode.IsInDb != oldEhrCode.IsInDb)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsInDb = " + POut.Bool(ehrCode.IsInDb) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE ehrcode SET " + command + " WHERE EhrCodeNum = " + POut.Long(ehrCode.EhrCodeNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one EhrCode from the database.
    */
    public static void delete(long ehrCodeNum) throws Exception {
        String command = "DELETE FROM ehrcode " + "WHERE EhrCodeNum = " + POut.Long(ehrCodeNum);
        Db.NonQ(command);
    }

}


