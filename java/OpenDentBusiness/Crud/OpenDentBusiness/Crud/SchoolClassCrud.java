//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:06 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class SchoolClassCrud   
{
    /**
    * Gets one SchoolClass object from the database using the primary key.  Returns null if not found.
    */
    public static SchoolClass selectOne(long schoolClassNum) throws Exception {
        String command = "SELECT * FROM schoolclass " + "WHERE SchoolClassNum = " + POut.Long(schoolClassNum);
        List<SchoolClass> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one SchoolClass object from the database using a query.
    */
    public static SchoolClass selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<SchoolClass> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of SchoolClass objects from the database using a query.
    */
    public static List<SchoolClass> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<SchoolClass> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<SchoolClass> tableToList(DataTable table) throws Exception {
        List<SchoolClass> retVal = new List<SchoolClass>();
        SchoolClass schoolClass = new SchoolClass();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            schoolClass = new SchoolClass();
            schoolClass.SchoolClassNum = PIn.Long(table.Rows[i]["SchoolClassNum"].ToString());
            schoolClass.GradYear = PIn.Int(table.Rows[i]["GradYear"].ToString());
            schoolClass.Descript = PIn.String(table.Rows[i]["Descript"].ToString());
            retVal.Add(schoolClass);
        }
        return retVal;
    }

    /**
    * Inserts one SchoolClass into the database.  Returns the new priKey.
    */
    public static long insert(SchoolClass schoolClass) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            schoolClass.SchoolClassNum = DbHelper.GetNextOracleKey("schoolclass", "SchoolClassNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(schoolClass,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        schoolClass.SchoolClassNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(schoolClass,false);
        } 
    }

    /**
    * Inserts one SchoolClass into the database.  Provides option to use the existing priKey.
    */
    public static long insert(SchoolClass schoolClass, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            schoolClass.SchoolClassNum = ReplicationServers.GetKey("schoolclass", "SchoolClassNum");
        }
         
        String command = "INSERT INTO schoolclass (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "SchoolClassNum,";
        }
         
        command += "GradYear,Descript) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(schoolClass.SchoolClassNum) + ",";
        }
         
        command += POut.Int(schoolClass.GradYear) + "," + "'" + POut.String(schoolClass.Descript) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            schoolClass.SchoolClassNum = Db.NonQ(command, true);
        } 
        return schoolClass.SchoolClassNum;
    }

    /**
    * Updates one SchoolClass in the database.
    */
    public static void update(SchoolClass schoolClass) throws Exception {
        String command = "UPDATE schoolclass SET " + "GradYear      =  " + POut.Int(schoolClass.GradYear) + ", " + "Descript      = '" + POut.String(schoolClass.Descript) + "' " + "WHERE SchoolClassNum = " + POut.Long(schoolClass.SchoolClassNum);
        Db.NonQ(command);
    }

    /**
    * Updates one SchoolClass in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(SchoolClass schoolClass, SchoolClass oldSchoolClass) throws Exception {
        String command = "";
        if (schoolClass.GradYear != oldSchoolClass.GradYear)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "GradYear = " + POut.Int(schoolClass.GradYear) + "";
        }
         
        if (schoolClass.Descript != oldSchoolClass.Descript)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Descript = '" + POut.String(schoolClass.Descript) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE schoolclass SET " + command + " WHERE SchoolClassNum = " + POut.Long(schoolClass.SchoolClassNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one SchoolClass from the database.
    */
    public static void delete(long schoolClassNum) throws Exception {
        String command = "DELETE FROM schoolclass " + "WHERE SchoolClassNum = " + POut.Long(schoolClassNum);
        Db.NonQ(command);
    }

}


