//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:07 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class SigButDefCrud   
{
    /**
    * Gets one SigButDef object from the database using the primary key.  Returns null if not found.
    */
    public static SigButDef selectOne(long sigButDefNum) throws Exception {
        String command = "SELECT * FROM sigbutdef " + "WHERE SigButDefNum = " + POut.Long(sigButDefNum);
        List<SigButDef> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one SigButDef object from the database using a query.
    */
    public static SigButDef selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<SigButDef> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of SigButDef objects from the database using a query.
    */
    public static List<SigButDef> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<SigButDef> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<SigButDef> tableToList(DataTable table) throws Exception {
        List<SigButDef> retVal = new List<SigButDef>();
        SigButDef sigButDef = new SigButDef();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            sigButDef = new SigButDef();
            sigButDef.SigButDefNum = PIn.Long(table.Rows[i]["SigButDefNum"].ToString());
            sigButDef.ButtonText = PIn.String(table.Rows[i]["ButtonText"].ToString());
            sigButDef.ButtonIndex = PIn.Int(table.Rows[i]["ButtonIndex"].ToString());
            sigButDef.SynchIcon = PIn.Byte(table.Rows[i]["SynchIcon"].ToString());
            sigButDef.ComputerName = PIn.String(table.Rows[i]["ComputerName"].ToString());
            retVal.Add(sigButDef);
        }
        return retVal;
    }

    /**
    * Inserts one SigButDef into the database.  Returns the new priKey.
    */
    public static long insert(SigButDef sigButDef) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            sigButDef.SigButDefNum = DbHelper.GetNextOracleKey("sigbutdef", "SigButDefNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(sigButDef,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        sigButDef.SigButDefNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(sigButDef,false);
        } 
    }

    /**
    * Inserts one SigButDef into the database.  Provides option to use the existing priKey.
    */
    public static long insert(SigButDef sigButDef, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            sigButDef.SigButDefNum = ReplicationServers.GetKey("sigbutdef", "SigButDefNum");
        }
         
        String command = "INSERT INTO sigbutdef (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "SigButDefNum,";
        }
         
        command += "ButtonText,ButtonIndex,SynchIcon,ComputerName) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(sigButDef.SigButDefNum) + ",";
        }
         
        command += "'" + POut.String(sigButDef.ButtonText) + "'," + POut.Int(sigButDef.ButtonIndex) + "," + POut.Byte(sigButDef.SynchIcon) + "," + "'" + POut.String(sigButDef.ComputerName) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            sigButDef.SigButDefNum = Db.NonQ(command, true);
        } 
        return sigButDef.SigButDefNum;
    }

    /**
    * Updates one SigButDef in the database.
    */
    public static void update(SigButDef sigButDef) throws Exception {
        String command = "UPDATE sigbutdef SET " + "ButtonText  = '" + POut.String(sigButDef.ButtonText) + "', " + "ButtonIndex =  " + POut.Int(sigButDef.ButtonIndex) + ", " + "SynchIcon   =  " + POut.Byte(sigButDef.SynchIcon) + ", " + "ComputerName= '" + POut.String(sigButDef.ComputerName) + "' " + "WHERE SigButDefNum = " + POut.Long(sigButDef.SigButDefNum);
        Db.NonQ(command);
    }

    /**
    * Updates one SigButDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(SigButDef sigButDef, SigButDef oldSigButDef) throws Exception {
        String command = "";
        if (sigButDef.ButtonText != oldSigButDef.ButtonText)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ButtonText = '" + POut.String(sigButDef.ButtonText) + "'";
        }
         
        if (sigButDef.ButtonIndex != oldSigButDef.ButtonIndex)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ButtonIndex = " + POut.Int(sigButDef.ButtonIndex) + "";
        }
         
        if (sigButDef.SynchIcon != oldSigButDef.SynchIcon)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SynchIcon = " + POut.Byte(sigButDef.SynchIcon) + "";
        }
         
        if (sigButDef.ComputerName != oldSigButDef.ComputerName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ComputerName = '" + POut.String(sigButDef.ComputerName) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE sigbutdef SET " + command + " WHERE SigButDefNum = " + POut.Long(sigButDef.SigButDefNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one SigButDef from the database.
    */
    public static void delete(long sigButDefNum) throws Exception {
        String command = "DELETE FROM sigbutdef " + "WHERE SigButDefNum = " + POut.Long(sigButDefNum);
        Db.NonQ(command);
    }

}


