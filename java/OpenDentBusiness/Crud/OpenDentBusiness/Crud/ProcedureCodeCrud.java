//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:04 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ProcedureCodeCrud   
{
    /**
    * Gets one ProcedureCode object from the database using the primary key.  Returns null if not found.
    */
    public static ProcedureCode selectOne(long codeNum) throws Exception {
        String command = "SELECT * FROM procedurecode " + "WHERE CodeNum = " + POut.Long(codeNum);
        List<ProcedureCode> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ProcedureCode object from the database using a query.
    */
    public static ProcedureCode selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ProcedureCode> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ProcedureCode objects from the database using a query.
    */
    public static List<ProcedureCode> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ProcedureCode> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ProcedureCode> tableToList(DataTable table) throws Exception {
        List<ProcedureCode> retVal = new List<ProcedureCode>();
        ProcedureCode procedureCode = new ProcedureCode();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            procedureCode = new ProcedureCode();
            procedureCode.CodeNum = PIn.Long(table.Rows[i]["CodeNum"].ToString());
            procedureCode.ProcCode = PIn.String(table.Rows[i]["ProcCode"].ToString());
            procedureCode.Descript = PIn.String(table.Rows[i]["Descript"].ToString());
            procedureCode.AbbrDesc = PIn.String(table.Rows[i]["AbbrDesc"].ToString());
            procedureCode.ProcTime = PIn.String(table.Rows[i]["ProcTime"].ToString());
            procedureCode.ProcCat = PIn.Long(table.Rows[i]["ProcCat"].ToString());
            procedureCode.TreatArea = (TreatmentArea)PIn.Int(table.Rows[i]["TreatArea"].ToString());
            procedureCode.NoBillIns = PIn.Bool(table.Rows[i]["NoBillIns"].ToString());
            procedureCode.IsProsth = PIn.Bool(table.Rows[i]["IsProsth"].ToString());
            procedureCode.DefaultNote = PIn.String(table.Rows[i]["DefaultNote"].ToString());
            procedureCode.IsHygiene = PIn.Bool(table.Rows[i]["IsHygiene"].ToString());
            procedureCode.GTypeNum = PIn.Int(table.Rows[i]["GTypeNum"].ToString());
            procedureCode.AlternateCode1 = PIn.String(table.Rows[i]["AlternateCode1"].ToString());
            procedureCode.MedicalCode = PIn.String(table.Rows[i]["MedicalCode"].ToString());
            procedureCode.IsTaxed = PIn.Bool(table.Rows[i]["IsTaxed"].ToString());
            procedureCode.PaintType = (ToothPaintingType)PIn.Int(table.Rows[i]["PaintType"].ToString());
            procedureCode.GraphicColor = Color.FromArgb(PIn.Int(table.Rows[i]["GraphicColor"].ToString()));
            procedureCode.LaymanTerm = PIn.String(table.Rows[i]["LaymanTerm"].ToString());
            procedureCode.IsCanadianLab = PIn.Bool(table.Rows[i]["IsCanadianLab"].ToString());
            procedureCode.PreExisting = PIn.Bool(table.Rows[i]["PreExisting"].ToString());
            procedureCode.BaseUnits = PIn.Int(table.Rows[i]["BaseUnits"].ToString());
            procedureCode.SubstitutionCode = PIn.String(table.Rows[i]["SubstitutionCode"].ToString());
            procedureCode.SubstOnlyIf = (SubstitutionCondition)PIn.Int(table.Rows[i]["SubstOnlyIf"].ToString());
            procedureCode.DateTStamp = PIn.DateT(table.Rows[i]["DateTStamp"].ToString());
            procedureCode.IsMultiVisit = PIn.Bool(table.Rows[i]["IsMultiVisit"].ToString());
            procedureCode.DrugNDC = PIn.String(table.Rows[i]["DrugNDC"].ToString());
            procedureCode.RevenueCodeDefault = PIn.String(table.Rows[i]["RevenueCodeDefault"].ToString());
            procedureCode.ProvNumDefault = PIn.Long(table.Rows[i]["ProvNumDefault"].ToString());
            retVal.Add(procedureCode);
        }
        return retVal;
    }

    /**
    * Inserts one ProcedureCode into the database.  Returns the new priKey.
    */
    public static long insert(ProcedureCode procedureCode) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            procedureCode.CodeNum = DbHelper.GetNextOracleKey("procedurecode", "CodeNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(procedureCode,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        procedureCode.CodeNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(procedureCode,false);
        } 
    }

    /**
    * Inserts one ProcedureCode into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ProcedureCode procedureCode, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            procedureCode.CodeNum = ReplicationServers.GetKey("procedurecode", "CodeNum");
        }
         
        String command = "INSERT INTO procedurecode (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "CodeNum,";
        }
         
        command += "ProcCode,Descript,AbbrDesc,ProcTime,ProcCat,TreatArea,NoBillIns,IsProsth,DefaultNote,IsHygiene,GTypeNum,AlternateCode1,MedicalCode,IsTaxed,PaintType,GraphicColor,LaymanTerm,IsCanadianLab,PreExisting,BaseUnits,SubstitutionCode,SubstOnlyIf,IsMultiVisit,DrugNDC,RevenueCodeDefault,ProvNumDefault) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(procedureCode.CodeNum) + ",";
        }
         
        //DateTStamp can only be set by MySQL
        command += "'" + POut.String(procedureCode.ProcCode) + "'," + "'" + POut.String(procedureCode.Descript) + "'," + "'" + POut.String(procedureCode.AbbrDesc) + "'," + "'" + POut.String(procedureCode.ProcTime) + "'," + POut.Long(procedureCode.ProcCat) + "," + POut.Int((int)procedureCode.TreatArea) + "," + POut.Bool(procedureCode.NoBillIns) + "," + POut.Bool(procedureCode.IsProsth) + "," + "'" + POut.String(procedureCode.DefaultNote) + "'," + POut.Bool(procedureCode.IsHygiene) + "," + POut.Int(procedureCode.GTypeNum) + "," + "'" + POut.String(procedureCode.AlternateCode1) + "'," + "'" + POut.String(procedureCode.MedicalCode) + "'," + POut.Bool(procedureCode.IsTaxed) + "," + POut.Int((int)procedureCode.PaintType) + "," + POut.Int(procedureCode.GraphicColor.ToArgb()) + "," + "'" + POut.String(procedureCode.LaymanTerm) + "'," + POut.Bool(procedureCode.IsCanadianLab) + "," + POut.Bool(procedureCode.PreExisting) + "," + POut.Int(procedureCode.BaseUnits) + "," + "'" + POut.String(procedureCode.SubstitutionCode) + "'," + POut.Int((int)procedureCode.SubstOnlyIf) + "," + POut.Bool(procedureCode.IsMultiVisit) + "," + "'" + POut.String(procedureCode.DrugNDC) + "'," + "'" + POut.String(procedureCode.RevenueCodeDefault) + "'," + POut.Long(procedureCode.ProvNumDefault) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            procedureCode.CodeNum = Db.NonQ(command, true);
        } 
        return procedureCode.CodeNum;
    }

    /**
    * Updates one ProcedureCode in the database.
    */
    public static void update(ProcedureCode procedureCode) throws Exception {
        //ProcCode excluded from update
        //DateTStamp can only be set by MySQL
        String command = "UPDATE procedurecode SET " + "Descript          = '" + POut.String(procedureCode.Descript) + "', " + "AbbrDesc          = '" + POut.String(procedureCode.AbbrDesc) + "', " + "ProcTime          = '" + POut.String(procedureCode.ProcTime) + "', " + "ProcCat           =  " + POut.Long(procedureCode.ProcCat) + ", " + "TreatArea         =  " + POut.Int((int)procedureCode.TreatArea) + ", " + "NoBillIns         =  " + POut.Bool(procedureCode.NoBillIns) + ", " + "IsProsth          =  " + POut.Bool(procedureCode.IsProsth) + ", " + "DefaultNote       = '" + POut.String(procedureCode.DefaultNote) + "', " + "IsHygiene         =  " + POut.Bool(procedureCode.IsHygiene) + ", " + "GTypeNum          =  " + POut.Int(procedureCode.GTypeNum) + ", " + "AlternateCode1    = '" + POut.String(procedureCode.AlternateCode1) + "', " + "MedicalCode       = '" + POut.String(procedureCode.MedicalCode) + "', " + "IsTaxed           =  " + POut.Bool(procedureCode.IsTaxed) + ", " + "PaintType         =  " + POut.Int((int)procedureCode.PaintType) + ", " + "GraphicColor      =  " + POut.Int(procedureCode.GraphicColor.ToArgb()) + ", " + "LaymanTerm        = '" + POut.String(procedureCode.LaymanTerm) + "', " + "IsCanadianLab     =  " + POut.Bool(procedureCode.IsCanadianLab) + ", " + "PreExisting       =  " + POut.Bool(procedureCode.PreExisting) + ", " + "BaseUnits         =  " + POut.Int(procedureCode.BaseUnits) + ", " + "SubstitutionCode  = '" + POut.String(procedureCode.SubstitutionCode) + "', " + "SubstOnlyIf       =  " + POut.Int((int)procedureCode.SubstOnlyIf) + ", " + "IsMultiVisit      =  " + POut.Bool(procedureCode.IsMultiVisit) + ", " + "DrugNDC           = '" + POut.String(procedureCode.DrugNDC) + "', " + "RevenueCodeDefault= '" + POut.String(procedureCode.RevenueCodeDefault) + "', " + "ProvNumDefault    =  " + POut.Long(procedureCode.ProvNumDefault) + " " + "WHERE CodeNum = " + POut.Long(procedureCode.CodeNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ProcedureCode in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ProcedureCode procedureCode, ProcedureCode oldProcedureCode) throws Exception {
        String command = "";
        //ProcCode excluded from update
        if (procedureCode.Descript != oldProcedureCode.Descript)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Descript = '" + POut.String(procedureCode.Descript) + "'";
        }
         
        if (procedureCode.AbbrDesc != oldProcedureCode.AbbrDesc)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AbbrDesc = '" + POut.String(procedureCode.AbbrDesc) + "'";
        }
         
        if (procedureCode.ProcTime != oldProcedureCode.ProcTime)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProcTime = '" + POut.String(procedureCode.ProcTime) + "'";
        }
         
        if (procedureCode.ProcCat != oldProcedureCode.ProcCat)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProcCat = " + POut.Long(procedureCode.ProcCat) + "";
        }
         
        if (procedureCode.TreatArea != oldProcedureCode.TreatArea)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "TreatArea = " + POut.Int((int)procedureCode.TreatArea) + "";
        }
         
        if (procedureCode.NoBillIns != oldProcedureCode.NoBillIns)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "NoBillIns = " + POut.Bool(procedureCode.NoBillIns) + "";
        }
         
        if (procedureCode.IsProsth != oldProcedureCode.IsProsth)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsProsth = " + POut.Bool(procedureCode.IsProsth) + "";
        }
         
        if (procedureCode.DefaultNote != oldProcedureCode.DefaultNote)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DefaultNote = '" + POut.String(procedureCode.DefaultNote) + "'";
        }
         
        if (procedureCode.IsHygiene != oldProcedureCode.IsHygiene)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsHygiene = " + POut.Bool(procedureCode.IsHygiene) + "";
        }
         
        if (procedureCode.GTypeNum != oldProcedureCode.GTypeNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "GTypeNum = " + POut.Int(procedureCode.GTypeNum) + "";
        }
         
        if (procedureCode.AlternateCode1 != oldProcedureCode.AlternateCode1)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AlternateCode1 = '" + POut.String(procedureCode.AlternateCode1) + "'";
        }
         
        if (procedureCode.MedicalCode != oldProcedureCode.MedicalCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MedicalCode = '" + POut.String(procedureCode.MedicalCode) + "'";
        }
         
        if (procedureCode.IsTaxed != oldProcedureCode.IsTaxed)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsTaxed = " + POut.Bool(procedureCode.IsTaxed) + "";
        }
         
        if (procedureCode.PaintType != oldProcedureCode.PaintType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PaintType = " + POut.Int((int)procedureCode.PaintType) + "";
        }
         
        if (procedureCode.GraphicColor != oldProcedureCode.GraphicColor)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "GraphicColor = " + POut.Int(procedureCode.GraphicColor.ToArgb()) + "";
        }
         
        if (procedureCode.LaymanTerm != oldProcedureCode.LaymanTerm)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "LaymanTerm = '" + POut.String(procedureCode.LaymanTerm) + "'";
        }
         
        if (procedureCode.IsCanadianLab != oldProcedureCode.IsCanadianLab)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsCanadianLab = " + POut.Bool(procedureCode.IsCanadianLab) + "";
        }
         
        if (procedureCode.PreExisting != oldProcedureCode.PreExisting)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PreExisting = " + POut.Bool(procedureCode.PreExisting) + "";
        }
         
        if (procedureCode.BaseUnits != oldProcedureCode.BaseUnits)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "BaseUnits = " + POut.Int(procedureCode.BaseUnits) + "";
        }
         
        if (procedureCode.SubstitutionCode != oldProcedureCode.SubstitutionCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SubstitutionCode = '" + POut.String(procedureCode.SubstitutionCode) + "'";
        }
         
        if (procedureCode.SubstOnlyIf != oldProcedureCode.SubstOnlyIf)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SubstOnlyIf = " + POut.Int((int)procedureCode.SubstOnlyIf) + "";
        }
         
        //DateTStamp can only be set by MySQL
        if (procedureCode.IsMultiVisit != oldProcedureCode.IsMultiVisit)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsMultiVisit = " + POut.Bool(procedureCode.IsMultiVisit) + "";
        }
         
        if (procedureCode.DrugNDC != oldProcedureCode.DrugNDC)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DrugNDC = '" + POut.String(procedureCode.DrugNDC) + "'";
        }
         
        if (procedureCode.RevenueCodeDefault != oldProcedureCode.RevenueCodeDefault)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RevenueCodeDefault = '" + POut.String(procedureCode.RevenueCodeDefault) + "'";
        }
         
        if (procedureCode.ProvNumDefault != oldProcedureCode.ProvNumDefault)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvNumDefault = " + POut.Long(procedureCode.ProvNumDefault) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE procedurecode SET " + command + " WHERE CodeNum = " + POut.Long(procedureCode.CodeNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ProcedureCode from the database.
    */
    public static void delete(long codeNum) throws Exception {
        String command = "DELETE FROM procedurecode " + "WHERE CodeNum = " + POut.Long(codeNum);
        Db.NonQ(command);
    }

}


