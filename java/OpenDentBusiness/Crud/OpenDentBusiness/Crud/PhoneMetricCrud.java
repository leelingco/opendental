//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:04 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class PhoneMetricCrud   
{
    /**
    * Gets one PhoneMetric object from the database using the primary key.  Returns null if not found.
    */
    public static PhoneMetric selectOne(long phoneMetricNum) throws Exception {
        String command = "SELECT * FROM phonemetric " + "WHERE PhoneMetricNum = " + POut.Long(phoneMetricNum);
        List<PhoneMetric> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one PhoneMetric object from the database using a query.
    */
    public static PhoneMetric selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PhoneMetric> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of PhoneMetric objects from the database using a query.
    */
    public static List<PhoneMetric> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PhoneMetric> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<PhoneMetric> tableToList(DataTable table) throws Exception {
        List<PhoneMetric> retVal = new List<PhoneMetric>();
        PhoneMetric phoneMetric = new PhoneMetric();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            phoneMetric = new PhoneMetric();
            phoneMetric.PhoneMetricNum = PIn.Long(table.Rows[i]["PhoneMetricNum"].ToString());
            phoneMetric.DateTimeEntry = PIn.DateT(table.Rows[i]["DateTimeEntry"].ToString());
            phoneMetric.VoiceMails = PIn.Int(table.Rows[i]["VoiceMails"].ToString());
            phoneMetric.Triages = PIn.Int(table.Rows[i]["Triages"].ToString());
            phoneMetric.MinutesBehind = PIn.Int(table.Rows[i]["MinutesBehind"].ToString());
            retVal.Add(phoneMetric);
        }
        return retVal;
    }

    /**
    * Inserts one PhoneMetric into the database.  Returns the new priKey.
    */
    public static long insert(PhoneMetric phoneMetric) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            phoneMetric.PhoneMetricNum = DbHelper.GetNextOracleKey("phonemetric", "PhoneMetricNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(phoneMetric,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        phoneMetric.PhoneMetricNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(phoneMetric,false);
        } 
    }

    /**
    * Inserts one PhoneMetric into the database.  Provides option to use the existing priKey.
    */
    public static long insert(PhoneMetric phoneMetric, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            phoneMetric.PhoneMetricNum = ReplicationServers.GetKey("phonemetric", "PhoneMetricNum");
        }
         
        String command = "INSERT INTO phonemetric (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "PhoneMetricNum,";
        }
         
        command += "DateTimeEntry,VoiceMails,Triages,MinutesBehind) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(phoneMetric.PhoneMetricNum) + ",";
        }
         
        command += POut.DateT(phoneMetric.DateTimeEntry) + "," + POut.Int(phoneMetric.VoiceMails) + "," + POut.Int(phoneMetric.Triages) + "," + POut.Int(phoneMetric.MinutesBehind) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            phoneMetric.PhoneMetricNum = Db.NonQ(command, true);
        } 
        return phoneMetric.PhoneMetricNum;
    }

    /**
    * Updates one PhoneMetric in the database.
    */
    public static void update(PhoneMetric phoneMetric) throws Exception {
        String command = "UPDATE phonemetric SET " + "DateTimeEntry =  " + POut.DateT(phoneMetric.DateTimeEntry) + ", " + "VoiceMails    =  " + POut.Int(phoneMetric.VoiceMails) + ", " + "Triages       =  " + POut.Int(phoneMetric.Triages) + ", " + "MinutesBehind =  " + POut.Int(phoneMetric.MinutesBehind) + " " + "WHERE PhoneMetricNum = " + POut.Long(phoneMetric.PhoneMetricNum);
        Db.NonQ(command);
    }

    /**
    * Updates one PhoneMetric in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(PhoneMetric phoneMetric, PhoneMetric oldPhoneMetric) throws Exception {
        String command = "";
        if (phoneMetric.DateTimeEntry != oldPhoneMetric.DateTimeEntry)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTimeEntry = " + POut.DateT(phoneMetric.DateTimeEntry) + "";
        }
         
        if (phoneMetric.VoiceMails != oldPhoneMetric.VoiceMails)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "VoiceMails = " + POut.Int(phoneMetric.VoiceMails) + "";
        }
         
        if (phoneMetric.Triages != oldPhoneMetric.Triages)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Triages = " + POut.Int(phoneMetric.Triages) + "";
        }
         
        if (phoneMetric.MinutesBehind != oldPhoneMetric.MinutesBehind)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MinutesBehind = " + POut.Int(phoneMetric.MinutesBehind) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE phonemetric SET " + command + " WHERE PhoneMetricNum = " + POut.Long(phoneMetric.PhoneMetricNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one PhoneMetric from the database.
    */
    public static void delete(long phoneMetricNum) throws Exception {
        String command = "DELETE FROM phonemetric " + "WHERE PhoneMetricNum = " + POut.Long(phoneMetricNum);
        Db.NonQ(command);
    }

}


