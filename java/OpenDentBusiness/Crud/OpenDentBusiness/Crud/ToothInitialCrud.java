//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:08 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ToothInitialCrud   
{
    /**
    * Gets one ToothInitial object from the database using the primary key.  Returns null if not found.
    */
    public static ToothInitial selectOne(long toothInitialNum) throws Exception {
        String command = "SELECT * FROM toothinitial " + "WHERE ToothInitialNum = " + POut.Long(toothInitialNum);
        List<ToothInitial> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ToothInitial object from the database using a query.
    */
    public static ToothInitial selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ToothInitial> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ToothInitial objects from the database using a query.
    */
    public static List<ToothInitial> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ToothInitial> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ToothInitial> tableToList(DataTable table) throws Exception {
        List<ToothInitial> retVal = new List<ToothInitial>();
        ToothInitial toothInitial = new ToothInitial();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            toothInitial = new ToothInitial();
            toothInitial.ToothInitialNum = PIn.Long(table.Rows[i]["ToothInitialNum"].ToString());
            toothInitial.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            toothInitial.ToothNum = PIn.String(table.Rows[i]["ToothNum"].ToString());
            toothInitial.InitialType = (ToothInitialType)PIn.Int(table.Rows[i]["InitialType"].ToString());
            toothInitial.Movement = PIn.Float(table.Rows[i]["Movement"].ToString());
            toothInitial.DrawingSegment = PIn.String(table.Rows[i]["DrawingSegment"].ToString());
            toothInitial.ColorDraw = Color.FromArgb(PIn.Int(table.Rows[i]["ColorDraw"].ToString()));
            retVal.Add(toothInitial);
        }
        return retVal;
    }

    /**
    * Inserts one ToothInitial into the database.  Returns the new priKey.
    */
    public static long insert(ToothInitial toothInitial) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            toothInitial.ToothInitialNum = DbHelper.GetNextOracleKey("toothinitial", "ToothInitialNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(toothInitial,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        toothInitial.ToothInitialNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(toothInitial,false);
        } 
    }

    /**
    * Inserts one ToothInitial into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ToothInitial toothInitial, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            toothInitial.ToothInitialNum = ReplicationServers.GetKey("toothinitial", "ToothInitialNum");
        }
         
        String command = "INSERT INTO toothinitial (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ToothInitialNum,";
        }
         
        command += "PatNum,ToothNum,InitialType,Movement,DrawingSegment,ColorDraw) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(toothInitial.ToothInitialNum) + ",";
        }
         
        command += POut.Long(toothInitial.PatNum) + "," + "'" + POut.String(toothInitial.ToothNum) + "'," + POut.Int((int)toothInitial.InitialType) + "," + POut.Float(toothInitial.Movement) + "," + "'" + POut.String(toothInitial.DrawingSegment) + "'," + POut.Int(toothInitial.ColorDraw.ToArgb()) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            toothInitial.ToothInitialNum = Db.NonQ(command, true);
        } 
        return toothInitial.ToothInitialNum;
    }

    /**
    * Updates one ToothInitial in the database.
    */
    public static void update(ToothInitial toothInitial) throws Exception {
        String command = "UPDATE toothinitial SET " + "PatNum         =  " + POut.Long(toothInitial.PatNum) + ", " + "ToothNum       = '" + POut.String(toothInitial.ToothNum) + "', " + "InitialType    =  " + POut.Int((int)toothInitial.InitialType) + ", " + "Movement       =  " + POut.Float(toothInitial.Movement) + ", " + "DrawingSegment = '" + POut.String(toothInitial.DrawingSegment) + "', " + "ColorDraw      =  " + POut.Int(toothInitial.ColorDraw.ToArgb()) + " " + "WHERE ToothInitialNum = " + POut.Long(toothInitial.ToothInitialNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ToothInitial in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ToothInitial toothInitial, ToothInitial oldToothInitial) throws Exception {
        String command = "";
        if (toothInitial.PatNum != oldToothInitial.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(toothInitial.PatNum) + "";
        }
         
        if (toothInitial.ToothNum != oldToothInitial.ToothNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ToothNum = '" + POut.String(toothInitial.ToothNum) + "'";
        }
         
        if (toothInitial.InitialType != oldToothInitial.InitialType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "InitialType = " + POut.Int((int)toothInitial.InitialType) + "";
        }
         
        if (toothInitial.Movement != oldToothInitial.Movement)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Movement = " + POut.Float(toothInitial.Movement) + "";
        }
         
        if (toothInitial.DrawingSegment != oldToothInitial.DrawingSegment)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DrawingSegment = '" + POut.String(toothInitial.DrawingSegment) + "'";
        }
         
        if (toothInitial.ColorDraw != oldToothInitial.ColorDraw)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ColorDraw = " + POut.Int(toothInitial.ColorDraw.ToArgb()) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE toothinitial SET " + command + " WHERE ToothInitialNum = " + POut.Long(toothInitial.ToothInitialNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ToothInitial from the database.
    */
    public static void delete(long toothInitialNum) throws Exception {
        String command = "DELETE FROM toothinitial " + "WHERE ToothInitialNum = " + POut.Long(toothInitialNum);
        Db.NonQ(command);
    }

}


