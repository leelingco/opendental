//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:03 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class PayPeriodCrud   
{
    /**
    * Gets one PayPeriod object from the database using the primary key.  Returns null if not found.
    */
    public static PayPeriod selectOne(long payPeriodNum) throws Exception {
        String command = "SELECT * FROM payperiod " + "WHERE PayPeriodNum = " + POut.Long(payPeriodNum);
        List<PayPeriod> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one PayPeriod object from the database using a query.
    */
    public static PayPeriod selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PayPeriod> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of PayPeriod objects from the database using a query.
    */
    public static List<PayPeriod> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PayPeriod> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<PayPeriod> tableToList(DataTable table) throws Exception {
        List<PayPeriod> retVal = new List<PayPeriod>();
        PayPeriod payPeriod = new PayPeriod();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            payPeriod = new PayPeriod();
            payPeriod.PayPeriodNum = PIn.Long(table.Rows[i]["PayPeriodNum"].ToString());
            payPeriod.DateStart = PIn.Date(table.Rows[i]["DateStart"].ToString());
            payPeriod.DateStop = PIn.Date(table.Rows[i]["DateStop"].ToString());
            payPeriod.DatePaycheck = PIn.Date(table.Rows[i]["DatePaycheck"].ToString());
            retVal.Add(payPeriod);
        }
        return retVal;
    }

    /**
    * Inserts one PayPeriod into the database.  Returns the new priKey.
    */
    public static long insert(PayPeriod payPeriod) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            payPeriod.PayPeriodNum = DbHelper.GetNextOracleKey("payperiod", "PayPeriodNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(payPeriod,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        payPeriod.PayPeriodNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(payPeriod,false);
        } 
    }

    /**
    * Inserts one PayPeriod into the database.  Provides option to use the existing priKey.
    */
    public static long insert(PayPeriod payPeriod, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            payPeriod.PayPeriodNum = ReplicationServers.GetKey("payperiod", "PayPeriodNum");
        }
         
        String command = "INSERT INTO payperiod (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "PayPeriodNum,";
        }
         
        command += "DateStart,DateStop,DatePaycheck) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(payPeriod.PayPeriodNum) + ",";
        }
         
        command += POut.Date(payPeriod.DateStart) + "," + POut.Date(payPeriod.DateStop) + "," + POut.Date(payPeriod.DatePaycheck) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            payPeriod.PayPeriodNum = Db.NonQ(command, true);
        } 
        return payPeriod.PayPeriodNum;
    }

    /**
    * Updates one PayPeriod in the database.
    */
    public static void update(PayPeriod payPeriod) throws Exception {
        String command = "UPDATE payperiod SET " + "DateStart   =  " + POut.Date(payPeriod.DateStart) + ", " + "DateStop    =  " + POut.Date(payPeriod.DateStop) + ", " + "DatePaycheck=  " + POut.Date(payPeriod.DatePaycheck) + " " + "WHERE PayPeriodNum = " + POut.Long(payPeriod.PayPeriodNum);
        Db.NonQ(command);
    }

    /**
    * Updates one PayPeriod in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(PayPeriod payPeriod, PayPeriod oldPayPeriod) throws Exception {
        String command = "";
        if (payPeriod.DateStart != oldPayPeriod.DateStart)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateStart = " + POut.Date(payPeriod.DateStart) + "";
        }
         
        if (payPeriod.DateStop != oldPayPeriod.DateStop)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateStop = " + POut.Date(payPeriod.DateStop) + "";
        }
         
        if (payPeriod.DatePaycheck != oldPayPeriod.DatePaycheck)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DatePaycheck = " + POut.Date(payPeriod.DatePaycheck) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE payperiod SET " + command + " WHERE PayPeriodNum = " + POut.Long(payPeriod.PayPeriodNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one PayPeriod from the database.
    */
    public static void delete(long payPeriodNum) throws Exception {
        String command = "DELETE FROM payperiod " + "WHERE PayPeriodNum = " + POut.Long(payPeriodNum);
        Db.NonQ(command);
    }

}


