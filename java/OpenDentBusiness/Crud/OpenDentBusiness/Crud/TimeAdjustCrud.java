//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:08 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class TimeAdjustCrud   
{
    /**
    * Gets one TimeAdjust object from the database using the primary key.  Returns null if not found.
    */
    public static TimeAdjust selectOne(long timeAdjustNum) throws Exception {
        String command = "SELECT * FROM timeadjust " + "WHERE TimeAdjustNum = " + POut.Long(timeAdjustNum);
        List<TimeAdjust> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one TimeAdjust object from the database using a query.
    */
    public static TimeAdjust selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<TimeAdjust> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of TimeAdjust objects from the database using a query.
    */
    public static List<TimeAdjust> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<TimeAdjust> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<TimeAdjust> tableToList(DataTable table) throws Exception {
        List<TimeAdjust> retVal = new List<TimeAdjust>();
        TimeAdjust timeAdjust = new TimeAdjust();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            timeAdjust = new TimeAdjust();
            timeAdjust.TimeAdjustNum = PIn.Long(table.Rows[i]["TimeAdjustNum"].ToString());
            timeAdjust.EmployeeNum = PIn.Long(table.Rows[i]["EmployeeNum"].ToString());
            timeAdjust.TimeEntry = PIn.DateT(table.Rows[i]["TimeEntry"].ToString());
            timeAdjust.RegHours = PIn.TSpan(table.Rows[i]["RegHours"].ToString());
            timeAdjust.OTimeHours = PIn.TSpan(table.Rows[i]["OTimeHours"].ToString());
            timeAdjust.Note = PIn.String(table.Rows[i]["Note"].ToString());
            timeAdjust.IsAuto = PIn.Bool(table.Rows[i]["IsAuto"].ToString());
            retVal.Add(timeAdjust);
        }
        return retVal;
    }

    /**
    * Inserts one TimeAdjust into the database.  Returns the new priKey.
    */
    public static long insert(TimeAdjust timeAdjust) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            timeAdjust.TimeAdjustNum = DbHelper.GetNextOracleKey("timeadjust", "TimeAdjustNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(timeAdjust,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        timeAdjust.TimeAdjustNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(timeAdjust,false);
        } 
    }

    /**
    * Inserts one TimeAdjust into the database.  Provides option to use the existing priKey.
    */
    public static long insert(TimeAdjust timeAdjust, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            timeAdjust.TimeAdjustNum = ReplicationServers.GetKey("timeadjust", "TimeAdjustNum");
        }
         
        String command = "INSERT INTO timeadjust (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "TimeAdjustNum,";
        }
         
        command += "EmployeeNum,TimeEntry,RegHours,OTimeHours,Note,IsAuto) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(timeAdjust.TimeAdjustNum) + ",";
        }
         
        command += POut.Long(timeAdjust.EmployeeNum) + "," + POut.DateT(timeAdjust.TimeEntry) + "," + "'" + POut.TSpan(timeAdjust.RegHours) + "'," + "'" + POut.TSpan(timeAdjust.OTimeHours) + "'," + "'" + POut.String(timeAdjust.Note) + "'," + POut.Bool(timeAdjust.IsAuto) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            timeAdjust.TimeAdjustNum = Db.NonQ(command, true);
        } 
        return timeAdjust.TimeAdjustNum;
    }

    /**
    * Updates one TimeAdjust in the database.
    */
    public static void update(TimeAdjust timeAdjust) throws Exception {
        String command = "UPDATE timeadjust SET " + "EmployeeNum  =  " + POut.Long(timeAdjust.EmployeeNum) + ", " + "TimeEntry    =  " + POut.DateT(timeAdjust.TimeEntry) + ", " + "RegHours     = '" + POut.TSpan(timeAdjust.RegHours) + "', " + "OTimeHours   = '" + POut.TSpan(timeAdjust.OTimeHours) + "', " + "Note         = '" + POut.String(timeAdjust.Note) + "', " + "IsAuto       =  " + POut.Bool(timeAdjust.IsAuto) + " " + "WHERE TimeAdjustNum = " + POut.Long(timeAdjust.TimeAdjustNum);
        Db.NonQ(command);
    }

    /**
    * Updates one TimeAdjust in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(TimeAdjust timeAdjust, TimeAdjust oldTimeAdjust) throws Exception {
        String command = "";
        if (timeAdjust.EmployeeNum != oldTimeAdjust.EmployeeNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EmployeeNum = " + POut.Long(timeAdjust.EmployeeNum) + "";
        }
         
        if (timeAdjust.TimeEntry != oldTimeAdjust.TimeEntry)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "TimeEntry = " + POut.DateT(timeAdjust.TimeEntry) + "";
        }
         
        if (timeAdjust.RegHours != oldTimeAdjust.RegHours)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RegHours = '" + POut.TSpan(timeAdjust.RegHours) + "'";
        }
         
        if (timeAdjust.OTimeHours != oldTimeAdjust.OTimeHours)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "OTimeHours = '" + POut.TSpan(timeAdjust.OTimeHours) + "'";
        }
         
        if (timeAdjust.Note != oldTimeAdjust.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(timeAdjust.Note) + "'";
        }
         
        if (timeAdjust.IsAuto != oldTimeAdjust.IsAuto)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsAuto = " + POut.Bool(timeAdjust.IsAuto) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE timeadjust SET " + command + " WHERE TimeAdjustNum = " + POut.Long(timeAdjust.TimeAdjustNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one TimeAdjust from the database.
    */
    public static void delete(long timeAdjustNum) throws Exception {
        String command = "DELETE FROM timeadjust " + "WHERE TimeAdjustNum = " + POut.Long(timeAdjustNum);
        Db.NonQ(command);
    }

}


