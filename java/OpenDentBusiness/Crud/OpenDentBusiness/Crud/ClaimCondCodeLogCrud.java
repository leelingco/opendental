//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:56 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ClaimCondCodeLogCrud   
{
    /**
    * Gets one ClaimCondCodeLog object from the database using the primary key.  Returns null if not found.
    */
    public static ClaimCondCodeLog selectOne(long claimCondCodeLogNum) throws Exception {
        String command = "SELECT * FROM claimcondcodelog " + "WHERE ClaimCondCodeLogNum = " + POut.Long(claimCondCodeLogNum);
        List<ClaimCondCodeLog> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ClaimCondCodeLog object from the database using a query.
    */
    public static ClaimCondCodeLog selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ClaimCondCodeLog> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ClaimCondCodeLog objects from the database using a query.
    */
    public static List<ClaimCondCodeLog> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ClaimCondCodeLog> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ClaimCondCodeLog> tableToList(DataTable table) throws Exception {
        List<ClaimCondCodeLog> retVal = new List<ClaimCondCodeLog>();
        ClaimCondCodeLog claimCondCodeLog = new ClaimCondCodeLog();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            claimCondCodeLog = new ClaimCondCodeLog();
            claimCondCodeLog.ClaimCondCodeLogNum = PIn.Long(table.Rows[i]["ClaimCondCodeLogNum"].ToString());
            claimCondCodeLog.ClaimNum = PIn.Long(table.Rows[i]["ClaimNum"].ToString());
            claimCondCodeLog.Code0 = PIn.String(table.Rows[i]["Code0"].ToString());
            claimCondCodeLog.Code1 = PIn.String(table.Rows[i]["Code1"].ToString());
            claimCondCodeLog.Code2 = PIn.String(table.Rows[i]["Code2"].ToString());
            claimCondCodeLog.Code3 = PIn.String(table.Rows[i]["Code3"].ToString());
            claimCondCodeLog.Code4 = PIn.String(table.Rows[i]["Code4"].ToString());
            claimCondCodeLog.Code5 = PIn.String(table.Rows[i]["Code5"].ToString());
            claimCondCodeLog.Code6 = PIn.String(table.Rows[i]["Code6"].ToString());
            claimCondCodeLog.Code7 = PIn.String(table.Rows[i]["Code7"].ToString());
            claimCondCodeLog.Code8 = PIn.String(table.Rows[i]["Code8"].ToString());
            claimCondCodeLog.Code9 = PIn.String(table.Rows[i]["Code9"].ToString());
            claimCondCodeLog.Code10 = PIn.String(table.Rows[i]["Code10"].ToString());
            retVal.Add(claimCondCodeLog);
        }
        return retVal;
    }

    /**
    * Inserts one ClaimCondCodeLog into the database.  Returns the new priKey.
    */
    public static long insert(ClaimCondCodeLog claimCondCodeLog) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            claimCondCodeLog.ClaimCondCodeLogNum = DbHelper.GetNextOracleKey("claimcondcodelog", "ClaimCondCodeLogNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(claimCondCodeLog,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        claimCondCodeLog.ClaimCondCodeLogNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(claimCondCodeLog,false);
        } 
    }

    /**
    * Inserts one ClaimCondCodeLog into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ClaimCondCodeLog claimCondCodeLog, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            claimCondCodeLog.ClaimCondCodeLogNum = ReplicationServers.GetKey("claimcondcodelog", "ClaimCondCodeLogNum");
        }
         
        String command = "INSERT INTO claimcondcodelog (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ClaimCondCodeLogNum,";
        }
         
        command += "ClaimNum,Code0,Code1,Code2,Code3,Code4,Code5,Code6,Code7,Code8,Code9,Code10) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(claimCondCodeLog.ClaimCondCodeLogNum) + ",";
        }
         
        command += POut.Long(claimCondCodeLog.ClaimNum) + "," + "'" + POut.String(claimCondCodeLog.Code0) + "'," + "'" + POut.String(claimCondCodeLog.Code1) + "'," + "'" + POut.String(claimCondCodeLog.Code2) + "'," + "'" + POut.String(claimCondCodeLog.Code3) + "'," + "'" + POut.String(claimCondCodeLog.Code4) + "'," + "'" + POut.String(claimCondCodeLog.Code5) + "'," + "'" + POut.String(claimCondCodeLog.Code6) + "'," + "'" + POut.String(claimCondCodeLog.Code7) + "'," + "'" + POut.String(claimCondCodeLog.Code8) + "'," + "'" + POut.String(claimCondCodeLog.Code9) + "'," + "'" + POut.String(claimCondCodeLog.Code10) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            claimCondCodeLog.ClaimCondCodeLogNum = Db.NonQ(command, true);
        } 
        return claimCondCodeLog.ClaimCondCodeLogNum;
    }

    /**
    * Updates one ClaimCondCodeLog in the database.
    */
    public static void update(ClaimCondCodeLog claimCondCodeLog) throws Exception {
        String command = "UPDATE claimcondcodelog SET " + "ClaimNum           =  " + POut.Long(claimCondCodeLog.ClaimNum) + ", " + "Code0              = '" + POut.String(claimCondCodeLog.Code0) + "', " + "Code1              = '" + POut.String(claimCondCodeLog.Code1) + "', " + "Code2              = '" + POut.String(claimCondCodeLog.Code2) + "', " + "Code3              = '" + POut.String(claimCondCodeLog.Code3) + "', " + "Code4              = '" + POut.String(claimCondCodeLog.Code4) + "', " + "Code5              = '" + POut.String(claimCondCodeLog.Code5) + "', " + "Code6              = '" + POut.String(claimCondCodeLog.Code6) + "', " + "Code7              = '" + POut.String(claimCondCodeLog.Code7) + "', " + "Code8              = '" + POut.String(claimCondCodeLog.Code8) + "', " + "Code9              = '" + POut.String(claimCondCodeLog.Code9) + "', " + "Code10             = '" + POut.String(claimCondCodeLog.Code10) + "' " + "WHERE ClaimCondCodeLogNum = " + POut.Long(claimCondCodeLog.ClaimCondCodeLogNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ClaimCondCodeLog in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ClaimCondCodeLog claimCondCodeLog, ClaimCondCodeLog oldClaimCondCodeLog) throws Exception {
        String command = "";
        if (claimCondCodeLog.ClaimNum != oldClaimCondCodeLog.ClaimNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClaimNum = " + POut.Long(claimCondCodeLog.ClaimNum) + "";
        }
         
        if (claimCondCodeLog.Code0 != oldClaimCondCodeLog.Code0)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Code0 = '" + POut.String(claimCondCodeLog.Code0) + "'";
        }
         
        if (claimCondCodeLog.Code1 != oldClaimCondCodeLog.Code1)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Code1 = '" + POut.String(claimCondCodeLog.Code1) + "'";
        }
         
        if (claimCondCodeLog.Code2 != oldClaimCondCodeLog.Code2)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Code2 = '" + POut.String(claimCondCodeLog.Code2) + "'";
        }
         
        if (claimCondCodeLog.Code3 != oldClaimCondCodeLog.Code3)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Code3 = '" + POut.String(claimCondCodeLog.Code3) + "'";
        }
         
        if (claimCondCodeLog.Code4 != oldClaimCondCodeLog.Code4)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Code4 = '" + POut.String(claimCondCodeLog.Code4) + "'";
        }
         
        if (claimCondCodeLog.Code5 != oldClaimCondCodeLog.Code5)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Code5 = '" + POut.String(claimCondCodeLog.Code5) + "'";
        }
         
        if (claimCondCodeLog.Code6 != oldClaimCondCodeLog.Code6)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Code6 = '" + POut.String(claimCondCodeLog.Code6) + "'";
        }
         
        if (claimCondCodeLog.Code7 != oldClaimCondCodeLog.Code7)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Code7 = '" + POut.String(claimCondCodeLog.Code7) + "'";
        }
         
        if (claimCondCodeLog.Code8 != oldClaimCondCodeLog.Code8)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Code8 = '" + POut.String(claimCondCodeLog.Code8) + "'";
        }
         
        if (claimCondCodeLog.Code9 != oldClaimCondCodeLog.Code9)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Code9 = '" + POut.String(claimCondCodeLog.Code9) + "'";
        }
         
        if (claimCondCodeLog.Code10 != oldClaimCondCodeLog.Code10)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Code10 = '" + POut.String(claimCondCodeLog.Code10) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE claimcondcodelog SET " + command + " WHERE ClaimCondCodeLogNum = " + POut.Long(claimCondCodeLog.ClaimCondCodeLogNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ClaimCondCodeLog from the database.
    */
    public static void delete(long claimCondCodeLogNum) throws Exception {
        String command = "DELETE FROM claimcondcodelog " + "WHERE ClaimCondCodeLogNum = " + POut.Long(claimCondCodeLogNum);
        Db.NonQ(command);
    }

}


