//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:08 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class TaskListCrud   
{
    /**
    * Gets one TaskList object from the database using the primary key.  Returns null if not found.
    */
    public static TaskList selectOne(long taskListNum) throws Exception {
        String command = "SELECT * FROM tasklist " + "WHERE TaskListNum = " + POut.Long(taskListNum);
        List<TaskList> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one TaskList object from the database using a query.
    */
    public static TaskList selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<TaskList> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of TaskList objects from the database using a query.
    */
    public static List<TaskList> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<TaskList> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<TaskList> tableToList(DataTable table) throws Exception {
        List<TaskList> retVal = new List<TaskList>();
        TaskList taskList = new TaskList();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            taskList = new TaskList();
            taskList.TaskListNum = PIn.Long(table.Rows[i]["TaskListNum"].ToString());
            taskList.Descript = PIn.String(table.Rows[i]["Descript"].ToString());
            taskList.Parent = PIn.Long(table.Rows[i]["Parent"].ToString());
            taskList.DateTL = PIn.Date(table.Rows[i]["DateTL"].ToString());
            taskList.IsRepeating = PIn.Bool(table.Rows[i]["IsRepeating"].ToString());
            taskList.DateType = (TaskDateType)PIn.Int(table.Rows[i]["DateType"].ToString());
            taskList.FromNum = PIn.Long(table.Rows[i]["FromNum"].ToString());
            taskList.ObjectType = (TaskObjectType)PIn.Int(table.Rows[i]["ObjectType"].ToString());
            taskList.DateTimeEntry = PIn.DateT(table.Rows[i]["DateTimeEntry"].ToString());
            retVal.Add(taskList);
        }
        return retVal;
    }

    /**
    * Inserts one TaskList into the database.  Returns the new priKey.
    */
    public static long insert(TaskList taskList) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            taskList.TaskListNum = DbHelper.GetNextOracleKey("tasklist", "TaskListNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(taskList,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        taskList.TaskListNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(taskList,false);
        } 
    }

    /**
    * Inserts one TaskList into the database.  Provides option to use the existing priKey.
    */
    public static long insert(TaskList taskList, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            taskList.TaskListNum = ReplicationServers.GetKey("tasklist", "TaskListNum");
        }
         
        String command = "INSERT INTO tasklist (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "TaskListNum,";
        }
         
        command += "Descript,Parent,DateTL,IsRepeating,DateType,FromNum,ObjectType,DateTimeEntry) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(taskList.TaskListNum) + ",";
        }
         
        command += "'" + POut.String(taskList.Descript) + "'," + POut.Long(taskList.Parent) + "," + POut.Date(taskList.DateTL) + "," + POut.Bool(taskList.IsRepeating) + "," + POut.Int((int)taskList.DateType) + "," + POut.Long(taskList.FromNum) + "," + POut.Int((int)taskList.ObjectType) + "," + DbHelper.Now() + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            taskList.TaskListNum = Db.NonQ(command, true);
        } 
        return taskList.TaskListNum;
    }

    /**
    * Updates one TaskList in the database.
    */
    public static void update(TaskList taskList) throws Exception {
        String command = "UPDATE tasklist SET " + "Descript     = '" + POut.String(taskList.Descript) + "', " + "Parent       =  " + POut.Long(taskList.Parent) + ", " + "DateTL       =  " + POut.Date(taskList.DateTL) + ", " + "IsRepeating  =  " + POut.Bool(taskList.IsRepeating) + ", " + "DateType     =  " + POut.Int((int)taskList.DateType) + ", " + "FromNum      =  " + POut.Long(taskList.FromNum) + ", " + "ObjectType   =  " + POut.Int((int)taskList.ObjectType) + ", " + "DateTimeEntry=  " + POut.DateT(taskList.DateTimeEntry) + " " + "WHERE TaskListNum = " + POut.Long(taskList.TaskListNum);
        Db.NonQ(command);
    }

    /**
    * Updates one TaskList in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(TaskList taskList, TaskList oldTaskList) throws Exception {
        String command = "";
        if (taskList.Descript != oldTaskList.Descript)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Descript = '" + POut.String(taskList.Descript) + "'";
        }
         
        if (taskList.Parent != oldTaskList.Parent)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Parent = " + POut.Long(taskList.Parent) + "";
        }
         
        if (taskList.DateTL != oldTaskList.DateTL)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTL = " + POut.Date(taskList.DateTL) + "";
        }
         
        if (taskList.IsRepeating != oldTaskList.IsRepeating)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsRepeating = " + POut.Bool(taskList.IsRepeating) + "";
        }
         
        if (taskList.DateType != oldTaskList.DateType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateType = " + POut.Int((int)taskList.DateType) + "";
        }
         
        if (taskList.FromNum != oldTaskList.FromNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FromNum = " + POut.Long(taskList.FromNum) + "";
        }
         
        if (taskList.ObjectType != oldTaskList.ObjectType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ObjectType = " + POut.Int((int)taskList.ObjectType) + "";
        }
         
        if (taskList.DateTimeEntry != oldTaskList.DateTimeEntry)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTimeEntry = " + POut.DateT(taskList.DateTimeEntry) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE tasklist SET " + command + " WHERE TaskListNum = " + POut.Long(taskList.TaskListNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one TaskList from the database.
    */
    public static void delete(long taskListNum) throws Exception {
        String command = "DELETE FROM tasklist " + "WHERE TaskListNum = " + POut.Long(taskListNum);
        Db.NonQ(command);
    }

}


