//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:07 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class SigElementCrud   
{
    /**
    * Gets one SigElement object from the database using the primary key.  Returns null if not found.
    */
    public static SigElement selectOne(long sigElementNum) throws Exception {
        String command = "SELECT * FROM sigelement " + "WHERE SigElementNum = " + POut.Long(sigElementNum);
        List<SigElement> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one SigElement object from the database using a query.
    */
    public static SigElement selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<SigElement> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of SigElement objects from the database using a query.
    */
    public static List<SigElement> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<SigElement> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<SigElement> tableToList(DataTable table) throws Exception {
        List<SigElement> retVal = new List<SigElement>();
        SigElement sigElement = new SigElement();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            sigElement = new SigElement();
            sigElement.SigElementNum = PIn.Long(table.Rows[i]["SigElementNum"].ToString());
            sigElement.SigElementDefNum = PIn.Long(table.Rows[i]["SigElementDefNum"].ToString());
            sigElement.SignalNum = PIn.Long(table.Rows[i]["SignalNum"].ToString());
            retVal.Add(sigElement);
        }
        return retVal;
    }

    /**
    * Inserts one SigElement into the database.  Returns the new priKey.
    */
    public static long insert(SigElement sigElement) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            sigElement.SigElementNum = DbHelper.GetNextOracleKey("sigelement", "SigElementNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(sigElement,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        sigElement.SigElementNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(sigElement,false);
        } 
    }

    /**
    * Inserts one SigElement into the database.  Provides option to use the existing priKey.
    */
    public static long insert(SigElement sigElement, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            sigElement.SigElementNum = ReplicationServers.GetKey("sigelement", "SigElementNum");
        }
         
        String command = "INSERT INTO sigelement (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "SigElementNum,";
        }
         
        command += "SigElementDefNum,SignalNum) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(sigElement.SigElementNum) + ",";
        }
         
        command += POut.Long(sigElement.SigElementDefNum) + "," + POut.Long(sigElement.SignalNum) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            sigElement.SigElementNum = Db.NonQ(command, true);
        } 
        return sigElement.SigElementNum;
    }

    /**
    * Updates one SigElement in the database.
    */
    public static void update(SigElement sigElement) throws Exception {
        String command = "UPDATE sigelement SET " + "SigElementDefNum=  " + POut.Long(sigElement.SigElementDefNum) + ", " + "SignalNum       =  " + POut.Long(sigElement.SignalNum) + " " + "WHERE SigElementNum = " + POut.Long(sigElement.SigElementNum);
        Db.NonQ(command);
    }

    /**
    * Updates one SigElement in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(SigElement sigElement, SigElement oldSigElement) throws Exception {
        String command = "";
        if (sigElement.SigElementDefNum != oldSigElement.SigElementDefNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SigElementDefNum = " + POut.Long(sigElement.SigElementDefNum) + "";
        }
         
        if (sigElement.SignalNum != oldSigElement.SignalNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SignalNum = " + POut.Long(sigElement.SignalNum) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE sigelement SET " + command + " WHERE SigElementNum = " + POut.Long(sigElement.SigElementNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one SigElement from the database.
    */
    public static void delete(long sigElementNum) throws Exception {
        String command = "DELETE FROM sigelement " + "WHERE SigElementNum = " + POut.Long(sigElementNum);
        Db.NonQ(command);
    }

}


