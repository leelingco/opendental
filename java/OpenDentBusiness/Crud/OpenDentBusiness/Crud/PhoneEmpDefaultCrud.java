//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:04 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class PhoneEmpDefaultCrud   
{
    /**
    * Gets one PhoneEmpDefault object from the database using the primary key.  Returns null if not found.
    */
    public static PhoneEmpDefault selectOne(long employeeNum) throws Exception {
        String command = "SELECT * FROM phoneempdefault " + "WHERE EmployeeNum = " + POut.Long(employeeNum);
        List<PhoneEmpDefault> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one PhoneEmpDefault object from the database using a query.
    */
    public static PhoneEmpDefault selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PhoneEmpDefault> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of PhoneEmpDefault objects from the database using a query.
    */
    public static List<PhoneEmpDefault> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PhoneEmpDefault> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<PhoneEmpDefault> tableToList(DataTable table) throws Exception {
        List<PhoneEmpDefault> retVal = new List<PhoneEmpDefault>();
        PhoneEmpDefault phoneEmpDefault = new PhoneEmpDefault();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            phoneEmpDefault = new PhoneEmpDefault();
            phoneEmpDefault.EmployeeNum = PIn.Long(table.Rows[i]["EmployeeNum"].ToString());
            phoneEmpDefault.IsGraphed = PIn.Bool(table.Rows[i]["IsGraphed"].ToString());
            phoneEmpDefault.HasColor = PIn.Bool(table.Rows[i]["HasColor"].ToString());
            phoneEmpDefault.RingGroups = (AsteriskRingGroups)PIn.Int(table.Rows[i]["RingGroups"].ToString());
            phoneEmpDefault.EmpName = PIn.String(table.Rows[i]["EmpName"].ToString());
            phoneEmpDefault.PhoneExt = PIn.Int(table.Rows[i]["PhoneExt"].ToString());
            phoneEmpDefault.StatusOverride = (PhoneEmpStatusOverride)PIn.Int(table.Rows[i]["StatusOverride"].ToString());
            phoneEmpDefault.Notes = PIn.String(table.Rows[i]["Notes"].ToString());
            phoneEmpDefault.ComputerName = PIn.String(table.Rows[i]["ComputerName"].ToString());
            phoneEmpDefault.IsPrivateScreen = PIn.Bool(table.Rows[i]["IsPrivateScreen"].ToString());
            phoneEmpDefault.IsTriageOperator = PIn.Bool(table.Rows[i]["IsTriageOperator"].ToString());
            retVal.Add(phoneEmpDefault);
        }
        return retVal;
    }

    /**
    * Inserts one PhoneEmpDefault into the database.  Returns the new priKey.
    */
    public static long insert(PhoneEmpDefault phoneEmpDefault) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            phoneEmpDefault.EmployeeNum = DbHelper.GetNextOracleKey("phoneempdefault", "EmployeeNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(phoneEmpDefault,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        phoneEmpDefault.EmployeeNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(phoneEmpDefault,false);
        } 
    }

    /**
    * Inserts one PhoneEmpDefault into the database.  Provides option to use the existing priKey.
    */
    public static long insert(PhoneEmpDefault phoneEmpDefault, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            phoneEmpDefault.EmployeeNum = ReplicationServers.GetKey("phoneempdefault", "EmployeeNum");
        }
         
        String command = "INSERT INTO phoneempdefault (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "EmployeeNum,";
        }
         
        command += "IsGraphed,HasColor,RingGroups,EmpName,PhoneExt,StatusOverride,Notes,ComputerName,IsPrivateScreen,IsTriageOperator) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(phoneEmpDefault.EmployeeNum) + ",";
        }
         
        command += POut.Bool(phoneEmpDefault.IsGraphed) + "," + POut.Bool(phoneEmpDefault.HasColor) + "," + POut.Int((int)phoneEmpDefault.RingGroups) + "," + "'" + POut.String(phoneEmpDefault.EmpName) + "'," + POut.Int(phoneEmpDefault.PhoneExt) + "," + POut.Int((int)phoneEmpDefault.StatusOverride) + "," + "'" + POut.String(phoneEmpDefault.Notes) + "'," + "'" + POut.String(phoneEmpDefault.ComputerName) + "'," + POut.Bool(phoneEmpDefault.IsPrivateScreen) + "," + POut.Bool(phoneEmpDefault.IsTriageOperator) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            phoneEmpDefault.EmployeeNum = Db.NonQ(command, true);
        } 
        return phoneEmpDefault.EmployeeNum;
    }

    /**
    * Updates one PhoneEmpDefault in the database.
    */
    public static void update(PhoneEmpDefault phoneEmpDefault) throws Exception {
        String command = "UPDATE phoneempdefault SET " + "IsGraphed       =  " + POut.Bool(phoneEmpDefault.IsGraphed) + ", " + "HasColor        =  " + POut.Bool(phoneEmpDefault.HasColor) + ", " + "RingGroups      =  " + POut.Int((int)phoneEmpDefault.RingGroups) + ", " + "EmpName         = '" + POut.String(phoneEmpDefault.EmpName) + "', " + "PhoneExt        =  " + POut.Int(phoneEmpDefault.PhoneExt) + ", " + "StatusOverride  =  " + POut.Int((int)phoneEmpDefault.StatusOverride) + ", " + "Notes           = '" + POut.String(phoneEmpDefault.Notes) + "', " + "ComputerName    = '" + POut.String(phoneEmpDefault.ComputerName) + "', " + "IsPrivateScreen =  " + POut.Bool(phoneEmpDefault.IsPrivateScreen) + ", " + "IsTriageOperator=  " + POut.Bool(phoneEmpDefault.IsTriageOperator) + " " + "WHERE EmployeeNum = " + POut.Long(phoneEmpDefault.EmployeeNum);
        Db.NonQ(command);
    }

    /**
    * Updates one PhoneEmpDefault in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(PhoneEmpDefault phoneEmpDefault, PhoneEmpDefault oldPhoneEmpDefault) throws Exception {
        String command = "";
        if (phoneEmpDefault.IsGraphed != oldPhoneEmpDefault.IsGraphed)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsGraphed = " + POut.Bool(phoneEmpDefault.IsGraphed) + "";
        }
         
        if (phoneEmpDefault.HasColor != oldPhoneEmpDefault.HasColor)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "HasColor = " + POut.Bool(phoneEmpDefault.HasColor) + "";
        }
         
        if (phoneEmpDefault.RingGroups != oldPhoneEmpDefault.RingGroups)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RingGroups = " + POut.Int((int)phoneEmpDefault.RingGroups) + "";
        }
         
        if (phoneEmpDefault.EmpName != oldPhoneEmpDefault.EmpName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EmpName = '" + POut.String(phoneEmpDefault.EmpName) + "'";
        }
         
        if (phoneEmpDefault.PhoneExt != oldPhoneEmpDefault.PhoneExt)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PhoneExt = " + POut.Int(phoneEmpDefault.PhoneExt) + "";
        }
         
        if (phoneEmpDefault.StatusOverride != oldPhoneEmpDefault.StatusOverride)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "StatusOverride = " + POut.Int((int)phoneEmpDefault.StatusOverride) + "";
        }
         
        if (phoneEmpDefault.Notes != oldPhoneEmpDefault.Notes)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Notes = '" + POut.String(phoneEmpDefault.Notes) + "'";
        }
         
        if (phoneEmpDefault.ComputerName != oldPhoneEmpDefault.ComputerName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ComputerName = '" + POut.String(phoneEmpDefault.ComputerName) + "'";
        }
         
        if (phoneEmpDefault.IsPrivateScreen != oldPhoneEmpDefault.IsPrivateScreen)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsPrivateScreen = " + POut.Bool(phoneEmpDefault.IsPrivateScreen) + "";
        }
         
        if (phoneEmpDefault.IsTriageOperator != oldPhoneEmpDefault.IsTriageOperator)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsTriageOperator = " + POut.Bool(phoneEmpDefault.IsTriageOperator) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE phoneempdefault SET " + command + " WHERE EmployeeNum = " + POut.Long(phoneEmpDefault.EmployeeNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one PhoneEmpDefault from the database.
    */
    public static void delete(long employeeNum) throws Exception {
        String command = "DELETE FROM phoneempdefault " + "WHERE EmployeeNum = " + POut.Long(employeeNum);
        Db.NonQ(command);
    }

}


