//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:09 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class WikiPageCrud   
{
    /**
    * Gets one WikiPage object from the database using the primary key.  Returns null if not found.
    */
    public static WikiPage selectOne(long wikiPageNum) throws Exception {
        String command = "SELECT * FROM wikipage " + "WHERE WikiPageNum = " + POut.Long(wikiPageNum);
        List<WikiPage> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one WikiPage object from the database using a query.
    */
    public static WikiPage selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<WikiPage> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of WikiPage objects from the database using a query.
    */
    public static List<WikiPage> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<WikiPage> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<WikiPage> tableToList(DataTable table) throws Exception {
        List<WikiPage> retVal = new List<WikiPage>();
        WikiPage wikiPage = new WikiPage();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            wikiPage = new WikiPage();
            wikiPage.WikiPageNum = PIn.Long(table.Rows[i]["WikiPageNum"].ToString());
            wikiPage.UserNum = PIn.Long(table.Rows[i]["UserNum"].ToString());
            wikiPage.PageTitle = PIn.String(table.Rows[i]["PageTitle"].ToString());
            wikiPage.KeyWords = PIn.String(table.Rows[i]["KeyWords"].ToString());
            wikiPage.PageContent = PIn.String(table.Rows[i]["PageContent"].ToString());
            wikiPage.DateTimeSaved = PIn.DateT(table.Rows[i]["DateTimeSaved"].ToString());
            retVal.Add(wikiPage);
        }
        return retVal;
    }

    /**
    * Inserts one WikiPage into the database.  Returns the new priKey.
    */
    public static long insert(WikiPage wikiPage) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            wikiPage.WikiPageNum = DbHelper.GetNextOracleKey("wikipage", "WikiPageNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(wikiPage,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        wikiPage.WikiPageNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(wikiPage,false);
        } 
    }

    /**
    * Inserts one WikiPage into the database.  Provides option to use the existing priKey.
    */
    public static long insert(WikiPage wikiPage, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            wikiPage.WikiPageNum = ReplicationServers.GetKey("wikipage", "WikiPageNum");
        }
         
        String command = "INSERT INTO wikipage (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "WikiPageNum,";
        }
         
        command += "UserNum,PageTitle,KeyWords,PageContent,DateTimeSaved) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(wikiPage.WikiPageNum) + ",";
        }
         
        command += POut.Long(wikiPage.UserNum) + "," + "'" + POut.String(wikiPage.PageTitle) + "'," + "'" + POut.String(wikiPage.KeyWords) + "'," + "'" + POut.String(wikiPage.PageContent) + "'," + DbHelper.Now() + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            wikiPage.WikiPageNum = Db.NonQ(command, true);
        } 
        return wikiPage.WikiPageNum;
    }

    /**
    * Updates one WikiPage in the database.
    */
    public static void update(WikiPage wikiPage) throws Exception {
        //DateTimeSaved not allowed to change
        String command = "UPDATE wikipage SET " + "UserNum      =  " + POut.Long(wikiPage.UserNum) + ", " + "PageTitle    = '" + POut.String(wikiPage.PageTitle) + "', " + "KeyWords     = '" + POut.String(wikiPage.KeyWords) + "', " + "PageContent  = '" + POut.String(wikiPage.PageContent) + "', " + "WHERE WikiPageNum = " + POut.Long(wikiPage.WikiPageNum);
        Db.NonQ(command);
    }

    /**
    * Updates one WikiPage in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(WikiPage wikiPage, WikiPage oldWikiPage) throws Exception {
        String command = "";
        if (wikiPage.UserNum != oldWikiPage.UserNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UserNum = " + POut.Long(wikiPage.UserNum) + "";
        }
         
        if (wikiPage.PageTitle != oldWikiPage.PageTitle)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PageTitle = '" + POut.String(wikiPage.PageTitle) + "'";
        }
         
        if (wikiPage.KeyWords != oldWikiPage.KeyWords)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "KeyWords = '" + POut.String(wikiPage.KeyWords) + "'";
        }
         
        if (wikiPage.PageContent != oldWikiPage.PageContent)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PageContent = '" + POut.String(wikiPage.PageContent) + "'";
        }
         
        //DateTimeSaved not allowed to change
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE wikipage SET " + command + " WHERE WikiPageNum = " + POut.Long(wikiPage.WikiPageNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one WikiPage from the database.
    */
    public static void delete(long wikiPageNum) throws Exception {
        String command = "DELETE FROM wikipage " + "WHERE WikiPageNum = " + POut.Long(wikiPageNum);
        Db.NonQ(command);
    }

}


