//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:04 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class PrinterCrud   
{
    /**
    * Gets one Printer object from the database using the primary key.  Returns null if not found.
    */
    public static Printer selectOne(long printerNum) throws Exception {
        String command = "SELECT * FROM printer " + "WHERE PrinterNum = " + POut.Long(printerNum);
        List<Printer> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Printer object from the database using a query.
    */
    public static Printer selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Printer> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Printer objects from the database using a query.
    */
    public static List<Printer> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Printer> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Printer> tableToList(DataTable table) throws Exception {
        List<Printer> retVal = new List<Printer>();
        Printer printer = new Printer();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            printer = new Printer();
            printer.PrinterNum = PIn.Long(table.Rows[i]["PrinterNum"].ToString());
            printer.ComputerNum = PIn.Long(table.Rows[i]["ComputerNum"].ToString());
            printer.PrintSit = (PrintSituation)PIn.Int(table.Rows[i]["PrintSit"].ToString());
            printer.PrinterName = PIn.String(table.Rows[i]["PrinterName"].ToString());
            printer.DisplayPrompt = PIn.Bool(table.Rows[i]["DisplayPrompt"].ToString());
            retVal.Add(printer);
        }
        return retVal;
    }

    /**
    * Inserts one Printer into the database.  Returns the new priKey.
    */
    public static long insert(Printer printer) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            printer.PrinterNum = DbHelper.GetNextOracleKey("printer", "PrinterNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(printer,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        printer.PrinterNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(printer,false);
        } 
    }

    /**
    * Inserts one Printer into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Printer printer, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            printer.PrinterNum = ReplicationServers.GetKey("printer", "PrinterNum");
        }
         
        String command = "INSERT INTO printer (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "PrinterNum,";
        }
         
        command += "ComputerNum,PrintSit,PrinterName,DisplayPrompt) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(printer.PrinterNum) + ",";
        }
         
        command += POut.Long(printer.ComputerNum) + "," + POut.Int((int)printer.PrintSit) + "," + "'" + POut.String(printer.PrinterName) + "'," + POut.Bool(printer.DisplayPrompt) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            printer.PrinterNum = Db.NonQ(command, true);
        } 
        return printer.PrinterNum;
    }

    /**
    * Updates one Printer in the database.
    */
    public static void update(Printer printer) throws Exception {
        String command = "UPDATE printer SET " + "ComputerNum  =  " + POut.Long(printer.ComputerNum) + ", " + "PrintSit     =  " + POut.Int((int)printer.PrintSit) + ", " + "PrinterName  = '" + POut.String(printer.PrinterName) + "', " + "DisplayPrompt=  " + POut.Bool(printer.DisplayPrompt) + " " + "WHERE PrinterNum = " + POut.Long(printer.PrinterNum);
        Db.NonQ(command);
    }

    /**
    * Updates one Printer in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Printer printer, Printer oldPrinter) throws Exception {
        String command = "";
        if (printer.ComputerNum != oldPrinter.ComputerNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ComputerNum = " + POut.Long(printer.ComputerNum) + "";
        }
         
        if (printer.PrintSit != oldPrinter.PrintSit)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PrintSit = " + POut.Int((int)printer.PrintSit) + "";
        }
         
        if (printer.PrinterName != oldPrinter.PrinterName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PrinterName = '" + POut.String(printer.PrinterName) + "'";
        }
         
        if (printer.DisplayPrompt != oldPrinter.DisplayPrompt)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DisplayPrompt = " + POut.Bool(printer.DisplayPrompt) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE printer SET " + command + " WHERE PrinterNum = " + POut.Long(printer.PrinterNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one Printer from the database.
    */
    public static void delete(long printerNum) throws Exception {
        String command = "DELETE FROM printer " + "WHERE PrinterNum = " + POut.Long(printerNum);
        Db.NonQ(command);
    }

}


