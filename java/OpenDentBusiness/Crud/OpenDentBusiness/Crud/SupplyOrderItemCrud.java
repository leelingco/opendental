//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:08 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class SupplyOrderItemCrud   
{
    /**
    * Gets one SupplyOrderItem object from the database using the primary key.  Returns null if not found.
    */
    public static SupplyOrderItem selectOne(long supplyOrderItemNum) throws Exception {
        String command = "SELECT * FROM supplyorderitem " + "WHERE SupplyOrderItemNum = " + POut.Long(supplyOrderItemNum);
        List<SupplyOrderItem> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one SupplyOrderItem object from the database using a query.
    */
    public static SupplyOrderItem selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<SupplyOrderItem> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of SupplyOrderItem objects from the database using a query.
    */
    public static List<SupplyOrderItem> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<SupplyOrderItem> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<SupplyOrderItem> tableToList(DataTable table) throws Exception {
        List<SupplyOrderItem> retVal = new List<SupplyOrderItem>();
        SupplyOrderItem supplyOrderItem = new SupplyOrderItem();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            supplyOrderItem = new SupplyOrderItem();
            supplyOrderItem.SupplyOrderItemNum = PIn.Long(table.Rows[i]["SupplyOrderItemNum"].ToString());
            supplyOrderItem.SupplyOrderNum = PIn.Long(table.Rows[i]["SupplyOrderNum"].ToString());
            supplyOrderItem.SupplyNum = PIn.Long(table.Rows[i]["SupplyNum"].ToString());
            supplyOrderItem.Qty = PIn.Int(table.Rows[i]["Qty"].ToString());
            supplyOrderItem.Price = PIn.Double(table.Rows[i]["Price"].ToString());
            retVal.Add(supplyOrderItem);
        }
        return retVal;
    }

    /**
    * Inserts one SupplyOrderItem into the database.  Returns the new priKey.
    */
    public static long insert(SupplyOrderItem supplyOrderItem) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            supplyOrderItem.SupplyOrderItemNum = DbHelper.GetNextOracleKey("supplyorderitem", "SupplyOrderItemNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(supplyOrderItem,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        supplyOrderItem.SupplyOrderItemNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(supplyOrderItem,false);
        } 
    }

    /**
    * Inserts one SupplyOrderItem into the database.  Provides option to use the existing priKey.
    */
    public static long insert(SupplyOrderItem supplyOrderItem, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            supplyOrderItem.SupplyOrderItemNum = ReplicationServers.GetKey("supplyorderitem", "SupplyOrderItemNum");
        }
         
        String command = "INSERT INTO supplyorderitem (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "SupplyOrderItemNum,";
        }
         
        command += "SupplyOrderNum,SupplyNum,Qty,Price) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(supplyOrderItem.SupplyOrderItemNum) + ",";
        }
         
        command += POut.Long(supplyOrderItem.SupplyOrderNum) + "," + POut.Long(supplyOrderItem.SupplyNum) + "," + POut.Int(supplyOrderItem.Qty) + "," + "'" + POut.Double(supplyOrderItem.Price) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            supplyOrderItem.SupplyOrderItemNum = Db.NonQ(command, true);
        } 
        return supplyOrderItem.SupplyOrderItemNum;
    }

    /**
    * Updates one SupplyOrderItem in the database.
    */
    public static void update(SupplyOrderItem supplyOrderItem) throws Exception {
        String command = "UPDATE supplyorderitem SET " + "SupplyOrderNum    =  " + POut.Long(supplyOrderItem.SupplyOrderNum) + ", " + "SupplyNum         =  " + POut.Long(supplyOrderItem.SupplyNum) + ", " + "Qty               =  " + POut.Int(supplyOrderItem.Qty) + ", " + "Price             = '" + POut.Double(supplyOrderItem.Price) + "' " + "WHERE SupplyOrderItemNum = " + POut.Long(supplyOrderItem.SupplyOrderItemNum);
        Db.NonQ(command);
    }

    /**
    * Updates one SupplyOrderItem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(SupplyOrderItem supplyOrderItem, SupplyOrderItem oldSupplyOrderItem) throws Exception {
        String command = "";
        if (supplyOrderItem.SupplyOrderNum != oldSupplyOrderItem.SupplyOrderNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SupplyOrderNum = " + POut.Long(supplyOrderItem.SupplyOrderNum) + "";
        }
         
        if (supplyOrderItem.SupplyNum != oldSupplyOrderItem.SupplyNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SupplyNum = " + POut.Long(supplyOrderItem.SupplyNum) + "";
        }
         
        if (supplyOrderItem.Qty != oldSupplyOrderItem.Qty)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Qty = " + POut.Int(supplyOrderItem.Qty) + "";
        }
         
        if (supplyOrderItem.Price != oldSupplyOrderItem.Price)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Price = '" + POut.Double(supplyOrderItem.Price) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE supplyorderitem SET " + command + " WHERE SupplyOrderItemNum = " + POut.Long(supplyOrderItem.SupplyOrderItemNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one SupplyOrderItem from the database.
    */
    public static void delete(long supplyOrderItemNum) throws Exception {
        String command = "DELETE FROM supplyorderitem " + "WHERE SupplyOrderItemNum = " + POut.Long(supplyOrderItemNum);
        Db.NonQ(command);
    }

}


