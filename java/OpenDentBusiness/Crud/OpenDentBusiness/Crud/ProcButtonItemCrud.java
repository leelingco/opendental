//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:04 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ProcButtonItemCrud   
{
    /**
    * Gets one ProcButtonItem object from the database using the primary key.  Returns null if not found.
    */
    public static ProcButtonItem selectOne(long procButtonItemNum) throws Exception {
        String command = "SELECT * FROM procbuttonitem " + "WHERE ProcButtonItemNum = " + POut.Long(procButtonItemNum);
        List<ProcButtonItem> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ProcButtonItem object from the database using a query.
    */
    public static ProcButtonItem selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ProcButtonItem> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ProcButtonItem objects from the database using a query.
    */
    public static List<ProcButtonItem> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ProcButtonItem> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ProcButtonItem> tableToList(DataTable table) throws Exception {
        List<ProcButtonItem> retVal = new List<ProcButtonItem>();
        ProcButtonItem procButtonItem = new ProcButtonItem();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            procButtonItem = new ProcButtonItem();
            procButtonItem.ProcButtonItemNum = PIn.Long(table.Rows[i]["ProcButtonItemNum"].ToString());
            procButtonItem.ProcButtonNum = PIn.Long(table.Rows[i]["ProcButtonNum"].ToString());
            procButtonItem.OldCode = PIn.String(table.Rows[i]["OldCode"].ToString());
            procButtonItem.AutoCodeNum = PIn.Long(table.Rows[i]["AutoCodeNum"].ToString());
            procButtonItem.CodeNum = PIn.Long(table.Rows[i]["CodeNum"].ToString());
            retVal.Add(procButtonItem);
        }
        return retVal;
    }

    /**
    * Inserts one ProcButtonItem into the database.  Returns the new priKey.
    */
    public static long insert(ProcButtonItem procButtonItem) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            procButtonItem.ProcButtonItemNum = DbHelper.GetNextOracleKey("procbuttonitem", "ProcButtonItemNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(procButtonItem,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        procButtonItem.ProcButtonItemNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(procButtonItem,false);
        } 
    }

    /**
    * Inserts one ProcButtonItem into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ProcButtonItem procButtonItem, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            procButtonItem.ProcButtonItemNum = ReplicationServers.GetKey("procbuttonitem", "ProcButtonItemNum");
        }
         
        String command = "INSERT INTO procbuttonitem (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ProcButtonItemNum,";
        }
         
        command += "ProcButtonNum,OldCode,AutoCodeNum,CodeNum) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(procButtonItem.ProcButtonItemNum) + ",";
        }
         
        command += POut.Long(procButtonItem.ProcButtonNum) + "," + "'" + POut.String(procButtonItem.OldCode) + "'," + POut.Long(procButtonItem.AutoCodeNum) + "," + POut.Long(procButtonItem.CodeNum) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            procButtonItem.ProcButtonItemNum = Db.NonQ(command, true);
        } 
        return procButtonItem.ProcButtonItemNum;
    }

    /**
    * Updates one ProcButtonItem in the database.
    */
    public static void update(ProcButtonItem procButtonItem) throws Exception {
        String command = "UPDATE procbuttonitem SET " + "ProcButtonNum    =  " + POut.Long(procButtonItem.ProcButtonNum) + ", " + "OldCode          = '" + POut.String(procButtonItem.OldCode) + "', " + "AutoCodeNum      =  " + POut.Long(procButtonItem.AutoCodeNum) + ", " + "CodeNum          =  " + POut.Long(procButtonItem.CodeNum) + " " + "WHERE ProcButtonItemNum = " + POut.Long(procButtonItem.ProcButtonItemNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ProcButtonItem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ProcButtonItem procButtonItem, ProcButtonItem oldProcButtonItem) throws Exception {
        String command = "";
        if (procButtonItem.ProcButtonNum != oldProcButtonItem.ProcButtonNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProcButtonNum = " + POut.Long(procButtonItem.ProcButtonNum) + "";
        }
         
        if (procButtonItem.OldCode != oldProcButtonItem.OldCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "OldCode = '" + POut.String(procButtonItem.OldCode) + "'";
        }
         
        if (procButtonItem.AutoCodeNum != oldProcButtonItem.AutoCodeNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AutoCodeNum = " + POut.Long(procButtonItem.AutoCodeNum) + "";
        }
         
        if (procButtonItem.CodeNum != oldProcButtonItem.CodeNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeNum = " + POut.Long(procButtonItem.CodeNum) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE procbuttonitem SET " + command + " WHERE ProcButtonItemNum = " + POut.Long(procButtonItem.ProcButtonItemNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ProcButtonItem from the database.
    */
    public static void delete(long procButtonItemNum) throws Exception {
        String command = "DELETE FROM procbuttonitem " + "WHERE ProcButtonItemNum = " + POut.Long(procButtonItemNum);
        Db.NonQ(command);
    }

}


