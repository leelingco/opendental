//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:08 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class SupplyOrderCrud   
{
    /**
    * Gets one SupplyOrder object from the database using the primary key.  Returns null if not found.
    */
    public static SupplyOrder selectOne(long supplyOrderNum) throws Exception {
        String command = "SELECT * FROM supplyorder " + "WHERE SupplyOrderNum = " + POut.Long(supplyOrderNum);
        List<SupplyOrder> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one SupplyOrder object from the database using a query.
    */
    public static SupplyOrder selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<SupplyOrder> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of SupplyOrder objects from the database using a query.
    */
    public static List<SupplyOrder> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<SupplyOrder> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<SupplyOrder> tableToList(DataTable table) throws Exception {
        List<SupplyOrder> retVal = new List<SupplyOrder>();
        SupplyOrder supplyOrder = new SupplyOrder();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            supplyOrder = new SupplyOrder();
            supplyOrder.SupplyOrderNum = PIn.Long(table.Rows[i]["SupplyOrderNum"].ToString());
            supplyOrder.SupplierNum = PIn.Long(table.Rows[i]["SupplierNum"].ToString());
            supplyOrder.DatePlaced = PIn.Date(table.Rows[i]["DatePlaced"].ToString());
            supplyOrder.Note = PIn.String(table.Rows[i]["Note"].ToString());
            supplyOrder.AmountTotal = PIn.Double(table.Rows[i]["AmountTotal"].ToString());
            retVal.Add(supplyOrder);
        }
        return retVal;
    }

    /**
    * Inserts one SupplyOrder into the database.  Returns the new priKey.
    */
    public static long insert(SupplyOrder supplyOrder) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            supplyOrder.SupplyOrderNum = DbHelper.GetNextOracleKey("supplyorder", "SupplyOrderNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(supplyOrder,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        supplyOrder.SupplyOrderNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(supplyOrder,false);
        } 
    }

    /**
    * Inserts one SupplyOrder into the database.  Provides option to use the existing priKey.
    */
    public static long insert(SupplyOrder supplyOrder, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            supplyOrder.SupplyOrderNum = ReplicationServers.GetKey("supplyorder", "SupplyOrderNum");
        }
         
        String command = "INSERT INTO supplyorder (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "SupplyOrderNum,";
        }
         
        command += "SupplierNum,DatePlaced,Note,AmountTotal) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(supplyOrder.SupplyOrderNum) + ",";
        }
         
        command += POut.Long(supplyOrder.SupplierNum) + "," + POut.Date(supplyOrder.DatePlaced) + "," + "'" + POut.String(supplyOrder.Note) + "'," + "'" + POut.Double(supplyOrder.AmountTotal) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            supplyOrder.SupplyOrderNum = Db.NonQ(command, true);
        } 
        return supplyOrder.SupplyOrderNum;
    }

    /**
    * Updates one SupplyOrder in the database.
    */
    public static void update(SupplyOrder supplyOrder) throws Exception {
        String command = "UPDATE supplyorder SET " + "SupplierNum   =  " + POut.Long(supplyOrder.SupplierNum) + ", " + "DatePlaced    =  " + POut.Date(supplyOrder.DatePlaced) + ", " + "Note          = '" + POut.String(supplyOrder.Note) + "', " + "AmountTotal   = '" + POut.Double(supplyOrder.AmountTotal) + "' " + "WHERE SupplyOrderNum = " + POut.Long(supplyOrder.SupplyOrderNum);
        Db.NonQ(command);
    }

    /**
    * Updates one SupplyOrder in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(SupplyOrder supplyOrder, SupplyOrder oldSupplyOrder) throws Exception {
        String command = "";
        if (supplyOrder.SupplierNum != oldSupplyOrder.SupplierNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SupplierNum = " + POut.Long(supplyOrder.SupplierNum) + "";
        }
         
        if (supplyOrder.DatePlaced != oldSupplyOrder.DatePlaced)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DatePlaced = " + POut.Date(supplyOrder.DatePlaced) + "";
        }
         
        if (supplyOrder.Note != oldSupplyOrder.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(supplyOrder.Note) + "'";
        }
         
        if (supplyOrder.AmountTotal != oldSupplyOrder.AmountTotal)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AmountTotal = '" + POut.Double(supplyOrder.AmountTotal) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE supplyorder SET " + command + " WHERE SupplyOrderNum = " + POut.Long(supplyOrder.SupplyOrderNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one SupplyOrder from the database.
    */
    public static void delete(long supplyOrderNum) throws Exception {
        String command = "DELETE FROM supplyorder " + "WHERE SupplyOrderNum = " + POut.Long(supplyOrderNum);
        Db.NonQ(command);
    }

}


