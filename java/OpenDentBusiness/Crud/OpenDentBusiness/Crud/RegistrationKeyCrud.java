//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:06 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class RegistrationKeyCrud   
{
    /**
    * Gets one RegistrationKey object from the database using the primary key.  Returns null if not found.
    */
    public static RegistrationKey selectOne(long registrationKeyNum) throws Exception {
        String command = "SELECT * FROM registrationkey " + "WHERE RegistrationKeyNum = " + POut.Long(registrationKeyNum);
        List<RegistrationKey> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one RegistrationKey object from the database using a query.
    */
    public static RegistrationKey selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<RegistrationKey> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of RegistrationKey objects from the database using a query.
    */
    public static List<RegistrationKey> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<RegistrationKey> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<RegistrationKey> tableToList(DataTable table) throws Exception {
        List<RegistrationKey> retVal = new List<RegistrationKey>();
        RegistrationKey registrationKey = new RegistrationKey();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            registrationKey = new RegistrationKey();
            registrationKey.RegistrationKeyNum = PIn.Long(table.Rows[i]["RegistrationKeyNum"].ToString());
            registrationKey.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            registrationKey.RegKey = PIn.String(table.Rows[i]["RegKey"].ToString());
            registrationKey.Note = PIn.String(table.Rows[i]["Note"].ToString());
            registrationKey.DateStarted = PIn.Date(table.Rows[i]["DateStarted"].ToString());
            registrationKey.DateDisabled = PIn.Date(table.Rows[i]["DateDisabled"].ToString());
            registrationKey.DateEnded = PIn.Date(table.Rows[i]["DateEnded"].ToString());
            registrationKey.IsForeign = PIn.Bool(table.Rows[i]["IsForeign"].ToString());
            registrationKey.UsesServerVersion = PIn.Bool(table.Rows[i]["UsesServerVersion"].ToString());
            registrationKey.IsFreeVersion = PIn.Bool(table.Rows[i]["IsFreeVersion"].ToString());
            registrationKey.IsOnlyForTesting = PIn.Bool(table.Rows[i]["IsOnlyForTesting"].ToString());
            registrationKey.VotesAllotted = PIn.Int(table.Rows[i]["VotesAllotted"].ToString());
            registrationKey.IsResellerCustomer = PIn.Bool(table.Rows[i]["IsResellerCustomer"].ToString());
            retVal.Add(registrationKey);
        }
        return retVal;
    }

    /**
    * Inserts one RegistrationKey into the database.  Returns the new priKey.
    */
    public static long insert(RegistrationKey registrationKey) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            registrationKey.RegistrationKeyNum = DbHelper.GetNextOracleKey("registrationkey", "RegistrationKeyNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(registrationKey,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        registrationKey.RegistrationKeyNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(registrationKey,false);
        } 
    }

    /**
    * Inserts one RegistrationKey into the database.  Provides option to use the existing priKey.
    */
    public static long insert(RegistrationKey registrationKey, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            registrationKey.RegistrationKeyNum = ReplicationServers.GetKey("registrationkey", "RegistrationKeyNum");
        }
         
        String command = "INSERT INTO registrationkey (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "RegistrationKeyNum,";
        }
         
        command += "PatNum,RegKey,Note,DateStarted,DateDisabled,DateEnded,IsForeign,UsesServerVersion,IsFreeVersion,IsOnlyForTesting,VotesAllotted,IsResellerCustomer) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(registrationKey.RegistrationKeyNum) + ",";
        }
         
        command += POut.Long(registrationKey.PatNum) + "," + "'" + POut.String(registrationKey.RegKey) + "'," + "'" + POut.String(registrationKey.Note) + "'," + POut.Date(registrationKey.DateStarted) + "," + POut.Date(registrationKey.DateDisabled) + "," + POut.Date(registrationKey.DateEnded) + "," + POut.Bool(registrationKey.IsForeign) + "," + POut.Bool(registrationKey.UsesServerVersion) + "," + POut.Bool(registrationKey.IsFreeVersion) + "," + POut.Bool(registrationKey.IsOnlyForTesting) + "," + POut.Int(registrationKey.VotesAllotted) + "," + POut.Bool(registrationKey.IsResellerCustomer) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            registrationKey.RegistrationKeyNum = Db.NonQ(command, true);
        } 
        return registrationKey.RegistrationKeyNum;
    }

    /**
    * Updates one RegistrationKey in the database.
    */
    public static void update(RegistrationKey registrationKey) throws Exception {
        String command = "UPDATE registrationkey SET " + "PatNum            =  " + POut.Long(registrationKey.PatNum) + ", " + "RegKey            = '" + POut.String(registrationKey.RegKey) + "', " + "Note              = '" + POut.String(registrationKey.Note) + "', " + "DateStarted       =  " + POut.Date(registrationKey.DateStarted) + ", " + "DateDisabled      =  " + POut.Date(registrationKey.DateDisabled) + ", " + "DateEnded         =  " + POut.Date(registrationKey.DateEnded) + ", " + "IsForeign         =  " + POut.Bool(registrationKey.IsForeign) + ", " + "UsesServerVersion =  " + POut.Bool(registrationKey.UsesServerVersion) + ", " + "IsFreeVersion     =  " + POut.Bool(registrationKey.IsFreeVersion) + ", " + "IsOnlyForTesting  =  " + POut.Bool(registrationKey.IsOnlyForTesting) + ", " + "VotesAllotted     =  " + POut.Int(registrationKey.VotesAllotted) + ", " + "IsResellerCustomer=  " + POut.Bool(registrationKey.IsResellerCustomer) + " " + "WHERE RegistrationKeyNum = " + POut.Long(registrationKey.RegistrationKeyNum);
        Db.NonQ(command);
    }

    /**
    * Updates one RegistrationKey in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(RegistrationKey registrationKey, RegistrationKey oldRegistrationKey) throws Exception {
        String command = "";
        if (registrationKey.PatNum != oldRegistrationKey.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(registrationKey.PatNum) + "";
        }
         
        if (registrationKey.RegKey != oldRegistrationKey.RegKey)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RegKey = '" + POut.String(registrationKey.RegKey) + "'";
        }
         
        if (registrationKey.Note != oldRegistrationKey.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(registrationKey.Note) + "'";
        }
         
        if (registrationKey.DateStarted != oldRegistrationKey.DateStarted)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateStarted = " + POut.Date(registrationKey.DateStarted) + "";
        }
         
        if (registrationKey.DateDisabled != oldRegistrationKey.DateDisabled)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateDisabled = " + POut.Date(registrationKey.DateDisabled) + "";
        }
         
        if (registrationKey.DateEnded != oldRegistrationKey.DateEnded)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateEnded = " + POut.Date(registrationKey.DateEnded) + "";
        }
         
        if (registrationKey.IsForeign != oldRegistrationKey.IsForeign)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsForeign = " + POut.Bool(registrationKey.IsForeign) + "";
        }
         
        if (registrationKey.UsesServerVersion != oldRegistrationKey.UsesServerVersion)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UsesServerVersion = " + POut.Bool(registrationKey.UsesServerVersion) + "";
        }
         
        if (registrationKey.IsFreeVersion != oldRegistrationKey.IsFreeVersion)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsFreeVersion = " + POut.Bool(registrationKey.IsFreeVersion) + "";
        }
         
        if (registrationKey.IsOnlyForTesting != oldRegistrationKey.IsOnlyForTesting)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsOnlyForTesting = " + POut.Bool(registrationKey.IsOnlyForTesting) + "";
        }
         
        if (registrationKey.VotesAllotted != oldRegistrationKey.VotesAllotted)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "VotesAllotted = " + POut.Int(registrationKey.VotesAllotted) + "";
        }
         
        if (registrationKey.IsResellerCustomer != oldRegistrationKey.IsResellerCustomer)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsResellerCustomer = " + POut.Bool(registrationKey.IsResellerCustomer) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE registrationkey SET " + command + " WHERE RegistrationKeyNum = " + POut.Long(registrationKey.RegistrationKeyNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one RegistrationKey from the database.
    */
    public static void delete(long registrationKeyNum) throws Exception {
        String command = "DELETE FROM registrationkey " + "WHERE RegistrationKeyNum = " + POut.Long(registrationKeyNum);
        Db.NonQ(command);
    }

}


