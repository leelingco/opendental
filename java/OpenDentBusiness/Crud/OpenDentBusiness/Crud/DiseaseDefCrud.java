//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:58 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class DiseaseDefCrud   
{
    /**
    * Gets one DiseaseDef object from the database using the primary key.  Returns null if not found.
    */
    public static DiseaseDef selectOne(long diseaseDefNum) throws Exception {
        String command = "SELECT * FROM diseasedef " + "WHERE DiseaseDefNum = " + POut.Long(diseaseDefNum);
        List<DiseaseDef> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one DiseaseDef object from the database using a query.
    */
    public static DiseaseDef selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<DiseaseDef> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of DiseaseDef objects from the database using a query.
    */
    public static List<DiseaseDef> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<DiseaseDef> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<DiseaseDef> tableToList(DataTable table) throws Exception {
        List<DiseaseDef> retVal = new List<DiseaseDef>();
        DiseaseDef diseaseDef = new DiseaseDef();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            diseaseDef = new DiseaseDef();
            diseaseDef.DiseaseDefNum = PIn.Long(table.Rows[i]["DiseaseDefNum"].ToString());
            diseaseDef.DiseaseName = PIn.String(table.Rows[i]["DiseaseName"].ToString());
            diseaseDef.ItemOrder = PIn.Int(table.Rows[i]["ItemOrder"].ToString());
            diseaseDef.IsHidden = PIn.Bool(table.Rows[i]["IsHidden"].ToString());
            diseaseDef.DateTStamp = PIn.DateT(table.Rows[i]["DateTStamp"].ToString());
            diseaseDef.ICD9Code = PIn.String(table.Rows[i]["ICD9Code"].ToString());
            diseaseDef.SnomedCode = PIn.String(table.Rows[i]["SnomedCode"].ToString());
            diseaseDef.Icd10Code = PIn.String(table.Rows[i]["Icd10Code"].ToString());
            retVal.Add(diseaseDef);
        }
        return retVal;
    }

    /**
    * Inserts one DiseaseDef into the database.  Returns the new priKey.
    */
    public static long insert(DiseaseDef diseaseDef) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            diseaseDef.DiseaseDefNum = DbHelper.GetNextOracleKey("diseasedef", "DiseaseDefNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(diseaseDef,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        diseaseDef.DiseaseDefNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(diseaseDef,false);
        } 
    }

    /**
    * Inserts one DiseaseDef into the database.  Provides option to use the existing priKey.
    */
    public static long insert(DiseaseDef diseaseDef, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            diseaseDef.DiseaseDefNum = ReplicationServers.GetKey("diseasedef", "DiseaseDefNum");
        }
         
        String command = "INSERT INTO diseasedef (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "DiseaseDefNum,";
        }
         
        command += "DiseaseName,ItemOrder,IsHidden,ICD9Code,SnomedCode,Icd10Code) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(diseaseDef.DiseaseDefNum) + ",";
        }
         
        //DateTStamp can only be set by MySQL
        command += "'" + POut.String(diseaseDef.DiseaseName) + "'," + POut.Int(diseaseDef.ItemOrder) + "," + POut.Bool(diseaseDef.IsHidden) + "," + "'" + POut.String(diseaseDef.ICD9Code) + "'," + "'" + POut.String(diseaseDef.SnomedCode) + "'," + "'" + POut.String(diseaseDef.Icd10Code) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            diseaseDef.DiseaseDefNum = Db.NonQ(command, true);
        } 
        return diseaseDef.DiseaseDefNum;
    }

    /**
    * Updates one DiseaseDef in the database.
    */
    public static void update(DiseaseDef diseaseDef) throws Exception {
        //DateTStamp can only be set by MySQL
        String command = "UPDATE diseasedef SET " + "DiseaseName  = '" + POut.String(diseaseDef.DiseaseName) + "', " + "ItemOrder    =  " + POut.Int(diseaseDef.ItemOrder) + ", " + "IsHidden     =  " + POut.Bool(diseaseDef.IsHidden) + ", " + "ICD9Code     = '" + POut.String(diseaseDef.ICD9Code) + "', " + "SnomedCode   = '" + POut.String(diseaseDef.SnomedCode) + "', " + "Icd10Code    = '" + POut.String(diseaseDef.Icd10Code) + "' " + "WHERE DiseaseDefNum = " + POut.Long(diseaseDef.DiseaseDefNum);
        Db.NonQ(command);
    }

    /**
    * Updates one DiseaseDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(DiseaseDef diseaseDef, DiseaseDef oldDiseaseDef) throws Exception {
        String command = "";
        if (diseaseDef.DiseaseName != oldDiseaseDef.DiseaseName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DiseaseName = '" + POut.String(diseaseDef.DiseaseName) + "'";
        }
         
        if (diseaseDef.ItemOrder != oldDiseaseDef.ItemOrder)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ItemOrder = " + POut.Int(diseaseDef.ItemOrder) + "";
        }
         
        if (diseaseDef.IsHidden != oldDiseaseDef.IsHidden)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsHidden = " + POut.Bool(diseaseDef.IsHidden) + "";
        }
         
        //DateTStamp can only be set by MySQL
        if (diseaseDef.ICD9Code != oldDiseaseDef.ICD9Code)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ICD9Code = '" + POut.String(diseaseDef.ICD9Code) + "'";
        }
         
        if (diseaseDef.SnomedCode != oldDiseaseDef.SnomedCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SnomedCode = '" + POut.String(diseaseDef.SnomedCode) + "'";
        }
         
        if (diseaseDef.Icd10Code != oldDiseaseDef.Icd10Code)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Icd10Code = '" + POut.String(diseaseDef.Icd10Code) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE diseasedef SET " + command + " WHERE DiseaseDefNum = " + POut.Long(diseaseDef.DiseaseDefNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one DiseaseDef from the database.
    */
    public static void delete(long diseaseDefNum) throws Exception {
        String command = "DELETE FROM diseasedef " + "WHERE DiseaseDefNum = " + POut.Long(diseaseDefNum);
        Db.NonQ(command);
    }

}


