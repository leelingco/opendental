//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:08 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class TaskCrud   
{
    /**
    * Gets one Task object from the database using the primary key.  Returns null if not found.
    */
    public static Task selectOne(long taskNum) throws Exception {
        String command = "SELECT * FROM task " + "WHERE TaskNum = " + POut.Long(taskNum);
        List<Task> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Task object from the database using a query.
    */
    public static Task selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Task> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Task objects from the database using a query.
    */
    public static List<Task> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Task> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Task> tableToList(DataTable table) throws Exception {
        List<Task> retVal = new List<Task>();
        Task task = new Task();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            task = new Task();
            task.TaskNum = PIn.Long(table.Rows[i]["TaskNum"].ToString());
            task.TaskListNum = PIn.Long(table.Rows[i]["TaskListNum"].ToString());
            task.DateTask = PIn.Date(table.Rows[i]["DateTask"].ToString());
            task.KeyNum = PIn.Long(table.Rows[i]["KeyNum"].ToString());
            task.Descript = PIn.String(table.Rows[i]["Descript"].ToString());
            task.TaskStatus = (TaskStatusEnum)PIn.Int(table.Rows[i]["TaskStatus"].ToString());
            task.IsRepeating = PIn.Bool(table.Rows[i]["IsRepeating"].ToString());
            task.DateType = (TaskDateType)PIn.Int(table.Rows[i]["DateType"].ToString());
            task.FromNum = PIn.Long(table.Rows[i]["FromNum"].ToString());
            task.ObjectType = (TaskObjectType)PIn.Int(table.Rows[i]["ObjectType"].ToString());
            task.DateTimeEntry = PIn.DateT(table.Rows[i]["DateTimeEntry"].ToString());
            task.UserNum = PIn.Long(table.Rows[i]["UserNum"].ToString());
            task.DateTimeFinished = PIn.DateT(table.Rows[i]["DateTimeFinished"].ToString());
            retVal.Add(task);
        }
        return retVal;
    }

    /**
    * Inserts one Task into the database.  Returns the new priKey.
    */
    public static long insert(Task task) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            task.TaskNum = DbHelper.GetNextOracleKey("task", "TaskNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(task,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        task.TaskNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(task,false);
        } 
    }

    /**
    * Inserts one Task into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Task task, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            task.TaskNum = ReplicationServers.GetKey("task", "TaskNum");
        }
         
        String command = "INSERT INTO task (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "TaskNum,";
        }
         
        command += "TaskListNum,DateTask,KeyNum,Descript,TaskStatus,IsRepeating,DateType,FromNum,ObjectType,DateTimeEntry,UserNum,DateTimeFinished) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(task.TaskNum) + ",";
        }
         
        command += POut.Long(task.TaskListNum) + "," + POut.Date(task.DateTask) + "," + POut.Long(task.KeyNum) + "," + DbHelper.ParamChar + "paramDescript," + POut.Int((int)task.TaskStatus) + "," + POut.Bool(task.IsRepeating) + "," + POut.Int((int)task.DateType) + "," + POut.Long(task.FromNum) + "," + POut.Int((int)task.ObjectType) + "," + POut.DateT(task.DateTimeEntry) + "," + POut.Long(task.UserNum) + "," + POut.DateT(task.DateTimeFinished) + ")";
        if (task.Descript == null)
        {
            task.Descript = "";
        }
         
        OdSqlParameter paramDescript = new OdSqlParameter("paramDescript", OdDbType.Text, task.Descript);
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command, paramDescript);
        }
        else
        {
            task.TaskNum = Db.NonQ(command, true, paramDescript);
        } 
        return task.TaskNum;
    }

    /**
    * Updates one Task in the database.
    */
    public static void update(Task task) throws Exception {
        String command = "UPDATE task SET " + "TaskListNum     =  " + POut.Long(task.TaskListNum) + ", " + "DateTask        =  " + POut.Date(task.DateTask) + ", " + "KeyNum          =  " + POut.Long(task.KeyNum) + ", " + "Descript        =  " + DbHelper.ParamChar + "paramDescript, " + "TaskStatus      =  " + POut.Int((int)task.TaskStatus) + ", " + "IsRepeating     =  " + POut.Bool(task.IsRepeating) + ", " + "DateType        =  " + POut.Int((int)task.DateType) + ", " + "FromNum         =  " + POut.Long(task.FromNum) + ", " + "ObjectType      =  " + POut.Int((int)task.ObjectType) + ", " + "DateTimeEntry   =  " + POut.DateT(task.DateTimeEntry) + ", " + "UserNum         =  " + POut.Long(task.UserNum) + ", " + "DateTimeFinished=  " + POut.DateT(task.DateTimeFinished) + " " + "WHERE TaskNum = " + POut.Long(task.TaskNum);
        if (task.Descript == null)
        {
            task.Descript = "";
        }
         
        OdSqlParameter paramDescript = new OdSqlParameter("paramDescript", OdDbType.Text, task.Descript);
        Db.NonQ(command, paramDescript);
    }

    /**
    * Updates one Task in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Task task, Task oldTask) throws Exception {
        String command = "";
        if (task.TaskListNum != oldTask.TaskListNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "TaskListNum = " + POut.Long(task.TaskListNum) + "";
        }
         
        if (task.DateTask != oldTask.DateTask)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTask = " + POut.Date(task.DateTask) + "";
        }
         
        if (task.KeyNum != oldTask.KeyNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "KeyNum = " + POut.Long(task.KeyNum) + "";
        }
         
        if (task.Descript != oldTask.Descript)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Descript = " + DbHelper.ParamChar + "paramDescript";
        }
         
        if (task.TaskStatus != oldTask.TaskStatus)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "TaskStatus = " + POut.Int((int)task.TaskStatus) + "";
        }
         
        if (task.IsRepeating != oldTask.IsRepeating)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsRepeating = " + POut.Bool(task.IsRepeating) + "";
        }
         
        if (task.DateType != oldTask.DateType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateType = " + POut.Int((int)task.DateType) + "";
        }
         
        if (task.FromNum != oldTask.FromNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FromNum = " + POut.Long(task.FromNum) + "";
        }
         
        if (task.ObjectType != oldTask.ObjectType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ObjectType = " + POut.Int((int)task.ObjectType) + "";
        }
         
        if (task.DateTimeEntry != oldTask.DateTimeEntry)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTimeEntry = " + POut.DateT(task.DateTimeEntry) + "";
        }
         
        if (task.UserNum != oldTask.UserNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UserNum = " + POut.Long(task.UserNum) + "";
        }
         
        if (task.DateTimeFinished != oldTask.DateTimeFinished)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTimeFinished = " + POut.DateT(task.DateTimeFinished) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        if (task.Descript == null)
        {
            task.Descript = "";
        }
         
        OdSqlParameter paramDescript = new OdSqlParameter("paramDescript", OdDbType.Text, task.Descript);
        command = "UPDATE task SET " + command + " WHERE TaskNum = " + POut.Long(task.TaskNum);
        Db.NonQ(command, paramDescript);
    }

    /**
    * Deletes one Task from the database.
    */
    public static void delete(long taskNum) throws Exception {
        String command = "DELETE FROM task " + "WHERE TaskNum = " + POut.Long(taskNum);
        Db.NonQ(command);
    }

}


