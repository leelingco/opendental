//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:05 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ProcNoteCrud   
{
    /**
    * Gets one ProcNote object from the database using the primary key.  Returns null if not found.
    */
    public static ProcNote selectOne(long procNoteNum) throws Exception {
        String command = "SELECT * FROM procnote " + "WHERE ProcNoteNum = " + POut.Long(procNoteNum);
        List<ProcNote> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ProcNote object from the database using a query.
    */
    public static ProcNote selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ProcNote> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ProcNote objects from the database using a query.
    */
    public static List<ProcNote> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ProcNote> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ProcNote> tableToList(DataTable table) throws Exception {
        List<ProcNote> retVal = new List<ProcNote>();
        ProcNote procNote = new ProcNote();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            procNote = new ProcNote();
            procNote.ProcNoteNum = PIn.Long(table.Rows[i]["ProcNoteNum"].ToString());
            procNote.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            procNote.ProcNum = PIn.Long(table.Rows[i]["ProcNum"].ToString());
            procNote.EntryDateTime = PIn.DateT(table.Rows[i]["EntryDateTime"].ToString());
            procNote.UserNum = PIn.Long(table.Rows[i]["UserNum"].ToString());
            procNote.Note = PIn.String(table.Rows[i]["Note"].ToString());
            procNote.SigIsTopaz = PIn.Bool(table.Rows[i]["SigIsTopaz"].ToString());
            procNote.Signature = PIn.String(table.Rows[i]["Signature"].ToString());
            retVal.Add(procNote);
        }
        return retVal;
    }

    /**
    * Inserts one ProcNote into the database.  Returns the new priKey.
    */
    public static long insert(ProcNote procNote) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            procNote.ProcNoteNum = DbHelper.GetNextOracleKey("procnote", "ProcNoteNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(procNote,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        procNote.ProcNoteNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(procNote,false);
        } 
    }

    /**
    * Inserts one ProcNote into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ProcNote procNote, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            procNote.ProcNoteNum = ReplicationServers.GetKey("procnote", "ProcNoteNum");
        }
         
        String command = "INSERT INTO procnote (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ProcNoteNum,";
        }
         
        command += "PatNum,ProcNum,EntryDateTime,UserNum,Note,SigIsTopaz,Signature) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(procNote.ProcNoteNum) + ",";
        }
         
        command += POut.Long(procNote.PatNum) + "," + POut.Long(procNote.ProcNum) + "," + DbHelper.Now() + "," + POut.Long(procNote.UserNum) + "," + DbHelper.ParamChar + "paramNote," + POut.Bool(procNote.SigIsTopaz) + "," + "'" + POut.String(procNote.Signature) + "')";
        if (procNote.Note == null)
        {
            procNote.Note = "";
        }
         
        OdSqlParameter paramNote = new OdSqlParameter("paramNote", OdDbType.Text, procNote.Note);
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command, paramNote);
        }
        else
        {
            procNote.ProcNoteNum = Db.NonQ(command, true, paramNote);
        } 
        return procNote.ProcNoteNum;
    }

    /**
    * Updates one ProcNote in the database.
    */
    public static void update(ProcNote procNote) throws Exception {
        //EntryDateTime not allowed to change
        String command = "UPDATE procnote SET " + "PatNum       =  " + POut.Long(procNote.PatNum) + ", " + "ProcNum      =  " + POut.Long(procNote.ProcNum) + ", " + "UserNum      =  " + POut.Long(procNote.UserNum) + ", " + "Note         =  " + DbHelper.ParamChar + "paramNote, " + "SigIsTopaz   =  " + POut.Bool(procNote.SigIsTopaz) + ", " + "Signature    = '" + POut.String(procNote.Signature) + "' " + "WHERE ProcNoteNum = " + POut.Long(procNote.ProcNoteNum);
        if (procNote.Note == null)
        {
            procNote.Note = "";
        }
         
        OdSqlParameter paramNote = new OdSqlParameter("paramNote", OdDbType.Text, procNote.Note);
        Db.NonQ(command, paramNote);
    }

    /**
    * Updates one ProcNote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ProcNote procNote, ProcNote oldProcNote) throws Exception {
        String command = "";
        if (procNote.PatNum != oldProcNote.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(procNote.PatNum) + "";
        }
         
        if (procNote.ProcNum != oldProcNote.ProcNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProcNum = " + POut.Long(procNote.ProcNum) + "";
        }
         
        //EntryDateTime not allowed to change
        if (procNote.UserNum != oldProcNote.UserNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UserNum = " + POut.Long(procNote.UserNum) + "";
        }
         
        if (procNote.Note != oldProcNote.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = " + DbHelper.ParamChar + "paramNote";
        }
         
        if (procNote.SigIsTopaz != oldProcNote.SigIsTopaz)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SigIsTopaz = " + POut.Bool(procNote.SigIsTopaz) + "";
        }
         
        if (procNote.Signature != oldProcNote.Signature)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Signature = '" + POut.String(procNote.Signature) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        if (procNote.Note == null)
        {
            procNote.Note = "";
        }
         
        OdSqlParameter paramNote = new OdSqlParameter("paramNote", OdDbType.Text, procNote.Note);
        command = "UPDATE procnote SET " + command + " WHERE ProcNoteNum = " + POut.Long(procNote.ProcNoteNum);
        Db.NonQ(command, paramNote);
    }

    /**
    * Deletes one ProcNote from the database.
    */
    public static void delete(long procNoteNum) throws Exception {
        String command = "DELETE FROM procnote " + "WHERE ProcNoteNum = " + POut.Long(procNoteNum);
        Db.NonQ(command);
    }

}


