//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:06 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ReplicationServerCrud   
{
    /**
    * Gets one ReplicationServer object from the database using the primary key.  Returns null if not found.
    */
    public static ReplicationServer selectOne(long replicationServerNum) throws Exception {
        String command = "SELECT * FROM replicationserver " + "WHERE ReplicationServerNum = " + POut.Long(replicationServerNum);
        List<ReplicationServer> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ReplicationServer object from the database using a query.
    */
    public static ReplicationServer selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ReplicationServer> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ReplicationServer objects from the database using a query.
    */
    public static List<ReplicationServer> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ReplicationServer> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ReplicationServer> tableToList(DataTable table) throws Exception {
        List<ReplicationServer> retVal = new List<ReplicationServer>();
        ReplicationServer replicationServer = new ReplicationServer();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            replicationServer = new ReplicationServer();
            replicationServer.ReplicationServerNum = PIn.Long(table.Rows[i]["ReplicationServerNum"].ToString());
            replicationServer.Descript = PIn.String(table.Rows[i]["Descript"].ToString());
            replicationServer.ServerId = PIn.Int(table.Rows[i]["ServerId"].ToString());
            replicationServer.RangeStart = PIn.Long(table.Rows[i]["RangeStart"].ToString());
            replicationServer.RangeEnd = PIn.Long(table.Rows[i]["RangeEnd"].ToString());
            replicationServer.AtoZpath = PIn.String(table.Rows[i]["AtoZpath"].ToString());
            replicationServer.UpdateBlocked = PIn.Bool(table.Rows[i]["UpdateBlocked"].ToString());
            replicationServer.SlaveMonitor = PIn.String(table.Rows[i]["SlaveMonitor"].ToString());
            retVal.Add(replicationServer);
        }
        return retVal;
    }

    /**
    * Inserts one ReplicationServer into the database.  Returns the new priKey.
    */
    public static long insert(ReplicationServer replicationServer) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            replicationServer.ReplicationServerNum = DbHelper.GetNextOracleKey("replicationserver", "ReplicationServerNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(replicationServer,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        replicationServer.ReplicationServerNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(replicationServer,false);
        } 
    }

    /**
    * Inserts one ReplicationServer into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ReplicationServer replicationServer, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            replicationServer.ReplicationServerNum = ReplicationServers.GetKey("replicationserver", "ReplicationServerNum");
        }
         
        String command = "INSERT INTO replicationserver (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ReplicationServerNum,";
        }
         
        command += "Descript,ServerId,RangeStart,RangeEnd,AtoZpath,UpdateBlocked,SlaveMonitor) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(replicationServer.ReplicationServerNum) + ",";
        }
         
        command += "'" + POut.String(replicationServer.Descript) + "'," + POut.Int(replicationServer.ServerId) + "," + POut.Long(replicationServer.RangeStart) + "," + POut.Long(replicationServer.RangeEnd) + "," + "'" + POut.String(replicationServer.AtoZpath) + "'," + POut.Bool(replicationServer.UpdateBlocked) + "," + "'" + POut.String(replicationServer.SlaveMonitor) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            replicationServer.ReplicationServerNum = Db.NonQ(command, true);
        } 
        return replicationServer.ReplicationServerNum;
    }

    /**
    * Updates one ReplicationServer in the database.
    */
    public static void update(ReplicationServer replicationServer) throws Exception {
        String command = "UPDATE replicationserver SET " + "Descript            = '" + POut.String(replicationServer.Descript) + "', " + "ServerId            =  " + POut.Int(replicationServer.ServerId) + ", " + "RangeStart          =  " + POut.Long(replicationServer.RangeStart) + ", " + "RangeEnd            =  " + POut.Long(replicationServer.RangeEnd) + ", " + "AtoZpath            = '" + POut.String(replicationServer.AtoZpath) + "', " + "UpdateBlocked       =  " + POut.Bool(replicationServer.UpdateBlocked) + ", " + "SlaveMonitor        = '" + POut.String(replicationServer.SlaveMonitor) + "' " + "WHERE ReplicationServerNum = " + POut.Long(replicationServer.ReplicationServerNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ReplicationServer in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ReplicationServer replicationServer, ReplicationServer oldReplicationServer) throws Exception {
        String command = "";
        if (replicationServer.Descript != oldReplicationServer.Descript)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Descript = '" + POut.String(replicationServer.Descript) + "'";
        }
         
        if (replicationServer.ServerId != oldReplicationServer.ServerId)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ServerId = " + POut.Int(replicationServer.ServerId) + "";
        }
         
        if (replicationServer.RangeStart != oldReplicationServer.RangeStart)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RangeStart = " + POut.Long(replicationServer.RangeStart) + "";
        }
         
        if (replicationServer.RangeEnd != oldReplicationServer.RangeEnd)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RangeEnd = " + POut.Long(replicationServer.RangeEnd) + "";
        }
         
        if (replicationServer.AtoZpath != oldReplicationServer.AtoZpath)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AtoZpath = '" + POut.String(replicationServer.AtoZpath) + "'";
        }
         
        if (replicationServer.UpdateBlocked != oldReplicationServer.UpdateBlocked)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UpdateBlocked = " + POut.Bool(replicationServer.UpdateBlocked) + "";
        }
         
        if (replicationServer.SlaveMonitor != oldReplicationServer.SlaveMonitor)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SlaveMonitor = '" + POut.String(replicationServer.SlaveMonitor) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE replicationserver SET " + command + " WHERE ReplicationServerNum = " + POut.Long(replicationServer.ReplicationServerNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ReplicationServer from the database.
    */
    public static void delete(long replicationServerNum) throws Exception {
        String command = "DELETE FROM replicationserver " + "WHERE ReplicationServerNum = " + POut.Long(replicationServerNum);
        Db.NonQ(command);
    }

}


