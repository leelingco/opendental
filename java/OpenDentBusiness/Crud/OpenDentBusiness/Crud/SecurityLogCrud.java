//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:07 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class SecurityLogCrud   
{
    /**
    * Gets one SecurityLog object from the database using the primary key.  Returns null if not found.
    */
    public static SecurityLog selectOne(long securityLogNum) throws Exception {
        String command = "SELECT * FROM securitylog " + "WHERE SecurityLogNum = " + POut.Long(securityLogNum);
        List<SecurityLog> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one SecurityLog object from the database using a query.
    */
    public static SecurityLog selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<SecurityLog> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of SecurityLog objects from the database using a query.
    */
    public static List<SecurityLog> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<SecurityLog> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<SecurityLog> tableToList(DataTable table) throws Exception {
        List<SecurityLog> retVal = new List<SecurityLog>();
        SecurityLog securityLog = new SecurityLog();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            securityLog = new SecurityLog();
            securityLog.SecurityLogNum = PIn.Long(table.Rows[i]["SecurityLogNum"].ToString());
            securityLog.PermType = (Permissions)PIn.Int(table.Rows[i]["PermType"].ToString());
            securityLog.UserNum = PIn.Long(table.Rows[i]["UserNum"].ToString());
            securityLog.LogDateTime = PIn.DateT(table.Rows[i]["LogDateTime"].ToString());
            securityLog.LogText = PIn.String(table.Rows[i]["LogText"].ToString());
            securityLog.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            securityLog.CompName = PIn.String(table.Rows[i]["CompName"].ToString());
            securityLog.FKey = PIn.Long(table.Rows[i]["FKey"].ToString());
            retVal.Add(securityLog);
        }
        return retVal;
    }

    /**
    * Inserts one SecurityLog into the database.  Returns the new priKey.
    */
    public static long insert(SecurityLog securityLog) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            securityLog.SecurityLogNum = DbHelper.GetNextOracleKey("securitylog", "SecurityLogNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(securityLog,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        securityLog.SecurityLogNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(securityLog,false);
        } 
    }

    /**
    * Inserts one SecurityLog into the database.  Provides option to use the existing priKey.
    */
    public static long insert(SecurityLog securityLog, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            securityLog.SecurityLogNum = ReplicationServers.GetKey("securitylog", "SecurityLogNum");
        }
         
        String command = "INSERT INTO securitylog (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "SecurityLogNum,";
        }
         
        command += "PermType,UserNum,LogDateTime,LogText,PatNum,CompName,FKey) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(securityLog.SecurityLogNum) + ",";
        }
         
        command += POut.Int((int)securityLog.PermType) + "," + POut.Long(securityLog.UserNum) + "," + DbHelper.Now() + "," + "'" + POut.String(securityLog.LogText) + "'," + POut.Long(securityLog.PatNum) + "," + "'" + POut.String(securityLog.CompName) + "'," + POut.Long(securityLog.FKey) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            securityLog.SecurityLogNum = Db.NonQ(command, true);
        } 
        return securityLog.SecurityLogNum;
    }

    /**
    * Updates one SecurityLog in the database.
    */
    public static void update(SecurityLog securityLog) throws Exception {
        //LogDateTime not allowed to change
        String command = "UPDATE securitylog SET " + "PermType      =  " + POut.Int((int)securityLog.PermType) + ", " + "UserNum       =  " + POut.Long(securityLog.UserNum) + ", " + "LogText       = '" + POut.String(securityLog.LogText) + "', " + "PatNum        =  " + POut.Long(securityLog.PatNum) + ", " + "CompName      = '" + POut.String(securityLog.CompName) + "', " + "FKey          =  " + POut.Long(securityLog.FKey) + " " + "WHERE SecurityLogNum = " + POut.Long(securityLog.SecurityLogNum);
        Db.NonQ(command);
    }

    /**
    * Updates one SecurityLog in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(SecurityLog securityLog, SecurityLog oldSecurityLog) throws Exception {
        String command = "";
        if (securityLog.PermType != oldSecurityLog.PermType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PermType = " + POut.Int((int)securityLog.PermType) + "";
        }
         
        if (securityLog.UserNum != oldSecurityLog.UserNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UserNum = " + POut.Long(securityLog.UserNum) + "";
        }
         
        //LogDateTime not allowed to change
        if (securityLog.LogText != oldSecurityLog.LogText)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "LogText = '" + POut.String(securityLog.LogText) + "'";
        }
         
        if (securityLog.PatNum != oldSecurityLog.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(securityLog.PatNum) + "";
        }
         
        if (securityLog.CompName != oldSecurityLog.CompName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CompName = '" + POut.String(securityLog.CompName) + "'";
        }
         
        if (securityLog.FKey != oldSecurityLog.FKey)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FKey = " + POut.Long(securityLog.FKey) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE securitylog SET " + command + " WHERE SecurityLogNum = " + POut.Long(securityLog.SecurityLogNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one SecurityLog from the database.
    */
    public static void delete(long securityLogNum) throws Exception {
        String command = "DELETE FROM securitylog " + "WHERE SecurityLogNum = " + POut.Long(securityLogNum);
        Db.NonQ(command);
    }

}


