//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:01 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class HL7DefSegmentCrud   
{
    /**
    * Gets one HL7DefSegment object from the database using the primary key.  Returns null if not found.
    */
    public static HL7DefSegment selectOne(long hL7DefSegmentNum) throws Exception {
        String command = "SELECT * FROM hl7defsegment " + "WHERE HL7DefSegmentNum = " + POut.Long(hL7DefSegmentNum);
        List<HL7DefSegment> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one HL7DefSegment object from the database using a query.
    */
    public static HL7DefSegment selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<HL7DefSegment> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of HL7DefSegment objects from the database using a query.
    */
    public static List<HL7DefSegment> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<HL7DefSegment> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<HL7DefSegment> tableToList(DataTable table) throws Exception {
        List<HL7DefSegment> retVal = new List<HL7DefSegment>();
        HL7DefSegment hL7DefSegment = new HL7DefSegment();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            hL7DefSegment = new HL7DefSegment();
            hL7DefSegment.HL7DefSegmentNum = PIn.Long(table.Rows[i]["HL7DefSegmentNum"].ToString());
            hL7DefSegment.HL7DefMessageNum = PIn.Long(table.Rows[i]["HL7DefMessageNum"].ToString());
            hL7DefSegment.ItemOrder = PIn.Int(table.Rows[i]["ItemOrder"].ToString());
            hL7DefSegment.CanRepeat = PIn.Bool(table.Rows[i]["CanRepeat"].ToString());
            hL7DefSegment.IsOptional = PIn.Bool(table.Rows[i]["IsOptional"].ToString());
            String segmentName = table.Rows[i]["SegmentName"].ToString();
            if (StringSupport.equals(segmentName, ""))
            {
                hL7DefSegment.SegmentName = (SegmentNameHL7)0;
            }
            else
                try
                {
                    hL7DefSegment.SegmentName = (SegmentNameHL7)Enum.Parse(SegmentNameHL7.class, segmentName);
                }
                catch (Exception __dummyCatchVar0)
                {
                    hL7DefSegment.SegmentName = (SegmentNameHL7)0;
                }
             
            hL7DefSegment.Note = PIn.String(table.Rows[i]["Note"].ToString());
            retVal.Add(hL7DefSegment);
        }
        return retVal;
    }

    /**
    * Inserts one HL7DefSegment into the database.  Returns the new priKey.
    */
    public static long insert(HL7DefSegment hL7DefSegment) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            hL7DefSegment.HL7DefSegmentNum = DbHelper.GetNextOracleKey("hl7defsegment", "HL7DefSegmentNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(hL7DefSegment,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        hL7DefSegment.HL7DefSegmentNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(hL7DefSegment,false);
        } 
    }

    /**
    * Inserts one HL7DefSegment into the database.  Provides option to use the existing priKey.
    */
    public static long insert(HL7DefSegment hL7DefSegment, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            hL7DefSegment.HL7DefSegmentNum = ReplicationServers.GetKey("hl7defsegment", "HL7DefSegmentNum");
        }
         
        String command = "INSERT INTO hl7defsegment (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "HL7DefSegmentNum,";
        }
         
        command += "HL7DefMessageNum,ItemOrder,CanRepeat,IsOptional,SegmentName,Note) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(hL7DefSegment.HL7DefSegmentNum) + ",";
        }
         
        command += POut.Long(hL7DefSegment.HL7DefMessageNum) + "," + POut.Int(hL7DefSegment.ItemOrder) + "," + POut.Bool(hL7DefSegment.CanRepeat) + "," + POut.Bool(hL7DefSegment.IsOptional) + "," + "'" + POut.String(hL7DefSegment.SegmentName.ToString()) + "'," + DbHelper.ParamChar + "paramNote)";
        if (hL7DefSegment.Note == null)
        {
            hL7DefSegment.Note = "";
        }
         
        OdSqlParameter paramNote = new OdSqlParameter("paramNote", OdDbType.Text, hL7DefSegment.Note);
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command, paramNote);
        }
        else
        {
            hL7DefSegment.HL7DefSegmentNum = Db.NonQ(command, true, paramNote);
        } 
        return hL7DefSegment.HL7DefSegmentNum;
    }

    /**
    * Updates one HL7DefSegment in the database.
    */
    public static void update(HL7DefSegment hL7DefSegment) throws Exception {
        String command = "UPDATE hl7defsegment SET " + "HL7DefMessageNum=  " + POut.Long(hL7DefSegment.HL7DefMessageNum) + ", " + "ItemOrder       =  " + POut.Int(hL7DefSegment.ItemOrder) + ", " + "CanRepeat       =  " + POut.Bool(hL7DefSegment.CanRepeat) + ", " + "IsOptional      =  " + POut.Bool(hL7DefSegment.IsOptional) + ", " + "SegmentName     = '" + POut.String(hL7DefSegment.SegmentName.ToString()) + "', " + "Note            =  " + DbHelper.ParamChar + "paramNote " + "WHERE HL7DefSegmentNum = " + POut.Long(hL7DefSegment.HL7DefSegmentNum);
        if (hL7DefSegment.Note == null)
        {
            hL7DefSegment.Note = "";
        }
         
        OdSqlParameter paramNote = new OdSqlParameter("paramNote", OdDbType.Text, hL7DefSegment.Note);
        Db.NonQ(command, paramNote);
    }

    /**
    * Updates one HL7DefSegment in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(HL7DefSegment hL7DefSegment, HL7DefSegment oldHL7DefSegment) throws Exception {
        String command = "";
        if (hL7DefSegment.HL7DefMessageNum != oldHL7DefSegment.HL7DefMessageNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "HL7DefMessageNum = " + POut.Long(hL7DefSegment.HL7DefMessageNum) + "";
        }
         
        if (hL7DefSegment.ItemOrder != oldHL7DefSegment.ItemOrder)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ItemOrder = " + POut.Int(hL7DefSegment.ItemOrder) + "";
        }
         
        if (hL7DefSegment.CanRepeat != oldHL7DefSegment.CanRepeat)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanRepeat = " + POut.Bool(hL7DefSegment.CanRepeat) + "";
        }
         
        if (hL7DefSegment.IsOptional != oldHL7DefSegment.IsOptional)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsOptional = " + POut.Bool(hL7DefSegment.IsOptional) + "";
        }
         
        if (hL7DefSegment.SegmentName != oldHL7DefSegment.SegmentName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SegmentName = '" + POut.String(hL7DefSegment.SegmentName.ToString()) + "'";
        }
         
        if (hL7DefSegment.Note != oldHL7DefSegment.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = " + DbHelper.ParamChar + "paramNote";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        if (hL7DefSegment.Note == null)
        {
            hL7DefSegment.Note = "";
        }
         
        OdSqlParameter paramNote = new OdSqlParameter("paramNote", OdDbType.Text, hL7DefSegment.Note);
        command = "UPDATE hl7defsegment SET " + command + " WHERE HL7DefSegmentNum = " + POut.Long(hL7DefSegment.HL7DefSegmentNum);
        Db.NonQ(command, paramNote);
    }

    /**
    * Deletes one HL7DefSegment from the database.
    */
    public static void delete(long hL7DefSegmentNum) throws Exception {
        String command = "DELETE FROM hl7defsegment " + "WHERE HL7DefSegmentNum = " + POut.Long(hL7DefSegmentNum);
        Db.NonQ(command);
    }

}


