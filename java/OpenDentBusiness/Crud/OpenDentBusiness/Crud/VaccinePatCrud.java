//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:09 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class VaccinePatCrud   
{
    /**
    * Gets one VaccinePat object from the database using the primary key.  Returns null if not found.
    */
    public static VaccinePat selectOne(long vaccinePatNum) throws Exception {
        String command = "SELECT * FROM vaccinepat " + "WHERE VaccinePatNum = " + POut.Long(vaccinePatNum);
        List<VaccinePat> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one VaccinePat object from the database using a query.
    */
    public static VaccinePat selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<VaccinePat> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of VaccinePat objects from the database using a query.
    */
    public static List<VaccinePat> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<VaccinePat> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<VaccinePat> tableToList(DataTable table) throws Exception {
        List<VaccinePat> retVal = new List<VaccinePat>();
        VaccinePat vaccinePat = new VaccinePat();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            vaccinePat = new VaccinePat();
            vaccinePat.VaccinePatNum = PIn.Long(table.Rows[i]["VaccinePatNum"].ToString());
            vaccinePat.VaccineDefNum = PIn.Long(table.Rows[i]["VaccineDefNum"].ToString());
            vaccinePat.DateTimeStart = PIn.DateT(table.Rows[i]["DateTimeStart"].ToString());
            vaccinePat.DateTimeEnd = PIn.DateT(table.Rows[i]["DateTimeEnd"].ToString());
            vaccinePat.AdministeredAmt = PIn.Float(table.Rows[i]["AdministeredAmt"].ToString());
            vaccinePat.DrugUnitNum = PIn.Long(table.Rows[i]["DrugUnitNum"].ToString());
            vaccinePat.LotNumber = PIn.String(table.Rows[i]["LotNumber"].ToString());
            vaccinePat.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            vaccinePat.Note = PIn.String(table.Rows[i]["Note"].ToString());
            vaccinePat.FilledCity = PIn.String(table.Rows[i]["FilledCity"].ToString());
            vaccinePat.FilledST = PIn.String(table.Rows[i]["FilledST"].ToString());
            vaccinePat.CompletionStatus = (VaccineCompletionStatus)PIn.Int(table.Rows[i]["CompletionStatus"].ToString());
            vaccinePat.AdministrationNoteCode = (VaccineAdministrationNote)PIn.Int(table.Rows[i]["AdministrationNoteCode"].ToString());
            vaccinePat.UserNum = PIn.Long(table.Rows[i]["UserNum"].ToString());
            vaccinePat.ProvNumOrdering = PIn.Long(table.Rows[i]["ProvNumOrdering"].ToString());
            vaccinePat.ProvNumAdminister = PIn.Long(table.Rows[i]["ProvNumAdminister"].ToString());
            vaccinePat.DateExpire = PIn.Date(table.Rows[i]["DateExpire"].ToString());
            vaccinePat.RefusalReason = (VaccineRefusalReason)PIn.Int(table.Rows[i]["RefusalReason"].ToString());
            vaccinePat.ActionCode = (VaccineAction)PIn.Int(table.Rows[i]["ActionCode"].ToString());
            vaccinePat.AdministrationRoute = (VaccineAdministrationRoute)PIn.Int(table.Rows[i]["AdministrationRoute"].ToString());
            vaccinePat.AdministrationSite = (VaccineAdministrationSite)PIn.Int(table.Rows[i]["AdministrationSite"].ToString());
            retVal.Add(vaccinePat);
        }
        return retVal;
    }

    /**
    * Inserts one VaccinePat into the database.  Returns the new priKey.
    */
    public static long insert(VaccinePat vaccinePat) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            vaccinePat.VaccinePatNum = DbHelper.GetNextOracleKey("vaccinepat", "VaccinePatNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(vaccinePat,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        vaccinePat.VaccinePatNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(vaccinePat,false);
        } 
    }

    /**
    * Inserts one VaccinePat into the database.  Provides option to use the existing priKey.
    */
    public static long insert(VaccinePat vaccinePat, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            vaccinePat.VaccinePatNum = ReplicationServers.GetKey("vaccinepat", "VaccinePatNum");
        }
         
        String command = "INSERT INTO vaccinepat (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "VaccinePatNum,";
        }
         
        command += "VaccineDefNum,DateTimeStart,DateTimeEnd,AdministeredAmt,DrugUnitNum,LotNumber,PatNum,Note,FilledCity,FilledST,CompletionStatus,AdministrationNoteCode,UserNum,ProvNumOrdering,ProvNumAdminister,DateExpire,RefusalReason,ActionCode,AdministrationRoute,AdministrationSite) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(vaccinePat.VaccinePatNum) + ",";
        }
         
        command += POut.Long(vaccinePat.VaccineDefNum) + "," + POut.DateT(vaccinePat.DateTimeStart) + "," + POut.DateT(vaccinePat.DateTimeEnd) + "," + POut.Float(vaccinePat.AdministeredAmt) + "," + POut.Long(vaccinePat.DrugUnitNum) + "," + "'" + POut.String(vaccinePat.LotNumber) + "'," + POut.Long(vaccinePat.PatNum) + "," + "'" + POut.String(vaccinePat.Note) + "'," + "'" + POut.String(vaccinePat.FilledCity) + "'," + "'" + POut.String(vaccinePat.FilledST) + "'," + POut.Int((int)vaccinePat.CompletionStatus) + "," + POut.Int((int)vaccinePat.AdministrationNoteCode) + "," + POut.Long(vaccinePat.UserNum) + "," + POut.Long(vaccinePat.ProvNumOrdering) + "," + POut.Long(vaccinePat.ProvNumAdminister) + "," + POut.Date(vaccinePat.DateExpire) + "," + POut.Int((int)vaccinePat.RefusalReason) + "," + POut.Int((int)vaccinePat.ActionCode) + "," + POut.Int((int)vaccinePat.AdministrationRoute) + "," + POut.Int((int)vaccinePat.AdministrationSite) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            vaccinePat.VaccinePatNum = Db.NonQ(command, true);
        } 
        return vaccinePat.VaccinePatNum;
    }

    /**
    * Updates one VaccinePat in the database.
    */
    public static void update(VaccinePat vaccinePat) throws Exception {
        String command = "UPDATE vaccinepat SET " + "VaccineDefNum         =  " + POut.Long(vaccinePat.VaccineDefNum) + ", " + "DateTimeStart         =  " + POut.DateT(vaccinePat.DateTimeStart) + ", " + "DateTimeEnd           =  " + POut.DateT(vaccinePat.DateTimeEnd) + ", " + "AdministeredAmt       =  " + POut.Float(vaccinePat.AdministeredAmt) + ", " + "DrugUnitNum           =  " + POut.Long(vaccinePat.DrugUnitNum) + ", " + "LotNumber             = '" + POut.String(vaccinePat.LotNumber) + "', " + "PatNum                =  " + POut.Long(vaccinePat.PatNum) + ", " + "Note                  = '" + POut.String(vaccinePat.Note) + "', " + "FilledCity            = '" + POut.String(vaccinePat.FilledCity) + "', " + "FilledST              = '" + POut.String(vaccinePat.FilledST) + "', " + "CompletionStatus      =  " + POut.Int((int)vaccinePat.CompletionStatus) + ", " + "AdministrationNoteCode=  " + POut.Int((int)vaccinePat.AdministrationNoteCode) + ", " + "UserNum               =  " + POut.Long(vaccinePat.UserNum) + ", " + "ProvNumOrdering       =  " + POut.Long(vaccinePat.ProvNumOrdering) + ", " + "ProvNumAdminister     =  " + POut.Long(vaccinePat.ProvNumAdminister) + ", " + "DateExpire            =  " + POut.Date(vaccinePat.DateExpire) + ", " + "RefusalReason         =  " + POut.Int((int)vaccinePat.RefusalReason) + ", " + "ActionCode            =  " + POut.Int((int)vaccinePat.ActionCode) + ", " + "AdministrationRoute   =  " + POut.Int((int)vaccinePat.AdministrationRoute) + ", " + "AdministrationSite    =  " + POut.Int((int)vaccinePat.AdministrationSite) + " " + "WHERE VaccinePatNum = " + POut.Long(vaccinePat.VaccinePatNum);
        Db.NonQ(command);
    }

    /**
    * Updates one VaccinePat in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(VaccinePat vaccinePat, VaccinePat oldVaccinePat) throws Exception {
        String command = "";
        if (vaccinePat.VaccineDefNum != oldVaccinePat.VaccineDefNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "VaccineDefNum = " + POut.Long(vaccinePat.VaccineDefNum) + "";
        }
         
        if (vaccinePat.DateTimeStart != oldVaccinePat.DateTimeStart)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTimeStart = " + POut.DateT(vaccinePat.DateTimeStart) + "";
        }
         
        if (vaccinePat.DateTimeEnd != oldVaccinePat.DateTimeEnd)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTimeEnd = " + POut.DateT(vaccinePat.DateTimeEnd) + "";
        }
         
        if (vaccinePat.AdministeredAmt != oldVaccinePat.AdministeredAmt)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AdministeredAmt = " + POut.Float(vaccinePat.AdministeredAmt) + "";
        }
         
        if (vaccinePat.DrugUnitNum != oldVaccinePat.DrugUnitNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DrugUnitNum = " + POut.Long(vaccinePat.DrugUnitNum) + "";
        }
         
        if (vaccinePat.LotNumber != oldVaccinePat.LotNumber)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "LotNumber = '" + POut.String(vaccinePat.LotNumber) + "'";
        }
         
        if (vaccinePat.PatNum != oldVaccinePat.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(vaccinePat.PatNum) + "";
        }
         
        if (vaccinePat.Note != oldVaccinePat.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(vaccinePat.Note) + "'";
        }
         
        if (vaccinePat.FilledCity != oldVaccinePat.FilledCity)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FilledCity = '" + POut.String(vaccinePat.FilledCity) + "'";
        }
         
        if (vaccinePat.FilledST != oldVaccinePat.FilledST)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FilledST = '" + POut.String(vaccinePat.FilledST) + "'";
        }
         
        if (vaccinePat.CompletionStatus != oldVaccinePat.CompletionStatus)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CompletionStatus = " + POut.Int((int)vaccinePat.CompletionStatus) + "";
        }
         
        if (vaccinePat.AdministrationNoteCode != oldVaccinePat.AdministrationNoteCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AdministrationNoteCode = " + POut.Int((int)vaccinePat.AdministrationNoteCode) + "";
        }
         
        if (vaccinePat.UserNum != oldVaccinePat.UserNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UserNum = " + POut.Long(vaccinePat.UserNum) + "";
        }
         
        if (vaccinePat.ProvNumOrdering != oldVaccinePat.ProvNumOrdering)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvNumOrdering = " + POut.Long(vaccinePat.ProvNumOrdering) + "";
        }
         
        if (vaccinePat.ProvNumAdminister != oldVaccinePat.ProvNumAdminister)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvNumAdminister = " + POut.Long(vaccinePat.ProvNumAdminister) + "";
        }
         
        if (vaccinePat.DateExpire != oldVaccinePat.DateExpire)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateExpire = " + POut.Date(vaccinePat.DateExpire) + "";
        }
         
        if (vaccinePat.RefusalReason != oldVaccinePat.RefusalReason)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RefusalReason = " + POut.Int((int)vaccinePat.RefusalReason) + "";
        }
         
        if (vaccinePat.ActionCode != oldVaccinePat.ActionCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ActionCode = " + POut.Int((int)vaccinePat.ActionCode) + "";
        }
         
        if (vaccinePat.AdministrationRoute != oldVaccinePat.AdministrationRoute)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AdministrationRoute = " + POut.Int((int)vaccinePat.AdministrationRoute) + "";
        }
         
        if (vaccinePat.AdministrationSite != oldVaccinePat.AdministrationSite)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AdministrationSite = " + POut.Int((int)vaccinePat.AdministrationSite) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE vaccinepat SET " + command + " WHERE VaccinePatNum = " + POut.Long(vaccinePat.VaccinePatNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one VaccinePat from the database.
    */
    public static void delete(long vaccinePatNum) throws Exception {
        String command = "DELETE FROM vaccinepat " + "WHERE VaccinePatNum = " + POut.Long(vaccinePatNum);
        Db.NonQ(command);
    }

}


