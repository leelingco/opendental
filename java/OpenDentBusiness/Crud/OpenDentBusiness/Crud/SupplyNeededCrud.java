//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:08 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class SupplyNeededCrud   
{
    /**
    * Gets one SupplyNeeded object from the database using the primary key.  Returns null if not found.
    */
    public static SupplyNeeded selectOne(long supplyNeededNum) throws Exception {
        String command = "SELECT * FROM supplyneeded " + "WHERE SupplyNeededNum = " + POut.Long(supplyNeededNum);
        List<SupplyNeeded> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one SupplyNeeded object from the database using a query.
    */
    public static SupplyNeeded selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<SupplyNeeded> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of SupplyNeeded objects from the database using a query.
    */
    public static List<SupplyNeeded> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<SupplyNeeded> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<SupplyNeeded> tableToList(DataTable table) throws Exception {
        List<SupplyNeeded> retVal = new List<SupplyNeeded>();
        SupplyNeeded supplyNeeded = new SupplyNeeded();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            supplyNeeded = new SupplyNeeded();
            supplyNeeded.SupplyNeededNum = PIn.Long(table.Rows[i]["SupplyNeededNum"].ToString());
            supplyNeeded.Description = PIn.String(table.Rows[i]["Description"].ToString());
            supplyNeeded.DateAdded = PIn.Date(table.Rows[i]["DateAdded"].ToString());
            retVal.Add(supplyNeeded);
        }
        return retVal;
    }

    /**
    * Inserts one SupplyNeeded into the database.  Returns the new priKey.
    */
    public static long insert(SupplyNeeded supplyNeeded) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            supplyNeeded.SupplyNeededNum = DbHelper.GetNextOracleKey("supplyneeded", "SupplyNeededNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(supplyNeeded,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        supplyNeeded.SupplyNeededNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(supplyNeeded,false);
        } 
    }

    /**
    * Inserts one SupplyNeeded into the database.  Provides option to use the existing priKey.
    */
    public static long insert(SupplyNeeded supplyNeeded, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            supplyNeeded.SupplyNeededNum = ReplicationServers.GetKey("supplyneeded", "SupplyNeededNum");
        }
         
        String command = "INSERT INTO supplyneeded (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "SupplyNeededNum,";
        }
         
        command += "Description,DateAdded) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(supplyNeeded.SupplyNeededNum) + ",";
        }
         
        command += "'" + POut.String(supplyNeeded.Description) + "'," + POut.Date(supplyNeeded.DateAdded) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            supplyNeeded.SupplyNeededNum = Db.NonQ(command, true);
        } 
        return supplyNeeded.SupplyNeededNum;
    }

    /**
    * Updates one SupplyNeeded in the database.
    */
    public static void update(SupplyNeeded supplyNeeded) throws Exception {
        String command = "UPDATE supplyneeded SET " + "Description    = '" + POut.String(supplyNeeded.Description) + "', " + "DateAdded      =  " + POut.Date(supplyNeeded.DateAdded) + " " + "WHERE SupplyNeededNum = " + POut.Long(supplyNeeded.SupplyNeededNum);
        Db.NonQ(command);
    }

    /**
    * Updates one SupplyNeeded in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(SupplyNeeded supplyNeeded, SupplyNeeded oldSupplyNeeded) throws Exception {
        String command = "";
        if (supplyNeeded.Description != oldSupplyNeeded.Description)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.String(supplyNeeded.Description) + "'";
        }
         
        if (supplyNeeded.DateAdded != oldSupplyNeeded.DateAdded)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateAdded = " + POut.Date(supplyNeeded.DateAdded) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE supplyneeded SET " + command + " WHERE SupplyNeededNum = " + POut.Long(supplyNeeded.SupplyNeededNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one SupplyNeeded from the database.
    */
    public static void delete(long supplyNeededNum) throws Exception {
        String command = "DELETE FROM supplyneeded " + "WHERE SupplyNeededNum = " + POut.Long(supplyNeededNum);
        Db.NonQ(command);
    }

}


