//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:04 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class PharmacyCrud   
{
    /**
    * Gets one Pharmacy object from the database using the primary key.  Returns null if not found.
    */
    public static Pharmacy selectOne(long pharmacyNum) throws Exception {
        String command = "SELECT * FROM pharmacy " + "WHERE PharmacyNum = " + POut.Long(pharmacyNum);
        List<Pharmacy> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Pharmacy object from the database using a query.
    */
    public static Pharmacy selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Pharmacy> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Pharmacy objects from the database using a query.
    */
    public static List<Pharmacy> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Pharmacy> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Pharmacy> tableToList(DataTable table) throws Exception {
        List<Pharmacy> retVal = new List<Pharmacy>();
        Pharmacy pharmacy = new Pharmacy();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            pharmacy = new Pharmacy();
            pharmacy.PharmacyNum = PIn.Long(table.Rows[i]["PharmacyNum"].ToString());
            pharmacy.PharmID = PIn.String(table.Rows[i]["PharmID"].ToString());
            pharmacy.StoreName = PIn.String(table.Rows[i]["StoreName"].ToString());
            pharmacy.Phone = PIn.String(table.Rows[i]["Phone"].ToString());
            pharmacy.Fax = PIn.String(table.Rows[i]["Fax"].ToString());
            pharmacy.Address = PIn.String(table.Rows[i]["Address"].ToString());
            pharmacy.Address2 = PIn.String(table.Rows[i]["Address2"].ToString());
            pharmacy.City = PIn.String(table.Rows[i]["City"].ToString());
            pharmacy.State = PIn.String(table.Rows[i]["State"].ToString());
            pharmacy.Zip = PIn.String(table.Rows[i]["Zip"].ToString());
            pharmacy.Note = PIn.String(table.Rows[i]["Note"].ToString());
            pharmacy.DateTStamp = PIn.DateT(table.Rows[i]["DateTStamp"].ToString());
            retVal.Add(pharmacy);
        }
        return retVal;
    }

    /**
    * Inserts one Pharmacy into the database.  Returns the new priKey.
    */
    public static long insert(Pharmacy pharmacy) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            pharmacy.PharmacyNum = DbHelper.GetNextOracleKey("pharmacy", "PharmacyNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(pharmacy,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        pharmacy.PharmacyNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(pharmacy,false);
        } 
    }

    /**
    * Inserts one Pharmacy into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Pharmacy pharmacy, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            pharmacy.PharmacyNum = ReplicationServers.GetKey("pharmacy", "PharmacyNum");
        }
         
        String command = "INSERT INTO pharmacy (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "PharmacyNum,";
        }
         
        command += "PharmID,StoreName,Phone,Fax,Address,Address2,City,State,Zip,Note) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(pharmacy.PharmacyNum) + ",";
        }
         
        command += "'" + POut.String(pharmacy.PharmID) + "'," + "'" + POut.String(pharmacy.StoreName) + "'," + "'" + POut.String(pharmacy.Phone) + "'," + "'" + POut.String(pharmacy.Fax) + "'," + "'" + POut.String(pharmacy.Address) + "'," + "'" + POut.String(pharmacy.Address2) + "'," + "'" + POut.String(pharmacy.City) + "'," + "'" + POut.String(pharmacy.State) + "'," + "'" + POut.String(pharmacy.Zip) + "'," + "'" + POut.String(pharmacy.Note) + "')";
        //DateTStamp can only be set by MySQL
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            pharmacy.PharmacyNum = Db.NonQ(command, true);
        } 
        return pharmacy.PharmacyNum;
    }

    /**
    * Updates one Pharmacy in the database.
    */
    public static void update(Pharmacy pharmacy) throws Exception {
        //DateTStamp can only be set by MySQL
        String command = "UPDATE pharmacy SET " + "PharmID    = '" + POut.String(pharmacy.PharmID) + "', " + "StoreName  = '" + POut.String(pharmacy.StoreName) + "', " + "Phone      = '" + POut.String(pharmacy.Phone) + "', " + "Fax        = '" + POut.String(pharmacy.Fax) + "', " + "Address    = '" + POut.String(pharmacy.Address) + "', " + "Address2   = '" + POut.String(pharmacy.Address2) + "', " + "City       = '" + POut.String(pharmacy.City) + "', " + "State      = '" + POut.String(pharmacy.State) + "', " + "Zip        = '" + POut.String(pharmacy.Zip) + "', " + "Note       = '" + POut.String(pharmacy.Note) + "' " + "WHERE PharmacyNum = " + POut.Long(pharmacy.PharmacyNum);
        Db.NonQ(command);
    }

    /**
    * Updates one Pharmacy in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Pharmacy pharmacy, Pharmacy oldPharmacy) throws Exception {
        String command = "";
        if (pharmacy.PharmID != oldPharmacy.PharmID)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PharmID = '" + POut.String(pharmacy.PharmID) + "'";
        }
         
        if (pharmacy.StoreName != oldPharmacy.StoreName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "StoreName = '" + POut.String(pharmacy.StoreName) + "'";
        }
         
        if (pharmacy.Phone != oldPharmacy.Phone)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Phone = '" + POut.String(pharmacy.Phone) + "'";
        }
         
        if (pharmacy.Fax != oldPharmacy.Fax)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Fax = '" + POut.String(pharmacy.Fax) + "'";
        }
         
        if (pharmacy.Address != oldPharmacy.Address)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Address = '" + POut.String(pharmacy.Address) + "'";
        }
         
        if (pharmacy.Address2 != oldPharmacy.Address2)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Address2 = '" + POut.String(pharmacy.Address2) + "'";
        }
         
        if (pharmacy.City != oldPharmacy.City)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "City = '" + POut.String(pharmacy.City) + "'";
        }
         
        if (pharmacy.State != oldPharmacy.State)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "State = '" + POut.String(pharmacy.State) + "'";
        }
         
        if (pharmacy.Zip != oldPharmacy.Zip)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Zip = '" + POut.String(pharmacy.Zip) + "'";
        }
         
        if (pharmacy.Note != oldPharmacy.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(pharmacy.Note) + "'";
        }
         
        //DateTStamp can only be set by MySQL
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE pharmacy SET " + command + " WHERE PharmacyNum = " + POut.Long(pharmacy.PharmacyNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one Pharmacy from the database.
    */
    public static void delete(long pharmacyNum) throws Exception {
        String command = "DELETE FROM pharmacy " + "WHERE PharmacyNum = " + POut.Long(pharmacyNum);
        Db.NonQ(command);
    }

}


