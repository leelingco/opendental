//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:06 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ReminderRuleCrud   
{
    /**
    * Gets one ReminderRule object from the database using the primary key.  Returns null if not found.
    */
    public static ReminderRule selectOne(long reminderRuleNum) throws Exception {
        String command = "SELECT * FROM reminderrule " + "WHERE ReminderRuleNum = " + POut.Long(reminderRuleNum);
        List<ReminderRule> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ReminderRule object from the database using a query.
    */
    public static ReminderRule selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ReminderRule> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ReminderRule objects from the database using a query.
    */
    public static List<ReminderRule> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ReminderRule> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ReminderRule> tableToList(DataTable table) throws Exception {
        List<ReminderRule> retVal = new List<ReminderRule>();
        ReminderRule reminderRule = new ReminderRule();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            reminderRule = new ReminderRule();
            reminderRule.ReminderRuleNum = PIn.Long(table.Rows[i]["ReminderRuleNum"].ToString());
            reminderRule.ReminderCriterion = (EhrCriterion)PIn.Int(table.Rows[i]["ReminderCriterion"].ToString());
            reminderRule.CriterionFK = PIn.Long(table.Rows[i]["CriterionFK"].ToString());
            reminderRule.CriterionValue = PIn.String(table.Rows[i]["CriterionValue"].ToString());
            reminderRule.Message = PIn.String(table.Rows[i]["Message"].ToString());
            retVal.Add(reminderRule);
        }
        return retVal;
    }

    /**
    * Inserts one ReminderRule into the database.  Returns the new priKey.
    */
    public static long insert(ReminderRule reminderRule) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            reminderRule.ReminderRuleNum = DbHelper.GetNextOracleKey("reminderrule", "ReminderRuleNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(reminderRule,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        reminderRule.ReminderRuleNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(reminderRule,false);
        } 
    }

    /**
    * Inserts one ReminderRule into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ReminderRule reminderRule, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            reminderRule.ReminderRuleNum = ReplicationServers.GetKey("reminderrule", "ReminderRuleNum");
        }
         
        String command = "INSERT INTO reminderrule (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ReminderRuleNum,";
        }
         
        command += "ReminderCriterion,CriterionFK,CriterionValue,Message) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(reminderRule.ReminderRuleNum) + ",";
        }
         
        command += POut.Int((int)reminderRule.ReminderCriterion) + "," + POut.Long(reminderRule.CriterionFK) + "," + "'" + POut.String(reminderRule.CriterionValue) + "'," + "'" + POut.String(reminderRule.Message) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            reminderRule.ReminderRuleNum = Db.NonQ(command, true);
        } 
        return reminderRule.ReminderRuleNum;
    }

    /**
    * Updates one ReminderRule in the database.
    */
    public static void update(ReminderRule reminderRule) throws Exception {
        String command = "UPDATE reminderrule SET " + "ReminderCriterion=  " + POut.Int((int)reminderRule.ReminderCriterion) + ", " + "CriterionFK      =  " + POut.Long(reminderRule.CriterionFK) + ", " + "CriterionValue   = '" + POut.String(reminderRule.CriterionValue) + "', " + "Message          = '" + POut.String(reminderRule.Message) + "' " + "WHERE ReminderRuleNum = " + POut.Long(reminderRule.ReminderRuleNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ReminderRule in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ReminderRule reminderRule, ReminderRule oldReminderRule) throws Exception {
        String command = "";
        if (reminderRule.ReminderCriterion != oldReminderRule.ReminderCriterion)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ReminderCriterion = " + POut.Int((int)reminderRule.ReminderCriterion) + "";
        }
         
        if (reminderRule.CriterionFK != oldReminderRule.CriterionFK)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CriterionFK = " + POut.Long(reminderRule.CriterionFK) + "";
        }
         
        if (reminderRule.CriterionValue != oldReminderRule.CriterionValue)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CriterionValue = '" + POut.String(reminderRule.CriterionValue) + "'";
        }
         
        if (reminderRule.Message != oldReminderRule.Message)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Message = '" + POut.String(reminderRule.Message) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE reminderrule SET " + command + " WHERE ReminderRuleNum = " + POut.Long(reminderRule.ReminderRuleNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ReminderRule from the database.
    */
    public static void delete(long reminderRuleNum) throws Exception {
        String command = "DELETE FROM reminderrule " + "WHERE ReminderRuleNum = " + POut.Long(reminderRuleNum);
        Db.NonQ(command);
    }

}


