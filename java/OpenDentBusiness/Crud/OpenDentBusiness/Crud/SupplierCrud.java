//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:08 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class SupplierCrud   
{
    /**
    * Gets one Supplier object from the database using the primary key.  Returns null if not found.
    */
    public static Supplier selectOne(long supplierNum) throws Exception {
        String command = "SELECT * FROM supplier " + "WHERE SupplierNum = " + POut.Long(supplierNum);
        List<Supplier> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Supplier object from the database using a query.
    */
    public static Supplier selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Supplier> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Supplier objects from the database using a query.
    */
    public static List<Supplier> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Supplier> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Supplier> tableToList(DataTable table) throws Exception {
        List<Supplier> retVal = new List<Supplier>();
        Supplier supplier = new Supplier();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            supplier = new Supplier();
            supplier.SupplierNum = PIn.Long(table.Rows[i]["SupplierNum"].ToString());
            supplier.Name = PIn.String(table.Rows[i]["Name"].ToString());
            supplier.Phone = PIn.String(table.Rows[i]["Phone"].ToString());
            supplier.CustomerId = PIn.String(table.Rows[i]["CustomerId"].ToString());
            supplier.Website = PIn.String(table.Rows[i]["Website"].ToString());
            supplier.UserName = PIn.String(table.Rows[i]["UserName"].ToString());
            supplier.Password = PIn.String(table.Rows[i]["Password"].ToString());
            supplier.Note = PIn.String(table.Rows[i]["Note"].ToString());
            retVal.Add(supplier);
        }
        return retVal;
    }

    /**
    * Inserts one Supplier into the database.  Returns the new priKey.
    */
    public static long insert(Supplier supplier) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            supplier.SupplierNum = DbHelper.GetNextOracleKey("supplier", "SupplierNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(supplier,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        supplier.SupplierNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(supplier,false);
        } 
    }

    /**
    * Inserts one Supplier into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Supplier supplier, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            supplier.SupplierNum = ReplicationServers.GetKey("supplier", "SupplierNum");
        }
         
        String command = "INSERT INTO supplier (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "SupplierNum,";
        }
         
        command += "Name,Phone,CustomerId,Website,UserName,Password,Note) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(supplier.SupplierNum) + ",";
        }
         
        command += "'" + POut.String(supplier.Name) + "'," + "'" + POut.String(supplier.Phone) + "'," + "'" + POut.String(supplier.CustomerId) + "'," + "'" + POut.String(supplier.Website) + "'," + "'" + POut.String(supplier.UserName) + "'," + "'" + POut.String(supplier.Password) + "'," + "'" + POut.String(supplier.Note) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            supplier.SupplierNum = Db.NonQ(command, true);
        } 
        return supplier.SupplierNum;
    }

    /**
    * Updates one Supplier in the database.
    */
    public static void update(Supplier supplier) throws Exception {
        String command = "UPDATE supplier SET " + "Name       = '" + POut.String(supplier.Name) + "', " + "Phone      = '" + POut.String(supplier.Phone) + "', " + "CustomerId = '" + POut.String(supplier.CustomerId) + "', " + "Website    = '" + POut.String(supplier.Website) + "', " + "UserName   = '" + POut.String(supplier.UserName) + "', " + "Password   = '" + POut.String(supplier.Password) + "', " + "Note       = '" + POut.String(supplier.Note) + "' " + "WHERE SupplierNum = " + POut.Long(supplier.SupplierNum);
        Db.NonQ(command);
    }

    /**
    * Updates one Supplier in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Supplier supplier, Supplier oldSupplier) throws Exception {
        String command = "";
        if (supplier.Name != oldSupplier.Name)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Name = '" + POut.String(supplier.Name) + "'";
        }
         
        if (supplier.Phone != oldSupplier.Phone)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Phone = '" + POut.String(supplier.Phone) + "'";
        }
         
        if (supplier.CustomerId != oldSupplier.CustomerId)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CustomerId = '" + POut.String(supplier.CustomerId) + "'";
        }
         
        if (supplier.Website != oldSupplier.Website)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Website = '" + POut.String(supplier.Website) + "'";
        }
         
        if (supplier.UserName != oldSupplier.UserName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UserName = '" + POut.String(supplier.UserName) + "'";
        }
         
        if (supplier.Password != oldSupplier.Password)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Password = '" + POut.String(supplier.Password) + "'";
        }
         
        if (supplier.Note != oldSupplier.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(supplier.Note) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE supplier SET " + command + " WHERE SupplierNum = " + POut.Long(supplier.SupplierNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one Supplier from the database.
    */
    public static void delete(long supplierNum) throws Exception {
        String command = "DELETE FROM supplier " + "WHERE SupplierNum = " + POut.Long(supplierNum);
        Db.NonQ(command);
    }

}


