//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:04 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class PhoneGraphCrud   
{
    /**
    * Gets one PhoneGraph object from the database using the primary key.  Returns null if not found.
    */
    public static PhoneGraph selectOne(long phoneGraphNum) throws Exception {
        String command = "SELECT * FROM phonegraph " + "WHERE PhoneGraphNum = " + POut.Long(phoneGraphNum);
        List<PhoneGraph> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one PhoneGraph object from the database using a query.
    */
    public static PhoneGraph selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PhoneGraph> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of PhoneGraph objects from the database using a query.
    */
    public static List<PhoneGraph> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PhoneGraph> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<PhoneGraph> tableToList(DataTable table) throws Exception {
        List<PhoneGraph> retVal = new List<PhoneGraph>();
        PhoneGraph phoneGraph = new PhoneGraph();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            phoneGraph = new PhoneGraph();
            phoneGraph.PhoneGraphNum = PIn.Long(table.Rows[i]["PhoneGraphNum"].ToString());
            phoneGraph.EmployeeNum = PIn.Long(table.Rows[i]["EmployeeNum"].ToString());
            phoneGraph.IsGraphed = PIn.Bool(table.Rows[i]["IsGraphed"].ToString());
            phoneGraph.DateEntry = PIn.Date(table.Rows[i]["DateEntry"].ToString());
            retVal.Add(phoneGraph);
        }
        return retVal;
    }

    /**
    * Inserts one PhoneGraph into the database.  Returns the new priKey.
    */
    public static long insert(PhoneGraph phoneGraph) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            phoneGraph.PhoneGraphNum = DbHelper.GetNextOracleKey("phonegraph", "PhoneGraphNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(phoneGraph,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        phoneGraph.PhoneGraphNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(phoneGraph,false);
        } 
    }

    /**
    * Inserts one PhoneGraph into the database.  Provides option to use the existing priKey.
    */
    public static long insert(PhoneGraph phoneGraph, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            phoneGraph.PhoneGraphNum = ReplicationServers.GetKey("phonegraph", "PhoneGraphNum");
        }
         
        String command = "INSERT INTO phonegraph (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "PhoneGraphNum,";
        }
         
        command += "EmployeeNum,IsGraphed,DateEntry) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(phoneGraph.PhoneGraphNum) + ",";
        }
         
        command += POut.Long(phoneGraph.EmployeeNum) + "," + POut.Bool(phoneGraph.IsGraphed) + "," + POut.Date(phoneGraph.DateEntry) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            phoneGraph.PhoneGraphNum = Db.NonQ(command, true);
        } 
        return phoneGraph.PhoneGraphNum;
    }

    /**
    * Updates one PhoneGraph in the database.
    */
    public static void update(PhoneGraph phoneGraph) throws Exception {
        String command = "UPDATE phonegraph SET " + "EmployeeNum  =  " + POut.Long(phoneGraph.EmployeeNum) + ", " + "IsGraphed    =  " + POut.Bool(phoneGraph.IsGraphed) + ", " + "DateEntry    =  " + POut.Date(phoneGraph.DateEntry) + " " + "WHERE PhoneGraphNum = " + POut.Long(phoneGraph.PhoneGraphNum);
        Db.NonQ(command);
    }

    /**
    * Updates one PhoneGraph in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(PhoneGraph phoneGraph, PhoneGraph oldPhoneGraph) throws Exception {
        String command = "";
        if (phoneGraph.EmployeeNum != oldPhoneGraph.EmployeeNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EmployeeNum = " + POut.Long(phoneGraph.EmployeeNum) + "";
        }
         
        if (phoneGraph.IsGraphed != oldPhoneGraph.IsGraphed)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsGraphed = " + POut.Bool(phoneGraph.IsGraphed) + "";
        }
         
        if (phoneGraph.DateEntry != oldPhoneGraph.DateEntry)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateEntry = " + POut.Date(phoneGraph.DateEntry) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE phonegraph SET " + command + " WHERE PhoneGraphNum = " + POut.Long(phoneGraph.PhoneGraphNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one PhoneGraph from the database.
    */
    public static void delete(long phoneGraphNum) throws Exception {
        String command = "DELETE FROM phonegraph " + "WHERE PhoneGraphNum = " + POut.Long(phoneGraphNum);
        Db.NonQ(command);
    }

}


