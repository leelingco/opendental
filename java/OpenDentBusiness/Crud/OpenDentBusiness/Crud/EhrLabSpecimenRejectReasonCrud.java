//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:59 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EhrLabSpecimenRejectReasonCrud   
{
    /**
    * Gets one EhrLabSpecimenRejectReason object from the database using the primary key.  Returns null if not found.
    */
    public static EhrLabSpecimenRejectReason selectOne(long ehrLabSpecimenRejectReasonNum) throws Exception {
        String command = "SELECT * FROM ehrlabspecimenrejectreason " + "WHERE EhrLabSpecimenRejectReasonNum = " + POut.Long(ehrLabSpecimenRejectReasonNum);
        List<EhrLabSpecimenRejectReason> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one EhrLabSpecimenRejectReason object from the database using a query.
    */
    public static EhrLabSpecimenRejectReason selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrLabSpecimenRejectReason> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of EhrLabSpecimenRejectReason objects from the database using a query.
    */
    public static List<EhrLabSpecimenRejectReason> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrLabSpecimenRejectReason> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<EhrLabSpecimenRejectReason> tableToList(DataTable table) throws Exception {
        List<EhrLabSpecimenRejectReason> retVal = new List<EhrLabSpecimenRejectReason>();
        EhrLabSpecimenRejectReason ehrLabSpecimenRejectReason = new EhrLabSpecimenRejectReason();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            ehrLabSpecimenRejectReason = new EhrLabSpecimenRejectReason();
            ehrLabSpecimenRejectReason.EhrLabSpecimenRejectReasonNum = PIn.Long(table.Rows[i]["EhrLabSpecimenRejectReasonNum"].ToString());
            ehrLabSpecimenRejectReason.EhrLabSpecimenNum = PIn.Long(table.Rows[i]["EhrLabSpecimenNum"].ToString());
            ehrLabSpecimenRejectReason.SpecimenRejectReasonID = PIn.String(table.Rows[i]["SpecimenRejectReasonID"].ToString());
            ehrLabSpecimenRejectReason.SpecimenRejectReasonText = PIn.String(table.Rows[i]["SpecimenRejectReasonText"].ToString());
            ehrLabSpecimenRejectReason.SpecimenRejectReasonCodeSystemName = PIn.String(table.Rows[i]["SpecimenRejectReasonCodeSystemName"].ToString());
            ehrLabSpecimenRejectReason.SpecimenRejectReasonIDAlt = PIn.String(table.Rows[i]["SpecimenRejectReasonIDAlt"].ToString());
            ehrLabSpecimenRejectReason.SpecimenRejectReasonTextAlt = PIn.String(table.Rows[i]["SpecimenRejectReasonTextAlt"].ToString());
            ehrLabSpecimenRejectReason.SpecimenRejectReasonCodeSystemNameAlt = PIn.String(table.Rows[i]["SpecimenRejectReasonCodeSystemNameAlt"].ToString());
            ehrLabSpecimenRejectReason.SpecimenRejectReasonTextOriginal = PIn.String(table.Rows[i]["SpecimenRejectReasonTextOriginal"].ToString());
            retVal.Add(ehrLabSpecimenRejectReason);
        }
        return retVal;
    }

    /**
    * Inserts one EhrLabSpecimenRejectReason into the database.  Returns the new priKey.
    */
    public static long insert(EhrLabSpecimenRejectReason ehrLabSpecimenRejectReason) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            ehrLabSpecimenRejectReason.EhrLabSpecimenRejectReasonNum = DbHelper.GetNextOracleKey("ehrlabspecimenrejectreason", "EhrLabSpecimenRejectReasonNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(ehrLabSpecimenRejectReason,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        ehrLabSpecimenRejectReason.EhrLabSpecimenRejectReasonNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(ehrLabSpecimenRejectReason,false);
        } 
    }

    /**
    * Inserts one EhrLabSpecimenRejectReason into the database.  Provides option to use the existing priKey.
    */
    public static long insert(EhrLabSpecimenRejectReason ehrLabSpecimenRejectReason, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            ehrLabSpecimenRejectReason.EhrLabSpecimenRejectReasonNum = ReplicationServers.GetKey("ehrlabspecimenrejectreason", "EhrLabSpecimenRejectReasonNum");
        }
         
        String command = "INSERT INTO ehrlabspecimenrejectreason (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "EhrLabSpecimenRejectReasonNum,";
        }
         
        command += "EhrLabSpecimenNum,SpecimenRejectReasonID,SpecimenRejectReasonText,SpecimenRejectReasonCodeSystemName,SpecimenRejectReasonIDAlt,SpecimenRejectReasonTextAlt,SpecimenRejectReasonCodeSystemNameAlt,SpecimenRejectReasonTextOriginal) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(ehrLabSpecimenRejectReason.EhrLabSpecimenRejectReasonNum) + ",";
        }
         
        command += POut.Long(ehrLabSpecimenRejectReason.EhrLabSpecimenNum) + "," + "'" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonID) + "'," + "'" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonText) + "'," + "'" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonCodeSystemName) + "'," + "'" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonIDAlt) + "'," + "'" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonTextAlt) + "'," + "'" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonCodeSystemNameAlt) + "'," + "'" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonTextOriginal) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            ehrLabSpecimenRejectReason.EhrLabSpecimenRejectReasonNum = Db.NonQ(command, true);
        } 
        return ehrLabSpecimenRejectReason.EhrLabSpecimenRejectReasonNum;
    }

    /**
    * Updates one EhrLabSpecimenRejectReason in the database.
    */
    public static void update(EhrLabSpecimenRejectReason ehrLabSpecimenRejectReason) throws Exception {
        String command = "UPDATE ehrlabspecimenrejectreason SET " + "EhrLabSpecimenNum                    =  " + POut.Long(ehrLabSpecimenRejectReason.EhrLabSpecimenNum) + ", " + "SpecimenRejectReasonID               = '" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonID) + "', " + "SpecimenRejectReasonText             = '" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonText) + "', " + "SpecimenRejectReasonCodeSystemName   = '" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonCodeSystemName) + "', " + "SpecimenRejectReasonIDAlt            = '" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonIDAlt) + "', " + "SpecimenRejectReasonTextAlt          = '" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonTextAlt) + "', " + "SpecimenRejectReasonCodeSystemNameAlt= '" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonCodeSystemNameAlt) + "', " + "SpecimenRejectReasonTextOriginal     = '" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonTextOriginal) + "' " + "WHERE EhrLabSpecimenRejectReasonNum = " + POut.Long(ehrLabSpecimenRejectReason.EhrLabSpecimenRejectReasonNum);
        Db.NonQ(command);
    }

    /**
    * Updates one EhrLabSpecimenRejectReason in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(EhrLabSpecimenRejectReason ehrLabSpecimenRejectReason, EhrLabSpecimenRejectReason oldEhrLabSpecimenRejectReason) throws Exception {
        String command = "";
        if (ehrLabSpecimenRejectReason.EhrLabSpecimenNum != oldEhrLabSpecimenRejectReason.EhrLabSpecimenNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EhrLabSpecimenNum = " + POut.Long(ehrLabSpecimenRejectReason.EhrLabSpecimenNum) + "";
        }
         
        if (ehrLabSpecimenRejectReason.SpecimenRejectReasonID != oldEhrLabSpecimenRejectReason.SpecimenRejectReasonID)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SpecimenRejectReasonID = '" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonID) + "'";
        }
         
        if (ehrLabSpecimenRejectReason.SpecimenRejectReasonText != oldEhrLabSpecimenRejectReason.SpecimenRejectReasonText)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SpecimenRejectReasonText = '" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonText) + "'";
        }
         
        if (ehrLabSpecimenRejectReason.SpecimenRejectReasonCodeSystemName != oldEhrLabSpecimenRejectReason.SpecimenRejectReasonCodeSystemName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SpecimenRejectReasonCodeSystemName = '" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonCodeSystemName) + "'";
        }
         
        if (ehrLabSpecimenRejectReason.SpecimenRejectReasonIDAlt != oldEhrLabSpecimenRejectReason.SpecimenRejectReasonIDAlt)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SpecimenRejectReasonIDAlt = '" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonIDAlt) + "'";
        }
         
        if (ehrLabSpecimenRejectReason.SpecimenRejectReasonTextAlt != oldEhrLabSpecimenRejectReason.SpecimenRejectReasonTextAlt)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SpecimenRejectReasonTextAlt = '" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonTextAlt) + "'";
        }
         
        if (ehrLabSpecimenRejectReason.SpecimenRejectReasonCodeSystemNameAlt != oldEhrLabSpecimenRejectReason.SpecimenRejectReasonCodeSystemNameAlt)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SpecimenRejectReasonCodeSystemNameAlt = '" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonCodeSystemNameAlt) + "'";
        }
         
        if (ehrLabSpecimenRejectReason.SpecimenRejectReasonTextOriginal != oldEhrLabSpecimenRejectReason.SpecimenRejectReasonTextOriginal)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SpecimenRejectReasonTextOriginal = '" + POut.String(ehrLabSpecimenRejectReason.SpecimenRejectReasonTextOriginal) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE ehrlabspecimenrejectreason SET " + command + " WHERE EhrLabSpecimenRejectReasonNum = " + POut.Long(ehrLabSpecimenRejectReason.EhrLabSpecimenRejectReasonNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one EhrLabSpecimenRejectReason from the database.
    */
    public static void delete(long ehrLabSpecimenRejectReasonNum) throws Exception {
        String command = "DELETE FROM ehrlabspecimenrejectreason " + "WHERE EhrLabSpecimenRejectReasonNum = " + POut.Long(ehrLabSpecimenRejectReasonNum);
        Db.NonQ(command);
    }

}


