//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:58 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class CustRefEntryCrud   
{
    /**
    * Gets one CustRefEntry object from the database using the primary key.  Returns null if not found.
    */
    public static CustRefEntry selectOne(long custRefEntryNum) throws Exception {
        String command = "SELECT * FROM custrefentry " + "WHERE CustRefEntryNum = " + POut.Long(custRefEntryNum);
        List<CustRefEntry> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one CustRefEntry object from the database using a query.
    */
    public static CustRefEntry selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<CustRefEntry> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of CustRefEntry objects from the database using a query.
    */
    public static List<CustRefEntry> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<CustRefEntry> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<CustRefEntry> tableToList(DataTable table) throws Exception {
        List<CustRefEntry> retVal = new List<CustRefEntry>();
        CustRefEntry custRefEntry = new CustRefEntry();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            custRefEntry = new CustRefEntry();
            custRefEntry.CustRefEntryNum = PIn.Long(table.Rows[i]["CustRefEntryNum"].ToString());
            custRefEntry.PatNumCust = PIn.Long(table.Rows[i]["PatNumCust"].ToString());
            custRefEntry.PatNumRef = PIn.Long(table.Rows[i]["PatNumRef"].ToString());
            custRefEntry.DateEntry = PIn.Date(table.Rows[i]["DateEntry"].ToString());
            custRefEntry.Note = PIn.String(table.Rows[i]["Note"].ToString());
            retVal.Add(custRefEntry);
        }
        return retVal;
    }

    /**
    * Inserts one CustRefEntry into the database.  Returns the new priKey.
    */
    public static long insert(CustRefEntry custRefEntry) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            custRefEntry.CustRefEntryNum = DbHelper.GetNextOracleKey("custrefentry", "CustRefEntryNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(custRefEntry,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        custRefEntry.CustRefEntryNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(custRefEntry,false);
        } 
    }

    /**
    * Inserts one CustRefEntry into the database.  Provides option to use the existing priKey.
    */
    public static long insert(CustRefEntry custRefEntry, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            custRefEntry.CustRefEntryNum = ReplicationServers.GetKey("custrefentry", "CustRefEntryNum");
        }
         
        String command = "INSERT INTO custrefentry (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "CustRefEntryNum,";
        }
         
        command += "PatNumCust,PatNumRef,DateEntry,Note) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(custRefEntry.CustRefEntryNum) + ",";
        }
         
        command += POut.Long(custRefEntry.PatNumCust) + "," + POut.Long(custRefEntry.PatNumRef) + "," + POut.Date(custRefEntry.DateEntry) + "," + "'" + POut.String(custRefEntry.Note) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            custRefEntry.CustRefEntryNum = Db.NonQ(command, true);
        } 
        return custRefEntry.CustRefEntryNum;
    }

    /**
    * Updates one CustRefEntry in the database.
    */
    public static void update(CustRefEntry custRefEntry) throws Exception {
        String command = "UPDATE custrefentry SET " + "PatNumCust     =  " + POut.Long(custRefEntry.PatNumCust) + ", " + "PatNumRef      =  " + POut.Long(custRefEntry.PatNumRef) + ", " + "DateEntry      =  " + POut.Date(custRefEntry.DateEntry) + ", " + "Note           = '" + POut.String(custRefEntry.Note) + "' " + "WHERE CustRefEntryNum = " + POut.Long(custRefEntry.CustRefEntryNum);
        Db.NonQ(command);
    }

    /**
    * Updates one CustRefEntry in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(CustRefEntry custRefEntry, CustRefEntry oldCustRefEntry) throws Exception {
        String command = "";
        if (custRefEntry.PatNumCust != oldCustRefEntry.PatNumCust)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNumCust = " + POut.Long(custRefEntry.PatNumCust) + "";
        }
         
        if (custRefEntry.PatNumRef != oldCustRefEntry.PatNumRef)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNumRef = " + POut.Long(custRefEntry.PatNumRef) + "";
        }
         
        if (custRefEntry.DateEntry != oldCustRefEntry.DateEntry)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateEntry = " + POut.Date(custRefEntry.DateEntry) + "";
        }
         
        if (custRefEntry.Note != oldCustRefEntry.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(custRefEntry.Note) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE custrefentry SET " + command + " WHERE CustRefEntryNum = " + POut.Long(custRefEntry.CustRefEntryNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one CustRefEntry from the database.
    */
    public static void delete(long custRefEntryNum) throws Exception {
        String command = "DELETE FROM custrefentry " + "WHERE CustRefEntryNum = " + POut.Long(custRefEntryNum);
        Db.NonQ(command);
    }

}


