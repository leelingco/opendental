//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:03 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class PerioExamCrud   
{
    /**
    * Gets one PerioExam object from the database using the primary key.  Returns null if not found.
    */
    public static PerioExam selectOne(long perioExamNum) throws Exception {
        String command = "SELECT * FROM perioexam " + "WHERE PerioExamNum = " + POut.Long(perioExamNum);
        List<PerioExam> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one PerioExam object from the database using a query.
    */
    public static PerioExam selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PerioExam> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of PerioExam objects from the database using a query.
    */
    public static List<PerioExam> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PerioExam> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<PerioExam> tableToList(DataTable table) throws Exception {
        List<PerioExam> retVal = new List<PerioExam>();
        PerioExam perioExam = new PerioExam();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            perioExam = new PerioExam();
            perioExam.PerioExamNum = PIn.Long(table.Rows[i]["PerioExamNum"].ToString());
            perioExam.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            perioExam.ExamDate = PIn.Date(table.Rows[i]["ExamDate"].ToString());
            perioExam.ProvNum = PIn.Long(table.Rows[i]["ProvNum"].ToString());
            retVal.Add(perioExam);
        }
        return retVal;
    }

    /**
    * Inserts one PerioExam into the database.  Returns the new priKey.
    */
    public static long insert(PerioExam perioExam) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            perioExam.PerioExamNum = DbHelper.GetNextOracleKey("perioexam", "PerioExamNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(perioExam,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        perioExam.PerioExamNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(perioExam,false);
        } 
    }

    /**
    * Inserts one PerioExam into the database.  Provides option to use the existing priKey.
    */
    public static long insert(PerioExam perioExam, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            perioExam.PerioExamNum = ReplicationServers.GetKey("perioexam", "PerioExamNum");
        }
         
        String command = "INSERT INTO perioexam (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "PerioExamNum,";
        }
         
        command += "PatNum,ExamDate,ProvNum) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(perioExam.PerioExamNum) + ",";
        }
         
        command += POut.Long(perioExam.PatNum) + "," + POut.Date(perioExam.ExamDate) + "," + POut.Long(perioExam.ProvNum) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            perioExam.PerioExamNum = Db.NonQ(command, true);
        } 
        return perioExam.PerioExamNum;
    }

    /**
    * Updates one PerioExam in the database.
    */
    public static void update(PerioExam perioExam) throws Exception {
        String command = "UPDATE perioexam SET " + "PatNum      =  " + POut.Long(perioExam.PatNum) + ", " + "ExamDate    =  " + POut.Date(perioExam.ExamDate) + ", " + "ProvNum     =  " + POut.Long(perioExam.ProvNum) + " " + "WHERE PerioExamNum = " + POut.Long(perioExam.PerioExamNum);
        Db.NonQ(command);
    }

    /**
    * Updates one PerioExam in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(PerioExam perioExam, PerioExam oldPerioExam) throws Exception {
        String command = "";
        if (perioExam.PatNum != oldPerioExam.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(perioExam.PatNum) + "";
        }
         
        if (perioExam.ExamDate != oldPerioExam.ExamDate)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ExamDate = " + POut.Date(perioExam.ExamDate) + "";
        }
         
        if (perioExam.ProvNum != oldPerioExam.ProvNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvNum = " + POut.Long(perioExam.ProvNum) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE perioexam SET " + command + " WHERE PerioExamNum = " + POut.Long(perioExam.PerioExamNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one PerioExam from the database.
    */
    public static void delete(long perioExamNum) throws Exception {
        String command = "DELETE FROM perioexam " + "WHERE PerioExamNum = " + POut.Long(perioExamNum);
        Db.NonQ(command);
    }

}


