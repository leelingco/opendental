//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:01 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class GroupPermissionCrud   
{
    /**
    * Gets one GroupPermission object from the database using the primary key.  Returns null if not found.
    */
    public static GroupPermission selectOne(long groupPermNum) throws Exception {
        String command = "SELECT * FROM grouppermission " + "WHERE GroupPermNum = " + POut.Long(groupPermNum);
        List<GroupPermission> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one GroupPermission object from the database using a query.
    */
    public static GroupPermission selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<GroupPermission> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of GroupPermission objects from the database using a query.
    */
    public static List<GroupPermission> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<GroupPermission> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<GroupPermission> tableToList(DataTable table) throws Exception {
        List<GroupPermission> retVal = new List<GroupPermission>();
        GroupPermission groupPermission = new GroupPermission();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            groupPermission = new GroupPermission();
            groupPermission.GroupPermNum = PIn.Long(table.Rows[i]["GroupPermNum"].ToString());
            groupPermission.NewerDate = PIn.Date(table.Rows[i]["NewerDate"].ToString());
            groupPermission.NewerDays = PIn.Int(table.Rows[i]["NewerDays"].ToString());
            groupPermission.UserGroupNum = PIn.Long(table.Rows[i]["UserGroupNum"].ToString());
            groupPermission.PermType = (Permissions)PIn.Int(table.Rows[i]["PermType"].ToString());
            retVal.Add(groupPermission);
        }
        return retVal;
    }

    /**
    * Inserts one GroupPermission into the database.  Returns the new priKey.
    */
    public static long insert(GroupPermission groupPermission) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            groupPermission.GroupPermNum = DbHelper.GetNextOracleKey("grouppermission", "GroupPermNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(groupPermission,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        groupPermission.GroupPermNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(groupPermission,false);
        } 
    }

    /**
    * Inserts one GroupPermission into the database.  Provides option to use the existing priKey.
    */
    public static long insert(GroupPermission groupPermission, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            groupPermission.GroupPermNum = ReplicationServers.GetKey("grouppermission", "GroupPermNum");
        }
         
        String command = "INSERT INTO grouppermission (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "GroupPermNum,";
        }
         
        command += "NewerDate,NewerDays,UserGroupNum,PermType) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(groupPermission.GroupPermNum) + ",";
        }
         
        command += POut.Date(groupPermission.NewerDate) + "," + POut.Int(groupPermission.NewerDays) + "," + POut.Long(groupPermission.UserGroupNum) + "," + POut.Int((int)groupPermission.PermType) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            groupPermission.GroupPermNum = Db.NonQ(command, true);
        } 
        return groupPermission.GroupPermNum;
    }

    /**
    * Updates one GroupPermission in the database.
    */
    public static void update(GroupPermission groupPermission) throws Exception {
        String command = "UPDATE grouppermission SET " + "NewerDate   =  " + POut.Date(groupPermission.NewerDate) + ", " + "NewerDays   =  " + POut.Int(groupPermission.NewerDays) + ", " + "UserGroupNum=  " + POut.Long(groupPermission.UserGroupNum) + ", " + "PermType    =  " + POut.Int((int)groupPermission.PermType) + " " + "WHERE GroupPermNum = " + POut.Long(groupPermission.GroupPermNum);
        Db.NonQ(command);
    }

    /**
    * Updates one GroupPermission in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(GroupPermission groupPermission, GroupPermission oldGroupPermission) throws Exception {
        String command = "";
        if (groupPermission.NewerDate != oldGroupPermission.NewerDate)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "NewerDate = " + POut.Date(groupPermission.NewerDate) + "";
        }
         
        if (groupPermission.NewerDays != oldGroupPermission.NewerDays)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "NewerDays = " + POut.Int(groupPermission.NewerDays) + "";
        }
         
        if (groupPermission.UserGroupNum != oldGroupPermission.UserGroupNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UserGroupNum = " + POut.Long(groupPermission.UserGroupNum) + "";
        }
         
        if (groupPermission.PermType != oldGroupPermission.PermType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PermType = " + POut.Int((int)groupPermission.PermType) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE grouppermission SET " + command + " WHERE GroupPermNum = " + POut.Long(groupPermission.GroupPermNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one GroupPermission from the database.
    */
    public static void delete(long groupPermNum) throws Exception {
        String command = "DELETE FROM grouppermission " + "WHERE GroupPermNum = " + POut.Long(groupPermNum);
        Db.NonQ(command);
    }

}


