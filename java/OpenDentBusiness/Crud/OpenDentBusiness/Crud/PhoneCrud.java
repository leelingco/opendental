//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:04 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class PhoneCrud   
{
    /**
    * Gets one Phone object from the database using the primary key.  Returns null if not found.
    */
    public static Phone selectOne(long phoneNum) throws Exception {
        String command = "SELECT * FROM phone " + "WHERE PhoneNum = " + POut.Long(phoneNum);
        List<Phone> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Phone object from the database using a query.
    */
    public static Phone selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Phone> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Phone objects from the database using a query.
    */
    public static List<Phone> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Phone> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Phone> tableToList(DataTable table) throws Exception {
        List<Phone> retVal = new List<Phone>();
        Phone phone = new Phone();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            phone = new Phone();
            phone.PhoneNum = PIn.Long(table.Rows[i]["PhoneNum"].ToString());
            phone.Extension = PIn.Int(table.Rows[i]["Extension"].ToString());
            phone.EmployeeName = PIn.String(table.Rows[i]["EmployeeName"].ToString());
            String clockStatus = table.Rows[i]["ClockStatus"].ToString();
            if (StringSupport.equals(clockStatus, ""))
            {
                phone.ClockStatus = (ClockStatusEnum)0;
            }
            else
                try
                {
                    phone.ClockStatus = (ClockStatusEnum)Enum.Parse(ClockStatusEnum.class, clockStatus);
                }
                catch (Exception __dummyCatchVar0)
                {
                    phone.ClockStatus = (ClockStatusEnum)0;
                }
             
            phone.Description = PIn.String(table.Rows[i]["Description"].ToString());
            phone.ColorBar = Color.FromArgb(PIn.Int(table.Rows[i]["ColorBar"].ToString()));
            phone.ColorText = Color.FromArgb(PIn.Int(table.Rows[i]["ColorText"].ToString()));
            phone.EmployeeNum = PIn.Long(table.Rows[i]["EmployeeNum"].ToString());
            phone.CustomerNumber = PIn.String(table.Rows[i]["CustomerNumber"].ToString());
            phone.InOrOut = PIn.String(table.Rows[i]["InOrOut"].ToString());
            phone.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            phone.DateTimeStart = PIn.DateT(table.Rows[i]["DateTimeStart"].ToString());
            phone.WebCamImage = PIn.String(table.Rows[i]["WebCamImage"].ToString());
            phone.ScreenshotPath = PIn.String(table.Rows[i]["ScreenshotPath"].ToString());
            phone.ScreenshotImage = PIn.String(table.Rows[i]["ScreenshotImage"].ToString());
            phone.CustomerNumberRaw = PIn.String(table.Rows[i]["CustomerNumberRaw"].ToString());
            phone.LastCallTimeStart = PIn.DateT(table.Rows[i]["LastCallTimeStart"].ToString());
            retVal.Add(phone);
        }
        return retVal;
    }

    /**
    * Inserts one Phone into the database.  Returns the new priKey.
    */
    public static long insert(Phone phone) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            phone.PhoneNum = DbHelper.GetNextOracleKey("phone", "PhoneNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(phone,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        phone.PhoneNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(phone,false);
        } 
    }

    /**
    * Inserts one Phone into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Phone phone, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            phone.PhoneNum = ReplicationServers.GetKey("phone", "PhoneNum");
        }
         
        String command = "INSERT INTO phone (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "PhoneNum,";
        }
         
        command += "Extension,EmployeeName,ClockStatus,Description,ColorBar,ColorText,EmployeeNum,CustomerNumber,InOrOut,PatNum,DateTimeStart,WebCamImage,ScreenshotPath,ScreenshotImage,CustomerNumberRaw,LastCallTimeStart) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(phone.PhoneNum) + ",";
        }
         
        command += POut.Int(phone.Extension) + "," + "'" + POut.String(phone.EmployeeName) + "'," + "'" + POut.String(phone.ClockStatus.ToString()) + "'," + "'" + POut.String(phone.Description) + "'," + POut.Int(phone.ColorBar.ToArgb()) + "," + POut.Int(phone.ColorText.ToArgb()) + "," + POut.Long(phone.EmployeeNum) + "," + "'" + POut.String(phone.CustomerNumber) + "'," + "'" + POut.String(phone.InOrOut) + "'," + POut.Long(phone.PatNum) + "," + POut.DateT(phone.DateTimeStart) + "," + "'" + POut.String(phone.WebCamImage) + "'," + "'" + POut.String(phone.ScreenshotPath) + "'," + "'" + POut.String(phone.ScreenshotImage) + "'," + "'" + POut.String(phone.CustomerNumberRaw) + "'," + POut.DateT(phone.LastCallTimeStart) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            phone.PhoneNum = Db.NonQ(command, true);
        } 
        return phone.PhoneNum;
    }

    /**
    * Updates one Phone in the database.
    */
    public static void update(Phone phone) throws Exception {
        String command = "UPDATE phone SET " + "Extension        =  " + POut.Int(phone.Extension) + ", " + "EmployeeName     = '" + POut.String(phone.EmployeeName) + "', " + "ClockStatus      = '" + POut.String(phone.ClockStatus.ToString()) + "', " + "Description      = '" + POut.String(phone.Description) + "', " + "ColorBar         =  " + POut.Int(phone.ColorBar.ToArgb()) + ", " + "ColorText        =  " + POut.Int(phone.ColorText.ToArgb()) + ", " + "EmployeeNum      =  " + POut.Long(phone.EmployeeNum) + ", " + "CustomerNumber   = '" + POut.String(phone.CustomerNumber) + "', " + "InOrOut          = '" + POut.String(phone.InOrOut) + "', " + "PatNum           =  " + POut.Long(phone.PatNum) + ", " + "DateTimeStart    =  " + POut.DateT(phone.DateTimeStart) + ", " + "WebCamImage      = '" + POut.String(phone.WebCamImage) + "', " + "ScreenshotPath   = '" + POut.String(phone.ScreenshotPath) + "', " + "ScreenshotImage  = '" + POut.String(phone.ScreenshotImage) + "', " + "CustomerNumberRaw= '" + POut.String(phone.CustomerNumberRaw) + "', " + "LastCallTimeStart=  " + POut.DateT(phone.LastCallTimeStart) + " " + "WHERE PhoneNum = " + POut.Long(phone.PhoneNum);
        Db.NonQ(command);
    }

    /**
    * Updates one Phone in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Phone phone, Phone oldPhone) throws Exception {
        String command = "";
        if (phone.Extension != oldPhone.Extension)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Extension = " + POut.Int(phone.Extension) + "";
        }
         
        if (phone.EmployeeName != oldPhone.EmployeeName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EmployeeName = '" + POut.String(phone.EmployeeName) + "'";
        }
         
        if (phone.ClockStatus != oldPhone.ClockStatus)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClockStatus = '" + POut.String(phone.ClockStatus.ToString()) + "'";
        }
         
        if (phone.Description != oldPhone.Description)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.String(phone.Description) + "'";
        }
         
        if (phone.ColorBar != oldPhone.ColorBar)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ColorBar = " + POut.Int(phone.ColorBar.ToArgb()) + "";
        }
         
        if (phone.ColorText != oldPhone.ColorText)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ColorText = " + POut.Int(phone.ColorText.ToArgb()) + "";
        }
         
        if (phone.EmployeeNum != oldPhone.EmployeeNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EmployeeNum = " + POut.Long(phone.EmployeeNum) + "";
        }
         
        if (phone.CustomerNumber != oldPhone.CustomerNumber)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CustomerNumber = '" + POut.String(phone.CustomerNumber) + "'";
        }
         
        if (phone.InOrOut != oldPhone.InOrOut)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "InOrOut = '" + POut.String(phone.InOrOut) + "'";
        }
         
        if (phone.PatNum != oldPhone.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(phone.PatNum) + "";
        }
         
        if (phone.DateTimeStart != oldPhone.DateTimeStart)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTimeStart = " + POut.DateT(phone.DateTimeStart) + "";
        }
         
        if (phone.WebCamImage != oldPhone.WebCamImage)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "WebCamImage = '" + POut.String(phone.WebCamImage) + "'";
        }
         
        if (phone.ScreenshotPath != oldPhone.ScreenshotPath)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ScreenshotPath = '" + POut.String(phone.ScreenshotPath) + "'";
        }
         
        if (phone.ScreenshotImage != oldPhone.ScreenshotImage)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ScreenshotImage = '" + POut.String(phone.ScreenshotImage) + "'";
        }
         
        if (phone.CustomerNumberRaw != oldPhone.CustomerNumberRaw)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CustomerNumberRaw = '" + POut.String(phone.CustomerNumberRaw) + "'";
        }
         
        if (phone.LastCallTimeStart != oldPhone.LastCallTimeStart)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "LastCallTimeStart = " + POut.DateT(phone.LastCallTimeStart) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE phone SET " + command + " WHERE PhoneNum = " + POut.Long(phone.PhoneNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one Phone from the database.
    */
    public static void delete(long phoneNum) throws Exception {
        String command = "DELETE FROM phone " + "WHERE PhoneNum = " + POut.Long(phoneNum);
        Db.NonQ(command);
    }

}


