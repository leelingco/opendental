//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:03 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class PerioMeasureCrud   
{
    /**
    * Gets one PerioMeasure object from the database using the primary key.  Returns null if not found.
    */
    public static PerioMeasure selectOne(long perioMeasureNum) throws Exception {
        String command = "SELECT * FROM periomeasure " + "WHERE PerioMeasureNum = " + POut.Long(perioMeasureNum);
        List<PerioMeasure> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one PerioMeasure object from the database using a query.
    */
    public static PerioMeasure selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PerioMeasure> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of PerioMeasure objects from the database using a query.
    */
    public static List<PerioMeasure> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PerioMeasure> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<PerioMeasure> tableToList(DataTable table) throws Exception {
        List<PerioMeasure> retVal = new List<PerioMeasure>();
        PerioMeasure perioMeasure = new PerioMeasure();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            perioMeasure = new PerioMeasure();
            perioMeasure.PerioMeasureNum = PIn.Long(table.Rows[i]["PerioMeasureNum"].ToString());
            perioMeasure.PerioExamNum = PIn.Long(table.Rows[i]["PerioExamNum"].ToString());
            perioMeasure.SequenceType = (PerioSequenceType)PIn.Int(table.Rows[i]["SequenceType"].ToString());
            perioMeasure.IntTooth = PIn.Int(table.Rows[i]["IntTooth"].ToString());
            perioMeasure.ToothValue = PIn.Int(table.Rows[i]["ToothValue"].ToString());
            perioMeasure.MBvalue = PIn.Int(table.Rows[i]["MBvalue"].ToString());
            perioMeasure.Bvalue = PIn.Int(table.Rows[i]["Bvalue"].ToString());
            perioMeasure.DBvalue = PIn.Int(table.Rows[i]["DBvalue"].ToString());
            perioMeasure.MLvalue = PIn.Int(table.Rows[i]["MLvalue"].ToString());
            perioMeasure.Lvalue = PIn.Int(table.Rows[i]["Lvalue"].ToString());
            perioMeasure.DLvalue = PIn.Int(table.Rows[i]["DLvalue"].ToString());
            retVal.Add(perioMeasure);
        }
        return retVal;
    }

    /**
    * Inserts one PerioMeasure into the database.  Returns the new priKey.
    */
    public static long insert(PerioMeasure perioMeasure) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            perioMeasure.PerioMeasureNum = DbHelper.GetNextOracleKey("periomeasure", "PerioMeasureNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(perioMeasure,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        perioMeasure.PerioMeasureNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(perioMeasure,false);
        } 
    }

    /**
    * Inserts one PerioMeasure into the database.  Provides option to use the existing priKey.
    */
    public static long insert(PerioMeasure perioMeasure, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            perioMeasure.PerioMeasureNum = ReplicationServers.GetKey("periomeasure", "PerioMeasureNum");
        }
         
        String command = "INSERT INTO periomeasure (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "PerioMeasureNum,";
        }
         
        command += "PerioExamNum,SequenceType,IntTooth,ToothValue,MBvalue,Bvalue,DBvalue,MLvalue,Lvalue,DLvalue) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(perioMeasure.PerioMeasureNum) + ",";
        }
         
        command += POut.Long(perioMeasure.PerioExamNum) + "," + POut.Int((int)perioMeasure.SequenceType) + "," + POut.Int(perioMeasure.IntTooth) + "," + POut.Int(perioMeasure.ToothValue) + "," + POut.Int(perioMeasure.MBvalue) + "," + POut.Int(perioMeasure.Bvalue) + "," + POut.Int(perioMeasure.DBvalue) + "," + POut.Int(perioMeasure.MLvalue) + "," + POut.Int(perioMeasure.Lvalue) + "," + POut.Int(perioMeasure.DLvalue) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            perioMeasure.PerioMeasureNum = Db.NonQ(command, true);
        } 
        return perioMeasure.PerioMeasureNum;
    }

    /**
    * Updates one PerioMeasure in the database.
    */
    public static void update(PerioMeasure perioMeasure) throws Exception {
        String command = "UPDATE periomeasure SET " + "PerioExamNum   =  " + POut.Long(perioMeasure.PerioExamNum) + ", " + "SequenceType   =  " + POut.Int((int)perioMeasure.SequenceType) + ", " + "IntTooth       =  " + POut.Int(perioMeasure.IntTooth) + ", " + "ToothValue     =  " + POut.Int(perioMeasure.ToothValue) + ", " + "MBvalue        =  " + POut.Int(perioMeasure.MBvalue) + ", " + "Bvalue         =  " + POut.Int(perioMeasure.Bvalue) + ", " + "DBvalue        =  " + POut.Int(perioMeasure.DBvalue) + ", " + "MLvalue        =  " + POut.Int(perioMeasure.MLvalue) + ", " + "Lvalue         =  " + POut.Int(perioMeasure.Lvalue) + ", " + "DLvalue        =  " + POut.Int(perioMeasure.DLvalue) + " " + "WHERE PerioMeasureNum = " + POut.Long(perioMeasure.PerioMeasureNum);
        Db.NonQ(command);
    }

    /**
    * Updates one PerioMeasure in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(PerioMeasure perioMeasure, PerioMeasure oldPerioMeasure) throws Exception {
        String command = "";
        if (perioMeasure.PerioExamNum != oldPerioMeasure.PerioExamNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PerioExamNum = " + POut.Long(perioMeasure.PerioExamNum) + "";
        }
         
        if (perioMeasure.SequenceType != oldPerioMeasure.SequenceType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SequenceType = " + POut.Int((int)perioMeasure.SequenceType) + "";
        }
         
        if (perioMeasure.IntTooth != oldPerioMeasure.IntTooth)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IntTooth = " + POut.Int(perioMeasure.IntTooth) + "";
        }
         
        if (perioMeasure.ToothValue != oldPerioMeasure.ToothValue)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ToothValue = " + POut.Int(perioMeasure.ToothValue) + "";
        }
         
        if (perioMeasure.MBvalue != oldPerioMeasure.MBvalue)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MBvalue = " + POut.Int(perioMeasure.MBvalue) + "";
        }
         
        if (perioMeasure.Bvalue != oldPerioMeasure.Bvalue)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Bvalue = " + POut.Int(perioMeasure.Bvalue) + "";
        }
         
        if (perioMeasure.DBvalue != oldPerioMeasure.DBvalue)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DBvalue = " + POut.Int(perioMeasure.DBvalue) + "";
        }
         
        if (perioMeasure.MLvalue != oldPerioMeasure.MLvalue)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MLvalue = " + POut.Int(perioMeasure.MLvalue) + "";
        }
         
        if (perioMeasure.Lvalue != oldPerioMeasure.Lvalue)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Lvalue = " + POut.Int(perioMeasure.Lvalue) + "";
        }
         
        if (perioMeasure.DLvalue != oldPerioMeasure.DLvalue)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DLvalue = " + POut.Int(perioMeasure.DLvalue) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE periomeasure SET " + command + " WHERE PerioMeasureNum = " + POut.Long(perioMeasure.PerioMeasureNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one PerioMeasure from the database.
    */
    public static void delete(long perioMeasureNum) throws Exception {
        String command = "DELETE FROM periomeasure " + "WHERE PerioMeasureNum = " + POut.Long(perioMeasureNum);
        Db.NonQ(command);
    }

}


