//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:55 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class AccountingAutoPayCrud   
{
    /**
    * Gets one AccountingAutoPay object from the database using the primary key.  Returns null if not found.
    */
    public static AccountingAutoPay selectOne(long accountingAutoPayNum) throws Exception {
        String command = "SELECT * FROM accountingautopay " + "WHERE AccountingAutoPayNum = " + POut.Long(accountingAutoPayNum);
        List<AccountingAutoPay> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one AccountingAutoPay object from the database using a query.
    */
    public static AccountingAutoPay selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<AccountingAutoPay> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of AccountingAutoPay objects from the database using a query.
    */
    public static List<AccountingAutoPay> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<AccountingAutoPay> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<AccountingAutoPay> tableToList(DataTable table) throws Exception {
        List<AccountingAutoPay> retVal = new List<AccountingAutoPay>();
        AccountingAutoPay accountingAutoPay = new AccountingAutoPay();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            accountingAutoPay = new AccountingAutoPay();
            accountingAutoPay.AccountingAutoPayNum = PIn.Long(table.Rows[i]["AccountingAutoPayNum"].ToString());
            accountingAutoPay.PayType = PIn.Long(table.Rows[i]["PayType"].ToString());
            accountingAutoPay.PickList = PIn.String(table.Rows[i]["PickList"].ToString());
            retVal.Add(accountingAutoPay);
        }
        return retVal;
    }

    /**
    * Inserts one AccountingAutoPay into the database.  Returns the new priKey.
    */
    public static long insert(AccountingAutoPay accountingAutoPay) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            accountingAutoPay.AccountingAutoPayNum = DbHelper.GetNextOracleKey("accountingautopay", "AccountingAutoPayNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(accountingAutoPay,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        accountingAutoPay.AccountingAutoPayNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(accountingAutoPay,false);
        } 
    }

    /**
    * Inserts one AccountingAutoPay into the database.  Provides option to use the existing priKey.
    */
    public static long insert(AccountingAutoPay accountingAutoPay, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            accountingAutoPay.AccountingAutoPayNum = ReplicationServers.GetKey("accountingautopay", "AccountingAutoPayNum");
        }
         
        String command = "INSERT INTO accountingautopay (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "AccountingAutoPayNum,";
        }
         
        command += "PayType,PickList) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(accountingAutoPay.AccountingAutoPayNum) + ",";
        }
         
        command += POut.Long(accountingAutoPay.PayType) + "," + "'" + POut.String(accountingAutoPay.PickList) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            accountingAutoPay.AccountingAutoPayNum = Db.NonQ(command, true);
        } 
        return accountingAutoPay.AccountingAutoPayNum;
    }

    /**
    * Updates one AccountingAutoPay in the database.
    */
    public static void update(AccountingAutoPay accountingAutoPay) throws Exception {
        String command = "UPDATE accountingautopay SET " + "PayType             =  " + POut.Long(accountingAutoPay.PayType) + ", " + "PickList            = '" + POut.String(accountingAutoPay.PickList) + "' " + "WHERE AccountingAutoPayNum = " + POut.Long(accountingAutoPay.AccountingAutoPayNum);
        Db.NonQ(command);
    }

    /**
    * Updates one AccountingAutoPay in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(AccountingAutoPay accountingAutoPay, AccountingAutoPay oldAccountingAutoPay) throws Exception {
        String command = "";
        if (accountingAutoPay.PayType != oldAccountingAutoPay.PayType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PayType = " + POut.Long(accountingAutoPay.PayType) + "";
        }
         
        if (accountingAutoPay.PickList != oldAccountingAutoPay.PickList)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PickList = '" + POut.String(accountingAutoPay.PickList) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE accountingautopay SET " + command + " WHERE AccountingAutoPayNum = " + POut.Long(accountingAutoPay.AccountingAutoPayNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one AccountingAutoPay from the database.
    */
    public static void delete(long accountingAutoPayNum) throws Exception {
        String command = "DELETE FROM accountingautopay " + "WHERE AccountingAutoPayNum = " + POut.Long(accountingAutoPayNum);
        Db.NonQ(command);
    }

}


