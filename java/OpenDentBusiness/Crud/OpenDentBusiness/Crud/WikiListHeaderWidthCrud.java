//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:09 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class WikiListHeaderWidthCrud   
{
    /**
    * Gets one WikiListHeaderWidth object from the database using the primary key.  Returns null if not found.
    */
    public static WikiListHeaderWidth selectOne(long wikiListHeaderWidthNum) throws Exception {
        String command = "SELECT * FROM wikilistheaderwidth " + "WHERE WikiListHeaderWidthNum = " + POut.Long(wikiListHeaderWidthNum);
        List<WikiListHeaderWidth> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one WikiListHeaderWidth object from the database using a query.
    */
    public static WikiListHeaderWidth selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<WikiListHeaderWidth> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of WikiListHeaderWidth objects from the database using a query.
    */
    public static List<WikiListHeaderWidth> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<WikiListHeaderWidth> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<WikiListHeaderWidth> tableToList(DataTable table) throws Exception {
        List<WikiListHeaderWidth> retVal = new List<WikiListHeaderWidth>();
        WikiListHeaderWidth wikiListHeaderWidth = new WikiListHeaderWidth();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            wikiListHeaderWidth = new WikiListHeaderWidth();
            wikiListHeaderWidth.WikiListHeaderWidthNum = PIn.Long(table.Rows[i]["WikiListHeaderWidthNum"].ToString());
            wikiListHeaderWidth.ListName = PIn.String(table.Rows[i]["ListName"].ToString());
            wikiListHeaderWidth.ColName = PIn.String(table.Rows[i]["ColName"].ToString());
            wikiListHeaderWidth.ColWidth = PIn.Int(table.Rows[i]["ColWidth"].ToString());
            retVal.Add(wikiListHeaderWidth);
        }
        return retVal;
    }

    /**
    * Inserts one WikiListHeaderWidth into the database.  Returns the new priKey.
    */
    public static long insert(WikiListHeaderWidth wikiListHeaderWidth) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            wikiListHeaderWidth.WikiListHeaderWidthNum = DbHelper.GetNextOracleKey("wikilistheaderwidth", "WikiListHeaderWidthNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(wikiListHeaderWidth,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        wikiListHeaderWidth.WikiListHeaderWidthNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(wikiListHeaderWidth,false);
        } 
    }

    /**
    * Inserts one WikiListHeaderWidth into the database.  Provides option to use the existing priKey.
    */
    public static long insert(WikiListHeaderWidth wikiListHeaderWidth, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            wikiListHeaderWidth.WikiListHeaderWidthNum = ReplicationServers.GetKey("wikilistheaderwidth", "WikiListHeaderWidthNum");
        }
         
        String command = "INSERT INTO wikilistheaderwidth (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "WikiListHeaderWidthNum,";
        }
         
        command += "ListName,ColName,ColWidth) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(wikiListHeaderWidth.WikiListHeaderWidthNum) + ",";
        }
         
        command += "'" + POut.String(wikiListHeaderWidth.ListName) + "'," + "'" + POut.String(wikiListHeaderWidth.ColName) + "'," + POut.Int(wikiListHeaderWidth.ColWidth) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            wikiListHeaderWidth.WikiListHeaderWidthNum = Db.NonQ(command, true);
        } 
        return wikiListHeaderWidth.WikiListHeaderWidthNum;
    }

    /**
    * Updates one WikiListHeaderWidth in the database.
    */
    public static void update(WikiListHeaderWidth wikiListHeaderWidth) throws Exception {
        String command = "UPDATE wikilistheaderwidth SET " + "ListName              = '" + POut.String(wikiListHeaderWidth.ListName) + "', " + "ColName               = '" + POut.String(wikiListHeaderWidth.ColName) + "', " + "ColWidth              =  " + POut.Int(wikiListHeaderWidth.ColWidth) + " " + "WHERE WikiListHeaderWidthNum = " + POut.Long(wikiListHeaderWidth.WikiListHeaderWidthNum);
        Db.NonQ(command);
    }

    /**
    * Updates one WikiListHeaderWidth in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(WikiListHeaderWidth wikiListHeaderWidth, WikiListHeaderWidth oldWikiListHeaderWidth) throws Exception {
        String command = "";
        if (wikiListHeaderWidth.ListName != oldWikiListHeaderWidth.ListName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ListName = '" + POut.String(wikiListHeaderWidth.ListName) + "'";
        }
         
        if (wikiListHeaderWidth.ColName != oldWikiListHeaderWidth.ColName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ColName = '" + POut.String(wikiListHeaderWidth.ColName) + "'";
        }
         
        if (wikiListHeaderWidth.ColWidth != oldWikiListHeaderWidth.ColWidth)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ColWidth = " + POut.Int(wikiListHeaderWidth.ColWidth) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE wikilistheaderwidth SET " + command + " WHERE WikiListHeaderWidthNum = " + POut.Long(wikiListHeaderWidth.WikiListHeaderWidthNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one WikiListHeaderWidth from the database.
    */
    public static void delete(long wikiListHeaderWidthNum) throws Exception {
        String command = "DELETE FROM wikilistheaderwidth " + "WHERE WikiListHeaderWidthNum = " + POut.Long(wikiListHeaderWidthNum);
        Db.NonQ(command);
    }

}


