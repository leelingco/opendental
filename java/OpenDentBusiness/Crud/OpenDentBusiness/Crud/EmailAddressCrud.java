//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:00 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EmailAddressCrud   
{
    /**
    * Gets one EmailAddress object from the database using the primary key.  Returns null if not found.
    */
    public static EmailAddress selectOne(long emailAddressNum) throws Exception {
        String command = "SELECT * FROM emailaddress " + "WHERE EmailAddressNum = " + POut.Long(emailAddressNum);
        List<EmailAddress> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one EmailAddress object from the database using a query.
    */
    public static EmailAddress selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EmailAddress> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of EmailAddress objects from the database using a query.
    */
    public static List<EmailAddress> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EmailAddress> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<EmailAddress> tableToList(DataTable table) throws Exception {
        List<EmailAddress> retVal = new List<EmailAddress>();
        EmailAddress emailAddress = new EmailAddress();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            emailAddress = new EmailAddress();
            emailAddress.EmailAddressNum = PIn.Long(table.Rows[i]["EmailAddressNum"].ToString());
            emailAddress.SMTPserver = PIn.String(table.Rows[i]["SMTPserver"].ToString());
            emailAddress.EmailUsername = PIn.String(table.Rows[i]["EmailUsername"].ToString());
            emailAddress.EmailPassword = PIn.String(table.Rows[i]["EmailPassword"].ToString());
            emailAddress.ServerPort = PIn.Int(table.Rows[i]["ServerPort"].ToString());
            emailAddress.UseSSL = PIn.Bool(table.Rows[i]["UseSSL"].ToString());
            emailAddress.SenderAddress = PIn.String(table.Rows[i]["SenderAddress"].ToString());
            emailAddress.Pop3ServerIncoming = PIn.String(table.Rows[i]["Pop3ServerIncoming"].ToString());
            emailAddress.ServerPortIncoming = PIn.Int(table.Rows[i]["ServerPortIncoming"].ToString());
            retVal.Add(emailAddress);
        }
        return retVal;
    }

    /**
    * Inserts one EmailAddress into the database.  Returns the new priKey.
    */
    public static long insert(EmailAddress emailAddress) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            emailAddress.EmailAddressNum = DbHelper.GetNextOracleKey("emailaddress", "EmailAddressNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(emailAddress,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        emailAddress.EmailAddressNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(emailAddress,false);
        } 
    }

    /**
    * Inserts one EmailAddress into the database.  Provides option to use the existing priKey.
    */
    public static long insert(EmailAddress emailAddress, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            emailAddress.EmailAddressNum = ReplicationServers.GetKey("emailaddress", "EmailAddressNum");
        }
         
        String command = "INSERT INTO emailaddress (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "EmailAddressNum,";
        }
         
        command += "SMTPserver,EmailUsername,EmailPassword,ServerPort,UseSSL,SenderAddress,Pop3ServerIncoming,ServerPortIncoming) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(emailAddress.EmailAddressNum) + ",";
        }
         
        command += "'" + POut.String(emailAddress.SMTPserver) + "'," + "'" + POut.String(emailAddress.EmailUsername) + "'," + "'" + POut.String(emailAddress.EmailPassword) + "'," + POut.Int(emailAddress.ServerPort) + "," + POut.Bool(emailAddress.UseSSL) + "," + "'" + POut.String(emailAddress.SenderAddress) + "'," + "'" + POut.String(emailAddress.Pop3ServerIncoming) + "'," + POut.Int(emailAddress.ServerPortIncoming) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            emailAddress.EmailAddressNum = Db.NonQ(command, true);
        } 
        return emailAddress.EmailAddressNum;
    }

    /**
    * Updates one EmailAddress in the database.
    */
    public static void update(EmailAddress emailAddress) throws Exception {
        String command = "UPDATE emailaddress SET " + "SMTPserver        = '" + POut.String(emailAddress.SMTPserver) + "', " + "EmailUsername     = '" + POut.String(emailAddress.EmailUsername) + "', " + "EmailPassword     = '" + POut.String(emailAddress.EmailPassword) + "', " + "ServerPort        =  " + POut.Int(emailAddress.ServerPort) + ", " + "UseSSL            =  " + POut.Bool(emailAddress.UseSSL) + ", " + "SenderAddress     = '" + POut.String(emailAddress.SenderAddress) + "', " + "Pop3ServerIncoming= '" + POut.String(emailAddress.Pop3ServerIncoming) + "', " + "ServerPortIncoming=  " + POut.Int(emailAddress.ServerPortIncoming) + " " + "WHERE EmailAddressNum = " + POut.Long(emailAddress.EmailAddressNum);
        Db.NonQ(command);
    }

    /**
    * Updates one EmailAddress in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(EmailAddress emailAddress, EmailAddress oldEmailAddress) throws Exception {
        String command = "";
        if (emailAddress.SMTPserver != oldEmailAddress.SMTPserver)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SMTPserver = '" + POut.String(emailAddress.SMTPserver) + "'";
        }
         
        if (emailAddress.EmailUsername != oldEmailAddress.EmailUsername)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EmailUsername = '" + POut.String(emailAddress.EmailUsername) + "'";
        }
         
        if (emailAddress.EmailPassword != oldEmailAddress.EmailPassword)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EmailPassword = '" + POut.String(emailAddress.EmailPassword) + "'";
        }
         
        if (emailAddress.ServerPort != oldEmailAddress.ServerPort)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ServerPort = " + POut.Int(emailAddress.ServerPort) + "";
        }
         
        if (emailAddress.UseSSL != oldEmailAddress.UseSSL)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UseSSL = " + POut.Bool(emailAddress.UseSSL) + "";
        }
         
        if (emailAddress.SenderAddress != oldEmailAddress.SenderAddress)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SenderAddress = '" + POut.String(emailAddress.SenderAddress) + "'";
        }
         
        if (emailAddress.Pop3ServerIncoming != oldEmailAddress.Pop3ServerIncoming)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Pop3ServerIncoming = '" + POut.String(emailAddress.Pop3ServerIncoming) + "'";
        }
         
        if (emailAddress.ServerPortIncoming != oldEmailAddress.ServerPortIncoming)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ServerPortIncoming = " + POut.Int(emailAddress.ServerPortIncoming) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE emailaddress SET " + command + " WHERE EmailAddressNum = " + POut.Long(emailAddress.EmailAddressNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one EmailAddress from the database.
    */
    public static void delete(long emailAddressNum) throws Exception {
        String command = "DELETE FROM emailaddress " + "WHERE EmailAddressNum = " + POut.Long(emailAddressNum);
        Db.NonQ(command);
    }

}


