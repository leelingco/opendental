//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:07 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class SheetDefCrud   
{
    /**
    * Gets one SheetDef object from the database using the primary key.  Returns null if not found.
    */
    public static SheetDef selectOne(long sheetDefNum) throws Exception {
        String command = "SELECT * FROM sheetdef " + "WHERE SheetDefNum = " + POut.Long(sheetDefNum);
        List<SheetDef> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one SheetDef object from the database using a query.
    */
    public static SheetDef selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<SheetDef> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of SheetDef objects from the database using a query.
    */
    public static List<SheetDef> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<SheetDef> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<SheetDef> tableToList(DataTable table) throws Exception {
        List<SheetDef> retVal = new List<SheetDef>();
        SheetDef sheetDef = new SheetDef();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            sheetDef = new SheetDef();
            sheetDef.SheetDefNum = PIn.Long(table.Rows[i]["SheetDefNum"].ToString());
            sheetDef.Description = PIn.String(table.Rows[i]["Description"].ToString());
            sheetDef.SheetType = (SheetTypeEnum)PIn.Int(table.Rows[i]["SheetType"].ToString());
            sheetDef.FontSize = PIn.Float(table.Rows[i]["FontSize"].ToString());
            sheetDef.FontName = PIn.String(table.Rows[i]["FontName"].ToString());
            sheetDef.Width = PIn.Int(table.Rows[i]["Width"].ToString());
            sheetDef.Height = PIn.Int(table.Rows[i]["Height"].ToString());
            sheetDef.IsLandscape = PIn.Bool(table.Rows[i]["IsLandscape"].ToString());
            retVal.Add(sheetDef);
        }
        return retVal;
    }

    /**
    * Inserts one SheetDef into the database.  Returns the new priKey.
    */
    public static long insert(SheetDef sheetDef) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            sheetDef.SheetDefNum = DbHelper.GetNextOracleKey("sheetdef", "SheetDefNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(sheetDef,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        sheetDef.SheetDefNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(sheetDef,false);
        } 
    }

    /**
    * Inserts one SheetDef into the database.  Provides option to use the existing priKey.
    */
    public static long insert(SheetDef sheetDef, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            sheetDef.SheetDefNum = ReplicationServers.GetKey("sheetdef", "SheetDefNum");
        }
         
        String command = "INSERT INTO sheetdef (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "SheetDefNum,";
        }
         
        command += "Description,SheetType,FontSize,FontName,Width,Height,IsLandscape) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(sheetDef.SheetDefNum) + ",";
        }
         
        command += "'" + POut.String(sheetDef.Description) + "'," + POut.Int((int)sheetDef.SheetType) + "," + POut.Float(sheetDef.FontSize) + "," + "'" + POut.String(sheetDef.FontName) + "'," + POut.Int(sheetDef.Width) + "," + POut.Int(sheetDef.Height) + "," + POut.Bool(sheetDef.IsLandscape) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            sheetDef.SheetDefNum = Db.NonQ(command, true);
        } 
        return sheetDef.SheetDefNum;
    }

    /**
    * Updates one SheetDef in the database.
    */
    public static void update(SheetDef sheetDef) throws Exception {
        String command = "UPDATE sheetdef SET " + "Description= '" + POut.String(sheetDef.Description) + "', " + "SheetType  =  " + POut.Int((int)sheetDef.SheetType) + ", " + "FontSize   =  " + POut.Float(sheetDef.FontSize) + ", " + "FontName   = '" + POut.String(sheetDef.FontName) + "', " + "Width      =  " + POut.Int(sheetDef.Width) + ", " + "Height     =  " + POut.Int(sheetDef.Height) + ", " + "IsLandscape=  " + POut.Bool(sheetDef.IsLandscape) + " " + "WHERE SheetDefNum = " + POut.Long(sheetDef.SheetDefNum);
        Db.NonQ(command);
    }

    /**
    * Updates one SheetDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(SheetDef sheetDef, SheetDef oldSheetDef) throws Exception {
        String command = "";
        if (sheetDef.Description != oldSheetDef.Description)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.String(sheetDef.Description) + "'";
        }
         
        if (sheetDef.SheetType != oldSheetDef.SheetType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SheetType = " + POut.Int((int)sheetDef.SheetType) + "";
        }
         
        if (sheetDef.FontSize != oldSheetDef.FontSize)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FontSize = " + POut.Float(sheetDef.FontSize) + "";
        }
         
        if (sheetDef.FontName != oldSheetDef.FontName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FontName = '" + POut.String(sheetDef.FontName) + "'";
        }
         
        if (sheetDef.Width != oldSheetDef.Width)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Width = " + POut.Int(sheetDef.Width) + "";
        }
         
        if (sheetDef.Height != oldSheetDef.Height)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Height = " + POut.Int(sheetDef.Height) + "";
        }
         
        if (sheetDef.IsLandscape != oldSheetDef.IsLandscape)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsLandscape = " + POut.Bool(sheetDef.IsLandscape) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE sheetdef SET " + command + " WHERE SheetDefNum = " + POut.Long(sheetDef.SheetDefNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one SheetDef from the database.
    */
    public static void delete(long sheetDefNum) throws Exception {
        String command = "DELETE FROM sheetdef " + "WHERE SheetDefNum = " + POut.Long(sheetDefNum);
        Db.NonQ(command);
    }

}


