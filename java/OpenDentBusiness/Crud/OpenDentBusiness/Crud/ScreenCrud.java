//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:07 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ScreenCrud   
{
    /**
    * Gets one Screen object from the database using the primary key.  Returns null if not found.
    */
    public static Screen selectOne(long screenNum) throws Exception {
        String command = "SELECT * FROM screen " + "WHERE ScreenNum = " + POut.Long(screenNum);
        List<Screen> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Screen object from the database using a query.
    */
    public static Screen selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Screen> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Screen objects from the database using a query.
    */
    public static List<Screen> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Screen> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Screen> tableToList(DataTable table) throws Exception {
        List<Screen> retVal = new List<Screen>();
        Screen screen = new Screen();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            screen = new Screen();
            screen.ScreenNum = PIn.Long(table.Rows[i]["ScreenNum"].ToString());
            screen.ScreenDate = PIn.Date(table.Rows[i]["ScreenDate"].ToString());
            screen.GradeSchool = PIn.String(table.Rows[i]["GradeSchool"].ToString());
            screen.County = PIn.String(table.Rows[i]["County"].ToString());
            screen.PlaceService = (PlaceOfService)PIn.Int(table.Rows[i]["PlaceService"].ToString());
            screen.ProvNum = PIn.Long(table.Rows[i]["ProvNum"].ToString());
            screen.ProvName = PIn.String(table.Rows[i]["ProvName"].ToString());
            screen.Gender = (PatientGender)PIn.Int(table.Rows[i]["Gender"].ToString());
            screen.Race = (PatientRaceOld)PIn.Int(table.Rows[i]["Race"].ToString());
            screen.GradeLevel = (PatientGrade)PIn.Int(table.Rows[i]["GradeLevel"].ToString());
            screen.Age = PIn.Byte(table.Rows[i]["Age"].ToString());
            screen.Urgency = (TreatmentUrgency)PIn.Int(table.Rows[i]["Urgency"].ToString());
            screen.HasCaries = (YN)PIn.Int(table.Rows[i]["HasCaries"].ToString());
            screen.NeedsSealants = (YN)PIn.Int(table.Rows[i]["NeedsSealants"].ToString());
            screen.CariesExperience = (YN)PIn.Int(table.Rows[i]["CariesExperience"].ToString());
            screen.EarlyChildCaries = (YN)PIn.Int(table.Rows[i]["EarlyChildCaries"].ToString());
            screen.ExistingSealants = (YN)PIn.Int(table.Rows[i]["ExistingSealants"].ToString());
            screen.MissingAllTeeth = (YN)PIn.Int(table.Rows[i]["MissingAllTeeth"].ToString());
            screen.Birthdate = PIn.Date(table.Rows[i]["Birthdate"].ToString());
            screen.ScreenGroupNum = PIn.Long(table.Rows[i]["ScreenGroupNum"].ToString());
            screen.ScreenGroupOrder = PIn.Int(table.Rows[i]["ScreenGroupOrder"].ToString());
            screen.Comments = PIn.String(table.Rows[i]["Comments"].ToString());
            retVal.Add(screen);
        }
        return retVal;
    }

    /**
    * Inserts one Screen into the database.  Returns the new priKey.
    */
    public static long insert(Screen screen) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            screen.ScreenNum = DbHelper.GetNextOracleKey("screen", "ScreenNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(screen,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        screen.ScreenNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(screen,false);
        } 
    }

    /**
    * Inserts one Screen into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Screen screen, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            screen.ScreenNum = ReplicationServers.GetKey("screen", "ScreenNum");
        }
         
        String command = "INSERT INTO screen (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ScreenNum,";
        }
         
        command += "ScreenDate,GradeSchool,County,PlaceService,ProvNum,ProvName,Gender,Race,GradeLevel,Age,Urgency,HasCaries,NeedsSealants,CariesExperience,EarlyChildCaries,ExistingSealants,MissingAllTeeth,Birthdate,ScreenGroupNum,ScreenGroupOrder,Comments) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(screen.ScreenNum) + ",";
        }
         
        command += POut.Date(screen.ScreenDate) + "," + "'" + POut.String(screen.GradeSchool) + "'," + "'" + POut.String(screen.County) + "'," + POut.Int((int)screen.PlaceService) + "," + POut.Long(screen.ProvNum) + "," + "'" + POut.String(screen.ProvName) + "'," + POut.Int((int)screen.Gender) + "," + POut.Int((int)screen.Race) + "," + POut.Int((int)screen.GradeLevel) + "," + POut.Byte(screen.Age) + "," + POut.Int((int)screen.Urgency) + "," + POut.Int((int)screen.HasCaries) + "," + POut.Int((int)screen.NeedsSealants) + "," + POut.Int((int)screen.CariesExperience) + "," + POut.Int((int)screen.EarlyChildCaries) + "," + POut.Int((int)screen.ExistingSealants) + "," + POut.Int((int)screen.MissingAllTeeth) + "," + POut.Date(screen.Birthdate) + "," + POut.Long(screen.ScreenGroupNum) + "," + POut.Int(screen.ScreenGroupOrder) + "," + "'" + POut.String(screen.Comments) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            screen.ScreenNum = Db.NonQ(command, true);
        } 
        return screen.ScreenNum;
    }

    /**
    * Updates one Screen in the database.
    */
    public static void update(Screen screen) throws Exception {
        String command = "UPDATE screen SET " + "ScreenDate      =  " + POut.Date(screen.ScreenDate) + ", " + "GradeSchool     = '" + POut.String(screen.GradeSchool) + "', " + "County          = '" + POut.String(screen.County) + "', " + "PlaceService    =  " + POut.Int((int)screen.PlaceService) + ", " + "ProvNum         =  " + POut.Long(screen.ProvNum) + ", " + "ProvName        = '" + POut.String(screen.ProvName) + "', " + "Gender          =  " + POut.Int((int)screen.Gender) + ", " + "Race            =  " + POut.Int((int)screen.Race) + ", " + "GradeLevel      =  " + POut.Int((int)screen.GradeLevel) + ", " + "Age             =  " + POut.Byte(screen.Age) + ", " + "Urgency         =  " + POut.Int((int)screen.Urgency) + ", " + "HasCaries       =  " + POut.Int((int)screen.HasCaries) + ", " + "NeedsSealants   =  " + POut.Int((int)screen.NeedsSealants) + ", " + "CariesExperience=  " + POut.Int((int)screen.CariesExperience) + ", " + "EarlyChildCaries=  " + POut.Int((int)screen.EarlyChildCaries) + ", " + "ExistingSealants=  " + POut.Int((int)screen.ExistingSealants) + ", " + "MissingAllTeeth =  " + POut.Int((int)screen.MissingAllTeeth) + ", " + "Birthdate       =  " + POut.Date(screen.Birthdate) + ", " + "ScreenGroupNum  =  " + POut.Long(screen.ScreenGroupNum) + ", " + "ScreenGroupOrder=  " + POut.Int(screen.ScreenGroupOrder) + ", " + "Comments        = '" + POut.String(screen.Comments) + "' " + "WHERE ScreenNum = " + POut.Long(screen.ScreenNum);
        Db.NonQ(command);
    }

    /**
    * Updates one Screen in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Screen screen, Screen oldScreen) throws Exception {
        String command = "";
        if (screen.ScreenDate != oldScreen.ScreenDate)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ScreenDate = " + POut.Date(screen.ScreenDate) + "";
        }
         
        if (screen.GradeSchool != oldScreen.GradeSchool)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "GradeSchool = '" + POut.String(screen.GradeSchool) + "'";
        }
         
        if (screen.County != oldScreen.County)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "County = '" + POut.String(screen.County) + "'";
        }
         
        if (screen.PlaceService != oldScreen.PlaceService)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PlaceService = " + POut.Int((int)screen.PlaceService) + "";
        }
         
        if (screen.ProvNum != oldScreen.ProvNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvNum = " + POut.Long(screen.ProvNum) + "";
        }
         
        if (screen.ProvName != oldScreen.ProvName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvName = '" + POut.String(screen.ProvName) + "'";
        }
         
        if (screen.Gender != oldScreen.Gender)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Gender = " + POut.Int((int)screen.Gender) + "";
        }
         
        if (screen.Race != oldScreen.Race)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Race = " + POut.Int((int)screen.Race) + "";
        }
         
        if (screen.GradeLevel != oldScreen.GradeLevel)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "GradeLevel = " + POut.Int((int)screen.GradeLevel) + "";
        }
         
        if (screen.Age != oldScreen.Age)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Age = " + POut.Byte(screen.Age) + "";
        }
         
        if (screen.Urgency != oldScreen.Urgency)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Urgency = " + POut.Int((int)screen.Urgency) + "";
        }
         
        if (screen.HasCaries != oldScreen.HasCaries)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "HasCaries = " + POut.Int((int)screen.HasCaries) + "";
        }
         
        if (screen.NeedsSealants != oldScreen.NeedsSealants)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "NeedsSealants = " + POut.Int((int)screen.NeedsSealants) + "";
        }
         
        if (screen.CariesExperience != oldScreen.CariesExperience)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CariesExperience = " + POut.Int((int)screen.CariesExperience) + "";
        }
         
        if (screen.EarlyChildCaries != oldScreen.EarlyChildCaries)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EarlyChildCaries = " + POut.Int((int)screen.EarlyChildCaries) + "";
        }
         
        if (screen.ExistingSealants != oldScreen.ExistingSealants)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ExistingSealants = " + POut.Int((int)screen.ExistingSealants) + "";
        }
         
        if (screen.MissingAllTeeth != oldScreen.MissingAllTeeth)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MissingAllTeeth = " + POut.Int((int)screen.MissingAllTeeth) + "";
        }
         
        if (screen.Birthdate != oldScreen.Birthdate)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Birthdate = " + POut.Date(screen.Birthdate) + "";
        }
         
        if (screen.ScreenGroupNum != oldScreen.ScreenGroupNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ScreenGroupNum = " + POut.Long(screen.ScreenGroupNum) + "";
        }
         
        if (screen.ScreenGroupOrder != oldScreen.ScreenGroupOrder)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ScreenGroupOrder = " + POut.Int(screen.ScreenGroupOrder) + "";
        }
         
        if (screen.Comments != oldScreen.Comments)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Comments = '" + POut.String(screen.Comments) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE screen SET " + command + " WHERE ScreenNum = " + POut.Long(screen.ScreenNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one Screen from the database.
    */
    public static void delete(long screenNum) throws Exception {
        String command = "DELETE FROM screen " + "WHERE ScreenNum = " + POut.Long(screenNum);
        Db.NonQ(command);
    }

}


