//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:08 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class TerminalActiveCrud   
{
    /**
    * Gets one TerminalActive object from the database using the primary key.  Returns null if not found.
    */
    public static TerminalActive selectOne(long terminalActiveNum) throws Exception {
        String command = "SELECT * FROM terminalactive " + "WHERE TerminalActiveNum = " + POut.Long(terminalActiveNum);
        List<TerminalActive> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one TerminalActive object from the database using a query.
    */
    public static TerminalActive selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<TerminalActive> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of TerminalActive objects from the database using a query.
    */
    public static List<TerminalActive> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<TerminalActive> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<TerminalActive> tableToList(DataTable table) throws Exception {
        List<TerminalActive> retVal = new List<TerminalActive>();
        TerminalActive terminalActive = new TerminalActive();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            terminalActive = new TerminalActive();
            terminalActive.TerminalActiveNum = PIn.Long(table.Rows[i]["TerminalActiveNum"].ToString());
            terminalActive.ComputerName = PIn.String(table.Rows[i]["ComputerName"].ToString());
            terminalActive.TerminalStatus = (TerminalStatusEnum)PIn.Int(table.Rows[i]["TerminalStatus"].ToString());
            terminalActive.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            retVal.Add(terminalActive);
        }
        return retVal;
    }

    /**
    * Inserts one TerminalActive into the database.  Returns the new priKey.
    */
    public static long insert(TerminalActive terminalActive) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            terminalActive.TerminalActiveNum = DbHelper.GetNextOracleKey("terminalactive", "TerminalActiveNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(terminalActive,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        terminalActive.TerminalActiveNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(terminalActive,false);
        } 
    }

    /**
    * Inserts one TerminalActive into the database.  Provides option to use the existing priKey.
    */
    public static long insert(TerminalActive terminalActive, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            terminalActive.TerminalActiveNum = ReplicationServers.GetKey("terminalactive", "TerminalActiveNum");
        }
         
        String command = "INSERT INTO terminalactive (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "TerminalActiveNum,";
        }
         
        command += "ComputerName,TerminalStatus,PatNum) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(terminalActive.TerminalActiveNum) + ",";
        }
         
        command += "'" + POut.String(terminalActive.ComputerName) + "'," + POut.Int((int)terminalActive.TerminalStatus) + "," + POut.Long(terminalActive.PatNum) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            terminalActive.TerminalActiveNum = Db.NonQ(command, true);
        } 
        return terminalActive.TerminalActiveNum;
    }

    /**
    * Updates one TerminalActive in the database.
    */
    public static void update(TerminalActive terminalActive) throws Exception {
        String command = "UPDATE terminalactive SET " + "ComputerName     = '" + POut.String(terminalActive.ComputerName) + "', " + "TerminalStatus   =  " + POut.Int((int)terminalActive.TerminalStatus) + ", " + "PatNum           =  " + POut.Long(terminalActive.PatNum) + " " + "WHERE TerminalActiveNum = " + POut.Long(terminalActive.TerminalActiveNum);
        Db.NonQ(command);
    }

    /**
    * Updates one TerminalActive in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(TerminalActive terminalActive, TerminalActive oldTerminalActive) throws Exception {
        String command = "";
        if (terminalActive.ComputerName != oldTerminalActive.ComputerName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ComputerName = '" + POut.String(terminalActive.ComputerName) + "'";
        }
         
        if (terminalActive.TerminalStatus != oldTerminalActive.TerminalStatus)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "TerminalStatus = " + POut.Int((int)terminalActive.TerminalStatus) + "";
        }
         
        if (terminalActive.PatNum != oldTerminalActive.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(terminalActive.PatNum) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE terminalactive SET " + command + " WHERE TerminalActiveNum = " + POut.Long(terminalActive.TerminalActiveNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one TerminalActive from the database.
    */
    public static void delete(long terminalActiveNum) throws Exception {
        String command = "DELETE FROM terminalactive " + "WHERE TerminalActiveNum = " + POut.Long(terminalActiveNum);
        Db.NonQ(command);
    }

}


