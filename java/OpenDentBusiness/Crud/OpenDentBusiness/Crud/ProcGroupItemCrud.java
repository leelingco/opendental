//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:05 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ProcGroupItemCrud   
{
    /**
    * Gets one ProcGroupItem object from the database using the primary key.  Returns null if not found.
    */
    public static ProcGroupItem selectOne(long procGroupItemNum) throws Exception {
        String command = "SELECT * FROM procgroupitem " + "WHERE ProcGroupItemNum = " + POut.Long(procGroupItemNum);
        List<ProcGroupItem> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ProcGroupItem object from the database using a query.
    */
    public static ProcGroupItem selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ProcGroupItem> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ProcGroupItem objects from the database using a query.
    */
    public static List<ProcGroupItem> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ProcGroupItem> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ProcGroupItem> tableToList(DataTable table) throws Exception {
        List<ProcGroupItem> retVal = new List<ProcGroupItem>();
        ProcGroupItem procGroupItem = new ProcGroupItem();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            procGroupItem = new ProcGroupItem();
            procGroupItem.ProcGroupItemNum = PIn.Long(table.Rows[i]["ProcGroupItemNum"].ToString());
            procGroupItem.ProcNum = PIn.Long(table.Rows[i]["ProcNum"].ToString());
            procGroupItem.GroupNum = PIn.Long(table.Rows[i]["GroupNum"].ToString());
            retVal.Add(procGroupItem);
        }
        return retVal;
    }

    /**
    * Inserts one ProcGroupItem into the database.  Returns the new priKey.
    */
    public static long insert(ProcGroupItem procGroupItem) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            procGroupItem.ProcGroupItemNum = DbHelper.GetNextOracleKey("procgroupitem", "ProcGroupItemNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(procGroupItem,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        procGroupItem.ProcGroupItemNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(procGroupItem,false);
        } 
    }

    /**
    * Inserts one ProcGroupItem into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ProcGroupItem procGroupItem, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            procGroupItem.ProcGroupItemNum = ReplicationServers.GetKey("procgroupitem", "ProcGroupItemNum");
        }
         
        String command = "INSERT INTO procgroupitem (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ProcGroupItemNum,";
        }
         
        command += "ProcNum,GroupNum) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(procGroupItem.ProcGroupItemNum) + ",";
        }
         
        command += POut.Long(procGroupItem.ProcNum) + "," + POut.Long(procGroupItem.GroupNum) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            procGroupItem.ProcGroupItemNum = Db.NonQ(command, true);
        } 
        return procGroupItem.ProcGroupItemNum;
    }

    /**
    * Updates one ProcGroupItem in the database.
    */
    public static void update(ProcGroupItem procGroupItem) throws Exception {
        String command = "UPDATE procgroupitem SET " + "ProcNum         =  " + POut.Long(procGroupItem.ProcNum) + ", " + "GroupNum        =  " + POut.Long(procGroupItem.GroupNum) + " " + "WHERE ProcGroupItemNum = " + POut.Long(procGroupItem.ProcGroupItemNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ProcGroupItem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ProcGroupItem procGroupItem, ProcGroupItem oldProcGroupItem) throws Exception {
        String command = "";
        if (procGroupItem.ProcNum != oldProcGroupItem.ProcNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProcNum = " + POut.Long(procGroupItem.ProcNum) + "";
        }
         
        if (procGroupItem.GroupNum != oldProcGroupItem.GroupNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "GroupNum = " + POut.Long(procGroupItem.GroupNum) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE procgroupitem SET " + command + " WHERE ProcGroupItemNum = " + POut.Long(procGroupItem.ProcGroupItemNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ProcGroupItem from the database.
    */
    public static void delete(long procGroupItemNum) throws Exception {
        String command = "DELETE FROM procgroupitem " + "WHERE ProcGroupItemNum = " + POut.Long(procGroupItemNum);
        Db.NonQ(command);
    }

}


