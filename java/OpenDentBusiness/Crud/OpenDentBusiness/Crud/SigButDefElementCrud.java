//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:07 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class SigButDefElementCrud   
{
    /**
    * Gets one SigButDefElement object from the database using the primary key.  Returns null if not found.
    */
    public static SigButDefElement selectOne(long elementNum) throws Exception {
        String command = "SELECT * FROM sigbutdefelement " + "WHERE ElementNum = " + POut.Long(elementNum);
        List<SigButDefElement> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one SigButDefElement object from the database using a query.
    */
    public static SigButDefElement selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<SigButDefElement> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of SigButDefElement objects from the database using a query.
    */
    public static List<SigButDefElement> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<SigButDefElement> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<SigButDefElement> tableToList(DataTable table) throws Exception {
        List<SigButDefElement> retVal = new List<SigButDefElement>();
        SigButDefElement sigButDefElement = new SigButDefElement();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            sigButDefElement = new SigButDefElement();
            sigButDefElement.ElementNum = PIn.Long(table.Rows[i]["ElementNum"].ToString());
            sigButDefElement.SigButDefNum = PIn.Long(table.Rows[i]["SigButDefNum"].ToString());
            sigButDefElement.SigElementDefNum = PIn.Long(table.Rows[i]["SigElementDefNum"].ToString());
            retVal.Add(sigButDefElement);
        }
        return retVal;
    }

    /**
    * Inserts one SigButDefElement into the database.  Returns the new priKey.
    */
    public static long insert(SigButDefElement sigButDefElement) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            sigButDefElement.ElementNum = DbHelper.GetNextOracleKey("sigbutdefelement", "ElementNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(sigButDefElement,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        sigButDefElement.ElementNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(sigButDefElement,false);
        } 
    }

    /**
    * Inserts one SigButDefElement into the database.  Provides option to use the existing priKey.
    */
    public static long insert(SigButDefElement sigButDefElement, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            sigButDefElement.ElementNum = ReplicationServers.GetKey("sigbutdefelement", "ElementNum");
        }
         
        String command = "INSERT INTO sigbutdefelement (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ElementNum,";
        }
         
        command += "SigButDefNum,SigElementDefNum) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(sigButDefElement.ElementNum) + ",";
        }
         
        command += POut.Long(sigButDefElement.SigButDefNum) + "," + POut.Long(sigButDefElement.SigElementDefNum) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            sigButDefElement.ElementNum = Db.NonQ(command, true);
        } 
        return sigButDefElement.ElementNum;
    }

    /**
    * Updates one SigButDefElement in the database.
    */
    public static void update(SigButDefElement sigButDefElement) throws Exception {
        String command = "UPDATE sigbutdefelement SET " + "SigButDefNum    =  " + POut.Long(sigButDefElement.SigButDefNum) + ", " + "SigElementDefNum=  " + POut.Long(sigButDefElement.SigElementDefNum) + " " + "WHERE ElementNum = " + POut.Long(sigButDefElement.ElementNum);
        Db.NonQ(command);
    }

    /**
    * Updates one SigButDefElement in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(SigButDefElement sigButDefElement, SigButDefElement oldSigButDefElement) throws Exception {
        String command = "";
        if (sigButDefElement.SigButDefNum != oldSigButDefElement.SigButDefNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SigButDefNum = " + POut.Long(sigButDefElement.SigButDefNum) + "";
        }
         
        if (sigButDefElement.SigElementDefNum != oldSigButDefElement.SigElementDefNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SigElementDefNum = " + POut.Long(sigButDefElement.SigElementDefNum) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE sigbutdefelement SET " + command + " WHERE ElementNum = " + POut.Long(sigButDefElement.ElementNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one SigButDefElement from the database.
    */
    public static void delete(long elementNum) throws Exception {
        String command = "DELETE FROM sigbutdefelement " + "WHERE ElementNum = " + POut.Long(elementNum);
        Db.NonQ(command);
    }

}


