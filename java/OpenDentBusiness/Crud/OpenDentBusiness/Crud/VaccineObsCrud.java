//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:09 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class VaccineObsCrud   
{
    /**
    * Gets one VaccineObs object from the database using the primary key.  Returns null if not found.
    */
    public static VaccineObs selectOne(long vaccineObsNum) throws Exception {
        String command = "SELECT * FROM vaccineobs " + "WHERE VaccineObsNum = " + POut.Long(vaccineObsNum);
        List<VaccineObs> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one VaccineObs object from the database using a query.
    */
    public static VaccineObs selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<VaccineObs> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of VaccineObs objects from the database using a query.
    */
    public static List<VaccineObs> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<VaccineObs> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<VaccineObs> tableToList(DataTable table) throws Exception {
        List<VaccineObs> retVal = new List<VaccineObs>();
        VaccineObs vaccineObs = new VaccineObs();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            vaccineObs = new VaccineObs();
            vaccineObs.VaccineObsNum = PIn.Long(table.Rows[i]["VaccineObsNum"].ToString());
            vaccineObs.VaccinePatNum = PIn.Long(table.Rows[i]["VaccinePatNum"].ToString());
            vaccineObs.ValType = (VaccineObsType)PIn.Int(table.Rows[i]["ValType"].ToString());
            vaccineObs.IdentifyingCode = (VaccineObsIdentifier)PIn.Int(table.Rows[i]["IdentifyingCode"].ToString());
            vaccineObs.ValReported = PIn.String(table.Rows[i]["ValReported"].ToString());
            vaccineObs.ValCodeSystem = (VaccineObsValCodeSystem)PIn.Int(table.Rows[i]["ValCodeSystem"].ToString());
            vaccineObs.VaccineObsNumGroup = PIn.Long(table.Rows[i]["VaccineObsNumGroup"].ToString());
            vaccineObs.UcumCode = PIn.String(table.Rows[i]["UcumCode"].ToString());
            vaccineObs.DateObs = PIn.Date(table.Rows[i]["DateObs"].ToString());
            vaccineObs.MethodCode = PIn.String(table.Rows[i]["MethodCode"].ToString());
            retVal.Add(vaccineObs);
        }
        return retVal;
    }

    /**
    * Inserts one VaccineObs into the database.  Returns the new priKey.
    */
    public static long insert(VaccineObs vaccineObs) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            vaccineObs.VaccineObsNum = DbHelper.GetNextOracleKey("vaccineobs", "VaccineObsNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(vaccineObs,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        vaccineObs.VaccineObsNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(vaccineObs,false);
        } 
    }

    /**
    * Inserts one VaccineObs into the database.  Provides option to use the existing priKey.
    */
    public static long insert(VaccineObs vaccineObs, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            vaccineObs.VaccineObsNum = ReplicationServers.GetKey("vaccineobs", "VaccineObsNum");
        }
         
        String command = "INSERT INTO vaccineobs (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "VaccineObsNum,";
        }
         
        command += "VaccinePatNum,ValType,IdentifyingCode,ValReported,ValCodeSystem,VaccineObsNumGroup,UcumCode,DateObs,MethodCode) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(vaccineObs.VaccineObsNum) + ",";
        }
         
        command += POut.Long(vaccineObs.VaccinePatNum) + "," + POut.Int((int)vaccineObs.ValType) + "," + POut.Int((int)vaccineObs.IdentifyingCode) + "," + "'" + POut.String(vaccineObs.ValReported) + "'," + POut.Int((int)vaccineObs.ValCodeSystem) + "," + POut.Long(vaccineObs.VaccineObsNumGroup) + "," + "'" + POut.String(vaccineObs.UcumCode) + "'," + POut.Date(vaccineObs.DateObs) + "," + "'" + POut.String(vaccineObs.MethodCode) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            vaccineObs.VaccineObsNum = Db.NonQ(command, true);
        } 
        return vaccineObs.VaccineObsNum;
    }

    /**
    * Updates one VaccineObs in the database.
    */
    public static void update(VaccineObs vaccineObs) throws Exception {
        String command = "UPDATE vaccineobs SET " + "VaccinePatNum     =  " + POut.Long(vaccineObs.VaccinePatNum) + ", " + "ValType           =  " + POut.Int((int)vaccineObs.ValType) + ", " + "IdentifyingCode   =  " + POut.Int((int)vaccineObs.IdentifyingCode) + ", " + "ValReported       = '" + POut.String(vaccineObs.ValReported) + "', " + "ValCodeSystem     =  " + POut.Int((int)vaccineObs.ValCodeSystem) + ", " + "VaccineObsNumGroup=  " + POut.Long(vaccineObs.VaccineObsNumGroup) + ", " + "UcumCode          = '" + POut.String(vaccineObs.UcumCode) + "', " + "DateObs           =  " + POut.Date(vaccineObs.DateObs) + ", " + "MethodCode        = '" + POut.String(vaccineObs.MethodCode) + "' " + "WHERE VaccineObsNum = " + POut.Long(vaccineObs.VaccineObsNum);
        Db.NonQ(command);
    }

    /**
    * Updates one VaccineObs in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(VaccineObs vaccineObs, VaccineObs oldVaccineObs) throws Exception {
        String command = "";
        if (vaccineObs.VaccinePatNum != oldVaccineObs.VaccinePatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "VaccinePatNum = " + POut.Long(vaccineObs.VaccinePatNum) + "";
        }
         
        if (vaccineObs.ValType != oldVaccineObs.ValType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ValType = " + POut.Int((int)vaccineObs.ValType) + "";
        }
         
        if (vaccineObs.IdentifyingCode != oldVaccineObs.IdentifyingCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IdentifyingCode = " + POut.Int((int)vaccineObs.IdentifyingCode) + "";
        }
         
        if (vaccineObs.ValReported != oldVaccineObs.ValReported)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ValReported = '" + POut.String(vaccineObs.ValReported) + "'";
        }
         
        if (vaccineObs.ValCodeSystem != oldVaccineObs.ValCodeSystem)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ValCodeSystem = " + POut.Int((int)vaccineObs.ValCodeSystem) + "";
        }
         
        if (vaccineObs.VaccineObsNumGroup != oldVaccineObs.VaccineObsNumGroup)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "VaccineObsNumGroup = " + POut.Long(vaccineObs.VaccineObsNumGroup) + "";
        }
         
        if (vaccineObs.UcumCode != oldVaccineObs.UcumCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UcumCode = '" + POut.String(vaccineObs.UcumCode) + "'";
        }
         
        if (vaccineObs.DateObs != oldVaccineObs.DateObs)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateObs = " + POut.Date(vaccineObs.DateObs) + "";
        }
         
        if (vaccineObs.MethodCode != oldVaccineObs.MethodCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MethodCode = '" + POut.String(vaccineObs.MethodCode) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE vaccineobs SET " + command + " WHERE VaccineObsNum = " + POut.Long(vaccineObs.VaccineObsNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one VaccineObs from the database.
    */
    public static void delete(long vaccineObsNum) throws Exception {
        String command = "DELETE FROM vaccineobs " + "WHERE VaccineObsNum = " + POut.Long(vaccineObsNum);
        Db.NonQ(command);
    }

}


