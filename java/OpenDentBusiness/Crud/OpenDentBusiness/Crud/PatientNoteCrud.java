//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:03 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class PatientNoteCrud   
{
    /**
    * Gets one PatientNote object from the database using the primary key.  Returns null if not found.
    */
    public static PatientNote selectOne(long patNum) throws Exception {
        String command = "SELECT * FROM patientnote " + "WHERE PatNum = " + POut.Long(patNum);
        List<PatientNote> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one PatientNote object from the database using a query.
    */
    public static PatientNote selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PatientNote> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of PatientNote objects from the database using a query.
    */
    public static List<PatientNote> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PatientNote> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<PatientNote> tableToList(DataTable table) throws Exception {
        List<PatientNote> retVal = new List<PatientNote>();
        PatientNote patientNote = new PatientNote();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            patientNote = new PatientNote();
            patientNote.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            patientNote.FamFinancial = PIn.String(table.Rows[i]["FamFinancial"].ToString());
            patientNote.ApptPhone = PIn.String(table.Rows[i]["ApptPhone"].ToString());
            patientNote.Medical = PIn.String(table.Rows[i]["Medical"].ToString());
            patientNote.Service = PIn.String(table.Rows[i]["Service"].ToString());
            patientNote.MedicalComp = PIn.String(table.Rows[i]["MedicalComp"].ToString());
            patientNote.Treatment = PIn.String(table.Rows[i]["Treatment"].ToString());
            retVal.Add(patientNote);
        }
        return retVal;
    }

    /**
    * Inserts one PatientNote into the database.  Returns the new priKey.
    */
    public static long insert(PatientNote patientNote) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            patientNote.PatNum = DbHelper.GetNextOracleKey("patientnote", "PatNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(patientNote,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        patientNote.PatNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(patientNote,false);
        } 
    }

    /**
    * Inserts one PatientNote into the database.  Provides option to use the existing priKey.
    */
    public static long insert(PatientNote patientNote, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            patientNote.PatNum = ReplicationServers.GetKey("patientnote", "PatNum");
        }
         
        String command = "INSERT INTO patientnote (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "PatNum,";
        }
         
        command += "FamFinancial,ApptPhone,Medical,Service,MedicalComp,Treatment) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(patientNote.PatNum) + ",";
        }
         
        command += "'" + POut.String(patientNote.FamFinancial) + "'," + "'" + POut.String(patientNote.ApptPhone) + "'," + "'" + POut.String(patientNote.Medical) + "'," + "'" + POut.String(patientNote.Service) + "'," + DbHelper.ParamChar + "paramMedicalComp," + "'" + POut.String(patientNote.Treatment) + "')";
        if (patientNote.MedicalComp == null)
        {
            patientNote.MedicalComp = "";
        }
         
        OdSqlParameter paramMedicalComp = new OdSqlParameter("paramMedicalComp", OdDbType.Text, patientNote.MedicalComp);
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command, paramMedicalComp);
        }
        else
        {
            patientNote.PatNum = Db.NonQ(command, true, paramMedicalComp);
        } 
        return patientNote.PatNum;
    }

    /**
    * Updates one PatientNote in the database.
    */
    public static void update(PatientNote patientNote) throws Exception {
        //FamFinancial excluded from update
        String command = "UPDATE patientnote SET " + "ApptPhone   = '" + POut.String(patientNote.ApptPhone) + "', " + "Medical     = '" + POut.String(patientNote.Medical) + "', " + "Service     = '" + POut.String(patientNote.Service) + "', " + "MedicalComp =  " + DbHelper.ParamChar + "paramMedicalComp, " + "Treatment   = '" + POut.String(patientNote.Treatment) + "' " + "WHERE PatNum = " + POut.Long(patientNote.PatNum);
        if (patientNote.MedicalComp == null)
        {
            patientNote.MedicalComp = "";
        }
         
        OdSqlParameter paramMedicalComp = new OdSqlParameter("paramMedicalComp", OdDbType.Text, patientNote.MedicalComp);
        Db.NonQ(command, paramMedicalComp);
    }

    /**
    * Updates one PatientNote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(PatientNote patientNote, PatientNote oldPatientNote) throws Exception {
        String command = "";
        //FamFinancial excluded from update
        if (patientNote.ApptPhone != oldPatientNote.ApptPhone)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ApptPhone = '" + POut.String(patientNote.ApptPhone) + "'";
        }
         
        if (patientNote.Medical != oldPatientNote.Medical)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Medical = '" + POut.String(patientNote.Medical) + "'";
        }
         
        if (patientNote.Service != oldPatientNote.Service)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Service = '" + POut.String(patientNote.Service) + "'";
        }
         
        if (patientNote.MedicalComp != oldPatientNote.MedicalComp)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MedicalComp = " + DbHelper.ParamChar + "paramMedicalComp";
        }
         
        if (patientNote.Treatment != oldPatientNote.Treatment)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Treatment = '" + POut.String(patientNote.Treatment) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        if (patientNote.MedicalComp == null)
        {
            patientNote.MedicalComp = "";
        }
         
        OdSqlParameter paramMedicalComp = new OdSqlParameter("paramMedicalComp", OdDbType.Text, patientNote.MedicalComp);
        command = "UPDATE patientnote SET " + command + " WHERE PatNum = " + POut.Long(patientNote.PatNum);
        Db.NonQ(command, paramMedicalComp);
    }

    /**
    * Deletes one PatientNote from the database.
    */
    public static void delete(long patNum) throws Exception {
        String command = "DELETE FROM patientnote " + "WHERE PatNum = " + POut.Long(patNum);
        Db.NonQ(command);
    }

}


