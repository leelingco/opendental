//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:08 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ToothGridCellCrud   
{
    /**
    * Gets one ToothGridCell object from the database using the primary key.  Returns null if not found.
    */
    public static ToothGridCell selectOne(long toothGridCellNum) throws Exception {
        String command = "SELECT * FROM toothgridcell " + "WHERE ToothGridCellNum = " + POut.Long(toothGridCellNum);
        List<ToothGridCell> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ToothGridCell object from the database using a query.
    */
    public static ToothGridCell selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ToothGridCell> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ToothGridCell objects from the database using a query.
    */
    public static List<ToothGridCell> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ToothGridCell> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ToothGridCell> tableToList(DataTable table) throws Exception {
        List<ToothGridCell> retVal = new List<ToothGridCell>();
        ToothGridCell toothGridCell = new ToothGridCell();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            toothGridCell = new ToothGridCell();
            toothGridCell.ToothGridCellNum = PIn.Long(table.Rows[i]["ToothGridCellNum"].ToString());
            toothGridCell.SheetFieldNum = PIn.Long(table.Rows[i]["SheetFieldNum"].ToString());
            toothGridCell.ToothGridColNum = PIn.Long(table.Rows[i]["ToothGridColNum"].ToString());
            toothGridCell.ValueEntered = PIn.String(table.Rows[i]["ValueEntered"].ToString());
            toothGridCell.ToothNum = PIn.String(table.Rows[i]["ToothNum"].ToString());
            retVal.Add(toothGridCell);
        }
        return retVal;
    }

    /**
    * Inserts one ToothGridCell into the database.  Returns the new priKey.
    */
    public static long insert(ToothGridCell toothGridCell) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            toothGridCell.ToothGridCellNum = DbHelper.GetNextOracleKey("toothgridcell", "ToothGridCellNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(toothGridCell,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        toothGridCell.ToothGridCellNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(toothGridCell,false);
        } 
    }

    /**
    * Inserts one ToothGridCell into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ToothGridCell toothGridCell, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            toothGridCell.ToothGridCellNum = ReplicationServers.GetKey("toothgridcell", "ToothGridCellNum");
        }
         
        String command = "INSERT INTO toothgridcell (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ToothGridCellNum,";
        }
         
        command += "SheetFieldNum,ToothGridColNum,ValueEntered,ToothNum) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(toothGridCell.ToothGridCellNum) + ",";
        }
         
        command += POut.Long(toothGridCell.SheetFieldNum) + "," + POut.Long(toothGridCell.ToothGridColNum) + "," + "'" + POut.String(toothGridCell.ValueEntered) + "'," + "'" + POut.String(toothGridCell.ToothNum) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            toothGridCell.ToothGridCellNum = Db.NonQ(command, true);
        } 
        return toothGridCell.ToothGridCellNum;
    }

    /**
    * Updates one ToothGridCell in the database.
    */
    public static void update(ToothGridCell toothGridCell) throws Exception {
        String command = "UPDATE toothgridcell SET " + "SheetFieldNum   =  " + POut.Long(toothGridCell.SheetFieldNum) + ", " + "ToothGridColNum =  " + POut.Long(toothGridCell.ToothGridColNum) + ", " + "ValueEntered    = '" + POut.String(toothGridCell.ValueEntered) + "', " + "ToothNum        = '" + POut.String(toothGridCell.ToothNum) + "' " + "WHERE ToothGridCellNum = " + POut.Long(toothGridCell.ToothGridCellNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ToothGridCell in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ToothGridCell toothGridCell, ToothGridCell oldToothGridCell) throws Exception {
        String command = "";
        if (toothGridCell.SheetFieldNum != oldToothGridCell.SheetFieldNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SheetFieldNum = " + POut.Long(toothGridCell.SheetFieldNum) + "";
        }
         
        if (toothGridCell.ToothGridColNum != oldToothGridCell.ToothGridColNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ToothGridColNum = " + POut.Long(toothGridCell.ToothGridColNum) + "";
        }
         
        if (toothGridCell.ValueEntered != oldToothGridCell.ValueEntered)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ValueEntered = '" + POut.String(toothGridCell.ValueEntered) + "'";
        }
         
        if (toothGridCell.ToothNum != oldToothGridCell.ToothNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ToothNum = '" + POut.String(toothGridCell.ToothNum) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE toothgridcell SET " + command + " WHERE ToothGridCellNum = " + POut.Long(toothGridCell.ToothGridCellNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ToothGridCell from the database.
    */
    public static void delete(long toothGridCellNum) throws Exception {
        String command = "DELETE FROM toothgridcell " + "WHERE ToothGridCellNum = " + POut.Long(toothGridCellNum);
        Db.NonQ(command);
    }

}


