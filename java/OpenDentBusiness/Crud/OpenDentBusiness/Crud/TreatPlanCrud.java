//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:08 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class TreatPlanCrud   
{
    /**
    * Gets one TreatPlan object from the database using the primary key.  Returns null if not found.
    */
    public static TreatPlan selectOne(long treatPlanNum) throws Exception {
        String command = "SELECT * FROM treatplan " + "WHERE TreatPlanNum = " + POut.Long(treatPlanNum);
        List<TreatPlan> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one TreatPlan object from the database using a query.
    */
    public static TreatPlan selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<TreatPlan> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of TreatPlan objects from the database using a query.
    */
    public static List<TreatPlan> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<TreatPlan> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<TreatPlan> tableToList(DataTable table) throws Exception {
        List<TreatPlan> retVal = new List<TreatPlan>();
        TreatPlan treatPlan = new TreatPlan();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            treatPlan = new TreatPlan();
            treatPlan.TreatPlanNum = PIn.Long(table.Rows[i]["TreatPlanNum"].ToString());
            treatPlan.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            treatPlan.DateTP = PIn.Date(table.Rows[i]["DateTP"].ToString());
            treatPlan.Heading = PIn.String(table.Rows[i]["Heading"].ToString());
            treatPlan.Note = PIn.String(table.Rows[i]["Note"].ToString());
            treatPlan.Signature = PIn.String(table.Rows[i]["Signature"].ToString());
            treatPlan.SigIsTopaz = PIn.Bool(table.Rows[i]["SigIsTopaz"].ToString());
            treatPlan.ResponsParty = PIn.Long(table.Rows[i]["ResponsParty"].ToString());
            retVal.Add(treatPlan);
        }
        return retVal;
    }

    /**
    * Inserts one TreatPlan into the database.  Returns the new priKey.
    */
    public static long insert(TreatPlan treatPlan) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            treatPlan.TreatPlanNum = DbHelper.GetNextOracleKey("treatplan", "TreatPlanNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(treatPlan,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        treatPlan.TreatPlanNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(treatPlan,false);
        } 
    }

    /**
    * Inserts one TreatPlan into the database.  Provides option to use the existing priKey.
    */
    public static long insert(TreatPlan treatPlan, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            treatPlan.TreatPlanNum = ReplicationServers.GetKey("treatplan", "TreatPlanNum");
        }
         
        String command = "INSERT INTO treatplan (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "TreatPlanNum,";
        }
         
        command += "PatNum,DateTP,Heading,Note,Signature,SigIsTopaz,ResponsParty) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(treatPlan.TreatPlanNum) + ",";
        }
         
        command += POut.Long(treatPlan.PatNum) + "," + POut.Date(treatPlan.DateTP) + "," + "'" + POut.String(treatPlan.Heading) + "'," + "'" + POut.String(treatPlan.Note) + "'," + "'" + POut.String(treatPlan.Signature) + "'," + POut.Bool(treatPlan.SigIsTopaz) + "," + POut.Long(treatPlan.ResponsParty) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            treatPlan.TreatPlanNum = Db.NonQ(command, true);
        } 
        return treatPlan.TreatPlanNum;
    }

    /**
    * Updates one TreatPlan in the database.
    */
    public static void update(TreatPlan treatPlan) throws Exception {
        String command = "UPDATE treatplan SET " + "PatNum      =  " + POut.Long(treatPlan.PatNum) + ", " + "DateTP      =  " + POut.Date(treatPlan.DateTP) + ", " + "Heading     = '" + POut.String(treatPlan.Heading) + "', " + "Note        = '" + POut.String(treatPlan.Note) + "', " + "Signature   = '" + POut.String(treatPlan.Signature) + "', " + "SigIsTopaz  =  " + POut.Bool(treatPlan.SigIsTopaz) + ", " + "ResponsParty=  " + POut.Long(treatPlan.ResponsParty) + " " + "WHERE TreatPlanNum = " + POut.Long(treatPlan.TreatPlanNum);
        Db.NonQ(command);
    }

    /**
    * Updates one TreatPlan in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(TreatPlan treatPlan, TreatPlan oldTreatPlan) throws Exception {
        String command = "";
        if (treatPlan.PatNum != oldTreatPlan.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(treatPlan.PatNum) + "";
        }
         
        if (treatPlan.DateTP != oldTreatPlan.DateTP)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTP = " + POut.Date(treatPlan.DateTP) + "";
        }
         
        if (treatPlan.Heading != oldTreatPlan.Heading)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Heading = '" + POut.String(treatPlan.Heading) + "'";
        }
         
        if (treatPlan.Note != oldTreatPlan.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(treatPlan.Note) + "'";
        }
         
        if (treatPlan.Signature != oldTreatPlan.Signature)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Signature = '" + POut.String(treatPlan.Signature) + "'";
        }
         
        if (treatPlan.SigIsTopaz != oldTreatPlan.SigIsTopaz)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SigIsTopaz = " + POut.Bool(treatPlan.SigIsTopaz) + "";
        }
         
        if (treatPlan.ResponsParty != oldTreatPlan.ResponsParty)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ResponsParty = " + POut.Long(treatPlan.ResponsParty) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE treatplan SET " + command + " WHERE TreatPlanNum = " + POut.Long(treatPlan.TreatPlanNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one TreatPlan from the database.
    */
    public static void delete(long treatPlanNum) throws Exception {
        String command = "DELETE FROM treatplan " + "WHERE TreatPlanNum = " + POut.Long(treatPlanNum);
        Db.NonQ(command);
    }

}


