//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:56 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class AutoNoteCrud   
{
    /**
    * Gets one AutoNote object from the database using the primary key.  Returns null if not found.
    */
    public static AutoNote selectOne(long autoNoteNum) throws Exception {
        String command = "SELECT * FROM autonote " + "WHERE AutoNoteNum = " + POut.Long(autoNoteNum);
        List<AutoNote> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one AutoNote object from the database using a query.
    */
    public static AutoNote selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<AutoNote> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of AutoNote objects from the database using a query.
    */
    public static List<AutoNote> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<AutoNote> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<AutoNote> tableToList(DataTable table) throws Exception {
        List<AutoNote> retVal = new List<AutoNote>();
        AutoNote autoNote = new AutoNote();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            autoNote = new AutoNote();
            autoNote.AutoNoteNum = PIn.Long(table.Rows[i]["AutoNoteNum"].ToString());
            autoNote.AutoNoteName = PIn.String(table.Rows[i]["AutoNoteName"].ToString());
            autoNote.MainText = PIn.String(table.Rows[i]["MainText"].ToString());
            retVal.Add(autoNote);
        }
        return retVal;
    }

    /**
    * Inserts one AutoNote into the database.  Returns the new priKey.
    */
    public static long insert(AutoNote autoNote) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            autoNote.AutoNoteNum = DbHelper.GetNextOracleKey("autonote", "AutoNoteNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(autoNote,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        autoNote.AutoNoteNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(autoNote,false);
        } 
    }

    /**
    * Inserts one AutoNote into the database.  Provides option to use the existing priKey.
    */
    public static long insert(AutoNote autoNote, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            autoNote.AutoNoteNum = ReplicationServers.GetKey("autonote", "AutoNoteNum");
        }
         
        String command = "INSERT INTO autonote (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "AutoNoteNum,";
        }
         
        command += "AutoNoteName,MainText) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(autoNote.AutoNoteNum) + ",";
        }
         
        command += "'" + POut.String(autoNote.AutoNoteName) + "'," + "'" + POut.String(autoNote.MainText) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            autoNote.AutoNoteNum = Db.NonQ(command, true);
        } 
        return autoNote.AutoNoteNum;
    }

    /**
    * Updates one AutoNote in the database.
    */
    public static void update(AutoNote autoNote) throws Exception {
        String command = "UPDATE autonote SET " + "AutoNoteName= '" + POut.String(autoNote.AutoNoteName) + "', " + "MainText    = '" + POut.String(autoNote.MainText) + "' " + "WHERE AutoNoteNum = " + POut.Long(autoNote.AutoNoteNum);
        Db.NonQ(command);
    }

    /**
    * Updates one AutoNote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(AutoNote autoNote, AutoNote oldAutoNote) throws Exception {
        String command = "";
        if (autoNote.AutoNoteName != oldAutoNote.AutoNoteName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AutoNoteName = '" + POut.String(autoNote.AutoNoteName) + "'";
        }
         
        if (autoNote.MainText != oldAutoNote.MainText)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MainText = '" + POut.String(autoNote.MainText) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE autonote SET " + command + " WHERE AutoNoteNum = " + POut.Long(autoNote.AutoNoteNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one AutoNote from the database.
    */
    public static void delete(long autoNoteNum) throws Exception {
        String command = "DELETE FROM autonote " + "WHERE AutoNoteNum = " + POut.Long(autoNoteNum);
        Db.NonQ(command);
    }

}


