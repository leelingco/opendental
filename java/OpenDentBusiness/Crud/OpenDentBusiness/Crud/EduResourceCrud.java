//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:58 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EduResourceCrud   
{
    /**
    * Gets one EduResource object from the database using the primary key.  Returns null if not found.
    */
    public static EduResource selectOne(long eduResourceNum) throws Exception {
        String command = "SELECT * FROM eduresource " + "WHERE EduResourceNum = " + POut.Long(eduResourceNum);
        List<EduResource> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one EduResource object from the database using a query.
    */
    public static EduResource selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EduResource> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of EduResource objects from the database using a query.
    */
    public static List<EduResource> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EduResource> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<EduResource> tableToList(DataTable table) throws Exception {
        List<EduResource> retVal = new List<EduResource>();
        EduResource eduResource = new EduResource();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            eduResource = new EduResource();
            eduResource.EduResourceNum = PIn.Long(table.Rows[i]["EduResourceNum"].ToString());
            eduResource.DiseaseDefNum = PIn.Long(table.Rows[i]["DiseaseDefNum"].ToString());
            eduResource.MedicationNum = PIn.Long(table.Rows[i]["MedicationNum"].ToString());
            eduResource.LabResultID = PIn.String(table.Rows[i]["LabResultID"].ToString());
            eduResource.LabResultName = PIn.String(table.Rows[i]["LabResultName"].ToString());
            eduResource.LabResultCompare = PIn.String(table.Rows[i]["LabResultCompare"].ToString());
            eduResource.ResourceUrl = PIn.String(table.Rows[i]["ResourceUrl"].ToString());
            retVal.Add(eduResource);
        }
        return retVal;
    }

    /**
    * Inserts one EduResource into the database.  Returns the new priKey.
    */
    public static long insert(EduResource eduResource) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            eduResource.EduResourceNum = DbHelper.GetNextOracleKey("eduresource", "EduResourceNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(eduResource,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        eduResource.EduResourceNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(eduResource,false);
        } 
    }

    /**
    * Inserts one EduResource into the database.  Provides option to use the existing priKey.
    */
    public static long insert(EduResource eduResource, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            eduResource.EduResourceNum = ReplicationServers.GetKey("eduresource", "EduResourceNum");
        }
         
        String command = "INSERT INTO eduresource (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "EduResourceNum,";
        }
         
        command += "DiseaseDefNum,MedicationNum,LabResultID,LabResultName,LabResultCompare,ResourceUrl) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(eduResource.EduResourceNum) + ",";
        }
         
        command += POut.Long(eduResource.DiseaseDefNum) + "," + POut.Long(eduResource.MedicationNum) + "," + "'" + POut.String(eduResource.LabResultID) + "'," + "'" + POut.String(eduResource.LabResultName) + "'," + "'" + POut.String(eduResource.LabResultCompare) + "'," + "'" + POut.String(eduResource.ResourceUrl) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            eduResource.EduResourceNum = Db.NonQ(command, true);
        } 
        return eduResource.EduResourceNum;
    }

    /**
    * Updates one EduResource in the database.
    */
    public static void update(EduResource eduResource) throws Exception {
        String command = "UPDATE eduresource SET " + "DiseaseDefNum   =  " + POut.Long(eduResource.DiseaseDefNum) + ", " + "MedicationNum   =  " + POut.Long(eduResource.MedicationNum) + ", " + "LabResultID     = '" + POut.String(eduResource.LabResultID) + "', " + "LabResultName   = '" + POut.String(eduResource.LabResultName) + "', " + "LabResultCompare= '" + POut.String(eduResource.LabResultCompare) + "', " + "ResourceUrl     = '" + POut.String(eduResource.ResourceUrl) + "' " + "WHERE EduResourceNum = " + POut.Long(eduResource.EduResourceNum);
        Db.NonQ(command);
    }

    /**
    * Updates one EduResource in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(EduResource eduResource, EduResource oldEduResource) throws Exception {
        String command = "";
        if (eduResource.DiseaseDefNum != oldEduResource.DiseaseDefNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DiseaseDefNum = " + POut.Long(eduResource.DiseaseDefNum) + "";
        }
         
        if (eduResource.MedicationNum != oldEduResource.MedicationNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MedicationNum = " + POut.Long(eduResource.MedicationNum) + "";
        }
         
        if (eduResource.LabResultID != oldEduResource.LabResultID)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "LabResultID = '" + POut.String(eduResource.LabResultID) + "'";
        }
         
        if (eduResource.LabResultName != oldEduResource.LabResultName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "LabResultName = '" + POut.String(eduResource.LabResultName) + "'";
        }
         
        if (eduResource.LabResultCompare != oldEduResource.LabResultCompare)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "LabResultCompare = '" + POut.String(eduResource.LabResultCompare) + "'";
        }
         
        if (eduResource.ResourceUrl != oldEduResource.ResourceUrl)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ResourceUrl = '" + POut.String(eduResource.ResourceUrl) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE eduresource SET " + command + " WHERE EduResourceNum = " + POut.Long(eduResource.EduResourceNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one EduResource from the database.
    */
    public static void delete(long eduResourceNum) throws Exception {
        String command = "DELETE FROM eduresource " + "WHERE EduResourceNum = " + POut.Long(eduResourceNum);
        Db.NonQ(command);
    }

}


