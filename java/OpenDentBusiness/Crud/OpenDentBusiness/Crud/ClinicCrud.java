//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:57 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ClinicCrud   
{
    /**
    * Gets one Clinic object from the database using the primary key.  Returns null if not found.
    */
    public static Clinic selectOne(long clinicNum) throws Exception {
        String command = "SELECT * FROM clinic " + "WHERE ClinicNum = " + POut.Long(clinicNum);
        List<Clinic> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Clinic object from the database using a query.
    */
    public static Clinic selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Clinic> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Clinic objects from the database using a query.
    */
    public static List<Clinic> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Clinic> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Clinic> tableToList(DataTable table) throws Exception {
        List<Clinic> retVal = new List<Clinic>();
        Clinic clinic = new Clinic();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            clinic = new Clinic();
            clinic.ClinicNum = PIn.Long(table.Rows[i]["ClinicNum"].ToString());
            clinic.Description = PIn.String(table.Rows[i]["Description"].ToString());
            clinic.Address = PIn.String(table.Rows[i]["Address"].ToString());
            clinic.Address2 = PIn.String(table.Rows[i]["Address2"].ToString());
            clinic.City = PIn.String(table.Rows[i]["City"].ToString());
            clinic.State = PIn.String(table.Rows[i]["State"].ToString());
            clinic.Zip = PIn.String(table.Rows[i]["Zip"].ToString());
            clinic.Phone = PIn.String(table.Rows[i]["Phone"].ToString());
            clinic.BankNumber = PIn.String(table.Rows[i]["BankNumber"].ToString());
            clinic.DefaultPlaceService = (PlaceOfService)PIn.Int(table.Rows[i]["DefaultPlaceService"].ToString());
            clinic.InsBillingProv = PIn.Long(table.Rows[i]["InsBillingProv"].ToString());
            clinic.Fax = PIn.String(table.Rows[i]["Fax"].ToString());
            clinic.EmailAddressNum = PIn.Long(table.Rows[i]["EmailAddressNum"].ToString());
            retVal.Add(clinic);
        }
        return retVal;
    }

    /**
    * Inserts one Clinic into the database.  Returns the new priKey.
    */
    public static long insert(Clinic clinic) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            clinic.ClinicNum = DbHelper.GetNextOracleKey("clinic", "ClinicNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(clinic,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        clinic.ClinicNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(clinic,false);
        } 
    }

    /**
    * Inserts one Clinic into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Clinic clinic, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            clinic.ClinicNum = ReplicationServers.GetKey("clinic", "ClinicNum");
        }
         
        String command = "INSERT INTO clinic (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ClinicNum,";
        }
         
        command += "Description,Address,Address2,City,State,Zip,Phone,BankNumber,DefaultPlaceService,InsBillingProv,Fax,EmailAddressNum) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(clinic.ClinicNum) + ",";
        }
         
        command += "'" + POut.String(clinic.Description) + "'," + "'" + POut.String(clinic.Address) + "'," + "'" + POut.String(clinic.Address2) + "'," + "'" + POut.String(clinic.City) + "'," + "'" + POut.String(clinic.State) + "'," + "'" + POut.String(clinic.Zip) + "'," + "'" + POut.String(clinic.Phone) + "'," + "'" + POut.String(clinic.BankNumber) + "'," + POut.Int((int)clinic.DefaultPlaceService) + "," + POut.Long(clinic.InsBillingProv) + "," + "'" + POut.String(clinic.Fax) + "'," + POut.Long(clinic.EmailAddressNum) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            clinic.ClinicNum = Db.NonQ(command, true);
        } 
        return clinic.ClinicNum;
    }

    /**
    * Updates one Clinic in the database.
    */
    public static void update(Clinic clinic) throws Exception {
        String command = "UPDATE clinic SET " + "Description        = '" + POut.String(clinic.Description) + "', " + "Address            = '" + POut.String(clinic.Address) + "', " + "Address2           = '" + POut.String(clinic.Address2) + "', " + "City               = '" + POut.String(clinic.City) + "', " + "State              = '" + POut.String(clinic.State) + "', " + "Zip                = '" + POut.String(clinic.Zip) + "', " + "Phone              = '" + POut.String(clinic.Phone) + "', " + "BankNumber         = '" + POut.String(clinic.BankNumber) + "', " + "DefaultPlaceService=  " + POut.Int((int)clinic.DefaultPlaceService) + ", " + "InsBillingProv     =  " + POut.Long(clinic.InsBillingProv) + ", " + "Fax                = '" + POut.String(clinic.Fax) + "', " + "EmailAddressNum    =  " + POut.Long(clinic.EmailAddressNum) + " " + "WHERE ClinicNum = " + POut.Long(clinic.ClinicNum);
        Db.NonQ(command);
    }

    /**
    * Updates one Clinic in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Clinic clinic, Clinic oldClinic) throws Exception {
        String command = "";
        if (clinic.Description != oldClinic.Description)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.String(clinic.Description) + "'";
        }
         
        if (clinic.Address != oldClinic.Address)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Address = '" + POut.String(clinic.Address) + "'";
        }
         
        if (clinic.Address2 != oldClinic.Address2)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Address2 = '" + POut.String(clinic.Address2) + "'";
        }
         
        if (clinic.City != oldClinic.City)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "City = '" + POut.String(clinic.City) + "'";
        }
         
        if (clinic.State != oldClinic.State)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "State = '" + POut.String(clinic.State) + "'";
        }
         
        if (clinic.Zip != oldClinic.Zip)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Zip = '" + POut.String(clinic.Zip) + "'";
        }
         
        if (clinic.Phone != oldClinic.Phone)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Phone = '" + POut.String(clinic.Phone) + "'";
        }
         
        if (clinic.BankNumber != oldClinic.BankNumber)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "BankNumber = '" + POut.String(clinic.BankNumber) + "'";
        }
         
        if (clinic.DefaultPlaceService != oldClinic.DefaultPlaceService)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DefaultPlaceService = " + POut.Int((int)clinic.DefaultPlaceService) + "";
        }
         
        if (clinic.InsBillingProv != oldClinic.InsBillingProv)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "InsBillingProv = " + POut.Long(clinic.InsBillingProv) + "";
        }
         
        if (clinic.Fax != oldClinic.Fax)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Fax = '" + POut.String(clinic.Fax) + "'";
        }
         
        if (clinic.EmailAddressNum != oldClinic.EmailAddressNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EmailAddressNum = " + POut.Long(clinic.EmailAddressNum) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE clinic SET " + command + " WHERE ClinicNum = " + POut.Long(clinic.ClinicNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one Clinic from the database.
    */
    public static void delete(long clinicNum) throws Exception {
        String command = "DELETE FROM clinic " + "WHERE ClinicNum = " + POut.Long(clinicNum);
        Db.NonQ(command);
    }

}


