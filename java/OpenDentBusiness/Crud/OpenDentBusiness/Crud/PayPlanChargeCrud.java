//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:03 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class PayPlanChargeCrud   
{
    /**
    * Gets one PayPlanCharge object from the database using the primary key.  Returns null if not found.
    */
    public static PayPlanCharge selectOne(long payPlanChargeNum) throws Exception {
        String command = "SELECT * FROM payplancharge " + "WHERE PayPlanChargeNum = " + POut.Long(payPlanChargeNum);
        List<PayPlanCharge> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one PayPlanCharge object from the database using a query.
    */
    public static PayPlanCharge selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PayPlanCharge> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of PayPlanCharge objects from the database using a query.
    */
    public static List<PayPlanCharge> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PayPlanCharge> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<PayPlanCharge> tableToList(DataTable table) throws Exception {
        List<PayPlanCharge> retVal = new List<PayPlanCharge>();
        PayPlanCharge payPlanCharge = new PayPlanCharge();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            payPlanCharge = new PayPlanCharge();
            payPlanCharge.PayPlanChargeNum = PIn.Long(table.Rows[i]["PayPlanChargeNum"].ToString());
            payPlanCharge.PayPlanNum = PIn.Long(table.Rows[i]["PayPlanNum"].ToString());
            payPlanCharge.Guarantor = PIn.Long(table.Rows[i]["Guarantor"].ToString());
            payPlanCharge.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            payPlanCharge.ChargeDate = PIn.Date(table.Rows[i]["ChargeDate"].ToString());
            payPlanCharge.Principal = PIn.Double(table.Rows[i]["Principal"].ToString());
            payPlanCharge.Interest = PIn.Double(table.Rows[i]["Interest"].ToString());
            payPlanCharge.Note = PIn.String(table.Rows[i]["Note"].ToString());
            payPlanCharge.ProvNum = PIn.Long(table.Rows[i]["ProvNum"].ToString());
            payPlanCharge.ClinicNum = PIn.Long(table.Rows[i]["ClinicNum"].ToString());
            retVal.Add(payPlanCharge);
        }
        return retVal;
    }

    /**
    * Inserts one PayPlanCharge into the database.  Returns the new priKey.
    */
    public static long insert(PayPlanCharge payPlanCharge) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            payPlanCharge.PayPlanChargeNum = DbHelper.GetNextOracleKey("payplancharge", "PayPlanChargeNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(payPlanCharge,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        payPlanCharge.PayPlanChargeNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(payPlanCharge,false);
        } 
    }

    /**
    * Inserts one PayPlanCharge into the database.  Provides option to use the existing priKey.
    */
    public static long insert(PayPlanCharge payPlanCharge, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            payPlanCharge.PayPlanChargeNum = ReplicationServers.GetKey("payplancharge", "PayPlanChargeNum");
        }
         
        String command = "INSERT INTO payplancharge (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "PayPlanChargeNum,";
        }
         
        command += "PayPlanNum,Guarantor,PatNum,ChargeDate,Principal,Interest,Note,ProvNum,ClinicNum) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(payPlanCharge.PayPlanChargeNum) + ",";
        }
         
        command += POut.Long(payPlanCharge.PayPlanNum) + "," + POut.Long(payPlanCharge.Guarantor) + "," + POut.Long(payPlanCharge.PatNum) + "," + POut.Date(payPlanCharge.ChargeDate) + "," + "'" + POut.Double(payPlanCharge.Principal) + "'," + "'" + POut.Double(payPlanCharge.Interest) + "'," + "'" + POut.String(payPlanCharge.Note) + "'," + POut.Long(payPlanCharge.ProvNum) + "," + POut.Long(payPlanCharge.ClinicNum) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            payPlanCharge.PayPlanChargeNum = Db.NonQ(command, true);
        } 
        return payPlanCharge.PayPlanChargeNum;
    }

    /**
    * Updates one PayPlanCharge in the database.
    */
    public static void update(PayPlanCharge payPlanCharge) throws Exception {
        String command = "UPDATE payplancharge SET " + "PayPlanNum      =  " + POut.Long(payPlanCharge.PayPlanNum) + ", " + "Guarantor       =  " + POut.Long(payPlanCharge.Guarantor) + ", " + "PatNum          =  " + POut.Long(payPlanCharge.PatNum) + ", " + "ChargeDate      =  " + POut.Date(payPlanCharge.ChargeDate) + ", " + "Principal       = '" + POut.Double(payPlanCharge.Principal) + "', " + "Interest        = '" + POut.Double(payPlanCharge.Interest) + "', " + "Note            = '" + POut.String(payPlanCharge.Note) + "', " + "ProvNum         =  " + POut.Long(payPlanCharge.ProvNum) + ", " + "ClinicNum       =  " + POut.Long(payPlanCharge.ClinicNum) + " " + "WHERE PayPlanChargeNum = " + POut.Long(payPlanCharge.PayPlanChargeNum);
        Db.NonQ(command);
    }

    /**
    * Updates one PayPlanCharge in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(PayPlanCharge payPlanCharge, PayPlanCharge oldPayPlanCharge) throws Exception {
        String command = "";
        if (payPlanCharge.PayPlanNum != oldPayPlanCharge.PayPlanNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PayPlanNum = " + POut.Long(payPlanCharge.PayPlanNum) + "";
        }
         
        if (payPlanCharge.Guarantor != oldPayPlanCharge.Guarantor)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Guarantor = " + POut.Long(payPlanCharge.Guarantor) + "";
        }
         
        if (payPlanCharge.PatNum != oldPayPlanCharge.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(payPlanCharge.PatNum) + "";
        }
         
        if (payPlanCharge.ChargeDate != oldPayPlanCharge.ChargeDate)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ChargeDate = " + POut.Date(payPlanCharge.ChargeDate) + "";
        }
         
        if (payPlanCharge.Principal != oldPayPlanCharge.Principal)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Principal = '" + POut.Double(payPlanCharge.Principal) + "'";
        }
         
        if (payPlanCharge.Interest != oldPayPlanCharge.Interest)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Interest = '" + POut.Double(payPlanCharge.Interest) + "'";
        }
         
        if (payPlanCharge.Note != oldPayPlanCharge.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(payPlanCharge.Note) + "'";
        }
         
        if (payPlanCharge.ProvNum != oldPayPlanCharge.ProvNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvNum = " + POut.Long(payPlanCharge.ProvNum) + "";
        }
         
        if (payPlanCharge.ClinicNum != oldPayPlanCharge.ClinicNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClinicNum = " + POut.Long(payPlanCharge.ClinicNum) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE payplancharge SET " + command + " WHERE PayPlanChargeNum = " + POut.Long(payPlanCharge.PayPlanChargeNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one PayPlanCharge from the database.
    */
    public static void delete(long payPlanChargeNum) throws Exception {
        String command = "DELETE FROM payplancharge " + "WHERE PayPlanChargeNum = " + POut.Long(payPlanChargeNum);
        Db.NonQ(command);
    }

}


