//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:06 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class RepeatChargeCrud   
{
    /**
    * Gets one RepeatCharge object from the database using the primary key.  Returns null if not found.
    */
    public static RepeatCharge selectOne(long repeatChargeNum) throws Exception {
        String command = "SELECT * FROM repeatcharge " + "WHERE RepeatChargeNum = " + POut.Long(repeatChargeNum);
        List<RepeatCharge> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one RepeatCharge object from the database using a query.
    */
    public static RepeatCharge selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<RepeatCharge> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of RepeatCharge objects from the database using a query.
    */
    public static List<RepeatCharge> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<RepeatCharge> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<RepeatCharge> tableToList(DataTable table) throws Exception {
        List<RepeatCharge> retVal = new List<RepeatCharge>();
        RepeatCharge repeatCharge = new RepeatCharge();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            repeatCharge = new RepeatCharge();
            repeatCharge.RepeatChargeNum = PIn.Long(table.Rows[i]["RepeatChargeNum"].ToString());
            repeatCharge.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            repeatCharge.ProcCode = PIn.String(table.Rows[i]["ProcCode"].ToString());
            repeatCharge.ChargeAmt = PIn.Double(table.Rows[i]["ChargeAmt"].ToString());
            repeatCharge.DateStart = PIn.Date(table.Rows[i]["DateStart"].ToString());
            repeatCharge.DateStop = PIn.Date(table.Rows[i]["DateStop"].ToString());
            repeatCharge.Note = PIn.String(table.Rows[i]["Note"].ToString());
            repeatCharge.CopyNoteToProc = PIn.Bool(table.Rows[i]["CopyNoteToProc"].ToString());
            repeatCharge.CreatesClaim = PIn.Bool(table.Rows[i]["CreatesClaim"].ToString());
            repeatCharge.IsEnabled = PIn.Bool(table.Rows[i]["IsEnabled"].ToString());
            retVal.Add(repeatCharge);
        }
        return retVal;
    }

    /**
    * Inserts one RepeatCharge into the database.  Returns the new priKey.
    */
    public static long insert(RepeatCharge repeatCharge) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            repeatCharge.RepeatChargeNum = DbHelper.GetNextOracleKey("repeatcharge", "RepeatChargeNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(repeatCharge,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        repeatCharge.RepeatChargeNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(repeatCharge,false);
        } 
    }

    /**
    * Inserts one RepeatCharge into the database.  Provides option to use the existing priKey.
    */
    public static long insert(RepeatCharge repeatCharge, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            repeatCharge.RepeatChargeNum = ReplicationServers.GetKey("repeatcharge", "RepeatChargeNum");
        }
         
        String command = "INSERT INTO repeatcharge (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "RepeatChargeNum,";
        }
         
        command += "PatNum,ProcCode,ChargeAmt,DateStart,DateStop,Note,CopyNoteToProc,CreatesClaim,IsEnabled) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(repeatCharge.RepeatChargeNum) + ",";
        }
         
        command += POut.Long(repeatCharge.PatNum) + "," + "'" + POut.String(repeatCharge.ProcCode) + "'," + "'" + POut.Double(repeatCharge.ChargeAmt) + "'," + POut.Date(repeatCharge.DateStart) + "," + POut.Date(repeatCharge.DateStop) + "," + "'" + POut.String(repeatCharge.Note) + "'," + POut.Bool(repeatCharge.CopyNoteToProc) + "," + POut.Bool(repeatCharge.CreatesClaim) + "," + POut.Bool(repeatCharge.IsEnabled) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            repeatCharge.RepeatChargeNum = Db.NonQ(command, true);
        } 
        return repeatCharge.RepeatChargeNum;
    }

    /**
    * Updates one RepeatCharge in the database.
    */
    public static void update(RepeatCharge repeatCharge) throws Exception {
        String command = "UPDATE repeatcharge SET " + "PatNum         =  " + POut.Long(repeatCharge.PatNum) + ", " + "ProcCode       = '" + POut.String(repeatCharge.ProcCode) + "', " + "ChargeAmt      = '" + POut.Double(repeatCharge.ChargeAmt) + "', " + "DateStart      =  " + POut.Date(repeatCharge.DateStart) + ", " + "DateStop       =  " + POut.Date(repeatCharge.DateStop) + ", " + "Note           = '" + POut.String(repeatCharge.Note) + "', " + "CopyNoteToProc =  " + POut.Bool(repeatCharge.CopyNoteToProc) + ", " + "CreatesClaim   =  " + POut.Bool(repeatCharge.CreatesClaim) + ", " + "IsEnabled      =  " + POut.Bool(repeatCharge.IsEnabled) + " " + "WHERE RepeatChargeNum = " + POut.Long(repeatCharge.RepeatChargeNum);
        Db.NonQ(command);
    }

    /**
    * Updates one RepeatCharge in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(RepeatCharge repeatCharge, RepeatCharge oldRepeatCharge) throws Exception {
        String command = "";
        if (repeatCharge.PatNum != oldRepeatCharge.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(repeatCharge.PatNum) + "";
        }
         
        if (repeatCharge.ProcCode != oldRepeatCharge.ProcCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProcCode = '" + POut.String(repeatCharge.ProcCode) + "'";
        }
         
        if (repeatCharge.ChargeAmt != oldRepeatCharge.ChargeAmt)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ChargeAmt = '" + POut.Double(repeatCharge.ChargeAmt) + "'";
        }
         
        if (repeatCharge.DateStart != oldRepeatCharge.DateStart)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateStart = " + POut.Date(repeatCharge.DateStart) + "";
        }
         
        if (repeatCharge.DateStop != oldRepeatCharge.DateStop)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateStop = " + POut.Date(repeatCharge.DateStop) + "";
        }
         
        if (repeatCharge.Note != oldRepeatCharge.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(repeatCharge.Note) + "'";
        }
         
        if (repeatCharge.CopyNoteToProc != oldRepeatCharge.CopyNoteToProc)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CopyNoteToProc = " + POut.Bool(repeatCharge.CopyNoteToProc) + "";
        }
         
        if (repeatCharge.CreatesClaim != oldRepeatCharge.CreatesClaim)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CreatesClaim = " + POut.Bool(repeatCharge.CreatesClaim) + "";
        }
         
        if (repeatCharge.IsEnabled != oldRepeatCharge.IsEnabled)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsEnabled = " + POut.Bool(repeatCharge.IsEnabled) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE repeatcharge SET " + command + " WHERE RepeatChargeNum = " + POut.Long(repeatCharge.RepeatChargeNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one RepeatCharge from the database.
    */
    public static void delete(long repeatChargeNum) throws Exception {
        String command = "DELETE FROM repeatcharge " + "WHERE RepeatChargeNum = " + POut.Long(repeatChargeNum);
        Db.NonQ(command);
    }

}


