//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:02 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class InstallmentPlanCrud   
{
    /**
    * Gets one InstallmentPlan object from the database using the primary key.  Returns null if not found.
    */
    public static InstallmentPlan selectOne(long installmentPlanNum) throws Exception {
        String command = "SELECT * FROM installmentplan " + "WHERE InstallmentPlanNum = " + POut.Long(installmentPlanNum);
        List<InstallmentPlan> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one InstallmentPlan object from the database using a query.
    */
    public static InstallmentPlan selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<InstallmentPlan> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of InstallmentPlan objects from the database using a query.
    */
    public static List<InstallmentPlan> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<InstallmentPlan> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<InstallmentPlan> tableToList(DataTable table) throws Exception {
        List<InstallmentPlan> retVal = new List<InstallmentPlan>();
        InstallmentPlan installmentPlan = new InstallmentPlan();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            installmentPlan = new InstallmentPlan();
            installmentPlan.InstallmentPlanNum = PIn.Long(table.Rows[i]["InstallmentPlanNum"].ToString());
            installmentPlan.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            installmentPlan.DateAgreement = PIn.Date(table.Rows[i]["DateAgreement"].ToString());
            installmentPlan.DateFirstPayment = PIn.Date(table.Rows[i]["DateFirstPayment"].ToString());
            installmentPlan.MonthlyPayment = PIn.Double(table.Rows[i]["MonthlyPayment"].ToString());
            installmentPlan.APR = PIn.Float(table.Rows[i]["APR"].ToString());
            installmentPlan.Note = PIn.String(table.Rows[i]["Note"].ToString());
            retVal.Add(installmentPlan);
        }
        return retVal;
    }

    /**
    * Inserts one InstallmentPlan into the database.  Returns the new priKey.
    */
    public static long insert(InstallmentPlan installmentPlan) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            installmentPlan.InstallmentPlanNum = DbHelper.GetNextOracleKey("installmentplan", "InstallmentPlanNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(installmentPlan,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        installmentPlan.InstallmentPlanNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(installmentPlan,false);
        } 
    }

    /**
    * Inserts one InstallmentPlan into the database.  Provides option to use the existing priKey.
    */
    public static long insert(InstallmentPlan installmentPlan, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            installmentPlan.InstallmentPlanNum = ReplicationServers.GetKey("installmentplan", "InstallmentPlanNum");
        }
         
        String command = "INSERT INTO installmentplan (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "InstallmentPlanNum,";
        }
         
        command += "PatNum,DateAgreement,DateFirstPayment,MonthlyPayment,APR,Note) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(installmentPlan.InstallmentPlanNum) + ",";
        }
         
        command += POut.Long(installmentPlan.PatNum) + "," + POut.Date(installmentPlan.DateAgreement) + "," + POut.Date(installmentPlan.DateFirstPayment) + "," + "'" + POut.Double(installmentPlan.MonthlyPayment) + "'," + POut.Float(installmentPlan.APR) + "," + "'" + POut.String(installmentPlan.Note) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            installmentPlan.InstallmentPlanNum = Db.NonQ(command, true);
        } 
        return installmentPlan.InstallmentPlanNum;
    }

    /**
    * Updates one InstallmentPlan in the database.
    */
    public static void update(InstallmentPlan installmentPlan) throws Exception {
        String command = "UPDATE installmentplan SET " + "PatNum            =  " + POut.Long(installmentPlan.PatNum) + ", " + "DateAgreement     =  " + POut.Date(installmentPlan.DateAgreement) + ", " + "DateFirstPayment  =  " + POut.Date(installmentPlan.DateFirstPayment) + ", " + "MonthlyPayment    = '" + POut.Double(installmentPlan.MonthlyPayment) + "', " + "APR               =  " + POut.Float(installmentPlan.APR) + ", " + "Note              = '" + POut.String(installmentPlan.Note) + "' " + "WHERE InstallmentPlanNum = " + POut.Long(installmentPlan.InstallmentPlanNum);
        Db.NonQ(command);
    }

    /**
    * Updates one InstallmentPlan in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(InstallmentPlan installmentPlan, InstallmentPlan oldInstallmentPlan) throws Exception {
        String command = "";
        if (installmentPlan.PatNum != oldInstallmentPlan.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(installmentPlan.PatNum) + "";
        }
         
        if (installmentPlan.DateAgreement != oldInstallmentPlan.DateAgreement)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateAgreement = " + POut.Date(installmentPlan.DateAgreement) + "";
        }
         
        if (installmentPlan.DateFirstPayment != oldInstallmentPlan.DateFirstPayment)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateFirstPayment = " + POut.Date(installmentPlan.DateFirstPayment) + "";
        }
         
        if (installmentPlan.MonthlyPayment != oldInstallmentPlan.MonthlyPayment)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MonthlyPayment = '" + POut.Double(installmentPlan.MonthlyPayment) + "'";
        }
         
        if (installmentPlan.APR != oldInstallmentPlan.APR)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "APR = " + POut.Float(installmentPlan.APR) + "";
        }
         
        if (installmentPlan.Note != oldInstallmentPlan.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(installmentPlan.Note) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE installmentplan SET " + command + " WHERE InstallmentPlanNum = " + POut.Long(installmentPlan.InstallmentPlanNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one InstallmentPlan from the database.
    */
    public static void delete(long installmentPlanNum) throws Exception {
        String command = "DELETE FROM installmentplan " + "WHERE InstallmentPlanNum = " + POut.Long(installmentPlanNum);
        Db.NonQ(command);
    }

}


