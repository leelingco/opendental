//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:08 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class TimeCardRuleCrud   
{
    /**
    * Gets one TimeCardRule object from the database using the primary key.  Returns null if not found.
    */
    public static TimeCardRule selectOne(long timeCardRuleNum) throws Exception {
        String command = "SELECT * FROM timecardrule " + "WHERE TimeCardRuleNum = " + POut.Long(timeCardRuleNum);
        List<TimeCardRule> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one TimeCardRule object from the database using a query.
    */
    public static TimeCardRule selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<TimeCardRule> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of TimeCardRule objects from the database using a query.
    */
    public static List<TimeCardRule> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<TimeCardRule> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<TimeCardRule> tableToList(DataTable table) throws Exception {
        List<TimeCardRule> retVal = new List<TimeCardRule>();
        TimeCardRule timeCardRule = new TimeCardRule();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            timeCardRule = new TimeCardRule();
            timeCardRule.TimeCardRuleNum = PIn.Long(table.Rows[i]["TimeCardRuleNum"].ToString());
            timeCardRule.EmployeeNum = PIn.Long(table.Rows[i]["EmployeeNum"].ToString());
            timeCardRule.OverHoursPerDay = PIn.Time(table.Rows[i]["OverHoursPerDay"].ToString());
            timeCardRule.AfterTimeOfDay = PIn.Time(table.Rows[i]["AfterTimeOfDay"].ToString());
            timeCardRule.BeforeTimeOfDay = PIn.Time(table.Rows[i]["BeforeTimeOfDay"].ToString());
            retVal.Add(timeCardRule);
        }
        return retVal;
    }

    /**
    * Inserts one TimeCardRule into the database.  Returns the new priKey.
    */
    public static long insert(TimeCardRule timeCardRule) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            timeCardRule.TimeCardRuleNum = DbHelper.GetNextOracleKey("timecardrule", "TimeCardRuleNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(timeCardRule,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        timeCardRule.TimeCardRuleNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(timeCardRule,false);
        } 
    }

    /**
    * Inserts one TimeCardRule into the database.  Provides option to use the existing priKey.
    */
    public static long insert(TimeCardRule timeCardRule, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            timeCardRule.TimeCardRuleNum = ReplicationServers.GetKey("timecardrule", "TimeCardRuleNum");
        }
         
        String command = "INSERT INTO timecardrule (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "TimeCardRuleNum,";
        }
         
        command += "EmployeeNum,OverHoursPerDay,AfterTimeOfDay,BeforeTimeOfDay) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(timeCardRule.TimeCardRuleNum) + ",";
        }
         
        command += POut.Long(timeCardRule.EmployeeNum) + "," + POut.Time(timeCardRule.OverHoursPerDay) + "," + POut.Time(timeCardRule.AfterTimeOfDay) + "," + POut.Time(timeCardRule.BeforeTimeOfDay) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            timeCardRule.TimeCardRuleNum = Db.NonQ(command, true);
        } 
        return timeCardRule.TimeCardRuleNum;
    }

    /**
    * Updates one TimeCardRule in the database.
    */
    public static void update(TimeCardRule timeCardRule) throws Exception {
        String command = "UPDATE timecardrule SET " + "EmployeeNum    =  " + POut.Long(timeCardRule.EmployeeNum) + ", " + "OverHoursPerDay=  " + POut.Time(timeCardRule.OverHoursPerDay) + ", " + "AfterTimeOfDay =  " + POut.Time(timeCardRule.AfterTimeOfDay) + ", " + "BeforeTimeOfDay=  " + POut.Time(timeCardRule.BeforeTimeOfDay) + " " + "WHERE TimeCardRuleNum = " + POut.Long(timeCardRule.TimeCardRuleNum);
        Db.NonQ(command);
    }

    /**
    * Updates one TimeCardRule in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(TimeCardRule timeCardRule, TimeCardRule oldTimeCardRule) throws Exception {
        String command = "";
        if (timeCardRule.EmployeeNum != oldTimeCardRule.EmployeeNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EmployeeNum = " + POut.Long(timeCardRule.EmployeeNum) + "";
        }
         
        if (timeCardRule.OverHoursPerDay != oldTimeCardRule.OverHoursPerDay)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "OverHoursPerDay = " + POut.Time(timeCardRule.OverHoursPerDay) + "";
        }
         
        if (timeCardRule.AfterTimeOfDay != oldTimeCardRule.AfterTimeOfDay)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AfterTimeOfDay = " + POut.Time(timeCardRule.AfterTimeOfDay) + "";
        }
         
        if (timeCardRule.BeforeTimeOfDay != oldTimeCardRule.BeforeTimeOfDay)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "BeforeTimeOfDay = " + POut.Time(timeCardRule.BeforeTimeOfDay) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE timecardrule SET " + command + " WHERE TimeCardRuleNum = " + POut.Long(timeCardRule.TimeCardRuleNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one TimeCardRule from the database.
    */
    public static void delete(long timeCardRuleNum) throws Exception {
        String command = "DELETE FROM timecardrule " + "WHERE TimeCardRuleNum = " + POut.Long(timeCardRuleNum);
        Db.NonQ(command);
    }

}


