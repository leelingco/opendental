//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:01 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class GuardianCrud   
{
    /**
    * Gets one Guardian object from the database using the primary key.  Returns null if not found.
    */
    public static Guardian selectOne(long guardianNum) throws Exception {
        String command = "SELECT * FROM guardian " + "WHERE GuardianNum = " + POut.Long(guardianNum);
        List<Guardian> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Guardian object from the database using a query.
    */
    public static Guardian selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Guardian> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Guardian objects from the database using a query.
    */
    public static List<Guardian> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Guardian> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Guardian> tableToList(DataTable table) throws Exception {
        List<Guardian> retVal = new List<Guardian>();
        Guardian guardian = new Guardian();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            guardian = new Guardian();
            guardian.GuardianNum = PIn.Long(table.Rows[i]["GuardianNum"].ToString());
            guardian.PatNumChild = PIn.Long(table.Rows[i]["PatNumChild"].ToString());
            guardian.PatNumGuardian = PIn.Long(table.Rows[i]["PatNumGuardian"].ToString());
            guardian.Relationship = (GuardianRelationship)PIn.Int(table.Rows[i]["Relationship"].ToString());
            guardian.IsGuardian = PIn.Bool(table.Rows[i]["IsGuardian"].ToString());
            retVal.Add(guardian);
        }
        return retVal;
    }

    /**
    * Inserts one Guardian into the database.  Returns the new priKey.
    */
    public static long insert(Guardian guardian) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            guardian.GuardianNum = DbHelper.GetNextOracleKey("guardian", "GuardianNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(guardian,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        guardian.GuardianNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(guardian,false);
        } 
    }

    /**
    * Inserts one Guardian into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Guardian guardian, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            guardian.GuardianNum = ReplicationServers.GetKey("guardian", "GuardianNum");
        }
         
        String command = "INSERT INTO guardian (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "GuardianNum,";
        }
         
        command += "PatNumChild,PatNumGuardian,Relationship,IsGuardian) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(guardian.GuardianNum) + ",";
        }
         
        command += POut.Long(guardian.PatNumChild) + "," + POut.Long(guardian.PatNumGuardian) + "," + POut.Int((int)guardian.Relationship) + "," + POut.Bool(guardian.IsGuardian) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            guardian.GuardianNum = Db.NonQ(command, true);
        } 
        return guardian.GuardianNum;
    }

    /**
    * Updates one Guardian in the database.
    */
    public static void update(Guardian guardian) throws Exception {
        String command = "UPDATE guardian SET " + "PatNumChild   =  " + POut.Long(guardian.PatNumChild) + ", " + "PatNumGuardian=  " + POut.Long(guardian.PatNumGuardian) + ", " + "Relationship  =  " + POut.Int((int)guardian.Relationship) + ", " + "IsGuardian    =  " + POut.Bool(guardian.IsGuardian) + " " + "WHERE GuardianNum = " + POut.Long(guardian.GuardianNum);
        Db.NonQ(command);
    }

    /**
    * Updates one Guardian in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Guardian guardian, Guardian oldGuardian) throws Exception {
        String command = "";
        if (guardian.PatNumChild != oldGuardian.PatNumChild)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNumChild = " + POut.Long(guardian.PatNumChild) + "";
        }
         
        if (guardian.PatNumGuardian != oldGuardian.PatNumGuardian)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNumGuardian = " + POut.Long(guardian.PatNumGuardian) + "";
        }
         
        if (guardian.Relationship != oldGuardian.Relationship)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Relationship = " + POut.Int((int)guardian.Relationship) + "";
        }
         
        if (guardian.IsGuardian != oldGuardian.IsGuardian)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsGuardian = " + POut.Bool(guardian.IsGuardian) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE guardian SET " + command + " WHERE GuardianNum = " + POut.Long(guardian.GuardianNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one Guardian from the database.
    */
    public static void delete(long guardianNum) throws Exception {
        String command = "DELETE FROM guardian " + "WHERE GuardianNum = " + POut.Long(guardianNum);
        Db.NonQ(command);
    }

}


