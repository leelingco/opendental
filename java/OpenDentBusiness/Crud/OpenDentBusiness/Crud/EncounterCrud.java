//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:00 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EncounterCrud   
{
    /**
    * Gets one Encounter object from the database using the primary key.  Returns null if not found.
    */
    public static Encounter selectOne(long encounterNum) throws Exception {
        String command = "SELECT * FROM encounter " + "WHERE EncounterNum = " + POut.Long(encounterNum);
        List<Encounter> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Encounter object from the database using a query.
    */
    public static Encounter selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Encounter> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Encounter objects from the database using a query.
    */
    public static List<Encounter> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Encounter> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Encounter> tableToList(DataTable table) throws Exception {
        List<Encounter> retVal = new List<Encounter>();
        Encounter encounter = new Encounter();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            encounter = new Encounter();
            encounter.EncounterNum = PIn.Long(table.Rows[i]["EncounterNum"].ToString());
            encounter.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            encounter.ProvNum = PIn.Long(table.Rows[i]["ProvNum"].ToString());
            encounter.CodeValue = PIn.String(table.Rows[i]["CodeValue"].ToString());
            encounter.CodeSystem = PIn.String(table.Rows[i]["CodeSystem"].ToString());
            encounter.Note = PIn.String(table.Rows[i]["Note"].ToString());
            encounter.DateEncounter = PIn.Date(table.Rows[i]["DateEncounter"].ToString());
            retVal.Add(encounter);
        }
        return retVal;
    }

    /**
    * Inserts one Encounter into the database.  Returns the new priKey.
    */
    public static long insert(Encounter encounter) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            encounter.EncounterNum = DbHelper.GetNextOracleKey("encounter", "EncounterNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(encounter,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        encounter.EncounterNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(encounter,false);
        } 
    }

    /**
    * Inserts one Encounter into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Encounter encounter, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            encounter.EncounterNum = ReplicationServers.GetKey("encounter", "EncounterNum");
        }
         
        String command = "INSERT INTO encounter (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "EncounterNum,";
        }
         
        command += "PatNum,ProvNum,CodeValue,CodeSystem,Note,DateEncounter) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(encounter.EncounterNum) + ",";
        }
         
        command += POut.Long(encounter.PatNum) + "," + POut.Long(encounter.ProvNum) + "," + "'" + POut.String(encounter.CodeValue) + "'," + "'" + POut.String(encounter.CodeSystem) + "'," + "'" + POut.String(encounter.Note) + "'," + POut.Date(encounter.DateEncounter) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            encounter.EncounterNum = Db.NonQ(command, true);
        } 
        return encounter.EncounterNum;
    }

    /**
    * Updates one Encounter in the database.
    */
    public static void update(Encounter encounter) throws Exception {
        String command = "UPDATE encounter SET " + "PatNum       =  " + POut.Long(encounter.PatNum) + ", " + "ProvNum      =  " + POut.Long(encounter.ProvNum) + ", " + "CodeValue    = '" + POut.String(encounter.CodeValue) + "', " + "CodeSystem   = '" + POut.String(encounter.CodeSystem) + "', " + "Note         = '" + POut.String(encounter.Note) + "', " + "DateEncounter=  " + POut.Date(encounter.DateEncounter) + " " + "WHERE EncounterNum = " + POut.Long(encounter.EncounterNum);
        Db.NonQ(command);
    }

    /**
    * Updates one Encounter in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Encounter encounter, Encounter oldEncounter) throws Exception {
        String command = "";
        if (encounter.PatNum != oldEncounter.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(encounter.PatNum) + "";
        }
         
        if (encounter.ProvNum != oldEncounter.ProvNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvNum = " + POut.Long(encounter.ProvNum) + "";
        }
         
        if (encounter.CodeValue != oldEncounter.CodeValue)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeValue = '" + POut.String(encounter.CodeValue) + "'";
        }
         
        if (encounter.CodeSystem != oldEncounter.CodeSystem)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeSystem = '" + POut.String(encounter.CodeSystem) + "'";
        }
         
        if (encounter.Note != oldEncounter.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(encounter.Note) + "'";
        }
         
        if (encounter.DateEncounter != oldEncounter.DateEncounter)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateEncounter = " + POut.Date(encounter.DateEncounter) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE encounter SET " + command + " WHERE EncounterNum = " + POut.Long(encounter.EncounterNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one Encounter from the database.
    */
    public static void delete(long encounterNum) throws Exception {
        String command = "DELETE FROM encounter " + "WHERE EncounterNum = " + POut.Long(encounterNum);
        Db.NonQ(command);
    }

}


