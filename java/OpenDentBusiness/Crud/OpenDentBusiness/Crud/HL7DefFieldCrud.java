//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:01 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class HL7DefFieldCrud   
{
    /**
    * Gets one HL7DefField object from the database using the primary key.  Returns null if not found.
    */
    public static HL7DefField selectOne(long hL7DefFieldNum) throws Exception {
        String command = "SELECT * FROM hl7deffield " + "WHERE HL7DefFieldNum = " + POut.Long(hL7DefFieldNum);
        List<HL7DefField> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one HL7DefField object from the database using a query.
    */
    public static HL7DefField selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<HL7DefField> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of HL7DefField objects from the database using a query.
    */
    public static List<HL7DefField> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<HL7DefField> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<HL7DefField> tableToList(DataTable table) throws Exception {
        List<HL7DefField> retVal = new List<HL7DefField>();
        HL7DefField hL7DefField = new HL7DefField();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            hL7DefField = new HL7DefField();
            hL7DefField.HL7DefFieldNum = PIn.Long(table.Rows[i]["HL7DefFieldNum"].ToString());
            hL7DefField.HL7DefSegmentNum = PIn.Long(table.Rows[i]["HL7DefSegmentNum"].ToString());
            hL7DefField.OrdinalPos = PIn.Int(table.Rows[i]["OrdinalPos"].ToString());
            hL7DefField.TableId = PIn.String(table.Rows[i]["TableId"].ToString());
            String dataType = table.Rows[i]["DataType"].ToString();
            if (StringSupport.equals(dataType, ""))
            {
                hL7DefField.DataType = (DataTypeHL7)0;
            }
            else
                try
                {
                    hL7DefField.DataType = (DataTypeHL7)Enum.Parse(DataTypeHL7.class, dataType);
                }
                catch (Exception __dummyCatchVar0)
                {
                    hL7DefField.DataType = (DataTypeHL7)0;
                }
             
            hL7DefField.FieldName = PIn.String(table.Rows[i]["FieldName"].ToString());
            hL7DefField.FixedText = PIn.String(table.Rows[i]["FixedText"].ToString());
            retVal.Add(hL7DefField);
        }
        return retVal;
    }

    /**
    * Inserts one HL7DefField into the database.  Returns the new priKey.
    */
    public static long insert(HL7DefField hL7DefField) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            hL7DefField.HL7DefFieldNum = DbHelper.GetNextOracleKey("hl7deffield", "HL7DefFieldNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(hL7DefField,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        hL7DefField.HL7DefFieldNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(hL7DefField,false);
        } 
    }

    /**
    * Inserts one HL7DefField into the database.  Provides option to use the existing priKey.
    */
    public static long insert(HL7DefField hL7DefField, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            hL7DefField.HL7DefFieldNum = ReplicationServers.GetKey("hl7deffield", "HL7DefFieldNum");
        }
         
        String command = "INSERT INTO hl7deffield (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "HL7DefFieldNum,";
        }
         
        command += "HL7DefSegmentNum,OrdinalPos,TableId,DataType,FieldName,FixedText) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(hL7DefField.HL7DefFieldNum) + ",";
        }
         
        command += POut.Long(hL7DefField.HL7DefSegmentNum) + "," + POut.Int(hL7DefField.OrdinalPos) + "," + "'" + POut.String(hL7DefField.TableId) + "'," + "'" + POut.String(hL7DefField.DataType.ToString()) + "'," + "'" + POut.String(hL7DefField.FieldName) + "'," + "'" + POut.String(hL7DefField.FixedText) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            hL7DefField.HL7DefFieldNum = Db.NonQ(command, true);
        } 
        return hL7DefField.HL7DefFieldNum;
    }

    /**
    * Updates one HL7DefField in the database.
    */
    public static void update(HL7DefField hL7DefField) throws Exception {
        String command = "UPDATE hl7deffield SET " + "HL7DefSegmentNum=  " + POut.Long(hL7DefField.HL7DefSegmentNum) + ", " + "OrdinalPos      =  " + POut.Int(hL7DefField.OrdinalPos) + ", " + "TableId         = '" + POut.String(hL7DefField.TableId) + "', " + "DataType        = '" + POut.String(hL7DefField.DataType.ToString()) + "', " + "FieldName       = '" + POut.String(hL7DefField.FieldName) + "', " + "FixedText       = '" + POut.String(hL7DefField.FixedText) + "' " + "WHERE HL7DefFieldNum = " + POut.Long(hL7DefField.HL7DefFieldNum);
        Db.NonQ(command);
    }

    /**
    * Updates one HL7DefField in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(HL7DefField hL7DefField, HL7DefField oldHL7DefField) throws Exception {
        String command = "";
        if (hL7DefField.HL7DefSegmentNum != oldHL7DefField.HL7DefSegmentNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "HL7DefSegmentNum = " + POut.Long(hL7DefField.HL7DefSegmentNum) + "";
        }
         
        if (hL7DefField.OrdinalPos != oldHL7DefField.OrdinalPos)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "OrdinalPos = " + POut.Int(hL7DefField.OrdinalPos) + "";
        }
         
        if (hL7DefField.TableId != oldHL7DefField.TableId)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "TableId = '" + POut.String(hL7DefField.TableId) + "'";
        }
         
        if (hL7DefField.DataType != oldHL7DefField.DataType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DataType = '" + POut.String(hL7DefField.DataType.ToString()) + "'";
        }
         
        if (hL7DefField.FieldName != oldHL7DefField.FieldName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FieldName = '" + POut.String(hL7DefField.FieldName) + "'";
        }
         
        if (hL7DefField.FixedText != oldHL7DefField.FixedText)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FixedText = '" + POut.String(hL7DefField.FixedText) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE hl7deffield SET " + command + " WHERE HL7DefFieldNum = " + POut.Long(hL7DefField.HL7DefFieldNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one HL7DefField from the database.
    */
    public static void delete(long hL7DefFieldNum) throws Exception {
        String command = "DELETE FROM hl7deffield " + "WHERE HL7DefFieldNum = " + POut.Long(hL7DefFieldNum);
        Db.NonQ(command);
    }

}


