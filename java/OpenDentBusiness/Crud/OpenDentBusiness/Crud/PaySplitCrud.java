//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:03 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class PaySplitCrud   
{
    /**
    * Gets one PaySplit object from the database using the primary key.  Returns null if not found.
    */
    public static PaySplit selectOne(long splitNum) throws Exception {
        String command = "SELECT * FROM paysplit " + "WHERE SplitNum = " + POut.Long(splitNum);
        List<PaySplit> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one PaySplit object from the database using a query.
    */
    public static PaySplit selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PaySplit> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of PaySplit objects from the database using a query.
    */
    public static List<PaySplit> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<PaySplit> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<PaySplit> tableToList(DataTable table) throws Exception {
        List<PaySplit> retVal = new List<PaySplit>();
        PaySplit paySplit = new PaySplit();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            paySplit = new PaySplit();
            paySplit.SplitNum = PIn.Long(table.Rows[i]["SplitNum"].ToString());
            paySplit.SplitAmt = PIn.Double(table.Rows[i]["SplitAmt"].ToString());
            paySplit.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            paySplit.ProcDate = PIn.Date(table.Rows[i]["ProcDate"].ToString());
            paySplit.PayNum = PIn.Long(table.Rows[i]["PayNum"].ToString());
            paySplit.IsDiscount = PIn.Bool(table.Rows[i]["IsDiscount"].ToString());
            paySplit.DiscountType = PIn.Byte(table.Rows[i]["DiscountType"].ToString());
            paySplit.ProvNum = PIn.Long(table.Rows[i]["ProvNum"].ToString());
            paySplit.PayPlanNum = PIn.Long(table.Rows[i]["PayPlanNum"].ToString());
            paySplit.DatePay = PIn.Date(table.Rows[i]["DatePay"].ToString());
            paySplit.ProcNum = PIn.Long(table.Rows[i]["ProcNum"].ToString());
            paySplit.DateEntry = PIn.Date(table.Rows[i]["DateEntry"].ToString());
            paySplit.UnearnedType = PIn.Long(table.Rows[i]["UnearnedType"].ToString());
            paySplit.ClinicNum = PIn.Long(table.Rows[i]["ClinicNum"].ToString());
            retVal.Add(paySplit);
        }
        return retVal;
    }

    /**
    * Inserts one PaySplit into the database.  Returns the new priKey.
    */
    public static long insert(PaySplit paySplit) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            paySplit.SplitNum = DbHelper.GetNextOracleKey("paysplit", "SplitNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(paySplit,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        paySplit.SplitNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(paySplit,false);
        } 
    }

    /**
    * Inserts one PaySplit into the database.  Provides option to use the existing priKey.
    */
    public static long insert(PaySplit paySplit, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            paySplit.SplitNum = ReplicationServers.GetKey("paysplit", "SplitNum");
        }
         
        String command = "INSERT INTO paysplit (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "SplitNum,";
        }
         
        command += "SplitAmt,PatNum,ProcDate,PayNum,IsDiscount,DiscountType,ProvNum,PayPlanNum,DatePay,ProcNum,DateEntry,UnearnedType,ClinicNum) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(paySplit.SplitNum) + ",";
        }
         
        command += "'" + POut.Double(paySplit.SplitAmt) + "'," + POut.Long(paySplit.PatNum) + "," + POut.Date(paySplit.ProcDate) + "," + POut.Long(paySplit.PayNum) + "," + POut.Bool(paySplit.IsDiscount) + "," + POut.Byte(paySplit.DiscountType) + "," + POut.Long(paySplit.ProvNum) + "," + POut.Long(paySplit.PayPlanNum) + "," + POut.Date(paySplit.DatePay) + "," + POut.Long(paySplit.ProcNum) + "," + DbHelper.Now() + "," + POut.Long(paySplit.UnearnedType) + "," + POut.Long(paySplit.ClinicNum) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            paySplit.SplitNum = Db.NonQ(command, true);
        } 
        return paySplit.SplitNum;
    }

    /**
    * Updates one PaySplit in the database.
    */
    public static void update(PaySplit paySplit) throws Exception {
        //DateEntry not allowed to change
        String command = "UPDATE paysplit SET " + "SplitAmt    = '" + POut.Double(paySplit.SplitAmt) + "', " + "PatNum      =  " + POut.Long(paySplit.PatNum) + ", " + "ProcDate    =  " + POut.Date(paySplit.ProcDate) + ", " + "PayNum      =  " + POut.Long(paySplit.PayNum) + ", " + "IsDiscount  =  " + POut.Bool(paySplit.IsDiscount) + ", " + "DiscountType=  " + POut.Byte(paySplit.DiscountType) + ", " + "ProvNum     =  " + POut.Long(paySplit.ProvNum) + ", " + "PayPlanNum  =  " + POut.Long(paySplit.PayPlanNum) + ", " + "DatePay     =  " + POut.Date(paySplit.DatePay) + ", " + "ProcNum     =  " + POut.Long(paySplit.ProcNum) + ", " + "UnearnedType=  " + POut.Long(paySplit.UnearnedType) + ", " + "ClinicNum   =  " + POut.Long(paySplit.ClinicNum) + " " + "WHERE SplitNum = " + POut.Long(paySplit.SplitNum);
        Db.NonQ(command);
    }

    /**
    * Updates one PaySplit in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(PaySplit paySplit, PaySplit oldPaySplit) throws Exception {
        String command = "";
        if (paySplit.SplitAmt != oldPaySplit.SplitAmt)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SplitAmt = '" + POut.Double(paySplit.SplitAmt) + "'";
        }
         
        if (paySplit.PatNum != oldPaySplit.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(paySplit.PatNum) + "";
        }
         
        if (paySplit.ProcDate != oldPaySplit.ProcDate)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProcDate = " + POut.Date(paySplit.ProcDate) + "";
        }
         
        if (paySplit.PayNum != oldPaySplit.PayNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PayNum = " + POut.Long(paySplit.PayNum) + "";
        }
         
        if (paySplit.IsDiscount != oldPaySplit.IsDiscount)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsDiscount = " + POut.Bool(paySplit.IsDiscount) + "";
        }
         
        if (paySplit.DiscountType != oldPaySplit.DiscountType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DiscountType = " + POut.Byte(paySplit.DiscountType) + "";
        }
         
        if (paySplit.ProvNum != oldPaySplit.ProvNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvNum = " + POut.Long(paySplit.ProvNum) + "";
        }
         
        if (paySplit.PayPlanNum != oldPaySplit.PayPlanNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PayPlanNum = " + POut.Long(paySplit.PayPlanNum) + "";
        }
         
        if (paySplit.DatePay != oldPaySplit.DatePay)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DatePay = " + POut.Date(paySplit.DatePay) + "";
        }
         
        if (paySplit.ProcNum != oldPaySplit.ProcNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProcNum = " + POut.Long(paySplit.ProcNum) + "";
        }
         
        //DateEntry not allowed to change
        if (paySplit.UnearnedType != oldPaySplit.UnearnedType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UnearnedType = " + POut.Long(paySplit.UnearnedType) + "";
        }
         
        if (paySplit.ClinicNum != oldPaySplit.ClinicNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClinicNum = " + POut.Long(paySplit.ClinicNum) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE paysplit SET " + command + " WHERE SplitNum = " + POut.Long(paySplit.SplitNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one PaySplit from the database.
    */
    public static void delete(long splitNum) throws Exception {
        String command = "DELETE FROM paysplit " + "WHERE SplitNum = " + POut.Long(splitNum);
        Db.NonQ(command);
    }

}


