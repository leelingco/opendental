//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:05 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ReconcileCrud   
{
    /**
    * Gets one Reconcile object from the database using the primary key.  Returns null if not found.
    */
    public static Reconcile selectOne(long reconcileNum) throws Exception {
        String command = "SELECT * FROM reconcile " + "WHERE ReconcileNum = " + POut.Long(reconcileNum);
        List<Reconcile> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Reconcile object from the database using a query.
    */
    public static Reconcile selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Reconcile> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Reconcile objects from the database using a query.
    */
    public static List<Reconcile> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Reconcile> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Reconcile> tableToList(DataTable table) throws Exception {
        List<Reconcile> retVal = new List<Reconcile>();
        Reconcile reconcile = new Reconcile();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            reconcile = new Reconcile();
            reconcile.ReconcileNum = PIn.Long(table.Rows[i]["ReconcileNum"].ToString());
            reconcile.AccountNum = PIn.Long(table.Rows[i]["AccountNum"].ToString());
            reconcile.StartingBal = PIn.Double(table.Rows[i]["StartingBal"].ToString());
            reconcile.EndingBal = PIn.Double(table.Rows[i]["EndingBal"].ToString());
            reconcile.DateReconcile = PIn.Date(table.Rows[i]["DateReconcile"].ToString());
            reconcile.IsLocked = PIn.Bool(table.Rows[i]["IsLocked"].ToString());
            retVal.Add(reconcile);
        }
        return retVal;
    }

    /**
    * Inserts one Reconcile into the database.  Returns the new priKey.
    */
    public static long insert(Reconcile reconcile) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            reconcile.ReconcileNum = DbHelper.GetNextOracleKey("reconcile", "ReconcileNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(reconcile,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        reconcile.ReconcileNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(reconcile,false);
        } 
    }

    /**
    * Inserts one Reconcile into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Reconcile reconcile, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            reconcile.ReconcileNum = ReplicationServers.GetKey("reconcile", "ReconcileNum");
        }
         
        String command = "INSERT INTO reconcile (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ReconcileNum,";
        }
         
        command += "AccountNum,StartingBal,EndingBal,DateReconcile,IsLocked) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(reconcile.ReconcileNum) + ",";
        }
         
        command += POut.Long(reconcile.AccountNum) + "," + "'" + POut.Double(reconcile.StartingBal) + "'," + "'" + POut.Double(reconcile.EndingBal) + "'," + POut.Date(reconcile.DateReconcile) + "," + POut.Bool(reconcile.IsLocked) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            reconcile.ReconcileNum = Db.NonQ(command, true);
        } 
        return reconcile.ReconcileNum;
    }

    /**
    * Updates one Reconcile in the database.
    */
    public static void update(Reconcile reconcile) throws Exception {
        String command = "UPDATE reconcile SET " + "AccountNum   =  " + POut.Long(reconcile.AccountNum) + ", " + "StartingBal  = '" + POut.Double(reconcile.StartingBal) + "', " + "EndingBal    = '" + POut.Double(reconcile.EndingBal) + "', " + "DateReconcile=  " + POut.Date(reconcile.DateReconcile) + ", " + "IsLocked     =  " + POut.Bool(reconcile.IsLocked) + " " + "WHERE ReconcileNum = " + POut.Long(reconcile.ReconcileNum);
        Db.NonQ(command);
    }

    /**
    * Updates one Reconcile in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Reconcile reconcile, Reconcile oldReconcile) throws Exception {
        String command = "";
        if (reconcile.AccountNum != oldReconcile.AccountNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AccountNum = " + POut.Long(reconcile.AccountNum) + "";
        }
         
        if (reconcile.StartingBal != oldReconcile.StartingBal)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "StartingBal = '" + POut.Double(reconcile.StartingBal) + "'";
        }
         
        if (reconcile.EndingBal != oldReconcile.EndingBal)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EndingBal = '" + POut.Double(reconcile.EndingBal) + "'";
        }
         
        if (reconcile.DateReconcile != oldReconcile.DateReconcile)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateReconcile = " + POut.Date(reconcile.DateReconcile) + "";
        }
         
        if (reconcile.IsLocked != oldReconcile.IsLocked)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsLocked = " + POut.Bool(reconcile.IsLocked) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE reconcile SET " + command + " WHERE ReconcileNum = " + POut.Long(reconcile.ReconcileNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one Reconcile from the database.
    */
    public static void delete(long reconcileNum) throws Exception {
        String command = "DELETE FROM reconcile " + "WHERE ReconcileNum = " + POut.Long(reconcileNum);
        Db.NonQ(command);
    }

}


