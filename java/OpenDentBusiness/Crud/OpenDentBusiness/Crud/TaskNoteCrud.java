//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:08 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class TaskNoteCrud   
{
    /**
    * Gets one TaskNote object from the database using the primary key.  Returns null if not found.
    */
    public static TaskNote selectOne(long taskNoteNum) throws Exception {
        String command = "SELECT * FROM tasknote " + "WHERE TaskNoteNum = " + POut.Long(taskNoteNum);
        List<TaskNote> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one TaskNote object from the database using a query.
    */
    public static TaskNote selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<TaskNote> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of TaskNote objects from the database using a query.
    */
    public static List<TaskNote> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<TaskNote> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<TaskNote> tableToList(DataTable table) throws Exception {
        List<TaskNote> retVal = new List<TaskNote>();
        TaskNote taskNote = new TaskNote();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            taskNote = new TaskNote();
            taskNote.TaskNoteNum = PIn.Long(table.Rows[i]["TaskNoteNum"].ToString());
            taskNote.TaskNum = PIn.Long(table.Rows[i]["TaskNum"].ToString());
            taskNote.UserNum = PIn.Long(table.Rows[i]["UserNum"].ToString());
            taskNote.DateTimeNote = PIn.DateT(table.Rows[i]["DateTimeNote"].ToString());
            taskNote.Note = PIn.String(table.Rows[i]["Note"].ToString());
            retVal.Add(taskNote);
        }
        return retVal;
    }

    /**
    * Inserts one TaskNote into the database.  Returns the new priKey.
    */
    public static long insert(TaskNote taskNote) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            taskNote.TaskNoteNum = DbHelper.GetNextOracleKey("tasknote", "TaskNoteNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(taskNote,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        taskNote.TaskNoteNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(taskNote,false);
        } 
    }

    /**
    * Inserts one TaskNote into the database.  Provides option to use the existing priKey.
    */
    public static long insert(TaskNote taskNote, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            taskNote.TaskNoteNum = ReplicationServers.GetKey("tasknote", "TaskNoteNum");
        }
         
        String command = "INSERT INTO tasknote (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "TaskNoteNum,";
        }
         
        command += "TaskNum,UserNum,DateTimeNote,Note) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(taskNote.TaskNoteNum) + ",";
        }
         
        command += POut.Long(taskNote.TaskNum) + "," + POut.Long(taskNote.UserNum) + "," + DbHelper.Now() + "," + "'" + POut.String(taskNote.Note) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            taskNote.TaskNoteNum = Db.NonQ(command, true);
        } 
        return taskNote.TaskNoteNum;
    }

    /**
    * Updates one TaskNote in the database.
    */
    public static void update(TaskNote taskNote) throws Exception {
        String command = "UPDATE tasknote SET " + "TaskNum     =  " + POut.Long(taskNote.TaskNum) + ", " + "UserNum     =  " + POut.Long(taskNote.UserNum) + ", " + "DateTimeNote=  " + POut.DateT(taskNote.DateTimeNote) + ", " + "Note        = '" + POut.String(taskNote.Note) + "' " + "WHERE TaskNoteNum = " + POut.Long(taskNote.TaskNoteNum);
        Db.NonQ(command);
    }

    /**
    * Updates one TaskNote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(TaskNote taskNote, TaskNote oldTaskNote) throws Exception {
        String command = "";
        if (taskNote.TaskNum != oldTaskNote.TaskNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "TaskNum = " + POut.Long(taskNote.TaskNum) + "";
        }
         
        if (taskNote.UserNum != oldTaskNote.UserNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UserNum = " + POut.Long(taskNote.UserNum) + "";
        }
         
        if (taskNote.DateTimeNote != oldTaskNote.DateTimeNote)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateTimeNote = " + POut.DateT(taskNote.DateTimeNote) + "";
        }
         
        if (taskNote.Note != oldTaskNote.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(taskNote.Note) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE tasknote SET " + command + " WHERE TaskNoteNum = " + POut.Long(taskNote.TaskNoteNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one TaskNote from the database.
    */
    public static void delete(long taskNoteNum) throws Exception {
        String command = "DELETE FROM tasknote " + "WHERE TaskNoteNum = " + POut.Long(taskNoteNum);
        Db.NonQ(command);
    }

}


