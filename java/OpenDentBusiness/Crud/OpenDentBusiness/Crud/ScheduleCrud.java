//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:06 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ScheduleCrud   
{
    /**
    * Gets one Schedule object from the database using the primary key.  Returns null if not found.
    */
    public static Schedule selectOne(long scheduleNum) throws Exception {
        String command = "SELECT * FROM schedule " + "WHERE ScheduleNum = " + POut.Long(scheduleNum);
        List<Schedule> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Schedule object from the database using a query.
    */
    public static Schedule selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Schedule> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Schedule objects from the database using a query.
    */
    public static List<Schedule> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Schedule> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Schedule> tableToList(DataTable table) throws Exception {
        List<Schedule> retVal = new List<Schedule>();
        Schedule schedule = new Schedule();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            schedule = new Schedule();
            schedule.ScheduleNum = PIn.Long(table.Rows[i]["ScheduleNum"].ToString());
            schedule.SchedDate = PIn.Date(table.Rows[i]["SchedDate"].ToString());
            schedule.StartTime = PIn.Time(table.Rows[i]["StartTime"].ToString());
            schedule.StopTime = PIn.Time(table.Rows[i]["StopTime"].ToString());
            schedule.SchedType = (ScheduleType)PIn.Int(table.Rows[i]["SchedType"].ToString());
            schedule.ProvNum = PIn.Long(table.Rows[i]["ProvNum"].ToString());
            schedule.BlockoutType = PIn.Long(table.Rows[i]["BlockoutType"].ToString());
            schedule.Note = PIn.String(table.Rows[i]["Note"].ToString());
            schedule.Status = (SchedStatus)PIn.Int(table.Rows[i]["Status"].ToString());
            schedule.EmployeeNum = PIn.Long(table.Rows[i]["EmployeeNum"].ToString());
            schedule.DateTStamp = PIn.DateT(table.Rows[i]["DateTStamp"].ToString());
            retVal.Add(schedule);
        }
        return retVal;
    }

    /**
    * Inserts one Schedule into the database.  Returns the new priKey.
    */
    public static long insert(Schedule schedule) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            schedule.ScheduleNum = DbHelper.GetNextOracleKey("schedule", "ScheduleNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(schedule,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        schedule.ScheduleNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(schedule,false);
        } 
    }

    /**
    * Inserts one Schedule into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Schedule schedule, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            schedule.ScheduleNum = ReplicationServers.GetKey("schedule", "ScheduleNum");
        }
         
        String command = "INSERT INTO schedule (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ScheduleNum,";
        }
         
        command += "SchedDate,StartTime,StopTime,SchedType,ProvNum,BlockoutType,Note,Status,EmployeeNum) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(schedule.ScheduleNum) + ",";
        }
         
        command += POut.Date(schedule.SchedDate) + "," + POut.Time(schedule.StartTime) + "," + POut.Time(schedule.StopTime) + "," + POut.Int((int)schedule.SchedType) + "," + POut.Long(schedule.ProvNum) + "," + POut.Long(schedule.BlockoutType) + "," + "'" + POut.String(schedule.Note) + "'," + POut.Int((int)schedule.Status) + "," + POut.Long(schedule.EmployeeNum) + ")";
        //DateTStamp can only be set by MySQL
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            schedule.ScheduleNum = Db.NonQ(command, true);
        } 
        return schedule.ScheduleNum;
    }

    /**
    * Updates one Schedule in the database.
    */
    public static void update(Schedule schedule) throws Exception {
        //DateTStamp can only be set by MySQL
        String command = "UPDATE schedule SET " + "SchedDate   =  " + POut.Date(schedule.SchedDate) + ", " + "StartTime   =  " + POut.Time(schedule.StartTime) + ", " + "StopTime    =  " + POut.Time(schedule.StopTime) + ", " + "SchedType   =  " + POut.Int((int)schedule.SchedType) + ", " + "ProvNum     =  " + POut.Long(schedule.ProvNum) + ", " + "BlockoutType=  " + POut.Long(schedule.BlockoutType) + ", " + "Note        = '" + POut.String(schedule.Note) + "', " + "Status      =  " + POut.Int((int)schedule.Status) + ", " + "EmployeeNum =  " + POut.Long(schedule.EmployeeNum) + " " + "WHERE ScheduleNum = " + POut.Long(schedule.ScheduleNum);
        Db.NonQ(command);
    }

    /**
    * Updates one Schedule in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Schedule schedule, Schedule oldSchedule) throws Exception {
        String command = "";
        if (schedule.SchedDate != oldSchedule.SchedDate)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SchedDate = " + POut.Date(schedule.SchedDate) + "";
        }
         
        if (schedule.StartTime != oldSchedule.StartTime)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "StartTime = " + POut.Time(schedule.StartTime) + "";
        }
         
        if (schedule.StopTime != oldSchedule.StopTime)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "StopTime = " + POut.Time(schedule.StopTime) + "";
        }
         
        if (schedule.SchedType != oldSchedule.SchedType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SchedType = " + POut.Int((int)schedule.SchedType) + "";
        }
         
        if (schedule.ProvNum != oldSchedule.ProvNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvNum = " + POut.Long(schedule.ProvNum) + "";
        }
         
        if (schedule.BlockoutType != oldSchedule.BlockoutType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "BlockoutType = " + POut.Long(schedule.BlockoutType) + "";
        }
         
        if (schedule.Note != oldSchedule.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(schedule.Note) + "'";
        }
         
        if (schedule.Status != oldSchedule.Status)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Status = " + POut.Int((int)schedule.Status) + "";
        }
         
        if (schedule.EmployeeNum != oldSchedule.EmployeeNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EmployeeNum = " + POut.Long(schedule.EmployeeNum) + "";
        }
         
        //DateTStamp can only be set by MySQL
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE schedule SET " + command + " WHERE ScheduleNum = " + POut.Long(schedule.ScheduleNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one Schedule from the database.
    */
    public static void delete(long scheduleNum) throws Exception {
        String command = "DELETE FROM schedule " + "WHERE ScheduleNum = " + POut.Long(scheduleNum);
        Db.NonQ(command);
    }

}


