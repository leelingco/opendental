//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:02 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class LabPanelCrud   
{
    /**
    * Gets one LabPanel object from the database using the primary key.  Returns null if not found.
    */
    public static LabPanel selectOne(long labPanelNum) throws Exception {
        String command = "SELECT * FROM labpanel " + "WHERE LabPanelNum = " + POut.Long(labPanelNum);
        List<LabPanel> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one LabPanel object from the database using a query.
    */
    public static LabPanel selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<LabPanel> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of LabPanel objects from the database using a query.
    */
    public static List<LabPanel> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<LabPanel> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<LabPanel> tableToList(DataTable table) throws Exception {
        List<LabPanel> retVal = new List<LabPanel>();
        LabPanel labPanel = new LabPanel();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            labPanel = new LabPanel();
            labPanel.LabPanelNum = PIn.Long(table.Rows[i]["LabPanelNum"].ToString());
            labPanel.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            labPanel.RawMessage = PIn.String(table.Rows[i]["RawMessage"].ToString());
            labPanel.LabNameAddress = PIn.String(table.Rows[i]["LabNameAddress"].ToString());
            labPanel.DateTStamp = PIn.DateT(table.Rows[i]["DateTStamp"].ToString());
            labPanel.SpecimenCondition = PIn.String(table.Rows[i]["SpecimenCondition"].ToString());
            labPanel.SpecimenSource = PIn.String(table.Rows[i]["SpecimenSource"].ToString());
            labPanel.ServiceId = PIn.String(table.Rows[i]["ServiceId"].ToString());
            labPanel.ServiceName = PIn.String(table.Rows[i]["ServiceName"].ToString());
            labPanel.MedicalOrderNum = PIn.Long(table.Rows[i]["MedicalOrderNum"].ToString());
            retVal.Add(labPanel);
        }
        return retVal;
    }

    /**
    * Inserts one LabPanel into the database.  Returns the new priKey.
    */
    public static long insert(LabPanel labPanel) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            labPanel.LabPanelNum = DbHelper.GetNextOracleKey("labpanel", "LabPanelNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(labPanel,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        labPanel.LabPanelNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(labPanel,false);
        } 
    }

    /**
    * Inserts one LabPanel into the database.  Provides option to use the existing priKey.
    */
    public static long insert(LabPanel labPanel, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            labPanel.LabPanelNum = ReplicationServers.GetKey("labpanel", "LabPanelNum");
        }
         
        String command = "INSERT INTO labpanel (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "LabPanelNum,";
        }
         
        command += "PatNum,RawMessage,LabNameAddress,SpecimenCondition,SpecimenSource,ServiceId,ServiceName,MedicalOrderNum) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(labPanel.LabPanelNum) + ",";
        }
         
        //DateTStamp can only be set by MySQL
        command += POut.Long(labPanel.PatNum) + "," + DbHelper.ParamChar + "paramRawMessage," + "'" + POut.String(labPanel.LabNameAddress) + "'," + "'" + POut.String(labPanel.SpecimenCondition) + "'," + "'" + POut.String(labPanel.SpecimenSource) + "'," + "'" + POut.String(labPanel.ServiceId) + "'," + "'" + POut.String(labPanel.ServiceName) + "'," + POut.Long(labPanel.MedicalOrderNum) + ")";
        if (labPanel.RawMessage == null)
        {
            labPanel.RawMessage = "";
        }
         
        OdSqlParameter paramRawMessage = new OdSqlParameter("paramRawMessage", OdDbType.Text, labPanel.RawMessage);
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command, paramRawMessage);
        }
        else
        {
            labPanel.LabPanelNum = Db.NonQ(command, true, paramRawMessage);
        } 
        return labPanel.LabPanelNum;
    }

    /**
    * Updates one LabPanel in the database.
    */
    public static void update(LabPanel labPanel) throws Exception {
        //DateTStamp can only be set by MySQL
        String command = "UPDATE labpanel SET " + "PatNum           =  " + POut.Long(labPanel.PatNum) + ", " + "RawMessage       =  " + DbHelper.ParamChar + "paramRawMessage, " + "LabNameAddress   = '" + POut.String(labPanel.LabNameAddress) + "', " + "SpecimenCondition= '" + POut.String(labPanel.SpecimenCondition) + "', " + "SpecimenSource   = '" + POut.String(labPanel.SpecimenSource) + "', " + "ServiceId        = '" + POut.String(labPanel.ServiceId) + "', " + "ServiceName      = '" + POut.String(labPanel.ServiceName) + "', " + "MedicalOrderNum  =  " + POut.Long(labPanel.MedicalOrderNum) + " " + "WHERE LabPanelNum = " + POut.Long(labPanel.LabPanelNum);
        if (labPanel.RawMessage == null)
        {
            labPanel.RawMessage = "";
        }
         
        OdSqlParameter paramRawMessage = new OdSqlParameter("paramRawMessage", OdDbType.Text, labPanel.RawMessage);
        Db.NonQ(command, paramRawMessage);
    }

    /**
    * Updates one LabPanel in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(LabPanel labPanel, LabPanel oldLabPanel) throws Exception {
        String command = "";
        if (labPanel.PatNum != oldLabPanel.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(labPanel.PatNum) + "";
        }
         
        if (labPanel.RawMessage != oldLabPanel.RawMessage)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RawMessage = " + DbHelper.ParamChar + "paramRawMessage";
        }
         
        if (labPanel.LabNameAddress != oldLabPanel.LabNameAddress)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "LabNameAddress = '" + POut.String(labPanel.LabNameAddress) + "'";
        }
         
        //DateTStamp can only be set by MySQL
        if (labPanel.SpecimenCondition != oldLabPanel.SpecimenCondition)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SpecimenCondition = '" + POut.String(labPanel.SpecimenCondition) + "'";
        }
         
        if (labPanel.SpecimenSource != oldLabPanel.SpecimenSource)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SpecimenSource = '" + POut.String(labPanel.SpecimenSource) + "'";
        }
         
        if (labPanel.ServiceId != oldLabPanel.ServiceId)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ServiceId = '" + POut.String(labPanel.ServiceId) + "'";
        }
         
        if (labPanel.ServiceName != oldLabPanel.ServiceName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ServiceName = '" + POut.String(labPanel.ServiceName) + "'";
        }
         
        if (labPanel.MedicalOrderNum != oldLabPanel.MedicalOrderNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MedicalOrderNum = " + POut.Long(labPanel.MedicalOrderNum) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        if (labPanel.RawMessage == null)
        {
            labPanel.RawMessage = "";
        }
         
        OdSqlParameter paramRawMessage = new OdSqlParameter("paramRawMessage", OdDbType.Text, labPanel.RawMessage);
        command = "UPDATE labpanel SET " + command + " WHERE LabPanelNum = " + POut.Long(labPanel.LabPanelNum);
        Db.NonQ(command, paramRawMessage);
    }

    /**
    * Deletes one LabPanel from the database.
    */
    public static void delete(long labPanelNum) throws Exception {
        String command = "DELETE FROM labpanel " + "WHERE LabPanelNum = " + POut.Long(labPanelNum);
        Db.NonQ(command);
    }

}


