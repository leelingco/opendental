//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:56 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ClaimAttachCrud   
{
    /**
    * Gets one ClaimAttach object from the database using the primary key.  Returns null if not found.
    */
    public static ClaimAttach selectOne(long claimAttachNum) throws Exception {
        String command = "SELECT * FROM claimattach " + "WHERE ClaimAttachNum = " + POut.Long(claimAttachNum);
        List<ClaimAttach> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ClaimAttach object from the database using a query.
    */
    public static ClaimAttach selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ClaimAttach> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ClaimAttach objects from the database using a query.
    */
    public static List<ClaimAttach> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ClaimAttach> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ClaimAttach> tableToList(DataTable table) throws Exception {
        List<ClaimAttach> retVal = new List<ClaimAttach>();
        ClaimAttach claimAttach = new ClaimAttach();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            claimAttach = new ClaimAttach();
            claimAttach.ClaimAttachNum = PIn.Long(table.Rows[i]["ClaimAttachNum"].ToString());
            claimAttach.ClaimNum = PIn.Long(table.Rows[i]["ClaimNum"].ToString());
            claimAttach.DisplayedFileName = PIn.String(table.Rows[i]["DisplayedFileName"].ToString());
            claimAttach.ActualFileName = PIn.String(table.Rows[i]["ActualFileName"].ToString());
            retVal.Add(claimAttach);
        }
        return retVal;
    }

    /**
    * Inserts one ClaimAttach into the database.  Returns the new priKey.
    */
    public static long insert(ClaimAttach claimAttach) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            claimAttach.ClaimAttachNum = DbHelper.GetNextOracleKey("claimattach", "ClaimAttachNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(claimAttach,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        claimAttach.ClaimAttachNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(claimAttach,false);
        } 
    }

    /**
    * Inserts one ClaimAttach into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ClaimAttach claimAttach, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            claimAttach.ClaimAttachNum = ReplicationServers.GetKey("claimattach", "ClaimAttachNum");
        }
         
        String command = "INSERT INTO claimattach (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ClaimAttachNum,";
        }
         
        command += "ClaimNum,DisplayedFileName,ActualFileName) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(claimAttach.ClaimAttachNum) + ",";
        }
         
        command += POut.Long(claimAttach.ClaimNum) + "," + "'" + POut.String(claimAttach.DisplayedFileName) + "'," + "'" + POut.String(claimAttach.ActualFileName) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            claimAttach.ClaimAttachNum = Db.NonQ(command, true);
        } 
        return claimAttach.ClaimAttachNum;
    }

    /**
    * Updates one ClaimAttach in the database.
    */
    public static void update(ClaimAttach claimAttach) throws Exception {
        String command = "UPDATE claimattach SET " + "ClaimNum         =  " + POut.Long(claimAttach.ClaimNum) + ", " + "DisplayedFileName= '" + POut.String(claimAttach.DisplayedFileName) + "', " + "ActualFileName   = '" + POut.String(claimAttach.ActualFileName) + "' " + "WHERE ClaimAttachNum = " + POut.Long(claimAttach.ClaimAttachNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ClaimAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ClaimAttach claimAttach, ClaimAttach oldClaimAttach) throws Exception {
        String command = "";
        if (claimAttach.ClaimNum != oldClaimAttach.ClaimNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClaimNum = " + POut.Long(claimAttach.ClaimNum) + "";
        }
         
        if (claimAttach.DisplayedFileName != oldClaimAttach.DisplayedFileName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DisplayedFileName = '" + POut.String(claimAttach.DisplayedFileName) + "'";
        }
         
        if (claimAttach.ActualFileName != oldClaimAttach.ActualFileName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ActualFileName = '" + POut.String(claimAttach.ActualFileName) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE claimattach SET " + command + " WHERE ClaimAttachNum = " + POut.Long(claimAttach.ClaimAttachNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ClaimAttach from the database.
    */
    public static void delete(long claimAttachNum) throws Exception {
        String command = "DELETE FROM claimattach " + "WHERE ClaimAttachNum = " + POut.Long(claimAttachNum);
        Db.NonQ(command);
    }

}


