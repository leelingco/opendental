//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:06 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ResellerServiceCrud   
{
    /**
    * Gets one ResellerService object from the database using the primary key.  Returns null if not found.
    */
    public static ResellerService selectOne(long resellerServiceNum) throws Exception {
        String command = "SELECT * FROM resellerservice " + "WHERE ResellerServiceNum = " + POut.Long(resellerServiceNum);
        List<ResellerService> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ResellerService object from the database using a query.
    */
    public static ResellerService selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ResellerService> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ResellerService objects from the database using a query.
    */
    public static List<ResellerService> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ResellerService> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ResellerService> tableToList(DataTable table) throws Exception {
        List<ResellerService> retVal = new List<ResellerService>();
        ResellerService resellerService = new ResellerService();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            resellerService = new ResellerService();
            resellerService.ResellerServiceNum = PIn.Long(table.Rows[i]["ResellerServiceNum"].ToString());
            resellerService.ResellerNum = PIn.Long(table.Rows[i]["ResellerNum"].ToString());
            resellerService.CodeNum = PIn.Long(table.Rows[i]["CodeNum"].ToString());
            resellerService.Fee = PIn.Double(table.Rows[i]["Fee"].ToString());
            retVal.Add(resellerService);
        }
        return retVal;
    }

    /**
    * Inserts one ResellerService into the database.  Returns the new priKey.
    */
    public static long insert(ResellerService resellerService) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            resellerService.ResellerServiceNum = DbHelper.GetNextOracleKey("resellerservice", "ResellerServiceNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(resellerService,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        resellerService.ResellerServiceNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(resellerService,false);
        } 
    }

    /**
    * Inserts one ResellerService into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ResellerService resellerService, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            resellerService.ResellerServiceNum = ReplicationServers.GetKey("resellerservice", "ResellerServiceNum");
        }
         
        String command = "INSERT INTO resellerservice (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ResellerServiceNum,";
        }
         
        command += "ResellerNum,CodeNum,Fee) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(resellerService.ResellerServiceNum) + ",";
        }
         
        command += POut.Long(resellerService.ResellerNum) + "," + POut.Long(resellerService.CodeNum) + "," + "'" + POut.Double(resellerService.Fee) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            resellerService.ResellerServiceNum = Db.NonQ(command, true);
        } 
        return resellerService.ResellerServiceNum;
    }

    /**
    * Updates one ResellerService in the database.
    */
    public static void update(ResellerService resellerService) throws Exception {
        String command = "UPDATE resellerservice SET " + "ResellerNum       =  " + POut.Long(resellerService.ResellerNum) + ", " + "CodeNum           =  " + POut.Long(resellerService.CodeNum) + ", " + "Fee               = '" + POut.Double(resellerService.Fee) + "' " + "WHERE ResellerServiceNum = " + POut.Long(resellerService.ResellerServiceNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ResellerService in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ResellerService resellerService, ResellerService oldResellerService) throws Exception {
        String command = "";
        if (resellerService.ResellerNum != oldResellerService.ResellerNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ResellerNum = " + POut.Long(resellerService.ResellerNum) + "";
        }
         
        if (resellerService.CodeNum != oldResellerService.CodeNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeNum = " + POut.Long(resellerService.CodeNum) + "";
        }
         
        if (resellerService.Fee != oldResellerService.Fee)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Fee = '" + POut.Double(resellerService.Fee) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE resellerservice SET " + command + " WHERE ResellerServiceNum = " + POut.Long(resellerService.ResellerServiceNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ResellerService from the database.
    */
    public static void delete(long resellerServiceNum) throws Exception {
        String command = "DELETE FROM resellerservice " + "WHERE ResellerServiceNum = " + POut.Long(resellerServiceNum);
        Db.NonQ(command);
    }

}


