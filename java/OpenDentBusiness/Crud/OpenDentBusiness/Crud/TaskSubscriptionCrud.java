//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:08 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class TaskSubscriptionCrud   
{
    /**
    * Gets one TaskSubscription object from the database using the primary key.  Returns null if not found.
    */
    public static TaskSubscription selectOne(long taskSubscriptionNum) throws Exception {
        String command = "SELECT * FROM tasksubscription " + "WHERE TaskSubscriptionNum = " + POut.Long(taskSubscriptionNum);
        List<TaskSubscription> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one TaskSubscription object from the database using a query.
    */
    public static TaskSubscription selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<TaskSubscription> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of TaskSubscription objects from the database using a query.
    */
    public static List<TaskSubscription> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<TaskSubscription> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<TaskSubscription> tableToList(DataTable table) throws Exception {
        List<TaskSubscription> retVal = new List<TaskSubscription>();
        TaskSubscription taskSubscription = new TaskSubscription();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            taskSubscription = new TaskSubscription();
            taskSubscription.TaskSubscriptionNum = PIn.Long(table.Rows[i]["TaskSubscriptionNum"].ToString());
            taskSubscription.UserNum = PIn.Long(table.Rows[i]["UserNum"].ToString());
            taskSubscription.TaskListNum = PIn.Long(table.Rows[i]["TaskListNum"].ToString());
            retVal.Add(taskSubscription);
        }
        return retVal;
    }

    /**
    * Inserts one TaskSubscription into the database.  Returns the new priKey.
    */
    public static long insert(TaskSubscription taskSubscription) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            taskSubscription.TaskSubscriptionNum = DbHelper.GetNextOracleKey("tasksubscription", "TaskSubscriptionNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(taskSubscription,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        taskSubscription.TaskSubscriptionNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(taskSubscription,false);
        } 
    }

    /**
    * Inserts one TaskSubscription into the database.  Provides option to use the existing priKey.
    */
    public static long insert(TaskSubscription taskSubscription, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            taskSubscription.TaskSubscriptionNum = ReplicationServers.GetKey("tasksubscription", "TaskSubscriptionNum");
        }
         
        String command = "INSERT INTO tasksubscription (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "TaskSubscriptionNum,";
        }
         
        command += "UserNum,TaskListNum) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(taskSubscription.TaskSubscriptionNum) + ",";
        }
         
        command += POut.Long(taskSubscription.UserNum) + "," + POut.Long(taskSubscription.TaskListNum) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            taskSubscription.TaskSubscriptionNum = Db.NonQ(command, true);
        } 
        return taskSubscription.TaskSubscriptionNum;
    }

    /**
    * Updates one TaskSubscription in the database.
    */
    public static void update(TaskSubscription taskSubscription) throws Exception {
        String command = "UPDATE tasksubscription SET " + "UserNum            =  " + POut.Long(taskSubscription.UserNum) + ", " + "TaskListNum        =  " + POut.Long(taskSubscription.TaskListNum) + " " + "WHERE TaskSubscriptionNum = " + POut.Long(taskSubscription.TaskSubscriptionNum);
        Db.NonQ(command);
    }

    /**
    * Updates one TaskSubscription in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(TaskSubscription taskSubscription, TaskSubscription oldTaskSubscription) throws Exception {
        String command = "";
        if (taskSubscription.UserNum != oldTaskSubscription.UserNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UserNum = " + POut.Long(taskSubscription.UserNum) + "";
        }
         
        if (taskSubscription.TaskListNum != oldTaskSubscription.TaskListNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "TaskListNum = " + POut.Long(taskSubscription.TaskListNum) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE tasksubscription SET " + command + " WHERE TaskSubscriptionNum = " + POut.Long(taskSubscription.TaskSubscriptionNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one TaskSubscription from the database.
    */
    public static void delete(long taskSubscriptionNum) throws Exception {
        String command = "DELETE FROM tasksubscription " + "WHERE TaskSubscriptionNum = " + POut.Long(taskSubscriptionNum);
        Db.NonQ(command);
    }

}


