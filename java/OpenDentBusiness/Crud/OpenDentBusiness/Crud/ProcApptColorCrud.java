//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:04 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ProcApptColorCrud   
{
    /**
    * Gets one ProcApptColor object from the database using the primary key.  Returns null if not found.
    */
    public static ProcApptColor selectOne(long procApptColorNum) throws Exception {
        String command = "SELECT * FROM procapptcolor " + "WHERE ProcApptColorNum = " + POut.Long(procApptColorNum);
        List<ProcApptColor> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ProcApptColor object from the database using a query.
    */
    public static ProcApptColor selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ProcApptColor> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ProcApptColor objects from the database using a query.
    */
    public static List<ProcApptColor> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ProcApptColor> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ProcApptColor> tableToList(DataTable table) throws Exception {
        List<ProcApptColor> retVal = new List<ProcApptColor>();
        ProcApptColor procApptColor = new ProcApptColor();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            procApptColor = new ProcApptColor();
            procApptColor.ProcApptColorNum = PIn.Long(table.Rows[i]["ProcApptColorNum"].ToString());
            procApptColor.CodeRange = PIn.String(table.Rows[i]["CodeRange"].ToString());
            procApptColor.ShowPreviousDate = PIn.Bool(table.Rows[i]["ShowPreviousDate"].ToString());
            procApptColor.ColorText = Color.FromArgb(PIn.Int(table.Rows[i]["ColorText"].ToString()));
            retVal.Add(procApptColor);
        }
        return retVal;
    }

    /**
    * Inserts one ProcApptColor into the database.  Returns the new priKey.
    */
    public static long insert(ProcApptColor procApptColor) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            procApptColor.ProcApptColorNum = DbHelper.GetNextOracleKey("procapptcolor", "ProcApptColorNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(procApptColor,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        procApptColor.ProcApptColorNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(procApptColor,false);
        } 
    }

    /**
    * Inserts one ProcApptColor into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ProcApptColor procApptColor, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            procApptColor.ProcApptColorNum = ReplicationServers.GetKey("procapptcolor", "ProcApptColorNum");
        }
         
        String command = "INSERT INTO procapptcolor (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ProcApptColorNum,";
        }
         
        command += "CodeRange,ShowPreviousDate,ColorText) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(procApptColor.ProcApptColorNum) + ",";
        }
         
        command += "'" + POut.String(procApptColor.CodeRange) + "'," + POut.Bool(procApptColor.ShowPreviousDate) + "," + POut.Int(procApptColor.ColorText.ToArgb()) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            procApptColor.ProcApptColorNum = Db.NonQ(command, true);
        } 
        return procApptColor.ProcApptColorNum;
    }

    /**
    * Updates one ProcApptColor in the database.
    */
    public static void update(ProcApptColor procApptColor) throws Exception {
        String command = "UPDATE procapptcolor SET " + "CodeRange       = '" + POut.String(procApptColor.CodeRange) + "', " + "ShowPreviousDate=  " + POut.Bool(procApptColor.ShowPreviousDate) + ", " + "ColorText       =  " + POut.Int(procApptColor.ColorText.ToArgb()) + " " + "WHERE ProcApptColorNum = " + POut.Long(procApptColor.ProcApptColorNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ProcApptColor in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ProcApptColor procApptColor, ProcApptColor oldProcApptColor) throws Exception {
        String command = "";
        if (procApptColor.CodeRange != oldProcApptColor.CodeRange)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeRange = '" + POut.String(procApptColor.CodeRange) + "'";
        }
         
        if (procApptColor.ShowPreviousDate != oldProcApptColor.ShowPreviousDate)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ShowPreviousDate = " + POut.Bool(procApptColor.ShowPreviousDate) + "";
        }
         
        if (procApptColor.ColorText != oldProcApptColor.ColorText)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ColorText = " + POut.Int(procApptColor.ColorText.ToArgb()) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE procapptcolor SET " + command + " WHERE ProcApptColorNum = " + POut.Long(procApptColor.ProcApptColorNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ProcApptColor from the database.
    */
    public static void delete(long procApptColorNum) throws Exception {
        String command = "DELETE FROM procapptcolor " + "WHERE ProcApptColorNum = " + POut.Long(procApptColorNum);
        Db.NonQ(command);
    }

}


