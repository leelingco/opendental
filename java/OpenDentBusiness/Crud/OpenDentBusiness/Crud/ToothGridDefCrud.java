//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:08 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ToothGridDefCrud   
{
    /**
    * Gets one ToothGridDef object from the database using the primary key.  Returns null if not found.
    */
    public static ToothGridDef selectOne(long toothGridDefNum) throws Exception {
        String command = "SELECT * FROM toothgriddef " + "WHERE ToothGridDefNum = " + POut.Long(toothGridDefNum);
        List<ToothGridDef> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ToothGridDef object from the database using a query.
    */
    public static ToothGridDef selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ToothGridDef> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ToothGridDef objects from the database using a query.
    */
    public static List<ToothGridDef> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ToothGridDef> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ToothGridDef> tableToList(DataTable table) throws Exception {
        List<ToothGridDef> retVal = new List<ToothGridDef>();
        ToothGridDef toothGridDef = new ToothGridDef();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            toothGridDef = new ToothGridDef();
            toothGridDef.ToothGridDefNum = PIn.Long(table.Rows[i]["ToothGridDefNum"].ToString());
            toothGridDef.SheetFieldDefNum = PIn.Long(table.Rows[i]["SheetFieldDefNum"].ToString());
            toothGridDef.NameInternal = PIn.String(table.Rows[i]["NameInternal"].ToString());
            toothGridDef.NameShowing = PIn.String(table.Rows[i]["NameShowing"].ToString());
            toothGridDef.CellType = (ToothGridCellType)PIn.Int(table.Rows[i]["CellType"].ToString());
            toothGridDef.ItemOrder = PIn.Int(table.Rows[i]["ItemOrder"].ToString());
            toothGridDef.ColumnWidth = PIn.Int(table.Rows[i]["ColumnWidth"].ToString());
            toothGridDef.CodeNum = PIn.Long(table.Rows[i]["CodeNum"].ToString());
            toothGridDef.ProcStatus = (ProcStat)PIn.Int(table.Rows[i]["ProcStatus"].ToString());
            retVal.Add(toothGridDef);
        }
        return retVal;
    }

    /**
    * Inserts one ToothGridDef into the database.  Returns the new priKey.
    */
    public static long insert(ToothGridDef toothGridDef) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            toothGridDef.ToothGridDefNum = DbHelper.GetNextOracleKey("toothgriddef", "ToothGridDefNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(toothGridDef,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        toothGridDef.ToothGridDefNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(toothGridDef,false);
        } 
    }

    /**
    * Inserts one ToothGridDef into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ToothGridDef toothGridDef, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            toothGridDef.ToothGridDefNum = ReplicationServers.GetKey("toothgriddef", "ToothGridDefNum");
        }
         
        String command = "INSERT INTO toothgriddef (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "ToothGridDefNum,";
        }
         
        command += "SheetFieldDefNum,NameInternal,NameShowing,CellType,ItemOrder,ColumnWidth,CodeNum,ProcStatus) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(toothGridDef.ToothGridDefNum) + ",";
        }
         
        command += POut.Long(toothGridDef.SheetFieldDefNum) + "," + "'" + POut.String(toothGridDef.NameInternal) + "'," + "'" + POut.String(toothGridDef.NameShowing) + "'," + POut.Int((int)toothGridDef.CellType) + "," + POut.Int(toothGridDef.ItemOrder) + "," + POut.Int(toothGridDef.ColumnWidth) + "," + POut.Long(toothGridDef.CodeNum) + "," + POut.Int((int)toothGridDef.ProcStatus) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            toothGridDef.ToothGridDefNum = Db.NonQ(command, true);
        } 
        return toothGridDef.ToothGridDefNum;
    }

    /**
    * Updates one ToothGridDef in the database.
    */
    public static void update(ToothGridDef toothGridDef) throws Exception {
        String command = "UPDATE toothgriddef SET " + "SheetFieldDefNum=  " + POut.Long(toothGridDef.SheetFieldDefNum) + ", " + "NameInternal    = '" + POut.String(toothGridDef.NameInternal) + "', " + "NameShowing     = '" + POut.String(toothGridDef.NameShowing) + "', " + "CellType        =  " + POut.Int((int)toothGridDef.CellType) + ", " + "ItemOrder       =  " + POut.Int(toothGridDef.ItemOrder) + ", " + "ColumnWidth     =  " + POut.Int(toothGridDef.ColumnWidth) + ", " + "CodeNum         =  " + POut.Long(toothGridDef.CodeNum) + ", " + "ProcStatus      =  " + POut.Int((int)toothGridDef.ProcStatus) + " " + "WHERE ToothGridDefNum = " + POut.Long(toothGridDef.ToothGridDefNum);
        Db.NonQ(command);
    }

    /**
    * Updates one ToothGridDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ToothGridDef toothGridDef, ToothGridDef oldToothGridDef) throws Exception {
        String command = "";
        if (toothGridDef.SheetFieldDefNum != oldToothGridDef.SheetFieldDefNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SheetFieldDefNum = " + POut.Long(toothGridDef.SheetFieldDefNum) + "";
        }
         
        if (toothGridDef.NameInternal != oldToothGridDef.NameInternal)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "NameInternal = '" + POut.String(toothGridDef.NameInternal) + "'";
        }
         
        if (toothGridDef.NameShowing != oldToothGridDef.NameShowing)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "NameShowing = '" + POut.String(toothGridDef.NameShowing) + "'";
        }
         
        if (toothGridDef.CellType != oldToothGridDef.CellType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CellType = " + POut.Int((int)toothGridDef.CellType) + "";
        }
         
        if (toothGridDef.ItemOrder != oldToothGridDef.ItemOrder)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ItemOrder = " + POut.Int(toothGridDef.ItemOrder) + "";
        }
         
        if (toothGridDef.ColumnWidth != oldToothGridDef.ColumnWidth)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ColumnWidth = " + POut.Int(toothGridDef.ColumnWidth) + "";
        }
         
        if (toothGridDef.CodeNum != oldToothGridDef.CodeNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeNum = " + POut.Long(toothGridDef.CodeNum) + "";
        }
         
        if (toothGridDef.ProcStatus != oldToothGridDef.ProcStatus)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProcStatus = " + POut.Int((int)toothGridDef.ProcStatus) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE toothgriddef SET " + command + " WHERE ToothGridDefNum = " + POut.Long(toothGridDef.ToothGridDefNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one ToothGridDef from the database.
    */
    public static void delete(long toothGridDefNum) throws Exception {
        String command = "DELETE FROM toothgriddef " + "WHERE ToothGridDefNum = " + POut.Long(toothGridDefNum);
        Db.NonQ(command);
    }

}


