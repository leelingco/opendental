//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:07 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class StatementCrud   
{
    /**
    * Gets one Statement object from the database using the primary key.  Returns null if not found.
    */
    public static Statement selectOne(long statementNum) throws Exception {
        String command = "SELECT * FROM statement " + "WHERE StatementNum = " + POut.Long(statementNum);
        List<Statement> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one Statement object from the database using a query.
    */
    public static Statement selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Statement> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of Statement objects from the database using a query.
    */
    public static List<Statement> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<Statement> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<Statement> tableToList(DataTable table) throws Exception {
        List<Statement> retVal = new List<Statement>();
        Statement statement = new Statement();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            statement = new Statement();
            statement.StatementNum = PIn.Long(table.Rows[i]["StatementNum"].ToString());
            statement.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            statement.DateSent = PIn.Date(table.Rows[i]["DateSent"].ToString());
            statement.DateRangeFrom = PIn.Date(table.Rows[i]["DateRangeFrom"].ToString());
            statement.DateRangeTo = PIn.Date(table.Rows[i]["DateRangeTo"].ToString());
            statement.Note = PIn.String(table.Rows[i]["Note"].ToString());
            statement.NoteBold = PIn.String(table.Rows[i]["NoteBold"].ToString());
            statement.Mode_ = (StatementMode)PIn.Int(table.Rows[i]["Mode_"].ToString());
            statement.HidePayment = PIn.Bool(table.Rows[i]["HidePayment"].ToString());
            statement.SinglePatient = PIn.Bool(table.Rows[i]["SinglePatient"].ToString());
            statement.Intermingled = PIn.Bool(table.Rows[i]["Intermingled"].ToString());
            statement.IsSent = PIn.Bool(table.Rows[i]["IsSent"].ToString());
            statement.DocNum = PIn.Long(table.Rows[i]["DocNum"].ToString());
            statement.DateTStamp = PIn.DateT(table.Rows[i]["DateTStamp"].ToString());
            statement.IsReceipt = PIn.Bool(table.Rows[i]["IsReceipt"].ToString());
            statement.IsInvoice = PIn.Bool(table.Rows[i]["IsInvoice"].ToString());
            statement.IsInvoiceCopy = PIn.Bool(table.Rows[i]["IsInvoiceCopy"].ToString());
            statement.EmailSubject = PIn.String(table.Rows[i]["EmailSubject"].ToString());
            statement.EmailBody = PIn.String(table.Rows[i]["EmailBody"].ToString());
            retVal.Add(statement);
        }
        return retVal;
    }

    /**
    * Inserts one Statement into the database.  Returns the new priKey.
    */
    public static long insert(Statement statement) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            statement.StatementNum = DbHelper.GetNextOracleKey("statement", "StatementNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(statement,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        statement.StatementNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(statement,false);
        } 
    }

    /**
    * Inserts one Statement into the database.  Provides option to use the existing priKey.
    */
    public static long insert(Statement statement, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            statement.StatementNum = ReplicationServers.GetKey("statement", "StatementNum");
        }
         
        String command = "INSERT INTO statement (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "StatementNum,";
        }
         
        command += "PatNum,DateSent,DateRangeFrom,DateRangeTo,Note,NoteBold,Mode_,HidePayment,SinglePatient,Intermingled,IsSent,DocNum,IsReceipt,IsInvoice,IsInvoiceCopy,EmailSubject,EmailBody) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(statement.StatementNum) + ",";
        }
         
        //DateTStamp can only be set by MySQL
        command += POut.Long(statement.PatNum) + "," + POut.Date(statement.DateSent) + "," + POut.Date(statement.DateRangeFrom) + "," + POut.Date(statement.DateRangeTo) + "," + "'" + POut.String(statement.Note) + "'," + "'" + POut.String(statement.NoteBold) + "'," + POut.Int((int)statement.Mode_) + "," + POut.Bool(statement.HidePayment) + "," + POut.Bool(statement.SinglePatient) + "," + POut.Bool(statement.Intermingled) + "," + POut.Bool(statement.IsSent) + "," + POut.Long(statement.DocNum) + "," + POut.Bool(statement.IsReceipt) + "," + POut.Bool(statement.IsInvoice) + "," + POut.Bool(statement.IsInvoiceCopy) + "," + "'" + POut.String(statement.EmailSubject) + "'," + DbHelper.ParamChar + "paramEmailBody)";
        if (statement.EmailBody == null)
        {
            statement.EmailBody = "";
        }
         
        OdSqlParameter paramEmailBody = new OdSqlParameter("paramEmailBody", OdDbType.Text, statement.EmailBody);
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command, paramEmailBody);
        }
        else
        {
            statement.StatementNum = Db.NonQ(command, true, paramEmailBody);
        } 
        return statement.StatementNum;
    }

    /**
    * Updates one Statement in the database.
    */
    public static void update(Statement statement) throws Exception {
        //DateTStamp can only be set by MySQL
        String command = "UPDATE statement SET " + "PatNum       =  " + POut.Long(statement.PatNum) + ", " + "DateSent     =  " + POut.Date(statement.DateSent) + ", " + "DateRangeFrom=  " + POut.Date(statement.DateRangeFrom) + ", " + "DateRangeTo  =  " + POut.Date(statement.DateRangeTo) + ", " + "Note         = '" + POut.String(statement.Note) + "', " + "NoteBold     = '" + POut.String(statement.NoteBold) + "', " + "Mode_        =  " + POut.Int((int)statement.Mode_) + ", " + "HidePayment  =  " + POut.Bool(statement.HidePayment) + ", " + "SinglePatient=  " + POut.Bool(statement.SinglePatient) + ", " + "Intermingled =  " + POut.Bool(statement.Intermingled) + ", " + "IsSent       =  " + POut.Bool(statement.IsSent) + ", " + "DocNum       =  " + POut.Long(statement.DocNum) + ", " + "IsReceipt    =  " + POut.Bool(statement.IsReceipt) + ", " + "IsInvoice    =  " + POut.Bool(statement.IsInvoice) + ", " + "IsInvoiceCopy=  " + POut.Bool(statement.IsInvoiceCopy) + ", " + "EmailSubject = '" + POut.String(statement.EmailSubject) + "', " + "EmailBody    =  " + DbHelper.ParamChar + "paramEmailBody " + "WHERE StatementNum = " + POut.Long(statement.StatementNum);
        if (statement.EmailBody == null)
        {
            statement.EmailBody = "";
        }
         
        OdSqlParameter paramEmailBody = new OdSqlParameter("paramEmailBody", OdDbType.Text, statement.EmailBody);
        Db.NonQ(command, paramEmailBody);
    }

    /**
    * Updates one Statement in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(Statement statement, Statement oldStatement) throws Exception {
        String command = "";
        if (statement.PatNum != oldStatement.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(statement.PatNum) + "";
        }
         
        if (statement.DateSent != oldStatement.DateSent)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateSent = " + POut.Date(statement.DateSent) + "";
        }
         
        if (statement.DateRangeFrom != oldStatement.DateRangeFrom)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateRangeFrom = " + POut.Date(statement.DateRangeFrom) + "";
        }
         
        if (statement.DateRangeTo != oldStatement.DateRangeTo)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DateRangeTo = " + POut.Date(statement.DateRangeTo) + "";
        }
         
        if (statement.Note != oldStatement.Note)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.String(statement.Note) + "'";
        }
         
        if (statement.NoteBold != oldStatement.NoteBold)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "NoteBold = '" + POut.String(statement.NoteBold) + "'";
        }
         
        if (statement.Mode_ != oldStatement.Mode_)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Mode_ = " + POut.Int((int)statement.Mode_) + "";
        }
         
        if (statement.HidePayment != oldStatement.HidePayment)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "HidePayment = " + POut.Bool(statement.HidePayment) + "";
        }
         
        if (statement.SinglePatient != oldStatement.SinglePatient)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SinglePatient = " + POut.Bool(statement.SinglePatient) + "";
        }
         
        if (statement.Intermingled != oldStatement.Intermingled)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Intermingled = " + POut.Bool(statement.Intermingled) + "";
        }
         
        if (statement.IsSent != oldStatement.IsSent)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsSent = " + POut.Bool(statement.IsSent) + "";
        }
         
        if (statement.DocNum != oldStatement.DocNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DocNum = " + POut.Long(statement.DocNum) + "";
        }
         
        //DateTStamp can only be set by MySQL
        if (statement.IsReceipt != oldStatement.IsReceipt)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsReceipt = " + POut.Bool(statement.IsReceipt) + "";
        }
         
        if (statement.IsInvoice != oldStatement.IsInvoice)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsInvoice = " + POut.Bool(statement.IsInvoice) + "";
        }
         
        if (statement.IsInvoiceCopy != oldStatement.IsInvoiceCopy)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsInvoiceCopy = " + POut.Bool(statement.IsInvoiceCopy) + "";
        }
         
        if (statement.EmailSubject != oldStatement.EmailSubject)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EmailSubject = '" + POut.String(statement.EmailSubject) + "'";
        }
         
        if (statement.EmailBody != oldStatement.EmailBody)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EmailBody = " + DbHelper.ParamChar + "paramEmailBody";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        if (statement.EmailBody == null)
        {
            statement.EmailBody = "";
        }
         
        OdSqlParameter paramEmailBody = new OdSqlParameter("paramEmailBody", OdDbType.Text, statement.EmailBody);
        command = "UPDATE statement SET " + command + " WHERE StatementNum = " + POut.Long(statement.StatementNum);
        Db.NonQ(command, paramEmailBody);
    }

    /**
    * Deletes one Statement from the database.
    */
    public static void delete(long statementNum) throws Exception {
        String command = "DELETE FROM statement " + "WHERE StatementNum = " + POut.Long(statementNum);
        Db.NonQ(command);
    }

}


