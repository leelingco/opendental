//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:07:58 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class EhrCarePlanCrud   
{
    /**
    * Gets one EhrCarePlan object from the database using the primary key.  Returns null if not found.
    */
    public static EhrCarePlan selectOne(long ehrCarePlanNum) throws Exception {
        String command = "SELECT * FROM ehrcareplan " + "WHERE EhrCarePlanNum = " + POut.Long(ehrCarePlanNum);
        List<EhrCarePlan> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one EhrCarePlan object from the database using a query.
    */
    public static EhrCarePlan selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrCarePlan> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of EhrCarePlan objects from the database using a query.
    */
    public static List<EhrCarePlan> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<EhrCarePlan> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<EhrCarePlan> tableToList(DataTable table) throws Exception {
        List<EhrCarePlan> retVal = new List<EhrCarePlan>();
        EhrCarePlan ehrCarePlan = new EhrCarePlan();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            ehrCarePlan = new EhrCarePlan();
            ehrCarePlan.EhrCarePlanNum = PIn.Long(table.Rows[i]["EhrCarePlanNum"].ToString());
            ehrCarePlan.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            ehrCarePlan.SnomedEducation = PIn.String(table.Rows[i]["SnomedEducation"].ToString());
            ehrCarePlan.Instructions = PIn.String(table.Rows[i]["Instructions"].ToString());
            ehrCarePlan.DatePlanned = PIn.Date(table.Rows[i]["DatePlanned"].ToString());
            retVal.Add(ehrCarePlan);
        }
        return retVal;
    }

    /**
    * Inserts one EhrCarePlan into the database.  Returns the new priKey.
    */
    public static long insert(EhrCarePlan ehrCarePlan) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            ehrCarePlan.EhrCarePlanNum = DbHelper.GetNextOracleKey("ehrcareplan", "EhrCarePlanNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(ehrCarePlan,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        ehrCarePlan.EhrCarePlanNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(ehrCarePlan,false);
        } 
    }

    /**
    * Inserts one EhrCarePlan into the database.  Provides option to use the existing priKey.
    */
    public static long insert(EhrCarePlan ehrCarePlan, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            ehrCarePlan.EhrCarePlanNum = ReplicationServers.GetKey("ehrcareplan", "EhrCarePlanNum");
        }
         
        String command = "INSERT INTO ehrcareplan (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "EhrCarePlanNum,";
        }
         
        command += "PatNum,SnomedEducation,Instructions,DatePlanned) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(ehrCarePlan.EhrCarePlanNum) + ",";
        }
         
        command += POut.Long(ehrCarePlan.PatNum) + "," + "'" + POut.String(ehrCarePlan.SnomedEducation) + "'," + "'" + POut.String(ehrCarePlan.Instructions) + "'," + POut.Date(ehrCarePlan.DatePlanned) + ")";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            ehrCarePlan.EhrCarePlanNum = Db.NonQ(command, true);
        } 
        return ehrCarePlan.EhrCarePlanNum;
    }

    /**
    * Updates one EhrCarePlan in the database.
    */
    public static void update(EhrCarePlan ehrCarePlan) throws Exception {
        String command = "UPDATE ehrcareplan SET " + "PatNum         =  " + POut.Long(ehrCarePlan.PatNum) + ", " + "SnomedEducation= '" + POut.String(ehrCarePlan.SnomedEducation) + "', " + "Instructions   = '" + POut.String(ehrCarePlan.Instructions) + "', " + "DatePlanned    =  " + POut.Date(ehrCarePlan.DatePlanned) + " " + "WHERE EhrCarePlanNum = " + POut.Long(ehrCarePlan.EhrCarePlanNum);
        Db.NonQ(command);
    }

    /**
    * Updates one EhrCarePlan in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(EhrCarePlan ehrCarePlan, EhrCarePlan oldEhrCarePlan) throws Exception {
        String command = "";
        if (ehrCarePlan.PatNum != oldEhrCarePlan.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.Long(ehrCarePlan.PatNum) + "";
        }
         
        if (ehrCarePlan.SnomedEducation != oldEhrCarePlan.SnomedEducation)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SnomedEducation = '" + POut.String(ehrCarePlan.SnomedEducation) + "'";
        }
         
        if (ehrCarePlan.Instructions != oldEhrCarePlan.Instructions)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Instructions = '" + POut.String(ehrCarePlan.Instructions) + "'";
        }
         
        if (ehrCarePlan.DatePlanned != oldEhrCarePlan.DatePlanned)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DatePlanned = " + POut.Date(ehrCarePlan.DatePlanned) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE ehrcareplan SET " + command + " WHERE EhrCarePlanNum = " + POut.Long(ehrCarePlan.EhrCarePlanNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one EhrCarePlan from the database.
    */
    public static void delete(long ehrCarePlanNum) throws Exception {
        String command = "DELETE FROM ehrcareplan " + "WHERE EhrCarePlanNum = " + POut.Long(ehrCarePlanNum);
        Db.NonQ(command);
    }

}


