//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 8:08:01 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class InsPlanCrud   
{
    /**
    * Gets one InsPlan object from the database using the primary key.  Returns null if not found.
    */
    public static InsPlan selectOne(long planNum) throws Exception {
        String command = "SELECT * FROM insplan " + "WHERE PlanNum = " + POut.Long(planNum);
        List<InsPlan> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one InsPlan object from the database using a query.
    */
    public static InsPlan selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<InsPlan> list = TableToList(Db.GetTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of InsPlan objects from the database using a query.
    */
    public static List<InsPlan> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<InsPlan> list = TableToList(Db.GetTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<InsPlan> tableToList(DataTable table) throws Exception {
        List<InsPlan> retVal = new List<InsPlan>();
        InsPlan insPlan = new InsPlan();
        for (int i = 0;i < table.Rows.Count;i++)
        {
            insPlan = new InsPlan();
            insPlan.PlanNum = PIn.Long(table.Rows[i]["PlanNum"].ToString());
            insPlan.GroupName = PIn.String(table.Rows[i]["GroupName"].ToString());
            insPlan.GroupNum = PIn.String(table.Rows[i]["GroupNum"].ToString());
            insPlan.PlanNote = PIn.String(table.Rows[i]["PlanNote"].ToString());
            insPlan.FeeSched = PIn.Long(table.Rows[i]["FeeSched"].ToString());
            insPlan.PlanType = PIn.String(table.Rows[i]["PlanType"].ToString());
            insPlan.ClaimFormNum = PIn.Long(table.Rows[i]["ClaimFormNum"].ToString());
            insPlan.UseAltCode = PIn.Bool(table.Rows[i]["UseAltCode"].ToString());
            insPlan.ClaimsUseUCR = PIn.Bool(table.Rows[i]["ClaimsUseUCR"].ToString());
            insPlan.CopayFeeSched = PIn.Long(table.Rows[i]["CopayFeeSched"].ToString());
            insPlan.EmployerNum = PIn.Long(table.Rows[i]["EmployerNum"].ToString());
            insPlan.CarrierNum = PIn.Long(table.Rows[i]["CarrierNum"].ToString());
            insPlan.AllowedFeeSched = PIn.Long(table.Rows[i]["AllowedFeeSched"].ToString());
            insPlan.TrojanID = PIn.String(table.Rows[i]["TrojanID"].ToString());
            insPlan.DivisionNo = PIn.String(table.Rows[i]["DivisionNo"].ToString());
            insPlan.IsMedical = PIn.Bool(table.Rows[i]["IsMedical"].ToString());
            insPlan.FilingCode = PIn.Long(table.Rows[i]["FilingCode"].ToString());
            insPlan.DentaideCardSequence = PIn.Byte(table.Rows[i]["DentaideCardSequence"].ToString());
            insPlan.ShowBaseUnits = PIn.Bool(table.Rows[i]["ShowBaseUnits"].ToString());
            insPlan.CodeSubstNone = PIn.Bool(table.Rows[i]["CodeSubstNone"].ToString());
            insPlan.IsHidden = PIn.Bool(table.Rows[i]["IsHidden"].ToString());
            insPlan.MonthRenew = PIn.Byte(table.Rows[i]["MonthRenew"].ToString());
            insPlan.FilingCodeSubtype = PIn.Long(table.Rows[i]["FilingCodeSubtype"].ToString());
            insPlan.CanadianPlanFlag = PIn.String(table.Rows[i]["CanadianPlanFlag"].ToString());
            insPlan.CanadianDiagnosticCode = PIn.String(table.Rows[i]["CanadianDiagnosticCode"].ToString());
            insPlan.CanadianInstitutionCode = PIn.String(table.Rows[i]["CanadianInstitutionCode"].ToString());
            insPlan.RxBIN = PIn.String(table.Rows[i]["RxBIN"].ToString());
            insPlan.CobRule = (EnumCobRule)PIn.Int(table.Rows[i]["CobRule"].ToString());
            insPlan.SopCode = PIn.String(table.Rows[i]["SopCode"].ToString());
            retVal.Add(insPlan);
        }
        return retVal;
    }

    /**
    * Inserts one InsPlan into the database.  Returns the new priKey.
    */
    public static long insert(InsPlan insPlan) throws Exception {
        if (DataConnection.DBtype == DatabaseType.Oracle)
        {
            insPlan.PlanNum = DbHelper.GetNextOracleKey("insplan", "PlanNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return insert(insPlan,true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        insPlan.PlanNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return insert(insPlan,false);
        } 
    }

    /**
    * Inserts one InsPlan into the database.  Provides option to use the existing priKey.
    */
    public static long insert(InsPlan insPlan, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.RandomKeys)
        {
            insPlan.PlanNum = ReplicationServers.GetKey("insplan", "PlanNum");
        }
         
        String command = "INSERT INTO insplan (";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += "PlanNum,";
        }
         
        command += "GroupName,GroupNum,PlanNote,FeeSched,PlanType,ClaimFormNum,UseAltCode,ClaimsUseUCR,CopayFeeSched,EmployerNum,CarrierNum,AllowedFeeSched,TrojanID,DivisionNo,IsMedical,FilingCode,DentaideCardSequence,ShowBaseUnits,CodeSubstNone,IsHidden,MonthRenew,FilingCodeSubtype,CanadianPlanFlag,CanadianDiagnosticCode,CanadianInstitutionCode,RxBIN,CobRule,SopCode) VALUES(";
        if (useExistingPK || PrefC.RandomKeys)
        {
            command += POut.Long(insPlan.PlanNum) + ",";
        }
         
        command += "'" + POut.String(insPlan.GroupName) + "'," + "'" + POut.String(insPlan.GroupNum) + "'," + "'" + POut.String(insPlan.PlanNote) + "'," + POut.Long(insPlan.FeeSched) + "," + "'" + POut.String(insPlan.PlanType) + "'," + POut.Long(insPlan.ClaimFormNum) + "," + POut.Bool(insPlan.UseAltCode) + "," + POut.Bool(insPlan.ClaimsUseUCR) + "," + POut.Long(insPlan.CopayFeeSched) + "," + POut.Long(insPlan.EmployerNum) + "," + POut.Long(insPlan.CarrierNum) + "," + POut.Long(insPlan.AllowedFeeSched) + "," + "'" + POut.String(insPlan.TrojanID) + "'," + "'" + POut.String(insPlan.DivisionNo) + "'," + POut.Bool(insPlan.IsMedical) + "," + POut.Long(insPlan.FilingCode) + "," + POut.Byte(insPlan.DentaideCardSequence) + "," + POut.Bool(insPlan.ShowBaseUnits) + "," + POut.Bool(insPlan.CodeSubstNone) + "," + POut.Bool(insPlan.IsHidden) + "," + POut.Byte(insPlan.MonthRenew) + "," + POut.Long(insPlan.FilingCodeSubtype) + "," + "'" + POut.String(insPlan.CanadianPlanFlag) + "'," + "'" + POut.String(insPlan.CanadianDiagnosticCode) + "'," + "'" + POut.String(insPlan.CanadianInstitutionCode) + "'," + "'" + POut.String(insPlan.RxBIN) + "'," + POut.Int((int)insPlan.CobRule) + "," + "'" + POut.String(insPlan.SopCode) + "')";
        if (useExistingPK || PrefC.RandomKeys)
        {
            Db.NonQ(command);
        }
        else
        {
            insPlan.PlanNum = Db.NonQ(command, true);
        } 
        return insPlan.PlanNum;
    }

    /**
    * Updates one InsPlan in the database.
    */
    public static void update(InsPlan insPlan) throws Exception {
        String command = "UPDATE insplan SET " + "GroupName              = '" + POut.String(insPlan.GroupName) + "', " + "GroupNum               = '" + POut.String(insPlan.GroupNum) + "', " + "PlanNote               = '" + POut.String(insPlan.PlanNote) + "', " + "FeeSched               =  " + POut.Long(insPlan.FeeSched) + ", " + "PlanType               = '" + POut.String(insPlan.PlanType) + "', " + "ClaimFormNum           =  " + POut.Long(insPlan.ClaimFormNum) + ", " + "UseAltCode             =  " + POut.Bool(insPlan.UseAltCode) + ", " + "ClaimsUseUCR           =  " + POut.Bool(insPlan.ClaimsUseUCR) + ", " + "CopayFeeSched          =  " + POut.Long(insPlan.CopayFeeSched) + ", " + "EmployerNum            =  " + POut.Long(insPlan.EmployerNum) + ", " + "CarrierNum             =  " + POut.Long(insPlan.CarrierNum) + ", " + "AllowedFeeSched        =  " + POut.Long(insPlan.AllowedFeeSched) + ", " + "TrojanID               = '" + POut.String(insPlan.TrojanID) + "', " + "DivisionNo             = '" + POut.String(insPlan.DivisionNo) + "', " + "IsMedical              =  " + POut.Bool(insPlan.IsMedical) + ", " + "FilingCode             =  " + POut.Long(insPlan.FilingCode) + ", " + "DentaideCardSequence   =  " + POut.Byte(insPlan.DentaideCardSequence) + ", " + "ShowBaseUnits          =  " + POut.Bool(insPlan.ShowBaseUnits) + ", " + "CodeSubstNone          =  " + POut.Bool(insPlan.CodeSubstNone) + ", " + "IsHidden               =  " + POut.Bool(insPlan.IsHidden) + ", " + "MonthRenew             =  " + POut.Byte(insPlan.MonthRenew) + ", " + "FilingCodeSubtype      =  " + POut.Long(insPlan.FilingCodeSubtype) + ", " + "CanadianPlanFlag       = '" + POut.String(insPlan.CanadianPlanFlag) + "', " + "CanadianDiagnosticCode = '" + POut.String(insPlan.CanadianDiagnosticCode) + "', " + "CanadianInstitutionCode= '" + POut.String(insPlan.CanadianInstitutionCode) + "', " + "RxBIN                  = '" + POut.String(insPlan.RxBIN) + "', " + "CobRule                =  " + POut.Int((int)insPlan.CobRule) + ", " + "SopCode                = '" + POut.String(insPlan.SopCode) + "' " + "WHERE PlanNum = " + POut.Long(insPlan.PlanNum);
        Db.NonQ(command);
    }

    /**
    * Updates one InsPlan in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(InsPlan insPlan, InsPlan oldInsPlan) throws Exception {
        String command = "";
        if (insPlan.GroupName != oldInsPlan.GroupName)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "GroupName = '" + POut.String(insPlan.GroupName) + "'";
        }
         
        if (insPlan.GroupNum != oldInsPlan.GroupNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "GroupNum = '" + POut.String(insPlan.GroupNum) + "'";
        }
         
        if (insPlan.PlanNote != oldInsPlan.PlanNote)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PlanNote = '" + POut.String(insPlan.PlanNote) + "'";
        }
         
        if (insPlan.FeeSched != oldInsPlan.FeeSched)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FeeSched = " + POut.Long(insPlan.FeeSched) + "";
        }
         
        if (insPlan.PlanType != oldInsPlan.PlanType)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PlanType = '" + POut.String(insPlan.PlanType) + "'";
        }
         
        if (insPlan.ClaimFormNum != oldInsPlan.ClaimFormNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClaimFormNum = " + POut.Long(insPlan.ClaimFormNum) + "";
        }
         
        if (insPlan.UseAltCode != oldInsPlan.UseAltCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UseAltCode = " + POut.Bool(insPlan.UseAltCode) + "";
        }
         
        if (insPlan.ClaimsUseUCR != oldInsPlan.ClaimsUseUCR)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClaimsUseUCR = " + POut.Bool(insPlan.ClaimsUseUCR) + "";
        }
         
        if (insPlan.CopayFeeSched != oldInsPlan.CopayFeeSched)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CopayFeeSched = " + POut.Long(insPlan.CopayFeeSched) + "";
        }
         
        if (insPlan.EmployerNum != oldInsPlan.EmployerNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EmployerNum = " + POut.Long(insPlan.EmployerNum) + "";
        }
         
        if (insPlan.CarrierNum != oldInsPlan.CarrierNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CarrierNum = " + POut.Long(insPlan.CarrierNum) + "";
        }
         
        if (insPlan.AllowedFeeSched != oldInsPlan.AllowedFeeSched)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AllowedFeeSched = " + POut.Long(insPlan.AllowedFeeSched) + "";
        }
         
        if (insPlan.TrojanID != oldInsPlan.TrojanID)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "TrojanID = '" + POut.String(insPlan.TrojanID) + "'";
        }
         
        if (insPlan.DivisionNo != oldInsPlan.DivisionNo)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DivisionNo = '" + POut.String(insPlan.DivisionNo) + "'";
        }
         
        if (insPlan.IsMedical != oldInsPlan.IsMedical)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsMedical = " + POut.Bool(insPlan.IsMedical) + "";
        }
         
        if (insPlan.FilingCode != oldInsPlan.FilingCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FilingCode = " + POut.Long(insPlan.FilingCode) + "";
        }
         
        if (insPlan.DentaideCardSequence != oldInsPlan.DentaideCardSequence)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "DentaideCardSequence = " + POut.Byte(insPlan.DentaideCardSequence) + "";
        }
         
        if (insPlan.ShowBaseUnits != oldInsPlan.ShowBaseUnits)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ShowBaseUnits = " + POut.Bool(insPlan.ShowBaseUnits) + "";
        }
         
        if (insPlan.CodeSubstNone != oldInsPlan.CodeSubstNone)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CodeSubstNone = " + POut.Bool(insPlan.CodeSubstNone) + "";
        }
         
        if (insPlan.IsHidden != oldInsPlan.IsHidden)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "IsHidden = " + POut.Bool(insPlan.IsHidden) + "";
        }
         
        if (insPlan.MonthRenew != oldInsPlan.MonthRenew)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MonthRenew = " + POut.Byte(insPlan.MonthRenew) + "";
        }
         
        if (insPlan.FilingCodeSubtype != oldInsPlan.FilingCodeSubtype)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "FilingCodeSubtype = " + POut.Long(insPlan.FilingCodeSubtype) + "";
        }
         
        if (insPlan.CanadianPlanFlag != oldInsPlan.CanadianPlanFlag)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadianPlanFlag = '" + POut.String(insPlan.CanadianPlanFlag) + "'";
        }
         
        if (insPlan.CanadianDiagnosticCode != oldInsPlan.CanadianDiagnosticCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadianDiagnosticCode = '" + POut.String(insPlan.CanadianDiagnosticCode) + "'";
        }
         
        if (insPlan.CanadianInstitutionCode != oldInsPlan.CanadianInstitutionCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CanadianInstitutionCode = '" + POut.String(insPlan.CanadianInstitutionCode) + "'";
        }
         
        if (insPlan.RxBIN != oldInsPlan.RxBIN)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RxBIN = '" + POut.String(insPlan.RxBIN) + "'";
        }
         
        if (insPlan.CobRule != oldInsPlan.CobRule)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "CobRule = " + POut.Int((int)insPlan.CobRule) + "";
        }
         
        if (insPlan.SopCode != oldInsPlan.SopCode)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "SopCode = '" + POut.String(insPlan.SopCode) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE insplan SET " + command + " WHERE PlanNum = " + POut.Long(insPlan.PlanNum);
        Db.NonQ(command);
    }

    /**
    * Deletes one InsPlan from the database.
    */
    public static void delete(long planNum) throws Exception {
        String command = "DELETE FROM insplan " + "WHERE PlanNum = " + POut.Long(planNum);
        Db.NonQ(command);
    }

}


