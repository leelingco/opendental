//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:03 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.ErxLog;
import OpenDentBusiness.OdDbType;
import OpenDentBusiness.OdSqlParameter;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ErxLogCrud   
{
    /**
    * Gets one ErxLog object from the database using the primary key.  Returns null if not found.
    */
    public static ErxLog selectOne(long erxLogNum) throws Exception {
        String command = "SELECT * FROM erxlog " + "WHERE ErxLogNum = " + POut.long(erxLogNum);
        List<ErxLog> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ErxLog object from the database using a query.
    */
    public static ErxLog selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ErxLog> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ErxLog objects from the database using a query.
    */
    public static List<ErxLog> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ErxLog> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ErxLog> tableToList(DataTable table) throws Exception {
        List<ErxLog> retVal = new List<ErxLog>();
        ErxLog erxLog;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            erxLog = new ErxLog();
            erxLog.ErxLogNum = PIn.Long(table.Rows[i]["ErxLogNum"].ToString());
            erxLog.PatNum = PIn.Long(table.Rows[i]["PatNum"].ToString());
            erxLog.MsgText = PIn.String(table.Rows[i]["MsgText"].ToString());
            erxLog.DateTStamp = PIn.DateT(table.Rows[i]["DateTStamp"].ToString());
            erxLog.ProvNum = PIn.Long(table.Rows[i]["ProvNum"].ToString());
            retVal.Add(erxLog);
        }
        return retVal;
    }

    /**
    * Inserts one ErxLog into the database.  Returns the new priKey.
    */
    public static long insert(ErxLog erxLog) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            erxLog.ErxLogNum = DbHelper.getNextOracleKey("erxlog","ErxLogNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(erxLog, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        erxLog.ErxLogNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(erxLog, false);
        } 
    }

    /**
    * Inserts one ErxLog into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ErxLog erxLog, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            erxLog.ErxLogNum = ReplicationServers.getKey("erxlog","ErxLogNum");
        }
         
        String command = "INSERT INTO erxlog (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "ErxLogNum,";
        }
         
        command += "PatNum,MsgText,ProvNum) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(erxLog.ErxLogNum) + ",";
        }
         
        //DateTStamp can only be set by MySQL
        command += POut.long(erxLog.PatNum) + "," + DbHelper.getParamChar() + "paramMsgText," + POut.long(erxLog.ProvNum) + ")";
        if (erxLog.MsgText == null)
        {
            erxLog.MsgText = "";
        }
         
        OdSqlParameter paramMsgText = new OdSqlParameter("paramMsgText", OdDbType.Text, erxLog.MsgText);
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command,paramMsgText);
        }
        else
        {
            erxLog.ErxLogNum = Db.nonQ(command,true,paramMsgText);
        } 
        return erxLog.ErxLogNum;
    }

    /**
    * Updates one ErxLog in the database.
    */
    public static void update(ErxLog erxLog) throws Exception {
        //DateTStamp can only be set by MySQL
        String command = "UPDATE erxlog SET " + "PatNum    =  " + POut.long(erxLog.PatNum) + ", " + "MsgText   =  " + DbHelper.getParamChar() + "paramMsgText, " + "ProvNum   =  " + POut.long(erxLog.ProvNum) + " " + "WHERE ErxLogNum = " + POut.long(erxLog.ErxLogNum);
        if (erxLog.MsgText == null)
        {
            erxLog.MsgText = "";
        }
         
        OdSqlParameter paramMsgText = new OdSqlParameter("paramMsgText", OdDbType.Text, erxLog.MsgText);
        Db.nonQ(command,paramMsgText);
    }

    /**
    * Updates one ErxLog in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ErxLog erxLog, ErxLog oldErxLog) throws Exception {
        String command = "";
        if (erxLog.PatNum != oldErxLog.PatNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "PatNum = " + POut.long(erxLog.PatNum) + "";
        }
         
        if (!StringSupport.equals(erxLog.MsgText, oldErxLog.MsgText))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "MsgText = " + DbHelper.getParamChar() + "paramMsgText";
        }
         
        //DateTStamp can only be set by MySQL
        if (erxLog.ProvNum != oldErxLog.ProvNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ProvNum = " + POut.long(erxLog.ProvNum) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        if (erxLog.MsgText == null)
        {
            erxLog.MsgText = "";
        }
         
        OdSqlParameter paramMsgText = new OdSqlParameter("paramMsgText", OdDbType.Text, erxLog.MsgText);
        command = "UPDATE erxlog SET " + command + " WHERE ErxLogNum = " + POut.long(erxLog.ErxLogNum);
        Db.nonQ(command,paramMsgText);
    }

    /**
    * Deletes one ErxLog from the database.
    */
    public static void delete(long erxLogNum) throws Exception {
        String command = "DELETE FROM erxlog " + "WHERE ErxLogNum = " + POut.long(erxLogNum);
        Db.nonQ(command);
    }

}


