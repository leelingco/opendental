//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:00 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.ClockEvent;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;
import OpenDentBusiness.TimeClockStatus;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ClockEventCrud   
{
    /**
    * Gets one ClockEvent object from the database using the primary key.  Returns null if not found.
    */
    public static ClockEvent selectOne(long clockEventNum) throws Exception {
        String command = "SELECT * FROM clockevent " + "WHERE ClockEventNum = " + POut.long(clockEventNum);
        List<ClockEvent> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ClockEvent object from the database using a query.
    */
    public static ClockEvent selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ClockEvent> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ClockEvent objects from the database using a query.
    */
    public static List<ClockEvent> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ClockEvent> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ClockEvent> tableToList(DataTable table) throws Exception {
        List<ClockEvent> retVal = new List<ClockEvent>();
        ClockEvent clockEvent;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            clockEvent = new ClockEvent();
            clockEvent.ClockEventNum = PIn.Long(table.Rows[i]["ClockEventNum"].ToString());
            clockEvent.EmployeeNum = PIn.Long(table.Rows[i]["EmployeeNum"].ToString());
            clockEvent.TimeEntered1 = PIn.DateT(table.Rows[i]["TimeEntered1"].ToString());
            clockEvent.TimeDisplayed1 = PIn.DateT(table.Rows[i]["TimeDisplayed1"].ToString());
            clockEvent.ClockStatus = (TimeClockStatus)PIn.Int(table.Rows[i]["ClockStatus"].ToString());
            clockEvent.Note = PIn.String(table.Rows[i]["Note"].ToString());
            clockEvent.TimeEntered2 = PIn.DateT(table.Rows[i]["TimeEntered2"].ToString());
            clockEvent.TimeDisplayed2 = PIn.DateT(table.Rows[i]["TimeDisplayed2"].ToString());
            clockEvent.OTimeHours = PIn.TSpan(table.Rows[i]["OTimeHours"].ToString());
            clockEvent.OTimeAuto = PIn.TSpan(table.Rows[i]["OTimeAuto"].ToString());
            clockEvent.Adjust = PIn.TSpan(table.Rows[i]["Adjust"].ToString());
            clockEvent.AdjustAuto = PIn.TSpan(table.Rows[i]["AdjustAuto"].ToString());
            clockEvent.AdjustIsOverridden = PIn.Bool(table.Rows[i]["AdjustIsOverridden"].ToString());
            clockEvent.Rate2Hours = PIn.TSpan(table.Rows[i]["Rate2Hours"].ToString());
            clockEvent.Rate2Auto = PIn.TSpan(table.Rows[i]["Rate2Auto"].ToString());
            retVal.Add(clockEvent);
        }
        return retVal;
    }

    /**
    * Inserts one ClockEvent into the database.  Returns the new priKey.
    */
    public static long insert(ClockEvent clockEvent) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            clockEvent.ClockEventNum = DbHelper.getNextOracleKey("clockevent","ClockEventNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(clockEvent, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        clockEvent.ClockEventNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(clockEvent, false);
        } 
    }

    /**
    * Inserts one ClockEvent into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ClockEvent clockEvent, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            clockEvent.ClockEventNum = ReplicationServers.getKey("clockevent","ClockEventNum");
        }
         
        String command = "INSERT INTO clockevent (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "ClockEventNum,";
        }
         
        command += "EmployeeNum,TimeEntered1,TimeDisplayed1,ClockStatus,Note,TimeEntered2,TimeDisplayed2,OTimeHours,OTimeAuto,Adjust,AdjustAuto,AdjustIsOverridden,Rate2Hours,Rate2Auto) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(clockEvent.ClockEventNum) + ",";
        }
         
        command += POut.long(clockEvent.EmployeeNum) + "," + DbHelper.now() + "," + DbHelper.now() + "," + POut.int(((Enum)clockEvent.ClockStatus).ordinal()) + "," + "'" + POut.string(clockEvent.Note) + "'," + POut.dateT(clockEvent.TimeEntered2) + "," + POut.dateT(clockEvent.TimeDisplayed2) + "," + "'" + POut.tSpan(clockEvent.OTimeHours) + "'," + "'" + POut.tSpan(clockEvent.OTimeAuto) + "'," + "'" + POut.tSpan(clockEvent.Adjust) + "'," + "'" + POut.tSpan(clockEvent.AdjustAuto) + "'," + POut.bool(clockEvent.AdjustIsOverridden) + "," + "'" + POut.tSpan(clockEvent.Rate2Hours) + "'," + "'" + POut.tSpan(clockEvent.Rate2Auto) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            clockEvent.ClockEventNum = Db.nonQ(command,true);
        } 
        return clockEvent.ClockEventNum;
    }

    /**
    * Updates one ClockEvent in the database.
    */
    public static void update(ClockEvent clockEvent) throws Exception {
        //TimeEntered1 not allowed to change
        String command = "UPDATE clockevent SET " + "EmployeeNum       =  " + POut.long(clockEvent.EmployeeNum) + ", " + "TimeDisplayed1    =  " + POut.dateT(clockEvent.TimeDisplayed1) + ", " + "ClockStatus       =  " + POut.int(((Enum)clockEvent.ClockStatus).ordinal()) + ", " + "Note              = '" + POut.string(clockEvent.Note) + "', " + "TimeEntered2      =  " + POut.dateT(clockEvent.TimeEntered2) + ", " + "TimeDisplayed2    =  " + POut.dateT(clockEvent.TimeDisplayed2) + ", " + "OTimeHours        = '" + POut.tSpan(clockEvent.OTimeHours) + "', " + "OTimeAuto         = '" + POut.tSpan(clockEvent.OTimeAuto) + "', " + "Adjust            = '" + POut.tSpan(clockEvent.Adjust) + "', " + "AdjustAuto        = '" + POut.tSpan(clockEvent.AdjustAuto) + "', " + "AdjustIsOverridden=  " + POut.bool(clockEvent.AdjustIsOverridden) + ", " + "Rate2Hours        = '" + POut.tSpan(clockEvent.Rate2Hours) + "', " + "Rate2Auto         = '" + POut.tSpan(clockEvent.Rate2Auto) + "' " + "WHERE ClockEventNum = " + POut.long(clockEvent.ClockEventNum);
        Db.nonQ(command);
    }

    /**
    * Updates one ClockEvent in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ClockEvent clockEvent, ClockEvent oldClockEvent) throws Exception {
        String command = "";
        if (clockEvent.EmployeeNum != oldClockEvent.EmployeeNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "EmployeeNum = " + POut.long(clockEvent.EmployeeNum) + "";
        }
         
        //TimeEntered1 not allowed to change
        if (clockEvent.TimeDisplayed1 != oldClockEvent.TimeDisplayed1)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "TimeDisplayed1 = " + POut.dateT(clockEvent.TimeDisplayed1) + "";
        }
         
        if (clockEvent.ClockStatus != oldClockEvent.ClockStatus)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClockStatus = " + POut.int(((Enum)clockEvent.ClockStatus).ordinal()) + "";
        }
         
        if (!StringSupport.equals(clockEvent.Note, oldClockEvent.Note))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Note = '" + POut.string(clockEvent.Note) + "'";
        }
         
        if (clockEvent.TimeEntered2 != oldClockEvent.TimeEntered2)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "TimeEntered2 = " + POut.dateT(clockEvent.TimeEntered2) + "";
        }
         
        if (clockEvent.TimeDisplayed2 != oldClockEvent.TimeDisplayed2)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "TimeDisplayed2 = " + POut.dateT(clockEvent.TimeDisplayed2) + "";
        }
         
        if (clockEvent.OTimeHours != oldClockEvent.OTimeHours)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "OTimeHours = '" + POut.tSpan(clockEvent.OTimeHours) + "'";
        }
         
        if (clockEvent.OTimeAuto != oldClockEvent.OTimeAuto)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "OTimeAuto = '" + POut.tSpan(clockEvent.OTimeAuto) + "'";
        }
         
        if (clockEvent.Adjust != oldClockEvent.Adjust)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Adjust = '" + POut.tSpan(clockEvent.Adjust) + "'";
        }
         
        if (clockEvent.AdjustAuto != oldClockEvent.AdjustAuto)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AdjustAuto = '" + POut.tSpan(clockEvent.AdjustAuto) + "'";
        }
         
        if (clockEvent.AdjustIsOverridden != oldClockEvent.AdjustIsOverridden)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "AdjustIsOverridden = " + POut.bool(clockEvent.AdjustIsOverridden) + "";
        }
         
        if (clockEvent.Rate2Hours != oldClockEvent.Rate2Hours)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Rate2Hours = '" + POut.tSpan(clockEvent.Rate2Hours) + "'";
        }
         
        if (clockEvent.Rate2Auto != oldClockEvent.Rate2Auto)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Rate2Auto = '" + POut.tSpan(clockEvent.Rate2Auto) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE clockevent SET " + command + " WHERE ClockEventNum = " + POut.long(clockEvent.ClockEventNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one ClockEvent from the database.
    */
    public static void delete(long clockEventNum) throws Exception {
        String command = "DELETE FROM clockevent " + "WHERE ClockEventNum = " + POut.long(clockEventNum);
        Db.nonQ(command);
    }

}


