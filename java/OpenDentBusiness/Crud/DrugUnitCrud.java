//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:58:01 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.DrugUnit;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class DrugUnitCrud   
{
    /**
    * Gets one DrugUnit object from the database using the primary key.  Returns null if not found.
    */
    public static DrugUnit selectOne(long drugUnitNum) throws Exception {
        String command = "SELECT * FROM drugunit " + "WHERE DrugUnitNum = " + POut.long(drugUnitNum);
        List<DrugUnit> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one DrugUnit object from the database using a query.
    */
    public static DrugUnit selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<DrugUnit> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of DrugUnit objects from the database using a query.
    */
    public static List<DrugUnit> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<DrugUnit> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<DrugUnit> tableToList(DataTable table) throws Exception {
        List<DrugUnit> retVal = new List<DrugUnit>();
        DrugUnit drugUnit;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            drugUnit = new DrugUnit();
            drugUnit.DrugUnitNum = PIn.Long(table.Rows[i]["DrugUnitNum"].ToString());
            drugUnit.UnitIdentifier = PIn.String(table.Rows[i]["UnitIdentifier"].ToString());
            drugUnit.UnitText = PIn.String(table.Rows[i]["UnitText"].ToString());
            retVal.Add(drugUnit);
        }
        return retVal;
    }

    /**
    * Inserts one DrugUnit into the database.  Returns the new priKey.
    */
    public static long insert(DrugUnit drugUnit) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            drugUnit.DrugUnitNum = DbHelper.getNextOracleKey("drugunit","DrugUnitNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(drugUnit, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        drugUnit.DrugUnitNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(drugUnit, false);
        } 
    }

    /**
    * Inserts one DrugUnit into the database.  Provides option to use the existing priKey.
    */
    public static long insert(DrugUnit drugUnit, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            drugUnit.DrugUnitNum = ReplicationServers.getKey("drugunit","DrugUnitNum");
        }
         
        String command = "INSERT INTO drugunit (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "DrugUnitNum,";
        }
         
        command += "UnitIdentifier,UnitText) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(drugUnit.DrugUnitNum) + ",";
        }
         
        command += "'" + POut.string(drugUnit.UnitIdentifier) + "'," + "'" + POut.string(drugUnit.UnitText) + "')";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            drugUnit.DrugUnitNum = Db.nonQ(command,true);
        } 
        return drugUnit.DrugUnitNum;
    }

    /**
    * Updates one DrugUnit in the database.
    */
    public static void update(DrugUnit drugUnit) throws Exception {
        String command = "UPDATE drugunit SET " + "UnitIdentifier= '" + POut.string(drugUnit.UnitIdentifier) + "', " + "UnitText      = '" + POut.string(drugUnit.UnitText) + "' " + "WHERE DrugUnitNum = " + POut.long(drugUnit.DrugUnitNum);
        Db.nonQ(command);
    }

    /**
    * Updates one DrugUnit in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(DrugUnit drugUnit, DrugUnit oldDrugUnit) throws Exception {
        String command = "";
        if (!StringSupport.equals(drugUnit.UnitIdentifier, oldDrugUnit.UnitIdentifier))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UnitIdentifier = '" + POut.string(drugUnit.UnitIdentifier) + "'";
        }
         
        if (!StringSupport.equals(drugUnit.UnitText, oldDrugUnit.UnitText))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "UnitText = '" + POut.string(drugUnit.UnitText) + "'";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE drugunit SET " + command + " WHERE DrugUnitNum = " + POut.long(drugUnit.DrugUnitNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one DrugUnit from the database.
    */
    public static void delete(long drugUnitNum) throws Exception {
        String command = "DELETE FROM drugunit " + "WHERE DrugUnitNum = " + POut.long(drugUnitNum);
        Db.nonQ(command);
    }

}


