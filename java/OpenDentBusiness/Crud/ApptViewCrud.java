//
// Translated by CS2J (http://www.cs2j.com): 2/15/2016 5:57:58 PM
//

package OpenDentBusiness.Crud;

import CS2JNet.System.StringSupport;
import OpenDentBusiness.ApptView;
import OpenDentBusiness.ApptViewStackBehavior;
import OpenDentBusiness.Db;
import OpenDentBusiness.DbHelper;
import OpenDentBusiness.PIn;
import OpenDentBusiness.POut;
import OpenDentBusiness.PrefC;
import OpenDentBusiness.RemotingClient;
import OpenDentBusiness.RemotingRole;
import OpenDentBusiness.ReplicationServers;

//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
public class ApptViewCrud   
{
    /**
    * Gets one ApptView object from the database using the primary key.  Returns null if not found.
    */
    public static ApptView selectOne(long apptViewNum) throws Exception {
        String command = "SELECT * FROM apptview " + "WHERE ApptViewNum = " + POut.long(apptViewNum);
        List<ApptView> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets one ApptView object from the database using a query.
    */
    public static ApptView selectOne(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ApptView> list = tableToList(Db.getTable(command));
        if (list.Count == 0)
        {
            return null;
        }
         
        return list[0];
    }

    /**
    * Gets a list of ApptView objects from the database using a query.
    */
    public static List<ApptView> selectMany(String command) throws Exception {
        if (RemotingClient.RemotingRole == RemotingRole.ClientWeb)
        {
            throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n" + command);
        }
         
        List<ApptView> list = tableToList(Db.getTable(command));
        return list;
    }

    /**
    * Converts a DataTable to a list of objects.
    */
    public static List<ApptView> tableToList(DataTable table) throws Exception {
        List<ApptView> retVal = new List<ApptView>();
        ApptView apptView;
        for (int i = 0;i < table.Rows.Count;i++)
        {
            apptView = new ApptView();
            apptView.ApptViewNum = PIn.Long(table.Rows[i]["ApptViewNum"].ToString());
            apptView.Description = PIn.String(table.Rows[i]["Description"].ToString());
            apptView.ItemOrder = PIn.Int(table.Rows[i]["ItemOrder"].ToString());
            apptView.RowsPerIncr = PIn.Byte(table.Rows[i]["RowsPerIncr"].ToString());
            apptView.OnlyScheduledProvs = PIn.Bool(table.Rows[i]["OnlyScheduledProvs"].ToString());
            apptView.OnlySchedBeforeTime = PIn.Time(table.Rows[i]["OnlySchedBeforeTime"].ToString());
            apptView.OnlySchedAfterTime = PIn.Time(table.Rows[i]["OnlySchedAfterTime"].ToString());
            apptView.StackBehavUR = (ApptViewStackBehavior)PIn.Int(table.Rows[i]["StackBehavUR"].ToString());
            apptView.StackBehavLR = (ApptViewStackBehavior)PIn.Int(table.Rows[i]["StackBehavLR"].ToString());
            apptView.ClinicNum = PIn.Long(table.Rows[i]["ClinicNum"].ToString());
            retVal.Add(apptView);
        }
        return retVal;
    }

    /**
    * Inserts one ApptView into the database.  Returns the new priKey.
    */
    public static long insert(ApptView apptView) throws Exception {
        if (OpenDentBusiness.DataConnection.DBtype == OpenDentBusiness.DatabaseType.Oracle)
        {
            apptView.ApptViewNum = DbHelper.getNextOracleKey("apptview","ApptViewNum");
            int loopcount = 0;
            while (loopcount < 100)
            {
                try
                {
                    return Insert(apptView, true);
                }
                catch (Oracle.DataAccess.Client.OracleException ex)
                {
                    if (ex.Number == 1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated"))
                    {
                        apptView.ApptViewNum++;
                        loopcount++;
                    }
                    else
                    {
                        throw ex;
                    } 
                }
            
            }
            throw new ApplicationException("Insert failed.  Could not generate primary key.");
        }
        else
        {
            return Insert(apptView, false);
        } 
    }

    /**
    * Inserts one ApptView into the database.  Provides option to use the existing priKey.
    */
    public static long insert(ApptView apptView, boolean useExistingPK) throws Exception {
        if (!useExistingPK && PrefC.getRandomKeys())
        {
            apptView.ApptViewNum = ReplicationServers.getKey("apptview","ApptViewNum");
        }
         
        String command = "INSERT INTO apptview (";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += "ApptViewNum,";
        }
         
        command += "Description,ItemOrder,RowsPerIncr,OnlyScheduledProvs,OnlySchedBeforeTime,OnlySchedAfterTime,StackBehavUR,StackBehavLR,ClinicNum) VALUES(";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            command += POut.long(apptView.ApptViewNum) + ",";
        }
         
        command += "'" + POut.string(apptView.Description) + "'," + POut.int(apptView.ItemOrder) + "," + POut.byte(apptView.RowsPerIncr) + "," + POut.bool(apptView.OnlyScheduledProvs) + "," + POut.time(apptView.OnlySchedBeforeTime) + "," + POut.time(apptView.OnlySchedAfterTime) + "," + POut.int(((Enum)apptView.StackBehavUR).ordinal()) + "," + POut.int(((Enum)apptView.StackBehavLR).ordinal()) + "," + POut.long(apptView.ClinicNum) + ")";
        if (useExistingPK || PrefC.getRandomKeys())
        {
            Db.nonQ(command);
        }
        else
        {
            apptView.ApptViewNum = Db.nonQ(command,true);
        } 
        return apptView.ApptViewNum;
    }

    /**
    * Updates one ApptView in the database.
    */
    public static void update(ApptView apptView) throws Exception {
        String command = "UPDATE apptview SET " + "Description        = '" + POut.string(apptView.Description) + "', " + "ItemOrder          =  " + POut.int(apptView.ItemOrder) + ", " + "RowsPerIncr        =  " + POut.byte(apptView.RowsPerIncr) + ", " + "OnlyScheduledProvs =  " + POut.bool(apptView.OnlyScheduledProvs) + ", " + "OnlySchedBeforeTime=  " + POut.time(apptView.OnlySchedBeforeTime) + ", " + "OnlySchedAfterTime =  " + POut.time(apptView.OnlySchedAfterTime) + ", " + "StackBehavUR       =  " + POut.int(((Enum)apptView.StackBehavUR).ordinal()) + ", " + "StackBehavLR       =  " + POut.int(((Enum)apptView.StackBehavLR).ordinal()) + ", " + "ClinicNum          =  " + POut.long(apptView.ClinicNum) + " " + "WHERE ApptViewNum = " + POut.long(apptView.ApptViewNum);
        Db.nonQ(command);
    }

    /**
    * Updates one ApptView in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.
    */
    public static void update(ApptView apptView, ApptView oldApptView) throws Exception {
        String command = "";
        if (!StringSupport.equals(apptView.Description, oldApptView.Description))
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "Description = '" + POut.string(apptView.Description) + "'";
        }
         
        if (apptView.ItemOrder != oldApptView.ItemOrder)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ItemOrder = " + POut.int(apptView.ItemOrder) + "";
        }
         
        if (apptView.RowsPerIncr != oldApptView.RowsPerIncr)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "RowsPerIncr = " + POut.byte(apptView.RowsPerIncr) + "";
        }
         
        if (apptView.OnlyScheduledProvs != oldApptView.OnlyScheduledProvs)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "OnlyScheduledProvs = " + POut.bool(apptView.OnlyScheduledProvs) + "";
        }
         
        if (apptView.OnlySchedBeforeTime != oldApptView.OnlySchedBeforeTime)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "OnlySchedBeforeTime = " + POut.time(apptView.OnlySchedBeforeTime) + "";
        }
         
        if (apptView.OnlySchedAfterTime != oldApptView.OnlySchedAfterTime)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "OnlySchedAfterTime = " + POut.time(apptView.OnlySchedAfterTime) + "";
        }
         
        if (apptView.StackBehavUR != oldApptView.StackBehavUR)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "StackBehavUR = " + POut.int(((Enum)apptView.StackBehavUR).ordinal()) + "";
        }
         
        if (apptView.StackBehavLR != oldApptView.StackBehavLR)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "StackBehavLR = " + POut.int(((Enum)apptView.StackBehavLR).ordinal()) + "";
        }
         
        if (apptView.ClinicNum != oldApptView.ClinicNum)
        {
            if (!StringSupport.equals(command, ""))
            {
                command += ",";
            }
             
            command += "ClinicNum = " + POut.long(apptView.ClinicNum) + "";
        }
         
        if (StringSupport.equals(command, ""))
        {
            return ;
        }
         
        command = "UPDATE apptview SET " + command + " WHERE ApptViewNum = " + POut.long(apptView.ApptViewNum);
        Db.nonQ(command);
    }

    /**
    * Deletes one ApptView from the database.
    */
    public static void delete(long apptViewNum) throws Exception {
        String command = "DELETE FROM apptview " + "WHERE ApptViewNum = " + POut.long(apptViewNum);
        Db.nonQ(command);
    }

}


